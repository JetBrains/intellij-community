{
  "license": {
    "name": "CC-BY-SA 2.5",
    "url": "https://creativecommons.org/licenses/by-sa/2.5/"
  },
  "author": {
    "name": "Mozzila Contributors",
    "url": "https://github.com/mdn/content"
  },
  "lang": "en-us",
  "events": {
    "activate": {
      "url": "$MDN_URL$/web/api/element/domactivate_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "Opera": "15",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>DOMActivate</code></strong> event is fired at an element when it becomes active, such as when it is clicked on using the mouse or a keypress is used to navigate to it."
    },
    "domcontentloaded": {
      "url": "$MDN_URL$/web/api/window/domcontentloaded_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>DOMContentLoaded</code></strong> event fires when the HTML document has been completely parsed, and all deferred scripts (<code>&lt;script defer src=\"â€¦\"&gt;</code> and <code>&lt;script type=\"module\"&gt;</code>) have downloaded and executed. It doesn't wait for other things like images, subframes, and async scripts to finish loading.\n<code>DOMContentLoaded</code> does not wait for stylesheets to load, however deferred scripts <em>do</em> wait for stylesheets, and the <code>DOMContentLoaded</code> event is queued after deferred scripts. Also, scripts which aren't deferred or async (e.g. <code>&lt;script&gt;</code>) will wait for already-parsed stylesheets to load.\nThe original target for this event is the <a href=\"$MDN_URL$/Web/API/Document\"><code>Document</code></a> that has loaded. You can listen for this event on the <code>Window</code> interface to handle it in the capture or bubbling phases. For full details on this event please see the page on the Document: <a href=\"$MDN_URL$/Web/API/Document/DOMContentLoaded_event\" ><code>DOMContentLoaded</code></a> event.\nA different event, <a href=\"$MDN_URL$/Web/API/Window/load_event\" ><code>load</code></a>, should be used only to detect a fully-loaded page. It is a common mistake to use <code>load</code> where <code>DOMContentLoaded</code> would be more appropriate.\nThis event is not cancelable."
    },
    "dommousescroll": {
      "url": "$MDN_URL$/web/api/element/dommousescroll_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": ""
      },
      "doc": "The DOM <code>DOMMouseScroll</code> event is fired asynchronously when mouse wheel or similar device is operated and the accumulated scroll amount is over 1 line or 1 page since last event. It's represented by the <a href=\"$MDN_URL$/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a> interface. This event was only implemented by Firefox. You should instead use the standard <a href=\"$MDN_URL$/Web/API/Element/wheel_event\" ><code>wheel</code></a> event.\nIf you want to prevent the default action of mouse wheel events, it's not enough to handle only this event on Gecko because If scroll amount by a native mouse wheel event is less than 1 line (or less than 1 page when the system setting is by page scroll), other mouse wheel events may be fired without this event.\nOn Gecko 17 (Firefox 17) or later, you need to call <code>preventDefault()</code> of <code>wheel</code> events which must be fired for every native event.\nUse the standardized <a href=\"$MDN_URL$/Web/API/Element/wheel_event\" ><code>wheel</code></a> event if available."
    },
    "fontfacesetloadevent": {
      "url": "$MDN_URL$/web/api/fontfacesetloadevent",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "35",
        "Edge": "79",
        "Firefox": "41",
        "Opera": "22"
      },
      "doc": "The <strong><code>FontFaceSetLoadEvent</code></strong> interface of the <a href=\"$MDN_URL$/Web/API/CSS_Font_Loading_API\">CSS Font Loading API</a> represents events fired at a <a href=\"$MDN_URL$/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> after it starts loading font faces.\nEvents are fired when font loading starts (<a href=\"$MDN_URL$/Web/API/FontFaceSet/loading_event\"><code>loading</code></a>), loading completes (<a href=\"$MDN_URL$/Web/API/FontFaceSet/loadingdone_event\"><code>loadingdone</code></a>) or there is an error loading one of the fonts (<a href=\"$MDN_URL$/Web/API/FontFaceSet/loadingerror_event\"><code>loadingerror</code></a>)."
    },
    "mozmousepixelscroll": {
      "url": "$MDN_URL$/web/api/element/mozmousepixelscroll_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": "6"
      },
      "doc": "The Firefox-only, <em>non-standard</em>, and <em>obsolete</em> <strong><code>MozMousePixelScroll</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> asynchronously when a mouse wheel or similar device is operated. It's represented by the <a href=\"$MDN_URL$/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a> interface."
    },
    "svgerror": {
      "url": "$MDN_URL$/web/api/svgelement/error_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "10",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "Opera": "12.1",
        "Safari": "6",
        "SafariIOS": "6"
      },
      "doc": "The <code>error</code> event is fired when an SVG element does not load properly or when an error occurs during script execution.\nThis basically implements the standard <code>error</code> DOM event.\nThis event is not cancelable."
    },
    "svgload": {
      "url": "$MDN_URL$/web/api/svgelement/load_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <code>load</code> event fires on an <code>SVGElement</code> when it is loaded in the browser, e.g. in the DOM in the case of an embedded <code>&lt;svg&gt;</code>. It is basically the same as the standard <code>load</code> DOM event.\nThis event is not cancelable and does not bubble."
    },
    "abort": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/abort_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12.1",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>abort</code></strong> event is fired when the resource was not fully loaded, but not as the result of an error.\nThis event is not cancelable and does not bubble."
    },
    "addstream": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/addstream_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "15"
      },
      "doc": "The obsolete <strong><code>addstream</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when new media, in the form of a <a href=\"$MDN_URL$/Web/API/MediaStream\"><code>MediaStream</code></a> object, has been added to it.\nYou can, similarly, watch for streams to be removed from the connection by monitoring the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/removestream_event\" ><code>removestream</code></a> event.\nThis event is not cancelable and does not bubble."
    },
    "addtrack": {
      "url": "$MDN_URL$/web/api/videotracklist/addtrack_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <code>addtrack</code> event is fired when a video track is added to a <a href=\"$MDN_URL$/Web/API/VideoTrackList\"><code>VideoTrackList</code></a>."
    },
    "afterprint": {
      "url": "$MDN_URL$/web/api/window/afterprint_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "",
        "Firefox": "6",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <strong><code>afterprint</code></strong> event is fired after the associated document has started printing or the print preview has been closed.\nThe <a href=\"$MDN_URL$/Web/API/Window/beforeprint_event\" ><code>beforeprint</code></a> and <code>afterprint</code> events allow pages to change their content before printing starts (perhaps to remove a banner, for example) and then revert those changes after printing has completed. In general, you should prefer the use of a <a href=\"$MDN_URL$/Web/CSS/CSS_media_queries/Using_media_queries#targeting_media_types\" data-flaw=\"link1\"><code>@media print</code></a> CSS at-rule, but it may be necessary to use these events in some cases."
    },
    "afterscriptexecute": {
      "url": "$MDN_URL$/web/api/element/afterscriptexecute_event",
      "compatibility": {
        "Firefox": "2"
      },
      "doc": "The <strong><code>afterscriptexecute</code></strong> event is fired after a script has been executed.\nIt is a proprietary event specific to Gecko (Firefox).\nThis event is not cancelable."
    },
    "animationcancel": {
      "url": "$MDN_URL$/web/api/element/animationcancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "54",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "The <strong><code>animationcancel</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_animations\" data-flaw=\"link1\">CSS Animation</a> unexpectedly aborts. In other words, any time it stops running without sending an <a href=\"$MDN_URL$/Web/API/Element/animationend_event\" ><code>animationend</code></a> event. This might happen when the <a href=\"$MDN_URL$/Web/CSS/animation-name\"><code>animation-name</code></a> is changed such that the animation is removed, or when the animating node is hidden using CSS. Therefore, either directly or because any of its containing nodes are hidden.\nAn event handler for this event can be added by setting the <code>onanimationcancel</code> property, or using <a href=\"$MDN_URL$/Web/API/EventTarget/addEventListener\" ><code>addEventListener()</code></a>."
    },
    "animationend": {
      "url": "$MDN_URL$/web/api/element/animationend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "79",
        "ChromeAndroid": "79",
        "Edge": "18",
        "Firefox": "51",
        "Opera": "66",
        "Safari": "9",
        "SafariIOS": "9"
      },
      "doc": "The <strong><code>animationend</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_animations\" data-flaw=\"link1\">CSS Animation</a> has completed. If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the <code>animationend</code> event is not fired."
    },
    "animationiteration": {
      "url": "$MDN_URL$/web/api/element/animationiteration_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "79",
        "ChromeAndroid": "79",
        "Edge": "18",
        "Firefox": "51",
        "Opera": "66",
        "Safari": "9",
        "SafariIOS": "9"
      },
      "doc": "The <strong><code>animationiteration</code></strong> event is fired when an iteration of a <a href=\"$MDN_URL$/Web/CSS/CSS_animations\" data-flaw=\"link1\">CSS Animation</a> ends, and another one begins. This event does not occur at the same time as the <a href=\"$MDN_URL$/Web/API/Element/animationend_event\" ><code>animationend</code></a> event, and therefore does not occur for animations with an <code>animation-iteration-count</code> of one."
    },
    "animationstart": {
      "url": "$MDN_URL$/web/api/element/animationstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "79",
        "ChromeAndroid": "79",
        "Edge": "18",
        "Firefox": "51",
        "Opera": "66",
        "Safari": "9",
        "SafariIOS": "9"
      },
      "doc": "The <strong><code>animationstart</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_animations\" data-flaw=\"link1\">CSS Animation</a> has started. If there is an <a href=\"$MDN_URL$/Web/CSS/animation-delay\"><code>animation-delay</code></a>, this event will fire once the delay period has expired. A negative delay will cause the event to fire with an <a href=\"$MDN_URL$/Web/API/AnimationEvent/elapsedTime\" ><code>elapsedTime</code></a> equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence)."
    },
    "appinstalled": {
      "url": "$MDN_URL$/web/api/window/appinstalled_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "57",
        "Edge": "79"
      },
      "doc": "The <strong><code>appinstalled</code></strong> event of the <a href=\"$MDN_URL$/Web/Manifest\">Web Manifest API</a> is fired when the browser has successfully installed a page as an application.\nThis event is not cancelable and does not bubble."
    },
    "audioend": {
      "url": "$MDN_URL$/web/api/speechrecognition/audioend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>audioend</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the user agent has finished capturing audio for speech recognition."
    },
    "audioprocess": {
      "url": "$MDN_URL$/web/api/scriptprocessornode/audioprocess_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "25",
        "Opera": "15",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <code>audioprocess</code> event of the <a href=\"$MDN_URL$/Web/API/ScriptProcessorNode\"><code>ScriptProcessorNode</code></a> interface is fired when an input buffer of a script processor is ready to be processed.\nThis event is not cancelable and does not bubble."
    },
    "audiostart": {
      "url": "$MDN_URL$/web/api/speechrecognition/audiostart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>audiostart</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the user agent has started to capture audio for speech recognition."
    },
    "auxclick": {
      "url": "$MDN_URL$/web/api/element/auxclick_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "79",
        "Firefox": "53",
        "Opera": "42"
      },
      "doc": "The <strong><code>auxclick</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a non-primary pointing device button (any mouse button other than the primaryâ€”usually leftmostâ€”button) has been pressed and released both within the same element.\n<code>auxclick</code> is fired after the <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> and <a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" ><code>mouseup</code></a> events have been fired, in that order."
    },
    "beforeinput": {
      "url": "$MDN_URL$/web/api/htmlelement/beforeinput_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "60",
        "ChromeAndroid": "60",
        "Edge": "79",
        "Firefox": "87",
        "Opera": "47",
        "Safari": "10.1",
        "SafariIOS": "10.3"
      },
      "doc": "The DOM <strong><code>beforeinput</code></strong> event fires when the value of an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, or <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> element is about to be modified. The event also applies to elements with <a href=\"$MDN_URL$/Web/API/HTMLElement/contentEditable\" ><code>contenteditable</code></a> enabled, and to any element when <a href=\"$MDN_URL$/Web/API/Document/designMode\" ><code>designMode</code></a> is turned on.\nThis allows web apps to override text edit behavior before the browser modifies the DOM tree, and provides more control over input events to improve performance.\nIn the case of <code>contenteditable</code> and <code>designMode</code>, the event target is the <strong>editing host</strong>. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn't editable."
    },
    "beforeprint": {
      "url": "$MDN_URL$/web/api/window/beforeprint_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "",
        "Firefox": "6",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <strong><code>beforeprint</code></strong> event is fired when the associated document is about to be printed or previewed for printing.\nThe <a href=\"$MDN_URL$/Web/API/Window/afterprint_event\" ><code>afterprint</code></a> and <code>beforeprint</code> events allow pages to change their content before printing starts (perhaps to remove a banner, for example) and then revert those changes after printing has completed. In general, you should prefer the use of a <a href=\"$MDN_URL$/Web/CSS/CSS_media_queries/Using_media_queries#targeting_media_types\" data-flaw=\"link1\"><code>@media print</code></a> CSS at-rule, but it may be necessary to use these events in some cases."
    },
    "beforescriptexecute": {
      "url": "$MDN_URL$/web/api/element/beforescriptexecute_event",
      "compatibility": {
        "Firefox": "2"
      },
      "doc": "The <strong><code>beforescriptexecute</code></strong> event is fired when a script is about to be executed. Cancelling the event prevents the script from executing.\nIt is a proprietary event specific to Gecko (Firefox)."
    },
    "beforeunload": {
      "url": "$MDN_URL$/web/api/window/beforeunload_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "12",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>beforeunload</code></strong> event is fired when the window, the document and its resources are about to be unloaded. The document is still visible and the event is still cancelable at this point.\nThis event enables a web page to trigger a confirmation dialog asking the user if they really want to leave the page. If the user confirms, the browser navigates to the new page, otherwise it cancels the navigation.\nAccording to the specification, to show the confirmation dialog an event handler should call <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>preventDefault()</code></a> on the event.\nThe HTML specification states that calls to <a href=\"$MDN_URL$/Web/API/Window/alert\"><code>window.alert()</code></a>, <a href=\"$MDN_URL$/Web/API/Window/confirm\"><code>window.confirm()</code></a>, and <a href=\"$MDN_URL$/Web/API/Window/prompt\"><code>window.prompt()</code></a> methods may be ignored during this event. See the <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#user-prompts\" class=\"external\" target=\"_blank\">HTML specification</a> for more details."
    },
    "beginevent": {
      "url": "$MDN_URL$/web/api/svganimationelement/beginevent_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "35",
        "Edge": "79",
        "Firefox": "93",
        "Opera": "22"
      },
      "doc": "The <strong><code>beginEvent</code></strong> event of the <a href=\"$MDN_URL$/Web/API/SVGAnimationElement\"><code>SVGAnimationElement</code></a> interface is fired when the element local timeline begins to play. It will be raised each time the element begins the active duration (i.e., when it restarts, but not when it repeats).\nIt may be raised both in the course of normal (i.e. scheduled or interactive) timeline play, as well as in the case that the element was begun with a DOM method.\nThis event is not cancelable and does not bubble."
    },
    "blocked": {
      "url": "$MDN_URL$/web/api/idbopendbrequest/blocked_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "8",
        "SafariIOS": "8"
      },
      "doc": "The <code>blocked</code> handler is executed when an open connection to a database is blocking a <code>versionchange</code> transaction on the same database.\nThis event is not cancelable and does not bubble."
    },
    "blur": {
      "url": "$MDN_URL$/web/api/element/blur_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "24",
        "Opera": "11.6",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>blur</code></strong> event fires when an element has lost focus. The event does not bubble, but the related <a href=\"$MDN_URL$/Web/API/Element/focusout_event\" ><code>focusout</code></a> event that follows does bubble.\nAn element will lose focus if another element is selected.\nAn element will also lose focus if a style that does not allow focus is applied, such as <code>hidden</code>, or if the element is removed from the document â€” in both of these cases focus moves to the <code>body</code> element (viewport).\nNote however that <code>blur</code> is not fired when a focused element is removed from the document.\nThe opposite of <code>blur</code> is the <a href=\"$MDN_URL$/Web/API/Element/focus_event\" ><code>focus</code></a> event, which fires when the element has <em>received</em> focus.\nThe <code>blur</code> event is not cancelable."
    },
    "boundary": {
      "url": "$MDN_URL$/web/api/speechsynthesisutterance/boundary_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>boundary</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the spoken utterance reaches a word or sentence boundary."
    },
    "bufferedamountlow": {
      "url": "$MDN_URL$/web/api/rtcdatachannel/bufferedamountlow_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "79",
        "Firefox": "44",
        "Opera": "44",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "A <strong><code>bufferedamountlow</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> when the number of bytes currently in the outbound data transfer buffer falls below the threshold specified in <a href=\"$MDN_URL$/Web/API/RTCDataChannel/bufferedAmountLowThreshold\" ><code>bufferedAmountLowThreshold</code></a>. <code>bufferedamountlow</code> events aren't sent if <code>bufferedAmountLowThreshold</code> is 0.\nThis event is not cancelable and does not bubble."
    },
    "cancel": {
      "url": "$MDN_URL$/web/api/htmldialogelement/cancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "37",
        "Edge": "79",
        "Firefox": "98",
        "Opera": "24",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "The <strong><code>cancel</code></strong> event fires on a <a href=\"$MDN_URL$/Web/HTML/Element/dialog\"><code>&lt;dialog&gt;</code></a> when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the <kbd>Esc</kbd> key.\nThis event does not bubble.\nWhen a <code>&lt;dialog&gt;</code> is dismissed with the <kbd>Esc</kbd> key, both the <code>cancel</code> and <a href=\"$MDN_URL$/Web/API/HTMLDialogElement/close_event\" ><code>close</code></a> events are fired."
    },
    "canplay": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/canplay_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>canplay</code> event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.\nThis event is not cancelable and does not bubble."
    },
    "canplaythrough": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/canplaythrough_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>canplaythrough</code> event is fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.\nThis event is not cancelable and does not bubble."
    },
    "change": {
      "url": "$MDN_URL$/web/api/htmlelement/change_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "9",
        "Safari": "3",
        "SafariIOS": "2"
      },
      "doc": "The <code>change</code> event is fired for <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, <a href=\"$MDN_URL$/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>, and <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> elements when the user modifies the element's value. Unlike the <a href=\"$MDN_URL$/Web/API/HTMLElement/input_event\" ><code>input</code></a> event, the <code>change</code> event is not necessarily fired for each alteration to an element's <code>value</code>.\nDepending on the kind of element being changed and the way the user interacts with the element, the <code>change</code> event fires at a different moment:\nThe HTML specification lists <a href=\"https://html.spec.whatwg.org/multipage/forms.html#concept-input-apply\" class=\"external\" target=\"_blank\">the <code>&lt;input&gt;</code> types that should fire the <code>change</code> event</a>."
    },
    "click": {
      "url": "$MDN_URL$/web/api/element/click_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "An element receives a <strong><code>click</code></strong> event when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.\nIf the button is pressed on one element and the pointer is moved outside the element before the button is released, the event is fired on the most specific ancestor element that contained both elements.\n<code>click</code> fires after both the <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> and <a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" ><code>mouseup</code></a> events have fired, in that order."
    },
    "close": {
      "url": "$MDN_URL$/web/api/htmldialogelement/close_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "37",
        "Edge": "79",
        "Firefox": "98",
        "Opera": "24",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "The <code>close</code> event is fired on an <code>HTMLDialogElement</code> object when the <a href=\"$MDN_URL$/Web/HTML/Element/dialog\"><code>&lt;dialog&gt;</code></a> it represents has been closed.\nThis event is not cancelable and does not bubble."
    },
    "complete": {
      "url": "$MDN_URL$/web/api/offlineaudiocontext/complete_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "25",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "25",
        "Opera": "15",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <code>complete</code> event of the <a href=\"$MDN_URL$/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a> interface is fired when the rendering of an offline audio context is complete.\nThis event is not cancelable and does not bubble."
    },
    "compositionend": {
      "url": "$MDN_URL$/web/api/element/compositionend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "15",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "15",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "The <strong><code>compositionend</code></strong> event is fired when a text composition system such as an <a href=\"$MDN_URL$/Glossary/Input_method_editor\">input method editor</a> completes or cancels the current composition session.\nFor example, this event could be fired after a user finishes entering a Chinese character using a <a href=\"https://en.wikipedia.org/wiki/Pinyin\" class=\"external\" target=\"_blank\">Pinyin</a> IME."
    },
    "compositionstart": {
      "url": "$MDN_URL$/web/api/element/compositionstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "15",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "15",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "The <strong><code>compositionstart</code></strong> event is fired when a text composition system such as an <a href=\"$MDN_URL$/Glossary/Input_method_editor\">input method editor</a> starts a new composition session.\nFor example, this event could be fired after a user starts entering a Chinese character using a <a href=\"https://en.wikipedia.org/wiki/Pinyin\" class=\"external\" target=\"_blank\">Pinyin</a> IME."
    },
    "compositionupdate": {
      "url": "$MDN_URL$/web/api/element/compositionupdate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "18",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "15",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "The <strong><code>compositionupdate</code></strong> event is fired when a new character is received in the context of a text composition session controlled by a text composition system such as an <a href=\"$MDN_URL$/Glossary/Input_method_editor\">input method editor</a>.\nFor example, this event could be fired while a user enters a Chinese character using a <a href=\"https://en.wikipedia.org/wiki/Pinyin\" class=\"external\" target=\"_blank\">Pinyin</a> IME."
    },
    "connect": {
      "url": "$MDN_URL$/web/api/sharedworkerglobalscope/connect_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "29",
        "Opera": "10.6",
        "Safari": "16",
        "SafariIOS": "16"
      },
      "doc": "The <strong><code>connect</code></strong> event is fired in shared workers at their <a href=\"$MDN_URL$/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a> when a new client connects.\nThis event is not cancelable and does not bubble."
    },
    "contextmenu": {
      "url": "$MDN_URL$/web/api/element/contextmenu_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "10.5",
        "Safari": "3"
      },
      "doc": "The <strong><code>contextmenu</code></strong> event fires when the user attempts to open a context menu. This event is typically triggered by clicking the right mouse button, or by pressing the context menu key.\nIn the latter case, the context menu is displayed at the bottom left of the focused element, unless the element is a tree, in which case the context menu is displayed at the bottom left of the current row.\nAny right-click event that is not disabled (by calling the click event's <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>preventDefault()</code></a> method) will result in a <code>contextmenu</code> event being fired at the targeted element. One exception to this is that in Firefox, if the user holds down the <kbd>Shift</kbd> key while right-clicking, then the context menu will be shown without a <code>contextmenu</code> event being fired."
    },
    "copy": {
      "url": "$MDN_URL$/web/api/element/copy_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "22",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>copy</code></strong> event fires when the user initiates a copy action through the browser's user interface.\nThe event's default action is to copy the selection (if any) to the clipboard.\nA handler for this event can <em>modify</em> the clipboard contents by calling <a href=\"$MDN_URL$/Web/API/DataTransfer/setData\" ><code>setData(format, data)</code></a> on the event's <a href=\"$MDN_URL$/Web/API/ClipboardEvent/clipboardData\"><code>ClipboardEvent.clipboardData</code></a> property, and cancelling the event's default action using <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>event.preventDefault()</code></a>.\nHowever, the handler cannot <em>read</em> the clipboard data.\nIt's possible to construct and dispatch a <a href=\"$MDN_URL$/Web/Events/Creating_and_triggering_events\">synthetic</a> <code>copy</code> event, but this will not affect the system clipboard."
    },
    "cuechange": {
      "url": "$MDN_URL$/web/api/texttrack/cuechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "31",
        "Opera": "12.1",
        "Safari": "6",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>cuechange</code></strong> event fires when a <a href=\"$MDN_URL$/Web/API/TextTrack\"><code>TextTrack</code></a> has changed the currently displaying cues. The event is fired on both the <code>TextTrack</code> and the <a href=\"$MDN_URL$/Web/API/HTMLTrackElement\"><code>HTMLTrackElement</code></a> in which it's being presented, if any."
    },
    "cut": {
      "url": "$MDN_URL$/web/api/element/cut_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "22",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>cut</code></strong> event is fired when the user has initiated a \"cut\" action through the browser's user interface.\nIf the user attempts a cut action on uneditable content, the <code>cut</code> event still fires but the event object contains no data.\nThe event's default action is to copy the current selection (if any) to the system clipboard and remove it from the document.\nA handler for this event can <em>modify</em> the clipboard contents by calling <a href=\"$MDN_URL$/Web/API/DataTransfer/setData\" ><code>setData(format, data)</code></a> on the event's <a href=\"$MDN_URL$/Web/API/ClipboardEvent/clipboardData\"><code>ClipboardEvent.clipboardData</code></a> property, and cancelling the default action using <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>event.preventDefault()</code></a>.\nNote though that cancelling the default action will also prevent the document from being updated. So an event handler which wants to emulate the default action for \"cut\" while modifying the clipboard must also manually remove the selection from the document.\nThe handler cannot <em>read</em> the clipboard data.\nIt's possible to construct and dispatch a <a href=\"$MDN_URL$/Web/Events/Creating_and_triggering_events\">synthetic</a> <code>cut</code> event, but this will not affect the system clipboard or the document's contents."
    },
    "datachannel": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/datachannel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "25",
        "ChromeAndroid": "25",
        "Edge": "79",
        "Firefox": "22",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "A <strong><code>datachannel</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> instance when an <a href=\"$MDN_URL$/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> has been added to the connection, as a result of the remote peer calling <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/createDataChannel\"><code>RTCPeerConnection.createDataChannel()</code></a>.\nThis event is not cancelable and does not bubble."
    },
    "dblclick": {
      "url": "$MDN_URL$/web/api/element/dblclick_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>dblclick</code></strong> event fires when a pointing device button (such as a mouse's primary button) is double-clicked; that is, when it's rapidly clicked twice on a single element within a very short span of time.\n<code>dblclick</code> fires after two <a href=\"$MDN_URL$/Web/API/Element/click_event\" ><code>click</code></a> events (and by extension, after two pairs of <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> and <a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" ><code>mouseup</code></a> events)."
    },
    "devicechange": {
      "url": "$MDN_URL$/web/api/mediadevices/devicechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "Edge": "",
        "Firefox": "52",
        "Opera": "34",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "A <code>devicechange</code> event is sent to a <a href=\"$MDN_URL$/Web/API/MediaDevices\"><code>MediaDevices</code></a> instance whenever a media device such as a camera, microphone, or speaker is connected to or removed from the system.\nThis event is not cancelable and does not bubble."
    },
    "devicehumidity": {
      "url": "$MDN_URL$/web/events",
      "status": [
        "Experimental",
        "Deprecated"
      ],
      "doc": "<a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.\nEach event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.\nThis topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events."
    },
    "devicemotion": {
      "url": "$MDN_URL$/web/api/window/devicemotion_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "31",
        "ChromeAndroid": "31",
        "Edge": "",
        "Firefox": "6",
        "Opera": "18",
        "SafariIOS": "4.2"
      },
      "doc": "The <code>devicemotion</code> event is fired at a regular interval and indicates the amount of physical force of acceleration the device is receiving at that time. It also provides information about the rate of rotation, if available.\nThis event is not cancelable and does not bubble."
    },
    "devicenoise": {
      "url": "$MDN_URL$/web/events",
      "status": [
        "Experimental",
        "Deprecated"
      ],
      "doc": "<a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.\nEach event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.\nThis topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events."
    },
    "deviceorientation": {
      "url": "$MDN_URL$/web/api/window/deviceorientation_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12",
        "SafariIOS": "4.2"
      },
      "doc": "The <strong><code>deviceorientation</code></strong> event is fired when fresh data is available from an orientation sensor about the current orientation of the device as compared to the Earth coordinate frame. This data is gathered from a magnetometer inside the device.\nSee <a href=\"$MDN_URL$/Web/API/Device_orientation_events/Orientation_and_motion_data_explained\">Orientation and motion data explained</a> for details.\nThis event is not cancelable and does not bubble."
    },
    "devicepressure": {
      "url": "$MDN_URL$/web/events",
      "status": [
        "Experimental",
        "Deprecated"
      ],
      "doc": "<a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.\nEach event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.\nThis topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events."
    },
    "devicetemperature": {
      "url": "$MDN_URL$/web/events",
      "status": [
        "Experimental",
        "Deprecated"
      ],
      "doc": "<a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.\nEach event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.\nThis topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events."
    },
    "drag": {
      "url": "$MDN_URL$/web/api/htmlelement/drag_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <code>drag</code> event is fired every few hundred milliseconds as an element or text selection is being dragged by the user."
    },
    "dragend": {
      "url": "$MDN_URL$/web/api/htmlelement/dragend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <code>dragend</code> event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key)."
    },
    "dragenter": {
      "url": "$MDN_URL$/web/api/htmlelement/dragenter_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <code>dragenter</code> event is fired when a dragged element or text selection enters a valid drop target.\nThe target object is the <em>immediate user selection</em> (the element directly indicated by the user as the drop target), or the <a href=\"$MDN_URL$/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> element."
    },
    "dragleave": {
      "url": "$MDN_URL$/web/api/htmlelement/dragleave_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <code>dragleave</code> event is fired when a dragged element or text selection leaves a valid drop target.\nThis event is not cancelable."
    },
    "dragover": {
      "url": "$MDN_URL$/web/api/htmlelement/dragover_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <code>dragover</code> event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).\nThe event is fired on the drop target(s)."
    },
    "dragstart": {
      "url": "$MDN_URL$/web/api/htmlelement/dragstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <code>dragstart</code> event is fired when the user starts dragging an element or text selection."
    },
    "drop": {
      "url": "$MDN_URL$/web/api/htmlelement/drop_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>drop</code></strong> event is fired when an element or text selection is dropped on a valid drop target."
    },
    "durationchange": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/durationchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>durationchange</code> event is fired when the <code>duration</code> attribute has been updated."
    },
    "emptied": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/emptied_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>emptied</code> event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the <code>load()</code> method is called to reload it.\nThis event is not cancelable and does not bubble."
    },
    "end": {
      "url": "$MDN_URL$/web/api/speechrecognition/end_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>end</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechRecognition\"><code>SpeechRecognition</code></a> object is fired when the speech recognition service has disconnected."
    },
    "endevent": {
      "url": "$MDN_URL$/web/api/svganimationelement/endevent_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "35",
        "Edge": "79",
        "Firefox": "93",
        "Opera": "22"
      },
      "doc": "The <strong><code>endEvent</code></strong> event of the <a href=\"$MDN_URL$/Web/API/SVGAnimationElement\"><code>SVGAnimationElement</code></a> interface is fired when at the active end of the animation is reached.\nThis event is not cancelable and does not bubble."
    },
    "ended": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/ended_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>ended</code> event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available.\nThis event occurs based upon <a href=\"$MDN_URL$/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> (<a href=\"$MDN_URL$/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> and <a href=\"$MDN_URL$/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>) fire <code>ended</code> when playback reaches the end of the media.\nThis event is not cancelable and does not bubble."
    },
    "error": {
      "url": "$MDN_URL$/web/api/htmlelement/error_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "12.1",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "The <code>error</code> event is fired on an element when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.\nThis event is not cancelable and does not bubble."
    },
    "focus": {
      "url": "$MDN_URL$/web/api/element/focus_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "24",
        "Opera": "11.6",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>focus</code></strong> event fires when an element has received focus. The event does not bubble, but the related <a href=\"$MDN_URL$/Web/API/Element/focusin_event\" ><code>focusin</code></a> event that follows does bubble.\nThe opposite of <code>focus</code> is the <a href=\"$MDN_URL$/Web/API/Element/blur_event\" ><code>blur</code></a> event, which fires when the element has <em>lost</em> focus.\nThe <code>focus</code> event is not cancelable."
    },
    "focusin": {
      "url": "$MDN_URL$/web/api/element/focusin_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "The <strong><code>focusin</code></strong> event fires when an element has received focus, after the <a href=\"$MDN_URL$/Web/API/Element/focus_event\" ><code>focus</code></a> event. The two events differ in that <code>focusin</code> bubbles, while <code>focus</code> does not.\nThe opposite of <code>focusin</code> is the <a href=\"$MDN_URL$/Web/API/Element/focusout_event\" ><code>focusout</code></a> event, which fires when the element has lost focus.\nThe <code>focusin</code> event is not cancelable."
    },
    "focusout": {
      "url": "$MDN_URL$/web/api/element/focusout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "The <strong><code>focusout</code></strong> event fires when an element has lost focus, after the <a href=\"$MDN_URL$/Web/API/Element/blur_event\" ><code>blur</code></a> event. The two events differ in that <code>focusout</code> bubbles, while <code>blur</code> does not.\nThe opposite of <code>focusout</code> is the <a href=\"$MDN_URL$/Web/API/Element/focusin_event\" ><code>focusin</code></a> event, which fires when the element has received focus.\nThe <code>focusout</code> event is not cancelable."
    },
    "formdata": {
      "url": "$MDN_URL$/web/api/htmlformelement/formdata_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "77",
        "ChromeAndroid": "77",
        "Edge": "79",
        "Firefox": "72",
        "Opera": "64",
        "Safari": "15",
        "SafariIOS": "15"
      },
      "doc": "The <strong><code>formdata</code></strong> event fires after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a <a href=\"$MDN_URL$/Web/API/FormData/FormData\" ><code>FormData()</code></a> constructor.\nThis event is not cancelable and does not bubble."
    },
    "fullscreenchange": {
      "url": "$MDN_URL$/web/api/document/fullscreenchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "64",
        "Opera": "58",
        "Safari": "16.4"
      },
      "doc": "The <code>fullscreenchange</code> event is fired immediately after the browser switches into or out of fullscreen mode.\nThe event is sent to the <code>Element</code> that is transitioning into or out of fullscreen mode, and this event then bubbles up to the <code>Document</code>.\nTo find out whether the <code>Element</code> is entering or exiting fullscreen mode, check the value of <a href=\"$MDN_URL$/Web/API/Document/fullscreenElement\"><code>Document.fullscreenElement</code></a>: if this value is <code>null</code> then the element is exiting fullscreen mode, otherwise it is entering fullscreen mode.\nThis event is not cancelable."
    },
    "fullscreenerror": {
      "url": "$MDN_URL$/web/api/document/fullscreenerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "64",
        "Opera": "58",
        "Safari": "16.4"
      },
      "doc": "The <code>fullscreenerror</code> event is fired when the browser cannot switch to fullscreen mode.\nAs with the <a href=\"$MDN_URL$/Web/API/Document/fullscreenchange_event\"><code>fullscreenchange</code> event</a>, two <code>fullscreenerror</code> events are fired; the first is sent to the <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> which failed to change modes, and the second is sent to the <a href=\"$MDN_URL$/Web/API/Document\"><code>Document</code></a> which owns that element.\nFor some reasons that switching into fullscreen mode might fail, see <a href=\"$MDN_URL$/Web/API/Fullscreen_API/Guide\">the guide to the Fullscreen API</a>.\nThis event is not cancelable."
    },
    "gamepadconnected": {
      "url": "$MDN_URL$/web/api/window/gamepadconnected_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "89"
      },
      "doc": "The <code>gamepadconnected</code> event is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.\nThe event will not fire if disallowed by the document's <a href=\"$MDN_URL$/Web/HTTP/Headers/Permissions-Policy/gamepad\"><code>gamepad</code></a> <a href=\"$MDN_URL$/Web/HTTP/Permissions_Policy\">Permissions Policy</a>.\nThis event is not cancelable and does not bubble."
    },
    "gamepaddisconnected": {
      "url": "$MDN_URL$/web/api/window/gamepaddisconnected_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "89"
      },
      "doc": "The <code>gamepaddisconnected</code> event is fired when the browser detects that a gamepad has been disconnected.\nThe event will not fire if disallowed by the document's <a href=\"$MDN_URL$/Web/HTTP/Headers/Permissions-Policy/gamepad\"><code>gamepad</code></a> <a href=\"$MDN_URL$/Web/HTTP/Permissions_Policy\">Permissions Policy</a>.\nThis event is not cancelable and does not bubble."
    },
    "gatheringstatechange": {
      "url": "$MDN_URL$/web/api/rtcicetransport/gatheringstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "75",
        "ChromeAndroid": "75",
        "Edge": "79",
        "Opera": "62",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "A <strong><code>gatheringstatechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> when its <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> candidate gathering state changes.\nThe gathering state, whose actual status can be found in the transport object's <a href=\"$MDN_URL$/Web/API/RTCIceTransport/gatheringState\" ><code>gatheringState</code></a> property, indicates whether or not the ICE agent has begun gathering candidates, and if so, if it has finished doing so.\nThe key difference between <code>gatheringstatechange</code> and <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/icegatheringstatechange_event\" ><code>icegatheringstatechange</code></a> is that the latter represents the overall state of the connection including every <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> used by every <a href=\"$MDN_URL$/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a> and every <a href=\"$MDN_URL$/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a> on the entire connection. In contrast, <code>gatheringstatechange</code> represents changes to the candidate gathering state for a single transport.\nThis event is not cancelable and does not bubble."
    },
    "gesturechange": {
      "url": "$MDN_URL$/web/api/element/gesturechange_event",
      "compatibility": {
        "Safari": "9.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>gesturechange</code></strong> event is fired when digits move during a touch gesture.\nIt is a proprietary event specific to WebKit."
    },
    "gestureend": {
      "url": "$MDN_URL$/web/api/element/gestureend_event",
      "compatibility": {
        "Safari": "9.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>gestureend</code></strong> event is fired when there are no longer multiple fingers contacting the touch surface, thus ending the gesture.\nIt is a proprietary event specific to WebKit."
    },
    "gesturestart": {
      "url": "$MDN_URL$/web/api/element/gesturestart_event",
      "compatibility": {
        "Safari": "9.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>gesturestart</code></strong> event is fired when multiple fingers contact the touch surface, thus starting a new gesture. During the gesture, <a href=\"$MDN_URL$/Web/API/Element/gesturechange_event\" ><code>gesturechange</code></a> events will be fired. When the gesture has ended, a <a href=\"$MDN_URL$/Web/API/Element/gestureend_event\" ><code>gestureend</code></a> event will be fired.\nIt is a proprietary event specific to WebKit."
    },
    "gotpointercapture": {
      "url": "$MDN_URL$/web/api/element/gotpointercapture_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "17",
        "Firefox": "59",
        "Opera": "44",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <strong><code>gotpointercapture</code></strong> event is fired when an element captures a pointer using <a href=\"$MDN_URL$/Web/API/Element/setPointerCapture\"><code>setPointerCapture()</code></a>."
    },
    "hashchange": {
      "url": "$MDN_URL$/web/api/window/hashchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "8",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.6",
        "Opera": "10.6",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "The <strong><code>hashchange</code></strong> event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the <code>#</code> symbol)."
    },
    "icecandidate": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/icecandidate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "An <strong><code>icecandidate</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when an <a href=\"$MDN_URL$/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a> has been identified and added to the local peer by a call to <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/setLocalDescription\"><code>RTCPeerConnection.setLocalDescription()</code></a>. The event handler should transmit the candidate to the remote peer over the signaling channel so the remote peer can add it to its set of remote candidates.\nThis event is not cancelable and does not bubble."
    },
    "iceconnectionstatechange": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/iceconnectionstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "28",
        "ChromeAndroid": "28",
        "Edge": "15",
        "Firefox": "24",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "An <strong><code>iceconnectionstatechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> object each time the <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> connection state changes during the negotiation process.\nThe new ICE connection state is available in the object's <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/iceConnectionState\" ><code>iceConnectionState</code></a> property.\nOne common task performed by the <code>iceconnectionstatechange</code> event listener is to trigger <a href=\"$MDN_URL$/Web/API/WebRTC_API/Session_lifetime#ice_restart\">ICE restart</a> when the state changes to <code>failed</code>.\nThis event is not cancelable and does not bubble."
    },
    "icegatheringstatechange": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/icegatheringstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "59",
        "ChromeAndroid": "59",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "46",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "The <strong><code>icegatheringstatechange</code></strong> event is sent to the <code>onicegatheringstatechange</code> event handler on an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when the state of the <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> candidate gathering process changes.\nThis signifies that the value of the connection's <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/iceGatheringState\" ><code>iceGatheringState</code></a> property has changed.\nWhen ICE first starts to gather connection candidates, the value changes from <code>new</code> to <code>gathering</code> to indicate that the process of collecting candidate configurations for the connection has begun. When the value changes to <code>complete</code>, all of the transports that make up the <code>RTCPeerConnection</code> have finished gathering ICE candidates.\nThis event is not cancelable and does not bubble."
    },
    "input": {
      "url": "$MDN_URL$/web/api/htmlelement/input_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "The <strong><code>input</code></strong> event fires when the <code>value</code> of an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, <a href=\"$MDN_URL$/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>, or <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> element has been changed.\nThe event also applies to elements with <a href=\"$MDN_URL$/Web/API/HTMLElement/contentEditable\" ><code>contenteditable</code></a> enabled, and to any element when <a href=\"$MDN_URL$/Web/API/Document/designMode\" ><code>designMode</code></a> is turned on. In the case of <code>contenteditable</code> and <code>designMode</code>, the event target is the <em>editing host</em>. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn't editable.\nFor <code>&lt;input&gt;</code> elements with <code>type=checkbox</code> or <code>type=radio</code>, the <code>input</code> event should fire whenever a user toggles the control, per the <a href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element:event-input-2\" class=\"external\" target=\"_blank\">HTML Living Standard specification</a>. However, historically this has not always been the case. Check compatibility, or use the <a href=\"$MDN_URL$/Web/API/HTMLElement/change_event\" ><code>change</code></a> event instead for elements of these types.\nFor <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> and <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> elements that accept text input (<code>type=text</code>, <code>type=tel</code>, etc.), the interface is <a href=\"$MDN_URL$/Web/API/InputEvent\"><code>InputEvent</code></a>; for others, the interface is <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a>."
    },
    "install": {
      "url": "$MDN_URL$/web/api/window/appinstalled_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "57",
        "Edge": "79"
      },
      "doc": "The <strong><code>appinstalled</code></strong> event of the <a href=\"$MDN_URL$/Web/Manifest\">Web Manifest API</a> is fired when the browser has successfully installed a page as an application.\nThis event is not cancelable and does not bubble."
    },
    "invalid": {
      "url": "$MDN_URL$/web/api/htmlinputelement/invalid_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "10",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "10",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "The <strong><code>invalid</code></strong> event fires when a submittable element has been checked for validity and doesn't satisfy its constraints.\nThis event can be useful for displaying a summary of the problems with a form on submission. When a form is submitted, <code>invalid</code> events are fired at each form control that is invalid. The validity of submittable elements is checked before submitting their owner <a href=\"$MDN_URL$/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a>, or after the <a href=\"$MDN_URL$/Web/API/HTMLInputElement/checkValidity\"><code>checkValidity()</code></a> method of the element or its owner <code>&lt;form&gt;</code> is called.\nIt is not checked on <a href=\"$MDN_URL$/Web/API/Element/blur_event\" ><code>blur</code></a>."
    },
    "keydown": {
      "url": "$MDN_URL$/web/api/element/keydown_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "1.2",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>keydown</code></strong> event is fired when a key is pressed.\nUnlike the deprecated <a href=\"$MDN_URL$/Web/API/Element/keypress_event\" ><code>keypress</code></a> event, the <code>keydown</code> event is fired for all keys, regardless of whether they produce a character value.\nThe <code>keydown</code> and <a href=\"$MDN_URL$/Web/API/Element/keyup_event\"><code>keyup</code></a> events provide a code indicating which key is pressed, while <code>keypress</code> indicates which character was entered. For example, a lowercase \"a\" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase \"A\" is reported as 65 by all events.\nKeyboard events are only generated by <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;summary&gt;</code> and anything with the <code>contentEditable</code> or <code>tabindex</code> attribute. If not caught, they <a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events#event_bubbling\">bubble</a> up the <a href=\"$MDN_URL$/Web/API/Document_object_model/Using_the_Document_Object_Model#what_is_a_dom_tree\">DOM tree</a> until they reach <a href=\"$MDN_URL$/Web/API/Document\"><code>Document</code></a>.\nSince Firefox 65, the <code>keydown</code> and <a href=\"$MDN_URL$/Web/API/Element/keyup_event\"><code>keyup</code></a> events are now fired during IME composition, to improve cross-browser compatibility for CJKT users (<a href=\"https://bugzil.la/354358\" class=\"external\" target=\"_blank\">Firefox bug 354358</a>). To ignore all <code>keydown</code> events that are part of composition, do something like this (229 is a special value set for a <code>keyCode</code> relating to an event that has been processed by an IME):"
    },
    "keypress": {
      "url": "$MDN_URL$/web/api/element/keypress_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "1.3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>keypress</code></strong> event is fired when a key that produces a character value is pressed down.\nExamples of keys that produce a character value are alphabetic, numeric, and punctuation keys. Examples of keys that don't produce a character value are modifier keys such as <kbd>Alt</kbd>, <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, or <kbd>Meta</kbd>."
    },
    "keyup": {
      "url": "$MDN_URL$/web/api/element/keyup_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "1.2",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>keyup</code></strong> event is fired when a key is released.\nThe <a href=\"$MDN_URL$/Web/API/Element/keydown_event\"><code>keydown</code></a> and <code>keyup</code> events provide a code indicating which key is pressed, while <code>keypress</code> indicates which character was entered. For example, a lowercase \"a\" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase \"A\" is reported as 65 by all events.\nKeyboard events are only generated by <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;summary&gt;</code> and anything with the <code>contentEditable</code> or <code>tabindex</code> attribute.\nSince Firefox 65, the <code>keyup</code> and <a href=\"$MDN_URL$/Web/API/Element/keydown_event\"><code>keydown</code></a> events are now fired during IME composition, to improve cross-browser compatibility for CJKT users (<a href=\"https://bugzil.la/354358\" class=\"external\" target=\"_blank\">Firefox bug 354358</a>. To ignore all <code>keyup</code> events that are part of composition, do something like this (229 is a special value set for a <code>keyCode</code> relating to an event that has been processed by an input-method editor (<a href=\"https://www.w3.org/TR/ime-api/#IME\" class=\"external\" target=\"_blank\">IME</a>)):"
    },
    "languagechange": {
      "url": "$MDN_URL$/web/api/window/languagechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "37",
        "ChromeAndroid": "37",
        "Edge": "79",
        "Firefox": "32",
        "Opera": "24",
        "Safari": "10.1",
        "SafariIOS": "10.3"
      },
      "doc": "The <strong><code>languagechange</code></strong> event is fired at the global scope object when the user's preferred language changes."
    },
    "load": {
      "url": "$MDN_URL$/web/api/window/load_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "1.3",
        "SafariIOS": "",
        "Deno": ""
      },
      "doc": "The <strong><code>load</code></strong> event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images.\nThis is in contrast to <a href=\"$MDN_URL$/Web/API/Document/DOMContentLoaded_event\" ><code>DOMContentLoaded</code></a>, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.\nThis event is not cancelable and does not bubble."
    },
    "loadeddata": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/loadeddata_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>loadeddata</code></strong> event is fired when the frame at the current playback position of the media has finished loading; often the first frame."
    },
    "loadedmetadata": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/loadedmetadata_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>loadedmetadata</code> event is fired when the metadata has been loaded."
    },
    "loadend": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/loadend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "18",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "5",
        "Opera": "12.1",
        "Safari": "4",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>loadend</code></strong> event is fired when a request has completed, whether successfully (after <a href=\"$MDN_URL$/Web/API/XMLHttpRequest/load_event\" ><code>load</code></a>) or unsuccessfully (after <a href=\"$MDN_URL$/Web/API/XMLHttpRequest/abort_event\" ><code>abort</code></a> or <a href=\"$MDN_URL$/Web/API/XMLHttpRequest/error_event\" ><code>error</code></a>)."
    },
    "loadstart": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/loadstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "12.1",
        "Safari": "1.3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>loadstart</code></strong> event is fired when a request has started to load data."
    },
    "lostpointercapture": {
      "url": "$MDN_URL$/web/api/element/lostpointercapture_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "17",
        "Firefox": "59",
        "Opera": "44",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <strong><code>lostpointercapture</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/API/Pointer_events#pointer_capture\">captured pointer</a> is released."
    },
    "mark": {
      "url": "$MDN_URL$/web/api/speechsynthesisutterance/mark_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>mark</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance</code></a> object is fired when the spoken utterance reaches a named SSML \"mark\" tag."
    },
    "merchantvalidation": {
      "url": "$MDN_URL$/web/api/paymentrequest/merchantvalidation_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<strong><code>merchantvalidation</code></strong> events are delivered by the <a href=\"$MDN_URL$/Web/API/Payment_Request_API\">Payment Request API</a> to a <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object when a payment handler requires that the merchant requesting the purchase validate itself as permitted to use the payment handler.\nLearn how the <a href=\"$MDN_URL$/Web/API/Payment_Request_API/Concepts#merchant_validation\">merchant validation</a> process works.\nThis event is not cancelable and does not bubble."
    },
    "message": {
      "url": "$MDN_URL$/web/api/broadcastchannel/message_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "79",
        "Firefox": "38",
        "Opera": "41",
        "Safari": "15.4",
        "SafariIOS": "15.4",
        "Nodejs": "15.4.0",
        "Deno": "1.11"
      },
      "doc": "The <code>message</code> event is fired on a <a href=\"$MDN_URL$/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a> object when a message arrives on that channel."
    },
    "messageerror": {
      "url": "$MDN_URL$/web/api/window/messageerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "60",
        "ChromeAndroid": "60",
        "Edge": "18",
        "Firefox": "57",
        "Opera": "47",
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "The <code>messageerror</code> event is fired on a <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> object when it receives a message that can't be deserialized.\nThis event is not cancellable and does not bubble."
    },
    "mousedown": {
      "url": "$MDN_URL$/web/api/element/mousedown_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "The <strong><code>mousedown</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device button is pressed while the pointer is inside the element."
    },
    "mouseenter": {
      "url": "$MDN_URL$/web/api/element/mouseenter_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "30",
        "ChromeAndroid": "30",
        "Edge": "",
        "Firefox": "10",
        "Opera": "17",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>mouseenter</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device (usually a mouse) is initially moved so that its hotspot is within the element at which the event was fired."
    },
    "mouseleave": {
      "url": "$MDN_URL$/web/api/element/mouseleave_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "30",
        "ChromeAndroid": "30",
        "Edge": "",
        "Firefox": "10",
        "Opera": "17",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>mouseleave</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when the cursor of a pointing device (usually a mouse) is moved out of it.\n<code>mouseleave</code> and <a href=\"$MDN_URL$/Web/API/Element/mouseout_event\" ><code>mouseout</code></a> are similar but differ in that <code>mouseleave</code> does not bubble and <code>mouseout</code> does. This means that <code>mouseleave</code> is fired when the pointer has exited the element <em>and</em> all of its descendants, whereas <code>mouseout</code> is fired when the pointer leaves the element <em>or</em> leaves one of the element's descendants (even if the pointer is still within the element)."
    },
    "mousemove": {
      "url": "$MDN_URL$/web/api/element/mousemove_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "The <code>mousemove</code> event is fired at an element when a pointing device (usually a mouse) is moved while the cursor's hotspot is inside it."
    },
    "mouseout": {
      "url": "$MDN_URL$/web/api/element/mouseout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>mouseout</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device (usually a mouse) is used to move the cursor so that it is no longer contained within the element or one of its children.\n<code>mouseout</code> is also delivered to an element if the cursor enters a child element, because the child element obscures the visible area of the element."
    },
    "mouseover": {
      "url": "$MDN_URL$/web/api/element/mouseover_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "9.5",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "The <strong><code>mouseover</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device (such as a mouse or trackpad) is used to move the cursor onto the element or one of its child elements."
    },
    "mouseup": {
      "url": "$MDN_URL$/web/api/element/mouseup_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "The <strong><code>mouseup</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a button on a pointing device (such as a mouse or trackpad) is released while the pointer is located inside it.\n<code>mouseup</code> events are the counterpoint to <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> events."
    },
    "mousewheel": {
      "url": "$MDN_URL$/web/api/element/mousewheel_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <em>obsolete</em> and <em>non-standard</em> <strong><code>mousewheel</code></strong> event is fired asynchronously at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> to provide updates while a mouse wheel or similar device is operated. The <code>mousewheel</code> event was never part of any standard, and while it was implemented by several browsers, it was never implemented by Firefox."
    },
    "mute": {
      "url": "$MDN_URL$/web/api/mediastreamtrack/mute_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "26",
        "ChromeAndroid": "26",
        "Edge": "",
        "Firefox": "59",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "The <strong><code>mute</code></strong> event is sent to a <a href=\"$MDN_URL$/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> when the track's source is temporarily unable to provide media data.\nWhen the track is once again able to produce media output, an <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/unmute_event\" ><code>unmute</code></a> event is sent.\nDuring the time between the <code>mute</code> event and the <code>unmute</code> event, the value of the track's <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/muted\" ><code>muted</code></a> property is <code>true</code>.\nThis event is not cancelable and does not bubble."
    },
    "negotiationneeded": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/negotiationneeded_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Firefox": "38",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "A <strong><code>negotiationneeded</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when negotiation of the connection through the signaling channel is required.\nThis occurs both during the initial setup of the connection as well as any time a change to the communication environment requires reconfiguring the connection.\nThe <code>negotiationneeded</code> event is first dispatched to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when media is first added to the connection. This starts the process of <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> negotiation by instructing your code to begin exchanging ICE candidates through the signaling server. See <a href=\"$MDN_URL$/Web/API/WebRTC_API/Signaling_and_video_calling#signaling_transaction_flow\">Signaling transaction flow</a> for a description of the signaling process that begins with a <code>negotiationneeded</code> event.\nThis event is not cancelable and does not bubble."
    },
    "nomatch": {
      "url": "$MDN_URL$/web/api/speechrecognition/nomatch_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>nomatch</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the speech recognition service returns a final result with no significant recognition.\nThis may involve some degree of recognition, which doesn't meet or exceed the <a href=\"$MDN_URL$/Web/API/SpeechRecognitionAlternative/confidence\" ><code>confidence</code></a> threshold."
    },
    "notificationclick": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/notificationclick_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "17",
        "Firefox": "44",
        "Opera": "24"
      },
      "doc": "The <strong><code>notificationclick</code></strong> event is fired to indicate that a system notification spawned by <a href=\"$MDN_URL$/Web/API/ServiceWorkerRegistration/showNotification\"><code>ServiceWorkerRegistration.showNotification()</code></a> has been clicked.\nThis event is not cancelable and does not bubble."
    },
    "offline": {
      "url": "$MDN_URL$/web/api/window/offline_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "15",
        "Safari": "4",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>offline</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface is fired when the browser has lost access to the network and the value of <a href=\"$MDN_URL$/Web/API/Navigator/onLine\"><code>Navigator.onLine</code></a> switches to <code>false</code>."
    },
    "online": {
      "url": "$MDN_URL$/web/api/window/online_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "Opera": "15",
        "Safari": "4",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>online</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface is fired when the browser has gained access to the network and the value of <a href=\"$MDN_URL$/Web/API/Navigator/onLine\"><code>Navigator.onLine</code></a> switches to <code>true</code>."
    },
    "open": {
      "url": "$MDN_URL$/web/api/rtcdatachannel/open_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "79",
        "Firefox": "22",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "The WebRTC <strong><code>open</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> object's <code>onopen</code> event handler when the underlying transport used to send and receive the data channel's messages is opened or reopened.\nThis event is not cancelable and does not bubble."
    },
    "orientationchange": {
      "url": "$MDN_URL$/web/api/window/orientationchange_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "",
        "Safari": "16.4",
        "SafariIOS": "3"
      },
      "doc": "The <code>orientationchange</code> event is fired when the orientation of the device has changed.\nThis event is not cancelable and does not bubble.\nThis event is deprecated. Listen for the <a href=\"$MDN_URL$/Web/API/ScreenOrientation\"  ><code>ScreenOrientation.onchange</code></a> event instead."
    },
    "pagehide": {
      "url": "$MDN_URL$/web/api/window/pagehide_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "15",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "The <strong><code>pagehide</code></strong> event is sent to a <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> when the browser hides the current page in the process of presenting a different page from the session's history.\nFor example, when the user clicks the browser's Back button, the current page receives a <code>pagehide</code> event before the previous page is shown."
    },
    "pageshow": {
      "url": "$MDN_URL$/web/api/window/pageshow_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "15",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "The <strong><code>pageshow</code></strong> event is sent to a <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> when the browser displays the window's document due to navigation.\nThis includes:"
    },
    "paste": {
      "url": "$MDN_URL$/web/api/element/paste_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "22",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": "3"
      },
      "doc": "The <strong><code>paste</code></strong> event is fired when the user has initiated a \"paste\" action through the browser's user interface.\nIf the cursor is in an editable context (for example, in a <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> or an element with <a href=\"$MDN_URL$/Web/HTML/Global_attributes/contenteditable\"><code>contenteditable</code></a> attribute set to <code>true</code>) then the default action is to insert the contents of the clipboard into the document at the cursor position.\nA handler for this event can access the clipboard contents by calling <a href=\"$MDN_URL$/Web/API/DataTransfer/getData\" ><code>getData()</code></a> on the event's <code>clipboardData</code> property.\nTo override the default behavior (for example to insert some different data or a transformation of the clipboard contents) an event handler must cancel the default action using <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>event.preventDefault()</code></a>, and then insert its desired data manually.\nIt's possible to construct and dispatch a <a href=\"$MDN_URL$/Web/Events/Creating_and_triggering_events\">synthetic</a> <code>paste</code> event, but this will not affect the document's contents."
    },
    "pause": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/pause_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>pause</code> event is sent when a request to pause an activity is handled and the activity has entered its paused state, most commonly after the media has been paused through a call to the element's <a href=\"$MDN_URL$/Web/API/HTMLMediaElement/pause\" ><code>pause()</code></a> method.\nThe event is sent once the <code>pause()</code> method returns and after the media element's <a href=\"$MDN_URL$/Web/API/HTMLMediaElement/paused\" ><code>paused</code></a> property has been changed to <code>true</code>.\nThis event is not cancelable and does not bubble."
    },
    "payerdetailchange": {
      "url": "$MDN_URL$/web/api/paymentresponse/payerdetailchange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "78",
        "ChromeAndroid": "78",
        "Edge": "79",
        "Opera": "47",
        "Safari": "12.1",
        "SafariIOS": "12.2"
      },
      "doc": "A <strong><code>payerdetailchange</code></strong> event is fired by the <a href=\"$MDN_URL$/Web/API/Payment_Request_API\">Payment Request API</a> to a <a href=\"$MDN_URL$/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> object when the user makes changes to their personal information while filling out a payment request form. This can happen when the payer is retrying to submit its details after an error has been detected.\nThe event handler for <code>payerdetailchange</code> should check each value in the form that has changed and ensure that the values are valid. If any are invalid, appropriate error messages should be configured and the <a href=\"$MDN_URL$/Web/API/PaymentResponse/retry\" ><code>retry()</code></a> method should be called on the <a href=\"$MDN_URL$/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> to ask the user to update the invalid entries.\nThis event is not cancelable and does not bubble."
    },
    "paymentmethodchange": {
      "url": "$MDN_URL$/web/api/paymentrequest/paymentmethodchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "76",
        "Edge": "79",
        "Opera": "47",
        "Safari": "12.1",
        "SafariIOS": "12.2"
      },
      "doc": "The <strong><code>paymentmethodchange</code></strong> event is delivered the <a href=\"$MDN_URL$/Web/API/Payment_Request_API\">Payment Request API</a> to a <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object when the user changes the payment method within a given payment handler.\nFor example, if the user switches from one credit card to another on their <a href=\"https://www.apple.com/apple-pay/\" class=\"external\" target=\"_blank\">Apple Pay</a> account, a <code>paymentmethodchange</code> event is fired to let you know about the change.\nThis event is not cancelable and does not bubble."
    },
    "periodicsync": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/periodicsync_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "80",
        "ChromeAndroid": "80",
        "Edge": "80",
        "Opera": "67"
      },
      "doc": "The <strong><code>periodicsync</code></strong> event of the <a href=\"$MDN_URL$/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> interface is fired at timed intervals, specified when registering a <a href=\"$MDN_URL$/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code></a>.\nThis event is not cancelable and does not bubble."
    },
    "play": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/play_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>play</code> event is fired when the <code>paused</code> property is changed from <code>true</code> to <code>false</code>, as a result of the <code>play</code> method, or the <code>autoplay</code> attribute.\nThis event is not cancelable and does not bubble."
    },
    "playing": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/playing_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>playing</code> event is fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.\nThis event is not cancelable and does not bubble."
    },
    "pointercancel": {
      "url": "$MDN_URL$/web/api/element/pointercancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <strong><code>pointercancel</code></strong> event is fired when the browser determines that there are unlikely to be any more pointer events, or if after the <a href=\"$MDN_URL$/Web/API/Element/pointerdown_event\" ><code>pointerdown</code></a> event is fired, the pointer is then used to manipulate the viewport by panning, zooming, or scrolling.\nSome examples of situations that will trigger a <code>pointercancel</code> event:"
    },
    "pointerdown": {
      "url": "$MDN_URL$/web/api/element/pointerdown_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointerdown</code> event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons pressed to at least one button pressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer."
    },
    "pointerenter": {
      "url": "$MDN_URL$/web/api/element/pointerenter_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointerenter</code> event fires when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a <a href=\"$MDN_URL$/Web/API/Element/pointerdown_event\" ><code>pointerdown</code></a> event from a device that does not support hover (see <a href=\"$MDN_URL$/Web/API/Element/pointerdown_event\" ><code>pointerdown</code></a>)."
    },
    "pointerleave": {
      "url": "$MDN_URL$/web/api/element/pointerleave_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointerleave</code> event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer."
    },
    "pointerlockchange": {
      "url": "$MDN_URL$/web/api/document/pointerlockchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "13",
        "Firefox": "50",
        "Opera": "23",
        "Safari": "10.1"
      },
      "doc": "The <code>pointerlockchange</code> event is fired when the pointer is locked/unlocked.\nThis event is not cancelable."
    },
    "pointerlockerror": {
      "url": "$MDN_URL$/web/api/document/pointerlockerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "13",
        "Firefox": "50",
        "Opera": "23",
        "Safari": "10.1"
      },
      "doc": "The <code>pointerlockerror</code> event is fired when locking the pointer failed (for technical reasons or because the permission was denied).\nThis event is not cancelable."
    },
    "pointermove": {
      "url": "$MDN_URL$/web/api/element/pointermove_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointermove</code> event is fired when a pointer changes coordinates, and the pointer has not been <a href=\"$MDN_URL$/Web/API/Element/pointercancel_event\">canceled</a> by a browser <a href=\"$MDN_URL$/Web/CSS/touch-action\">touch-action</a>."
    },
    "pointerout": {
      "url": "$MDN_URL$/web/api/element/pointerout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointerout</code> event is fired for several reasons including: pointing device is moved out of the <em>hit test</em> boundaries of an element; firing the <a href=\"$MDN_URL$/Web/API/Element/pointerup_event\" ><code>pointerup</code></a> event for a device that does not support hover (see <a href=\"$MDN_URL$/Web/API/Element/pointerup_event\" ><code>pointerup</code></a>); after firing the <a href=\"$MDN_URL$/Web/API/Element/pointercancel_event\" ><code>pointercancel</code></a> event (see <a href=\"$MDN_URL$/Web/API/Element/pointercancel_event\" ><code>pointercancel</code></a>); when a pen stylus leaves the hover range detectable by the digitizer."
    },
    "pointerover": {
      "url": "$MDN_URL$/web/api/element/pointerover_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointerover</code> event is fired when a pointing device is moved into an element's hit test boundaries."
    },
    "pointerup": {
      "url": "$MDN_URL$/web/api/element/pointerup_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "The <code>pointerup</code> event is fired when a pointer is no longer active."
    },
    "popstate": {
      "url": "$MDN_URL$/web/api/window/popstate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "11.5",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "The <strong><code>popstate</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if <a href=\"$MDN_URL$/Web/API/History/pushState\"><code>history.pushState()</code></a> has been used to add a history entry to the history stack, that history entry is used instead."
    },
    "progress": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/progress_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>progress</code></strong> event is fired periodically when a request receives more data."
    },
    "push": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/push_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "17",
        "Firefox": "44",
        "Opera": "24"
      },
      "doc": "The <strong><code>push</code></strong> event is sent to a service worker's global scope (represented by the <a href=\"$MDN_URL$/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> interface) when the service worker has received a push message.\nThis event is not cancelable and does not bubble."
    },
    "pushsubscriptionchange": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/pushsubscriptionchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "44"
      },
      "doc": "The <strong><code>pushsubscriptionchange</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/ServiceWorkerGlobalScope\">global scope</a> of a <a href=\"$MDN_URL$/Web/API/ServiceWorker\"><code>ServiceWorker</code></a> to indicate a change in push subscription that was triggered outside the application's control.\nThis may occur if the subscription was refreshed by the browser, but it may also happen if the subscription has been revoked or lost.\nThis event is not cancelable and does not bubble."
    },
    "ratechange": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/ratechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>ratechange</code> event is fired when the playback rate has changed.\nThis event is not cancelable and does not bubble."
    },
    "readystatechange": {
      "url": "$MDN_URL$/web/api/document/readystatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12.1",
        "Safari": "5.1",
        "SafariIOS": "5"
      },
      "doc": "The <strong><code>readystatechange</code></strong> event is fired when the <a href=\"$MDN_URL$/Web/API/Document/readyState\" ><code>readyState</code></a> attribute of a document has changed.\nThis event is not cancelable and does not bubble."
    },
    "rejectionhandled": {
      "url": "$MDN_URL$/web/api/window/rejectionhandled_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "69",
        "Opera": "36",
        "Safari": "11",
        "SafariIOS": "11.3"
      },
      "doc": "The <strong><code>rejectionhandled</code></strong> event is sent to the script's global scope (usually <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a> but also <a href=\"$MDN_URL$/Web/API/Worker\"><code>Worker</code></a>) whenever a rejected JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> is handled late, i.e. when a handler is attached to the promise after its rejection had caused an <a href=\"$MDN_URL$/Web/API/Window/unhandledrejection_event\" ><code>unhandledrejection</code></a> event.\nThis can be used in debugging and for general application resiliency, in tandem with the <code>unhandledrejection</code> event, which is sent when a promise is rejected but there is no handler for the rejection at the time."
    },
    "removestream": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/removestream_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Opera": "15"
      },
      "doc": "The obsolete <strong><code>removestream</code></strong> event was sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> to inform it that a <a href=\"$MDN_URL$/Web/API/MediaStream\"><code>MediaStream</code></a> had been removed from the connection.\nYou can use the <code>RTCPeerConnection</code> interface's <code>onremovestream</code> property to set a handler for this event.\nThis is the counterpart to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/addstream_event\" ><code>addstream</code></a> event, which is also obsolete.\nThis event is not cancelable and does not bubble."
    },
    "removetrack": {
      "url": "$MDN_URL$/web/api/videotracklist/removetrack_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <code>removetrack</code> event is fired when a video track is removed from a <a href=\"$MDN_URL$/Web/API/VideoTrackList\"><code>VideoTrackList</code></a>."
    },
    "repeatevent": {
      "url": "$MDN_URL$/web/api/svganimationelement/repeatevent_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "35",
        "Edge": "79",
        "Firefox": "93",
        "Opera": "22"
      },
      "doc": "The <strong><code>repeatEvent</code></strong> event of the <a href=\"$MDN_URL$/Web/API/SVGAnimationElement\"><code>SVGAnimationElement</code></a> interface is fired when the element's local timeline repeats. It will be fired each time the element repeats, after the first iteration.\nThis event is not cancelable and does not bubble."
    },
    "reset": {
      "url": "$MDN_URL$/web/api/htmlformelement/reset_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>reset</code></strong> event fires when a <a href=\"$MDN_URL$/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> is reset."
    },
    "resize": {
      "url": "$MDN_URL$/web/api/window/resize_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>resize</code></strong> event fires when the document view (window) has been resized.\nThis event is not cancelable and does not bubble.\nIn some earlier browsers it was possible to register <code>resize</code> event handlers on any HTML element. It is still possible to set <code>onresize</code> attributes or use <a href=\"$MDN_URL$/Web/API/EventTarget/addEventListener\" ><code>addEventListener()</code></a> to set a handler on any element. However, <code>resize</code> events are only fired on the <a href=\"$MDN_URL$/Web/API/Window\" ><code>window</code></a> object (i.e. returned by <a href=\"$MDN_URL$/Web/API/Document/defaultView\"><code>document.defaultView</code></a>). Only handlers registered on the <code>window</code> object will receive <code>resize</code> events.\nWhile the <code>resize</code> event fires only for the window nowadays, you can get resize notifications for other elements using the <a href=\"$MDN_URL$/Web/API/ResizeObserver\">ResizeObserver</a> API.\nIf the resize event is triggered too many times for your application, see <a href=\"https://web.archive.org/web/20220714020647/https://bencentra.com/code/2015/02/27/optimizing-window-resize.html\" class=\"external\" target=\"_blank\">Optimizing window.onresize</a> to control the time after which the event fires."
    },
    "resourcetimingbufferfull": {
      "url": "$MDN_URL$/web/api/performance/resourcetimingbufferfull_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "46",
        "ChromeAndroid": "46",
        "Edge": "79",
        "Firefox": "35",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "The <code>resourcetimingbufferfull</code> event is fired when the browser's <a href=\"$MDN_URL$/Web/API/Performance/setResourceTimingBufferSize\">resource timing buffer</a> is full."
    },
    "result": {
      "url": "$MDN_URL$/web/api/speechrecognition/result_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>result</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the speech recognition service returns a result â€” a word or phrase has been positively recognized and this has been communicated back to the app"
    },
    "resume": {
      "url": "$MDN_URL$/web/api/speechsynthesisutterance/resume_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>resume</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance</code></a> object is fired when a paused utterance is resumed."
    },
    "scroll": {
      "url": "$MDN_URL$/web/api/document/scroll_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "2",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>scroll</code></strong> event fires when the document view has been scrolled.\nTo detect when scrolling has completed, see the <a href=\"$MDN_URL$/Web/API/Document/scrollend_event\" ><code>Document: scrollend event</code></a>.\nFor element scrolling, see <a href=\"$MDN_URL$/Web/API/Element/scroll_event\" ><code>Element: scroll event</code></a>."
    },
    "search": {
      "url": "$MDN_URL$/web/api/htmlinputelement/search_event",
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Opera": "15",
        "Safari": "2",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>search</code></strong> event is fired when a search is initiated using an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element of <code>type=\"search\"</code>.\nThere are several ways a search can be initiated, such as by pressing <kbd>Enter</kbd> while the <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> is focused, or, if the <a href=\"$MDN_URL$/Web/HTML/Element/input#incremental\"><code>incremental</code></a> attribute is present, after a UA-defined timeout elapses since the most recent keystroke (with new keystrokes resetting the timeout so the firing of the event is debounced).\nCurrent UA implementations of <code>&lt;input type=\"search\"&gt;</code> have an additional control to clear the field. Using this control also fires the <code>search</code> event. In that case the <code>value</code> of the <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element will be the empty string.\nThis event is not cancelable."
    },
    "seeked": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/seeked_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>seeked</code> event is fired when a seek operation completed, the current playback position has changed, and the Boolean <code>seeking</code> attribute is changed to <code>false</code>.\nThis event is not cancelable and does not bubble."
    },
    "seeking": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/seeking_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>seeking</code> event is fired when a seek operation starts, meaning the Boolean <code>seeking</code> attribute has changed to <code>true</code> and the media is seeking a new position.\nThis event is not cancelable and does not bubble."
    },
    "select": {
      "url": "$MDN_URL$/web/api/htmlinputelement/select_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>select</code></strong> event fires when some text has been selected."
    },
    "selectedcandidatepairchange": {
      "url": "$MDN_URL$/web/api/rtcicetransport/selectedcandidatepairchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "75",
        "ChromeAndroid": "75",
        "Edge": "79",
        "Opera": "62",
        "Safari": "16.4",
        "SafariIOS": "16.4"
      },
      "doc": "A <strong><code>selectedcandidatepairchange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> when the <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> agent selects a new pair of candidates that describe the endpoints of a viable connection.\nThe pair of candidates is in turn described by an <a href=\"$MDN_URL$/Web/API/RTCIceCandidatePair\"><code>RTCIceCandidatePair</code></a> object which contains one <a href=\"$MDN_URL$/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a> representing the local end of the connection, and another representing the remote end of the connection.\nTogether, the candidates can be used to establish a connection to be used by the <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a>, and, by extension, by an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>.\nThis event is not cancelable and does not bubble."
    },
    "selectionchange": {
      "url": "$MDN_URL$/web/api/htmlinputelement/selectionchange_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "92"
      },
      "doc": "The <strong><code>selectionchange</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Selection\">Selection API</a> is fired when the text selection within an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element is changed.\nThis includes both changes in the selected range of characters, or if the caret moves.\nThis event is not cancelable.\nThe event is usually processed by adding an event listener on the <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, and in the handler function read by the <a href=\"$MDN_URL$/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a> <code>selectionStart</code>, <code>selectionEnd</code> and <code>selectionDirection</code> properties.\nIt is also possible to add a listener on the <code>onselectionchange</code> event handler, and within the handler function use <a href=\"$MDN_URL$/Web/API/Document/getSelection\"><code>Document.getSelection()</code></a> to get the <a href=\"$MDN_URL$/Web/API/Selection\" ><code>Selection</code></a>. However this is not very useful for getting changes to <em>text</em> selections."
    },
    "selectstart": {
      "url": "$MDN_URL$/web/api/node/selectstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "Opera": "15",
        "Safari": "1.3"
      },
      "doc": "The <strong><code>selectstart</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Selection\">Selection API</a> is fired when a user starts a new selection.\nIf the event is canceled, the selection is not changed."
    },
    "shippingaddresschange": {
      "url": "$MDN_URL$/web/api/paymentrequest/shippingaddresschange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "60",
        "ChromeAndroid": "53",
        "Edge": "15",
        "Opera": "47",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "The <strong><code>shippingaddresschange</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object when the user selects a shipping address or changes details of their shipping address.\nThis event is not cancelable and does not bubble."
    },
    "shippingoptionchange": {
      "url": "$MDN_URL$/web/api/paymentrequest/shippingoptionchange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "60",
        "ChromeAndroid": "53",
        "Edge": "15",
        "Opera": "47",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "For payment requests that request shipping information, and for which shipping options are offered, the <strong><code>shippingoptionchange</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> whenever the user chooses a shipping option from the list of available options.\nThe string identifying the currently-selected shipping option can be found in the <a href=\"$MDN_URL$/Web/API/PaymentRequest/shippingOption\" ><code>shippingOption</code></a> property.\nThis event is not cancelable and does not bubble."
    },
    "signalingstatechange": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/signalingstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "28",
        "ChromeAndroid": "28",
        "Edge": "15",
        "Firefox": "36",
        "Opera": "15",
        "Safari": "11"
      },
      "doc": "A <strong><code>signalingstatechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> to notify it that its signaling state, as indicated by the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/signalingState\" ><code>signalingState</code></a> property, has changed.\nThis event is not cancelable and does not bubble."
    },
    "slotchange": {
      "url": "$MDN_URL$/web/api/htmlslotelement/slotchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "53",
        "ChromeAndroid": "53",
        "Edge": "79",
        "Firefox": "63",
        "Opera": "40",
        "Safari": "10.1",
        "SafariIOS": "10.3"
      },
      "doc": "The <strong><code>slotchange</code></strong> event is fired on an <a href=\"$MDN_URL$/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a> instance (<a href=\"$MDN_URL$/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> element) when the node(s) contained in that slot change.\nIn order to trigger a <strong>slotchange</strong> event, one has to set or remove the <code>slot</code> attribute.\nThis event is not cancelable."
    },
    "soundend": {
      "url": "$MDN_URL$/web/api/speechrecognition/soundend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>soundend</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when any sound â€” recognizable speech or not â€” has stopped being detected."
    },
    "soundstart": {
      "url": "$MDN_URL$/web/api/speechrecognition/soundstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>soundstart</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when any sound â€” recognizable speech or not â€” has been detected."
    },
    "speechend": {
      "url": "$MDN_URL$/web/api/speechrecognition/speechend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>speechend</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when speech recognized by the speech recognition service has stopped being detected."
    },
    "speechstart": {
      "url": "$MDN_URL$/web/api/speechrecognition/speechstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>speechstart</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when sound recognized by the speech recognition service as speech has been detected."
    },
    "stalled": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/stalled_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>stalled</code> event is fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.\nThis event is not cancelable and does not bubble."
    },
    "start": {
      "url": "$MDN_URL$/web/api/speechrecognition/start_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "79",
        "Opera": "20",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <strong><code>start</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechRecognition\"><code>SpeechRecognition</code></a> object is fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current <code>SpeechRecognition</code>."
    },
    "statechange": {
      "url": "$MDN_URL$/web/api/rtcicetransport/statechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "75",
        "ChromeAndroid": "75",
        "Edge": "79",
        "Opera": "62",
        "Safari": "15.4",
        "SafariIOS": "15.4"
      },
      "doc": "A <strong><code>statechange</code></strong> event occurs when the <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> changes state. The <a href=\"$MDN_URL$/Web/API/RTCIceTransport/state\" ><code>state</code></a> can be used to determine how far through the process of examining, verifying, and selecting a valid candidate pair is prior to successfully connecting the two peers for WebRTC communications.\nThis event is not cancelable and does not bubble."
    },
    "storage": {
      "url": "$MDN_URL$/web/api/window/storage_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "15",
        "Firefox": "45",
        "Opera": "15",
        "Safari": "4",
        "SafariIOS": "4"
      },
      "doc": "The <strong><code>storage</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface fires when a storage area (<code>localStorage</code>) has been modified in the context of another document."
    },
    "submit": {
      "url": "$MDN_URL$/web/api/htmlformelement/submit_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "8",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "The <strong><code>submit</code></strong> event fires when a <a href=\"$MDN_URL$/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> is submitted.\nNote that the <code>submit</code> event fires on the <code>&lt;form&gt;</code> element itself, and not on any <a href=\"$MDN_URL$/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> or <a href=\"$MDN_URL$/Web/HTML/Element/input/submit\">&lt;input type=\"submit\"&gt;</a> inside it. However, the <a href=\"$MDN_URL$/Web/API/SubmitEvent\"><code>SubmitEvent</code></a> which is sent to indicate the form's submit action has been triggered includes a <a href=\"$MDN_URL$/Web/API/SubmitEvent/submitter\" ><code>submitter</code></a> property, which is the button that was invoked to trigger the submit request.\nThe <code>submit</code> event fires when the user clicks a <a href=\"$MDN_URL$/Glossary/Submit_button\">submit button</a> or presses <kbd>Enter</kbd> while editing a field (e.g. <a href=\"$MDN_URL$/Web/HTML/Element/input/text\">&lt;input type=\"text\"&gt;</a>) in a form. The event is not sent to the form when calling the <a href=\"$MDN_URL$/Web/API/HTMLFormElement/submit\" ><code>form.submit()</code></a> method directly."
    },
    "success": {
      "url": "$MDN_URL$/web/api/idbrequest/success_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "8",
        "SafariIOS": "8"
      },
      "doc": "The <code>success</code> event is fired when an <code>IDBRequest</code> succeeds.\nThis event is not cancelable and does not bubble."
    },
    "suspend": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/suspend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>suspend</code> event is fired when media data loading has been suspended.\nThis event is not cancelable and does not bubble."
    },
    "timeout": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/timeout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "29",
        "ChromeAndroid": "29",
        "Edge": "",
        "Firefox": "12",
        "Opera": "16",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>timeout</code></strong> event is fired when progression is terminated due to preset time expiring."
    },
    "timeupdate": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/timeupdate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>timeupdate</code> event is fired when the time indicated by the <code>currentTime</code> attribute has been updated.\nThe event frequency is dependent on the system load, but will be thrown between about 4Hz and 66Hz (assuming the event handlers don't take longer than 250ms to run). User agents are encouraged to vary the frequency of the event based on the system load and the average cost of processing the event each time, so that the UI updates are not any more frequent than the user agent can comfortably handle while decoding the video.\nThis event is not cancelable and does not bubble."
    },
    "toggle": {
      "url": "$MDN_URL$/web/api/htmldetailselement/toggle_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "36",
        "ChromeAndroid": "36",
        "Edge": "79",
        "Firefox": "49",
        "Opera": "23",
        "Safari": "10.1",
        "SafariIOS": "10.3"
      },
      "doc": "The <strong><code>toggle</code></strong> event fires when the <code>open</code>/<code>closed</code> state of a <a href=\"$MDN_URL$/Web/HTML/Element/details\"><code>&lt;details&gt;</code></a> element is toggled.\nThis event is not cancelable and does not bubble."
    },
    "tonechange": {
      "url": "$MDN_URL$/web/api/rtcdtmfsender/tonechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "27",
        "ChromeAndroid": "27",
        "Edge": "79",
        "Firefox": "52",
        "Opera": "15",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "The <strong><code>tonechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code></a> by the <a href=\"$MDN_URL$/Web/API/WebRTC_API\">WebRTC API</a> to indicate when <a href=\"$MDN_URL$/Glossary/DTMF\">DTMF</a> tones previously queued for sending (by calling <a href=\"$MDN_URL$/Web/API/RTCDTMFSender/insertDTMF\"><code>RTCDTMFSender.insertDTMF()</code></a>) begin and end.\nTo determine what tone started playing, or if a tone stopped playing, check the value of the event's <a href=\"$MDN_URL$/Web/API/RTCDTMFToneChangeEvent/tone\" ><code>tone</code></a> property.\nThis event is not cancelable and does not bubble."
    },
    "touchcancel": {
      "url": "$MDN_URL$/web/api/element/touchcancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": "3"
      },
      "doc": "The <code>touchcancel</code> event is fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created)."
    },
    "touchend": {
      "url": "$MDN_URL$/web/api/element/touchend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": "3"
      },
      "doc": "The <code>touchend</code> event fires when one or more touch points are removed from the touch surface."
    },
    "touchmove": {
      "url": "$MDN_URL$/web/api/element/touchmove_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": "3"
      },
      "doc": "The <code>touchmove</code> event is fired when one or more touch points are moved along the touch surface."
    },
    "touchstart": {
      "url": "$MDN_URL$/web/api/element/touchstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": "3"
      },
      "doc": "The <code>touchstart</code> event is fired when one or more touch points are placed on the touch surface."
    },
    "track": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/track_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "64",
        "Edge": "79",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "The <strong><code>track</code></strong> event is sent to the <code>ontrack</code> event handler on <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>s after a new track has been added to an <a href=\"$MDN_URL$/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a> which is part of the connection.\nBy the time this event is delivered, the new track has been fully added to the peer connection. See <a href=\"$MDN_URL$/Web/API/RTCTrackEvent#track_event_types\">Track event types</a> for details.\nThis event is not cancellable and does not bubble."
    },
    "transitioncancel": {
      "url": "$MDN_URL$/web/api/element/transitioncancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "87",
        "ChromeAndroid": "87",
        "Edge": "87",
        "Firefox": "53",
        "Opera": "73",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "The <strong><code>transitioncancel</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_transitions/Using_CSS_transitions\" data-flaw=\"link1\">CSS transition</a> is canceled."
    },
    "transitionend": {
      "url": "$MDN_URL$/web/api/element/transitionend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "26",
        "ChromeAndroid": "26",
        "Edge": "18",
        "Firefox": "51",
        "Opera": "12.1",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "The <strong><code>transitionend</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_transitions/Using_CSS_transitions\" data-flaw=\"link1\">CSS transition</a> has completed. In the case where a transition is removed before completion, such as if the <a href=\"$MDN_URL$/Web/CSS/transition-property\"><code>transition-property</code></a> is removed or <a href=\"$MDN_URL$/Web/CSS/display\"><code>display</code></a> is set to <code>none</code>, then the event will not be generated.\nThe <code>transitionend</code> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state. If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired. If the <code>transitioncancel</code> event is fired, the <code>transitionend</code> event will not fire.\nThis event is not cancelable."
    },
    "transitionrun": {
      "url": "$MDN_URL$/web/api/element/transitionrun_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "",
        "Firefox": "53",
        "Opera": "62",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "The <strong><code>transitionrun</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_transitions/Using_CSS_transitions\" data-flaw=\"link1\">CSS transition</a> is first created, i.e. before any <a href=\"$MDN_URL$/Web/CSS/transition-delay\"><code>transition-delay</code></a> has begun.\nThis event is not cancelable."
    },
    "transitionstart": {
      "url": "$MDN_URL$/web/api/element/transitionstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "",
        "Firefox": "53",
        "Opera": "62",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "The <strong><code>transitionstart</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_transitions/Using_CSS_transitions\" data-flaw=\"link1\">CSS transition</a> has actually started, i.e., after any <a href=\"$MDN_URL$/Web/CSS/transition-delay\"><code>transition-delay</code></a> has ended.\nThis event is not cancelable."
    },
    "unhandledrejection": {
      "url": "$MDN_URL$/web/api/window/unhandledrejection_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "69",
        "Opera": "36",
        "Safari": "11",
        "SafariIOS": "11.3",
        "Deno": "1.24"
      },
      "doc": "The <strong><code>unhandledrejection</code></strong> event is sent to the global scope of a script when a JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that has no rejection handler is rejected; typically, this is the <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a>, but may also be a <a href=\"$MDN_URL$/Web/API/Worker\"><code>Worker</code></a>.\nThis is useful for debugging and for providing fallback error handling for unexpected situations."
    },
    "unload": {
      "url": "$MDN_URL$/web/api/window/unload_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "Opera": "4",
        "Safari": "3",
        "SafariIOS": "",
        "Deno": ""
      },
      "doc": "The <strong><code>unload</code></strong> event is fired when the document or a child resource is being unloaded.\nIt is fired after:\nThe document is in the following state:\nPlease note that the unload event also follows the document tree: parent frame unload will happen <strong>before</strong> child frame <code>unload</code> (see example below)."
    },
    "unmute": {
      "url": "$MDN_URL$/web/api/mediastreamtrack/unmute_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "26",
        "ChromeAndroid": "26",
        "Edge": "",
        "Firefox": "59",
        "Opera": "15",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "The <strong><code>unmute</code></strong> event is sent to a <a href=\"$MDN_URL$/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> when the track's source is once again able to provide media data after a period of not being able to do so.\nThis ends the <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/muted\" ><code>muted</code></a> state that began with the <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/mute_event\" ><code>mute</code></a> event.\nThis event is not cancelable and does not bubble."
    },
    "upgradeneeded": {
      "url": "$MDN_URL$/web/api/idbopendbrequest/upgradeneeded_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "8",
        "SafariIOS": "8"
      },
      "doc": "The <code>upgradeneeded</code> event is fired when an attempt was made to open a database with a version number higher than its current version.\nThis event is not cancelable and does not bubble."
    },
    "versionchange": {
      "url": "$MDN_URL$/web/api/idbdatabase/versionchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "8",
        "SafariIOS": "8"
      },
      "doc": "The <code>versionchange</code> event is fired when a database structure change (<a href=\"$MDN_URL$/Web/API/IDBOpenDBRequest/upgradeneeded_event\"><code>upgradeneeded</code></a> event send on an <a href=\"$MDN_URL$/Web/API/IDBOpenDBRequest\"><code>IDBOpenDBRequest</code></a> or <a href=\"$MDN_URL$/Web/API/IDBFactory/deleteDatabase\"><code>IDBFactory.deleteDatabase</code></a>) was requested elsewhere (most probably in\nanother window/tab on the same computer)."
    },
    "visibilitychange": {
      "url": "$MDN_URL$/web/api/document/visibilitychange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "62",
        "ChromeAndroid": "62",
        "Edge": "18",
        "Firefox": "56",
        "Opera": "49",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "The <code>visibilitychange</code> event is fired at the document when the contents of its tab have become visible or have been hidden.\nThe event is not cancelable."
    },
    "voiceschanged": {
      "url": "$MDN_URL$/web/api/speechsynthesis/voiceschanged_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "16",
        "SafariIOS": "16"
      },
      "doc": "The <strong><code>voiceschanged</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the list of <a href=\"$MDN_URL$/Web/API/SpeechSynthesisVoice\"><code>SpeechSynthesisVoice</code></a> objects that would be returned by the <a href=\"$MDN_URL$/Web/API/SpeechSynthesis/getVoices\"><code>SpeechSynthesis.getVoices()</code></a> method has changed (when the <code>voiceschanged</code> event fires.)"
    },
    "volumechange": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/volumechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>volumechange</code> event is fired when either the <a href=\"$MDN_URL$/Web/API/HTMLMediaElement/volume\" ><code>volume</code></a> attribute or the <a href=\"$MDN_URL$/Web/API/HTMLMediaElement/muted\" ><code>muted</code></a> attribute has changed.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplayactivate": {
      "url": "$MDN_URL$/web/api/window/vrdisplayactivate_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "The <strong><code>vrdisplayactivate</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a VR display is able to be presented to, for example if an HMD has been moved to bring it out of standby, or woken up by being put on.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplayconnect": {
      "url": "$MDN_URL$/web/api/window/vrdisplayconnect_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "The <strong><code>vrdisplayconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is connected to the computer.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplayconnected": {
      "url": "$MDN_URL$/web/api/window/vrdisplayconnect_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "The <strong><code>vrdisplayconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is connected to the computer.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplaydeactivate": {
      "url": "$MDN_URL$/web/api/window/vrdisplaydeactivate_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "The <strong><code>vrdisplaydeactivate</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a VR display can no longer be presented to, for example if an HMD has gone into standby or sleep mode due to a period of inactivity.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplaydisconnect": {
      "url": "$MDN_URL$/web/api/window/vrdisplaydisconnect_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "56"
      },
      "doc": "The <strong><code>vrdisplaydisconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is disconnected from the computer.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplaydisconnected": {
      "url": "$MDN_URL$/web/api/window/vrdisplaydisconnect_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "56"
      },
      "doc": "The <strong><code>vrdisplaydisconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is disconnected from the computer.\nThis event is not cancelable and does not bubble."
    },
    "vrdisplaypresentchange": {
      "url": "$MDN_URL$/web/api/window/vrdisplaypresentchange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Edge": "15"
      },
      "doc": "The <strong><code>vrdisplaypresentchange</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when the presenting state of a VR display changes â€” i.e. goes from presenting to not presenting, or vice versa.\nThis event is not cancelable and does not bubble."
    },
    "waiting": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/waiting_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "Opera": "12.1",
        "Safari": "3.1",
        "SafariIOS": "3"
      },
      "doc": "The <code>waiting</code> event is fired when playback has stopped because of a temporary lack of data.\nThis event is not cancelable and does not bubble."
    },
    "webglcontextcreationerror": {
      "url": "$MDN_URL$/web/api/htmlcanvaselement/webglcontextcreationerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "49",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "8"
      },
      "doc": "The <strong><code>webglcontextcreationerror</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebGL_API\">WebGL API</a> is fired if the user agent is unable to create a <a href=\"$MDN_URL$/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> context.\nThis event has a <a href=\"$MDN_URL$/Web/API/WebGLContextEvent/statusMessage\"><code>WebGLContextEvent.statusMessage</code></a> property, which can contain a platform dependent string with more information about the failure.\nThis event does not bubble."
    },
    "webglcontextlost": {
      "url": "$MDN_URL$/web/api/htmlcanvaselement/webglcontextlost_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "8"
      },
      "doc": "The <strong><code>webglcontextlost</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebGL_API\">WebGL API</a> is fired if the user agent detects that the drawing buffer associated with a <a href=\"$MDN_URL$/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> object has been lost.\nThis event does not bubble."
    },
    "webglcontextrestored": {
      "url": "$MDN_URL$/web/api/htmlcanvaselement/webglcontextrestored_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "4",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "8"
      },
      "doc": "The <strong><code>webglcontextrestored</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebGL_API\">WebGL API</a> is fired if the user agent restores the drawing buffer for a <a href=\"$MDN_URL$/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> object.\nOnce the context is restored, WebGL resources such as textures and buffers that were created before the context was lost are no longer valid. You need to reinitialize the state of your WebGL application and recreate resources.\nThis event does not bubble."
    },
    "webkitmouseforcechanged": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforcechanged_event",
      "compatibility": {
        "Safari": "9"
      },
      "doc": "The non-standard <strong><code>webkitmouseforcechanged</code></strong> event is fired by Safari each time the amount of pressure changes on the trackpad/touchscreen.\n<strong><code>webkitmouseforcechanged</code></strong> is a proprietary, WebKit-specific event introduced by Apple to support their <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature.\nThis event first fires after the <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> event and stops firing before the <a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" ><code>mouseup</code></a> event."
    },
    "webkitmouseforcedown": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforcedown_event",
      "compatibility": {
        "Safari": "9"
      },
      "doc": "After a <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> event has been fired at the element, if and when sufficient pressure has been applied to the mouse or trackpad button to qualify as a \"force click,\" Safari begins sending <strong><code>webkitmouseforcedown</code></strong> events to the element.\n<strong><code>webkitmouseforcedown</code></strong> is a proprietary, WebKit-specific event. It is part of the <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature."
    },
    "webkitmouseforceup": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforceup_event",
      "compatibility": {
        "Safari": "9"
      },
      "doc": "The non-standard <strong><code>webkitmouseforceup</code></strong> event is fired by Safari at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> some time after the <a href=\"$MDN_URL$/Web/API/Element/webkitmouseforcedown_event\" ><code>webkitmouseforcedown</code></a> event, when pressure on the button has been reduced sufficiently to end the \"force click\".\n<strong><code>webkitmouseforceup</code></strong> is a proprietary, WebKit-specific event. It is part of the <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature."
    },
    "webkitmouseforcewillbegin": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforcewillbegin_event",
      "compatibility": {
        "Safari": "9"
      },
      "doc": "Safari for macOS fires the non-standard <strong><code>webkitmouseforcewillbegin</code></strong> event at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> before firing the initial <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> event.\nThis offers the opportunity to tell the system not to trigger any default Force Touch actions if and when the click turns into a <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch event</a>.\nTo instruct macOS not to engage any default Force Touch actions if the user apply enough pressure to activate a Force Touch event, call <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>preventDefault()</code></a> on the <code>webkitmouseforcewillbegin</code> event object.\n<strong><code>webkitmouseforcewillbegin</code></strong> is a proprietary, WebKit-specific event. It is part of the <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature."
    },
    "wheel": {
      "url": "$MDN_URL$/web/api/element/wheel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "31",
        "ChromeAndroid": "31",
        "Edge": "",
        "Firefox": "17",
        "Opera": "18",
        "Safari": "7"
      },
      "doc": "The <strong><code>wheel</code></strong> event fires when the user rotates a wheel button on a pointing device (typically a mouse).\nThis event replaces the non-standard deprecated <a href=\"$MDN_URL$/Web/API/Element/mousewheel_event\" ><code>mousewheel</code></a> event."
    }
  }
}