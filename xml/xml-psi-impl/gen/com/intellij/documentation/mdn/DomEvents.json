{
  "license": {
    "name": "CC-BY-SA 2.5",
    "url": "https://creativecommons.org/licenses/by-sa/2.5/"
  },
  "author": {
    "name": "Mozzila Contributors",
    "url": "https://github.com/mdn/content"
  },
  "lang": "en-us",
  "events": {
    "activate": {
      "url": "$MDN_URL$/web/api/element/domactivate_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "Opera": "15",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The <code><strong>DOMActivate</strong></code> event is fired at an element when it becomes active, such as when it is clicked on using the mouse or a keypress is used to navigate to it.</p>"
    },
    "domcontentloaded": {
      "url": "$MDN_URL$/web/api/window/domcontentloaded_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "9",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>DOMContentLoaded</code></strong> event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.</p>\n<p>The original target for this event is the <a href=\"$MDN_URL$/Web/API/Document\"><code>Document</code></a> that has loaded. You can listen for this event on the <code>Window</code> interface to handle it in the capture or bubbling phases. For full details on this event please see the page on the Document: <a href=\"$MDN_URL$/Web/API/Document/DOMContentLoaded_event\" ><code>DOMContentLoaded</code></a> event.</p>\n<p>A different event, <a href=\"$MDN_URL$/Web/API/Window/load_event\" ><code>load</code></a>, should be used only to detect a fully-loaded page. It is a common mistake to use <code>load</code> where <code>DOMContentLoaded</code> would be more appropriate.</p>"
    },
    "dommousescroll": {
      "url": "$MDN_URL$/web/api/element/dommousescroll_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<p>The DOM <code>DOMMouseScroll</code> event is fired asynchronously when mouse wheel or similar device is operated and the accumulated scroll amount is over 1 line or 1 page since last event. It's represented by the <a href=\"$MDN_URL$/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a> interface. This event was only implemented by Firefox. You should instead use the standard <a href=\"$MDN_URL$/Web/API/Element/wheel_event\" ><code>wheel</code></a> event.</p>\n<p>If you want to prevent the default action of mouse wheel events, it's not enough to handle only this event on Gecko because If scroll amount by a native mouse wheel event is less than 1 line (or less than 1 page when the system setting is by page scroll), other mouse wheel events may be fired without this event.<br>\n<br>\nOn Gecko 17 (Firefox 17) or later, you need to call <code>preventDefault()</code> of <code>wheel</code> events which must be fired for every native event.<br>\n<br>\nUse the standardized <code><a href=\"$MDN_URL$/Web/API/Element/wheel_event\" >wheel</a></code> event if available.</p>"
    },
    "fontfacesetloadevent": {
      "url": "$MDN_URL$/web/api/fontfacesetloadevent",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "35",
        "Edge": "79",
        "Firefox": "41",
        "Opera": "22"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>FontFaceSetLoadEvent</code></strong> interface of the <a href=\"$MDN_URL$/Web/API/CSS_Font_Loading_API\">CSS Font Loading API </a> is fired whenever a <a href=\"$MDN_URL$/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> loads.</span></p>"
    },
    "msgesturechange": {
      "url": "$MDN_URL$/web/api/element/msgesturechange_event",
      "compatibility": {
        "IE": "10"
      },
      "doc": "<p>The <strong><code>MSGestureChange</code></strong> event is fired when touch contact positions move and also while inertia-based movements are being processed.</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>"
    },
    "msgestureend": {
      "url": "$MDN_URL$/web/api/element/msgestureend_event",
      "compatibility": {
        "IE": "10"
      },
      "doc": "<p>The <strong><code>MSGestureEnd</code></strong> event is fired when all associated touch points have stopped contacting the touch surface, and any associated inertial movements have ended; thus ending the gesture.</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>"
    },
    "msgesturehold": {
      "url": "$MDN_URL$/web/api/element/msgesturehold_event",
      "compatibility": {
        "IE": "10"
      },
      "doc": "<p>The <strong><code>MSGestureHold</code></strong> event is fired when the user contacts the touch surface and remains in the same position for a while.</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>\n<p>The <a href=\"$MDN_URL$/Web/API/UIEvent/detail\"><code>UIEvent.detail</code></a> property of an <code>MSGestureHold</code> event has 3 possible values:</p>"
    },
    "msgesturestart": {
      "url": "$MDN_URL$/web/api/element/msgesturestart_event",
      "compatibility": {
        "IE": "10"
      },
      "doc": "<p>The <strong><code>MSGestureStart</code></strong> event is fired when there's a new point of contact on the touch surface, thus starting a new gesture. When the gesture has ended, a <code><a href=\"$MDN_URL$/Web/API/Element/MSGestureEnd_event\" >MSGestureEnd</a></code> event will be fired.</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>"
    },
    "msgesturetap": {
      "url": "$MDN_URL$/web/api/element/msgesturetap_event",
      "compatibility": {
        "IE": "10"
      },
      "doc": "<p>The <strong><code>MSGestureTap</code></strong> event is fired when the user \"taps\" the pointing device (e.g., touches the touch surface with their finger, taps the touch surface with a pen device, clicks with a mouse). Typically, it's preferable to listen for the <code><a href=\"$MDN_URL$/Web/API/Element/click_event\" >click</a></code> event instead.</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>"
    },
    "msinertiastart": {
      "url": "$MDN_URL$/web/api/element/msinertiastart_event",
      "compatibility": {
        "IE": "10"
      },
      "doc": "<p>The <strong><code>MSInertiaStart</code></strong> event is fired when contact with the touch surface stops when a scroll has enough inertia to continue scrolling. This event may not be fired if the scroll is sufficiently slow.</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>"
    },
    "msmanipulationstatechanged": {
      "url": "$MDN_URL$/web/api/element/msmanipulationstatechanged_event",
      "compatibility": {
        "IE": ""
      },
      "doc": "<p><code><strong>MSManipulationStateChanged</strong></code> fires when the state of an element being manipulated has changed (ie. whenever you start or finish panning or zooming an element).</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>\n<p>Get manipulation states using the <code>lastState </code>and <code>currentState </code>properties.</p>"
    },
    "mozmousepixelscroll": {
      "url": "$MDN_URL$/web/api/element/mozmousepixelscroll_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<p><span class=\"seoSummary\">The Firefox-only, <em>non-standard</em>, and <em>obsolete</em> <strong><code>MozMousePixelScroll</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> asynchronously when a mouse wheel or similar device is operated. It's represented by the <a href=\"$MDN_URL$/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a> interface.</span></p>"
    },
    "svgerror": {
      "url": "$MDN_URL$/web/api/svgelement/error_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "10",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "1.5",
        "IE": "9",
        "Opera": "12.1",
        "Safari": "6",
        "SafariIOS": "6"
      },
      "doc": "<p>The <code>error</code> event is fired when an SVG element does not load properly or when an error occurs during script execution.</p>\n<p>This basically implements the standard <code>error</code> DOM event.</p>"
    },
    "svgload": {
      "url": "$MDN_URL$/web/api/svgelement/load_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "IE": "9",
        "Opera": "12.1",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p>The <code>load</code> event fires on an <code>SVGElement</code> when it is loaded in the browser, e.g. in the DOM in the case of an embedded <code>&lt;svg&gt;</code>. It is basically the same as the standard <code>load</code> DOM event.</p>"
    },
    "abort": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/abort_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": ""
      },
      "doc": "<p>The <strong><code>abort</code></strong> event is fired when the resource was not fully loaded, but not as the result of an error.</p>"
    },
    "addstream": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/addstream_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "43"
      },
      "doc": "<p>The obsolete <code><strong>addstream</strong></code> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when new media, in the form of a <a href=\"$MDN_URL$/Web/API/MediaStream\"><code>MediaStream</code></a> object, has been added to it.</p>\n<p>You can, similarly, watch for streams to be removed from the connection by monitoring the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/removestream_event\" ><code>removestream</code></a> event.</p>"
    },
    "addtrack": {
      "url": "$MDN_URL$/web/api/videotracklist/addtrack_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "IE": "10",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <code>addtrack</code> event is fired when a track is added to a <code><a href=\"$MDN_URL$/Web/API/VideoTrackList\">VideoTrackList</a></code>.</p>"
    },
    "afterprint": {
      "url": "$MDN_URL$/web/api/window/afterprint_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "",
        "Firefox": "6",
        "IE": "",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <strong><code>afterprint</code></strong> event is fired after the associated document has started printing or the print preview has been closed.</p>"
    },
    "afterscriptexecute": {
      "url": "$MDN_URL$/web/api/element/afterscriptexecute_event",
      "compatibility": {
        "Firefox": "2"
      },
      "doc": "<p>The <strong><code>afterscriptexecute</code></strong> event is fired after a script has been executed.</p>\n<p>It is a proprietary event specific to Gecko (Firefox).</p>"
    },
    "animationcancel": {
      "url": "$MDN_URL$/web/api/htmlelement/animationcancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "54",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "<p>The <strong><code>animationcancel</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Animations\">CSS Animation</a> unexpectedly aborts. In other words, any time it stops running without sending an <a href=\"$MDN_URL$/Web/API/HTMLElement/animationend_event\" ><code>animationend</code></a> event. This might happen when the <a href=\"$MDN_URL$/Web/CSS/animation-name\"><code>animation-name</code></a> is changed such that the animation is removed, or when the animating node is hidden using CSS. Therefore, either directly or because any of its containing nodes are hidden.</p>\n<p>An event handler for this event can be added by setting the <a href=\"$MDN_URL$/Web/API/GlobalEventHandlers/onanimationcancel\" ><code>onanimationcancel</code></a> property, or using <a href=\"$MDN_URL$/Web/API/EventTarget/addEventListener\" ><code>addEventListener()</code></a>.</p>"
    },
    "animationend": {
      "url": "$MDN_URL$/web/api/htmlelement/animationend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "",
        "Firefox": "",
        "IE": "10",
        "Opera": "30",
        "Safari": "9",
        "SafariIOS": "9"
      },
      "doc": "<p>The <strong><code>animationend</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Animations\">CSS Animation</a> has completed. If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the <code>animationend</code> event is not fired.</p>"
    },
    "animationiteration": {
      "url": "$MDN_URL$/web/api/htmlelement/animationiteration_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "",
        "Firefox": "51",
        "IE": "10",
        "Opera": "30",
        "Safari": "9",
        "SafariIOS": "9"
      },
      "doc": "<p>The <strong><code>animationiteration</code></strong> event is fired when an iteration of a <a href=\"$MDN_URL$/Web/CSS/CSS_Animations\">CSS Animation</a> ends, and another one begins. This event does not occur at the same time as the <a href=\"$MDN_URL$/Web/API/HTMLElement/animationend_event\" ><code>animationend</code></a> event, and therefore does not occur for animations with an <code>animation-iteration-count</code> of one.</p>"
    },
    "animationstart": {
      "url": "$MDN_URL$/web/api/htmlelement/animationstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "43",
        "ChromeAndroid": "43",
        "Edge": "",
        "Firefox": "51",
        "IE": "10",
        "Opera": "30",
        "Safari": "9",
        "SafariIOS": "9"
      },
      "doc": "<p>The <strong><code>animationstart</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Animations\">CSS Animation</a> has started. If there is an <a href=\"$MDN_URL$/Web/CSS/animation-delay\"><code>animation-delay</code></a>, this event will fire once the delay period has expired. A negative delay will cause the event to fire with an <a href=\"$MDN_URL$/Web/API/AnimationEvent/elapsedTime\" ><code>elapsedTime</code></a> equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).</p>"
    },
    "appinstalled": {
      "url": "$MDN_URL$/web/api/window/appinstalled_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "57",
        "Edge": "79"
      },
      "doc": "<p>The <strong><code>appinstalled</code></strong> event of the <a href=\"$MDN_URL$/Web/Manifest\">Web Manifest API</a> is fired when the browser has successfully installed a page as an application.</p>"
    },
    "audioend": {
      "url": "$MDN_URL$/web/api/speechrecognition/audioend_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>audioend</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the user agent has finished capturing audio for speech recognition.</p>"
    },
    "audioprocess": {
      "url": "$MDN_URL$/web/api/scriptprocessornode/audioprocess_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "14",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "25",
        "Opera": "15",
        "Safari": "6",
        "SafariIOS": "6"
      },
      "doc": "<p>The audioprocess event of the <a href=\"$MDN_URL$/Web/API/ScriptProcessorNode\"><code>ScriptProcessorNode</code></a> interface is fired when an input buffer of a script processor is ready to be processed.</p>"
    },
    "audiostart": {
      "url": "$MDN_URL$/web/api/speechrecognition/audiostart_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>audiostart</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the user agent has started to capture audio for speech recognition.</p>"
    },
    "auxclick": {
      "url": "$MDN_URL$/web/api/element/auxclick_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "79",
        "Firefox": "53",
        "Opera": "42"
      },
      "doc": "<p>The <code><strong>auxclick</strong></code> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a non-primary pointing device button (any mouse button other than the primary—usually leftmost—button) has been pressed and released both within the same element.</p>\n<p><code>auxclick</code> is fired after the <code><a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" >mousedown</a></code> and <code><a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" >mouseup</a></code> events have been fired, in that order.</p>"
    },
    "beforeinput": {
      "url": "$MDN_URL$/web/api/htmlelement/beforeinput_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "87",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The DOM <strong><code>beforeinput</code></strong> event fires when the value of an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, <a href=\"$MDN_URL$/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>, or <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> element is about to be modified. The event also applies to elements with <a href=\"$MDN_URL$/Web/API/HTMLElement/contentEditable\" ><code>contenteditable</code></a> enabled, and to any element when <a href=\"$MDN_URL$/Web/API/Document/designMode\" ><code>designMode</code></a> is turned on.</p>\n<p>This allows web apps to override text edit behavior before the browser modifies the DOM tree, and provides more control over input events to improve performance.</p>\n<p>In the case of <code>contenteditable</code> and <code>designMode</code>, the event target is the <strong>editing host</strong>. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn't editable.</p>"
    },
    "beforeprint": {
      "url": "$MDN_URL$/web/api/window/beforeprint_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "63",
        "ChromeAndroid": "63",
        "Edge": "",
        "Firefox": "6",
        "IE": "",
        "Opera": "50",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <strong><code>beforeprint</code></strong> event is fired when the associated document is about to be printed or previewed for printing.</p>"
    },
    "beforescriptexecute": {
      "url": "$MDN_URL$/web/api/element/beforescriptexecute_event",
      "compatibility": {
        "Firefox": "2"
      },
      "doc": "<p>The <strong><code>beforescriptexecute</code></strong> event is fired when a script is about to be executed. Cancelling the event prevents the script from executing.</p>\n<p>It is a proprietary event specific to Gecko (Firefox).</p>"
    },
    "beforeunload": {
      "url": "$MDN_URL$/web/api/window/beforeunload_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "4",
        "Opera": "12",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>beforeunload</code></strong> event is fired when the window, the document and its resources are about to be unloaded.</span> The document is still visible and the event is still cancelable at this point.</p>\n<p>This event enables a web page to trigger a confirmation dialog asking the user if they really want to leave the page. If the user confirms, the browser navigates to the new page, otherwise it cancels the navigation.</p>\n<p>According to the specification, to show the confirmation dialog an event handler should call <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>preventDefault()</code></a> on the event.</p>\n<p>However note that not all browsers support this method, and some instead require the event handler to implement one of two legacy methods:</p>\n<p>To combat unwanted pop-ups, browsers may not display prompts created in <code>beforeunload</code> event handlers unless the page has been interacted with, or may even not display them at all.</p>\n<p>The HTML specification states that calls to <a href=\"$MDN_URL$/Web/API/Window/alert\"><code>window.alert()</code></a>, <a href=\"$MDN_URL$/Web/API/Window/confirm\"><code>window.confirm()</code></a>, and <a href=\"$MDN_URL$/Web/API/Window/prompt\"><code>window.prompt()</code></a> methods may be ignored during this event. See the <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#user-prompts\" class=\"external\" rel=\" noopener\">HTML specification</a> for more details.</p>"
    },
    "beginevent": {
      "url": "$MDN_URL$/web/api/svganimationelement/beginevent_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <code>beginEvent</code> event of the <a href=\"$MDN_URL$/Web/API/SVGAnimationElement\"><code>SVGAnimationElement</code></a> interface is fired when the element local timeline begins to play. It will be raised each time the element begins the active duration (i.e., when it restarts, but not when it repeats).</p>\n<p>It may be raised both in the course of normal (i.e. scheduled or interactive) timeline play, as well as in the case that the element was begun with a DOM method.</p>"
    },
    "blocked": {
      "url": "$MDN_URL$/web/api/idbopendbrequest/blocked_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "7",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code>blocked</code> handler is executed when an open connection to a database is blocking a <code>versionchange</code> transaction on the same database.</p>"
    },
    "blur": {
      "url": "$MDN_URL$/web/api/element/blur_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "24",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>blur</code></strong> event fires when an element has lost focus. The main difference between this event and <a href=\"$MDN_URL$/Web/API/Element/focusout_event\" ><code>focusout</code></a> is that <code>focusout</code> <a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture\">bubbles</a> while <code>blur</code> does not.</p>\n<p>The opposite of <code>blur</code> is <a href=\"$MDN_URL$/Web/API/Element/focus_event\" ><code>focus</code></a>.</p>"
    },
    "boundary": {
      "url": "$MDN_URL$/web/api/speechsynthesisutterance/boundary_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <code><strong>boundary</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the spoken utterance reaches a word or sentence boundary.</p>"
    },
    "bufferedamountlow": {
      "url": "$MDN_URL$/web/api/rtcdatachannel/bufferedamountlow_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "79",
        "Firefox": "",
        "Opera": "44",
        "Safari": ""
      },
      "doc": "<p>A <strong><code>bufferedamountlow</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> when the number of bytes currently in the outbound data transfer buffer falls below the threshold specified in <a href=\"$MDN_URL$/Web/API/RTCDataChannel/bufferedAmountLowThreshold\" ><code>bufferedAmountLowThreshold</code></a>. <code>bufferedamountlow</code> events aren't sent if <code>bufferedAmountLowThreshold</code> is 0.</p>"
    },
    "cancel": {
      "url": "$MDN_URL$/web/api/htmldialogelement/cancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "Edge": "79",
        "Firefox": "78"
      },
      "doc": "<p>The <strong><code>cancel</code></strong> event fires on a <a href=\"$MDN_URL$/Web/HTML/Element/dialog\"><code>&lt;dialog&gt;</code></a> when the user instructs the browser that they wish to dismiss the current open dialog. For example, the browser might fire this event when the user presses the <kbd>Esc</kbd> key or clicks a \"Close dialog\" button which is part of the browser's UI.</p>"
    },
    "canplay": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/canplay_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>canplay</code> event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</span></p>"
    },
    "canplaythrough": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/canplaythrough_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>canplaythrough</code> event is fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</span></p>"
    },
    "change": {
      "url": "$MDN_URL$/web/api/htmlelement/change_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "9",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p>The <code>change</code> event is fired for <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, <a href=\"$MDN_URL$/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>, and <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> elements when an alteration to the element's value is committed by the user. Unlike the <a href=\"$MDN_URL$/Web/API/HTMLElement/input_event\" ><code>input</code></a> event, the <code>change</code> event is not necessarily fired for each alteration to an element's <code>value</code>.</p>\n<p>Depending on the kind of element being changed and the way the user interacts with the element, the <code>change</code> event fires at a different moment:</p>\n<p>The HTML specification lists <a href=\"https://html.spec.whatwg.org/multipage/forms.html#concept-input-apply\" class=\"external\" rel=\" noopener\">the <code>&lt;input&gt;</code> types that should fire the <code>change</code> event</a>.</p>"
    },
    "click": {
      "url": "$MDN_URL$/web/api/element/click_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">An element receives a <code><strong>click</strong></code> event when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.</span></p>\n<p>If the button is pressed on one element and the pointer is moved outside the element before the button is released, the event is fired on the most specific ancestor element that contained both elements.</p>\n<p><code>click</code> fires after both the <code><a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" >mousedown</a></code> and <code><a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" >mouseup</a></code> events have fired, in that order.</p>"
    },
    "close": {
      "url": "$MDN_URL$/web/api/htmldialogelement/close_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "Edge": "79"
      },
      "doc": "<p>The <code>close</code> event is fired on an <code>HTMLDialogElement</code> object when the dialog it represents has been closed.</p>"
    },
    "complete": {
      "url": "$MDN_URL$/web/api/offlineaudiocontext/complete_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "25",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "25",
        "Opera": "15",
        "Safari": "6",
        "SafariIOS": "6"
      },
      "doc": "<p>The <code>complete</code> event of the <a href=\"$MDN_URL$/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a> interface is fired when the rendering of an offline audio context is complete.</p>"
    },
    "compositionend": {
      "url": "$MDN_URL$/web/api/element/compositionend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "IE": "",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>compositionend</code></strong> event is fired when a text composition system such as an <a href=\"$MDN_URL$/Glossary/Input_method_editor\">input method editor</a> completes or cancels the current composition session.</p>\n<p>For example, this event could be fired after a user finishes entering a Chinese character using a <a href=\"https://en.wikipedia.org/wiki/Pinyin\" class=\"external\" rel=\" noopener\">Pinyin</a> IME.</p>"
    },
    "compositionstart": {
      "url": "$MDN_URL$/web/api/element/compositionstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "IE": "",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>compositionstart</code></strong> event is fired when a text composition system such as an <a href=\"$MDN_URL$/Glossary/Input_method_editor\">input method editor</a> starts a new composition session.</p>\n<p>For example, this event could be fired after a user starts entering a Chinese character using a <a href=\"https://en.wikipedia.org/wiki/Pinyin\" class=\"external\" rel=\" noopener\">Pinyin</a> IME.</p>"
    },
    "compositionupdate": {
      "url": "$MDN_URL$/web/api/element/compositionupdate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "9",
        "IE": "",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>compositionupdate</code></strong> event is fired when a new character is received in the context of a text composition session controlled by a text composition system such as an <a href=\"$MDN_URL$/Glossary/Input_method_editor\">input method editor</a>.</p>\n<p>For example, this event could be fired while a user enters a Chinese character using a <a href=\"https://en.wikipedia.org/wiki/Pinyin\" class=\"external\" rel=\" noopener\">Pinyin</a> IME.</p>"
    },
    "connect": {
      "url": "$MDN_URL$/web/api/sharedworkerglobalscope/connect_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "29",
        "Opera": "10.6"
      },
      "doc": "<p>The <strong><code>connect</code></strong> event is fired in shared workers at their <a href=\"$MDN_URL$/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a> when a new client connects.</p>"
    },
    "contextmenu": {
      "url": "$MDN_URL$/web/api/element/contextmenu_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>contextmenu</code></strong> event fires when the user attempts to open a context menu. This event is typically triggered by clicking the right mouse button, or by pressing the context menu key.</span> In the latter case, the context menu is displayed at the bottom left of the focused element, unless the element is a tree, in which case the context menu is displayed at the bottom left of the current row.</p>\n<p>Any right-click event that is not disabled (by calling the event's <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>preventDefault()</code></a> method) will result in a <code>contextmenu</code> event being fired at the targeted element.</p>"
    },
    "copy": {
      "url": "$MDN_URL$/web/api/element/copy_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "18",
        "Firefox": "",
        "IE": "",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": "3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>copy</code></strong> event fires when the user initiates a copy action through the browser's user interface.</span></p>\n<p>The event's default action is to copy the selection (if any) to the clipboard.</p>\n<p>A handler for this event can <em>modify</em> the clipboard contents by calling <a href=\"$MDN_URL$/Web/API/DataTransfer/setData\" ><code>setData(format, data)</code></a> on the event's  <a href=\"$MDN_URL$/Web/API/ClipboardEvent/clipboardData\"><code>ClipboardEvent.clipboardData</code></a> property, and cancelling the event's default action using <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>event.preventDefault()</code></a>.</p>\n<p>However, the handler cannot <em>read</em> the clipboard data.</p>\n<p>It's possible to construct and dispatch a <a href=\"$MDN_URL$/Web/Events/Creating_and_triggering_events\">synthetic</a> <code>copy</code> event, but this will not affect the system clipboard.</p>"
    },
    "cuechange": {
      "url": "$MDN_URL$/web/api/texttrack/cuechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "31",
        "IE": "10",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>cuechange</code></strong> event fires when a <a href=\"$MDN_URL$/Web/API/TextTrack\"><code>TextTrack</code></a> has changed the currently displaying cues.</span> The event is fired at both the <code>TextTrack</code> <em>and</em> at the <a href=\"$MDN_URL$/Web/API/HTMLTrackElement\"><code>HTMLTrackElement</code></a> in which it's being presented, if any.</p>"
    },
    "cut": {
      "url": "$MDN_URL$/web/api/element/cut_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "18",
        "Firefox": "",
        "IE": "",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": "3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>cut</code></strong> event is fired when the user has initiated a \"cut\" action through the browser's user interface.</span></p>\n<p>If the user attempts a cut action on uneditable content, the <code>cut</code> event still fires but the event object contains no data.</p>\n<p>The event's default action is to copy the current selection (if any) to the system clipboard and remove it from the document.</p>\n<p>A handler for this event can <em>modify</em> the clipboard contents by calling <a href=\"$MDN_URL$/Web/API/DataTransfer/setData\" ><code>setData(format, data)</code></a> on the event's <a href=\"$MDN_URL$/Web/API/ClipboardEvent/clipboardData\"><code>ClipboardEvent.clipboardData</code></a> property, and cancelling the default action using <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>event.preventDefault()</code></a>.</p>\n<p>Note though that cancelling the default action will also prevent the document from being updated. So an event handler which wants to emulate the default action for \"cut\" while modifying the clipboard must also manually remove the selection from the document.</p>\n<p>The handler cannot <em>read</em> the clipboard data.</p>\n<p>It's possible to construct and dispatch a <a href=\"$MDN_URL$/Web/Events/Creating_and_triggering_events\">synthetic</a> <code>cut</code> event, but this will not affect the system clipboard or the document's contents.</p>"
    },
    "datachannel": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/datachannel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "25",
        "ChromeAndroid": "25",
        "Edge": "79",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>A <strong><code>datachannel</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> instance when an <a href=\"$MDN_URL$/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> has been added to the connection, as a result of the remote peer calling <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/createDataChannel\"><code>RTCPeerConnection.createDataChannel()</code></a>.</p>"
    },
    "dblclick": {
      "url": "$MDN_URL$/web/api/element/dblclick_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "11",
        "Opera": "11.6",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>dblclick</code></strong> event fires when a pointing device button (such as a mouse's primary button) is double-clicked; that is, when it's rapidly clicked twice on a single element within a very short span of time.</span></p>\n<p><code>dblclick</code> fires after two <a href=\"$MDN_URL$/Web/API/Element/click_event\" ><code>click</code></a> events (and by extension, after two pairs of <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> and <a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" ><code>mouseup</code></a> events).</p>"
    },
    "devicechange": {
      "url": "$MDN_URL$/web/api/mediadevices/devicechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "Edge": "",
        "Firefox": "52",
        "Opera": "34",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>A <code>devicechange</code> event is sent to a <a href=\"$MDN_URL$/Web/API/MediaDevices\"><code>MediaDevices</code></a> instance whenever a media device such as a camera, microphone, or speaker is connected to or removed from the system. It's a generic <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> with no added properties.</p>"
    },
    "devicehumidity": {
      "url": "$MDN_URL$/web/events",
      "doc": "<p><a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.</p>\n<p>Each event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.</p>\n<p><span class=\"seoSummary\">This topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events.</span></p>"
    },
    "devicemotion": {
      "url": "$MDN_URL$/web/api/window/devicemotion_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "18",
        "Firefox": "6",
        "Opera": "",
        "SafariIOS": "4.2"
      },
      "doc": "<p><span class=\"seoSummary\">The <code>devicemotion</code> event is fired at a regular interval and indicates the amount of physical force of acceleration the device is receiving at that time. It also provides information about the rate of rotation, if available.</span></p>"
    },
    "devicenoise": {
      "url": "$MDN_URL$/web/events",
      "doc": "<p><a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.</p>\n<p>Each event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.</p>\n<p><span class=\"seoSummary\">This topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events.</span></p>"
    },
    "deviceorientation": {
      "url": "$MDN_URL$/web/api/window/deviceorientation_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "7",
        "ChromeAndroid": "",
        "Edge": "18",
        "Firefox": "6",
        "Opera": "12",
        "Safari": "",
        "SafariIOS": "4.2"
      },
      "doc": "<p><span class=\"seoSummary\">The <code>deviceorientation</code> event is fired when fresh data is available from an orientation sensor about the current orientation of the device as compared to the Earth coordinate frame. This data is gathered from a magnetometer inside the device.</span> See <a href=\"$MDN_URL$/Web/Events/Orientation_and_motion_data_explained\" data-flaw=\"link1\">Orientation and motion data explained</a> for details.</p>"
    },
    "devicepressure": {
      "url": "$MDN_URL$/web/events",
      "doc": "<p><a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.</p>\n<p>Each event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.</p>\n<p><span class=\"seoSummary\">This topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events.</span></p>"
    },
    "devicetemperature": {
      "url": "$MDN_URL$/web/events",
      "doc": "<p><a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events\">Events</a> are fired to notify code of \"interesting changes\" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.</p>\n<p>Each event is represented by an object that is based on the <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in <a href=\"$MDN_URL$/Web/API/Event#introduction\">Event &gt; Interfaces based on Event</a>.</p>\n<p><span class=\"seoSummary\">This topic provides an index to the main <em>sorts</em> of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events.</span></p>"
    },
    "drag": {
      "url": "$MDN_URL$/web/api/document/drag_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <code>drag</code> event is fired every few hundred milliseconds as an element or text selection is being dragged by the user.</p>"
    },
    "dragend": {
      "url": "$MDN_URL$/web/api/document/dragend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <code>dragend</code> event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).</p>"
    },
    "dragenter": {
      "url": "$MDN_URL$/web/api/document/dragenter_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <code>dragenter</code> event is fired when a dragged element or text selection enters a valid drop target.</p>\n<p>The target object is the <em>immediate user selection</em> (the element directly indicated by the user as the drop target), or the <a href=\"$MDN_URL$/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> element.</p>"
    },
    "dragleave": {
      "url": "$MDN_URL$/web/api/document/dragleave_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <code>dragleave</code> event is fired when a dragged element or text selection leaves a valid drop target.</p>"
    },
    "dragover": {
      "url": "$MDN_URL$/web/api/document/dragover_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <code>dragover</code> event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).</p>\n<p>The event is fired on the drop target(s).</p>"
    },
    "dragstart": {
      "url": "$MDN_URL$/web/api/document/dragstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <code>dragstart</code> event is fired when the user starts dragging an element or text selection.</p>"
    },
    "drop": {
      "url": "$MDN_URL$/web/api/document/drop_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "4",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "10",
        "Opera": "12",
        "Safari": "3.1",
        "SafariIOS": "11"
      },
      "doc": "<p>The <strong><code>drop</code></strong> event is fired when an element or text selection is dropped on a valid drop target.</p>"
    },
    "durationchange": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/durationchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>durationchange</code> event is fired when the <code>duration</code> attribute has been updated.</span></p>"
    },
    "emptied": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/emptied_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>emptied</code> event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the <code>load()</code> method is called to reload it.</span></p>"
    },
    "end": {
      "url": "$MDN_URL$/web/api/speechrecognition/end_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>end</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechRecognition\"><code>SpeechRecognition</code></a> object is fired when the speech recognition service has disconnected.</p>"
    },
    "endevent": {
      "url": "$MDN_URL$/web/api/svganimationelement/endevent_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <code>endEvent</code> event of the <a href=\"$MDN_URL$/Web/API/SVGAnimationElement\"><code>SVGAnimationElement</code></a> interface is fired when at the active end of the animation is reached.</p>"
    },
    "ended": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/ended_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>ended</code> event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available. </span>This event occurs based upon <a href=\"$MDN_URL$/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> (<a href=\"$MDN_URL$/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> and <a href=\"$MDN_URL$/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>) fire <code>ended</code> when playback of the media reaches the end of the media.</p>"
    },
    "error": {
      "url": "$MDN_URL$/web/api/element/error_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "12.1",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The <code>error</code> event is fired on an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> object when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.</p>\n<p>The event object is a <a href=\"$MDN_URL$/Web/API/UIEvent\"><code>UIEvent</code></a> instance if it was generated from a user interface element, or an <a href=\"$MDN_URL$/Web/API/Event\"><code>Event</code></a> instance otherwise.</p>"
    },
    "focus": {
      "url": "$MDN_URL$/web/api/element/focus_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "24",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>focus</code></strong> event fires when an element has received focus. The main difference between this event and <a href=\"$MDN_URL$/Web/API/Element/focusin_event\" ><code>focusin</code></a> is that <code>focusin</code> bubbles while <code>focus</code> does not.</p>\n<p>The opposite of <code>focus</code> is <a href=\"$MDN_URL$/Web/API/Element/blur_event\" ><code>blur</code></a>.</p>"
    },
    "focusin": {
      "url": "$MDN_URL$/web/api/element/focusin_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "<p>The <strong><code>focusin</code></strong> event fires when an element is about to receive focus. The main difference between this event and <a href=\"$MDN_URL$/Web/API/Element/focus_event\" ><code>focus</code></a> is that <code>focusin</code> bubbles while <code>focus</code> does not.</p>\n<p>The opposite of <code>focusin</code> is <a href=\"$MDN_URL$/Web/API/Element/focusout_event\" ><code>focusout</code></a>.</p>"
    },
    "focusout": {
      "url": "$MDN_URL$/web/api/element/focusout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "<p>The <strong><code>focusout</code></strong> event fires when an element is about to lose focus. The main difference between this event and <a href=\"$MDN_URL$/Web/API/Element/blur_event\" ><code>blur</code></a> is that <code>focusout</code> <a href=\"$MDN_URL$/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture\">bubbles</a> while <code>blur</code> does not.</p>\n<p>The opposite of <code>focusout</code> is <a href=\"$MDN_URL$/Web/API/Element/focusin_event\" ><code>focusin</code></a>.</p>"
    },
    "fullscreenchange": {
      "url": "$MDN_URL$/web/api/document/fullscreenchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "64",
        "Opera": "58"
      },
      "doc": "<p><span class=\"seoSummary\">The <code>fullscreenchange</code> event is fired immediately after the browser switches into or out of full-screen mode.</span></p>\n<p>The event is sent to the <code>Element</code> that is transitioning into or out of full-screen mode, and this event then bubbles up to the <code>Document</code>.</p>\n<p>To find out whether the <code>Element</code> is entering or exiting full-screen mode, check the value of <a href=\"$MDN_URL$/Web/API/Document/fullscreenElement\"><code>Document.fullscreenElement</code></a>: if this value is <code>null</code> then the element is exiting full-screen mode, otherwise it is entering full-screen mode.</p>"
    },
    "fullscreenerror": {
      "url": "$MDN_URL$/web/api/document/fullscreenerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "71",
        "ChromeAndroid": "71",
        "Edge": "79",
        "Firefox": "64",
        "Opera": "58"
      },
      "doc": "<p><span class=\"seoSummary\">The <code>fullscreenerror</code> event is fired when the browser cannot switch to full-screen mode.</span></p>\n<p>As with the <a href=\"$MDN_URL$/Web/API/Document/fullscreenchange_event\"><code>fullscreenchange</code> event</a>, two <code>fullscreenerror</code> events are fired; the first is sent to the <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> which failed to change modes, and the second is sent to the <a href=\"$MDN_URL$/Web/API/Document\"><code>Document</code></a> which owns that element.</p>\n<p>For some reasons that switching into full-screen mode might fail, see <a href=\"$MDN_URL$/Web/API/Fullscreen_API/Guide\">the guide to the Fullscreen API</a>.</p>"
    },
    "gamepadconnected": {
      "url": "$MDN_URL$/web/api/window/gamepadconnected_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "37",
        "Edge": "18",
        "Firefox": "29",
        "Opera": "22",
        "Safari": "10.1"
      },
      "doc": "<p>The <code>gamepadconnected</code> event is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.</p>\n<p>The event will not fire if disallowed by the document's <a href=\"$MDN_URL$/Web/HTTP/Headers/Feature-Policy/gamepad\"><code>gamepad</code></a> <a href=\"$MDN_URL$/Web/HTTP/Feature_Policy\">Feature Policy</a>.</p>"
    },
    "gamepaddisconnected": {
      "url": "$MDN_URL$/web/api/window/gamepaddisconnected_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "35",
        "ChromeAndroid": "37",
        "Edge": "18",
        "Firefox": "29",
        "Opera": "22",
        "Safari": "10.1"
      },
      "doc": "<p>The <code>gamepaddisconnected</code> event is fired when the browser detects that a gamepad has been disconnected.</p>\n<p>The event will not fire if disallowed by the document's <a href=\"$MDN_URL$/Web/HTTP/Headers/Feature-Policy/gamepad\"><code>gamepad</code></a> <a href=\"$MDN_URL$/Web/HTTP/Feature_Policy\">Feature Policy</a>.</p>"
    },
    "gatheringstatechange": {
      "url": "$MDN_URL$/web/api/rtcicetransport/gatheringstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "75",
        "ChromeAndroid": "75",
        "Edge": "79",
        "Opera": "62"
      },
      "doc": "<p><span class=\"seoSummary\">A <strong><code>gatheringstatechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> when its <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> candidate gathering state changes.</span> The gathering state, whose actual status can be found in the transport object's <a href=\"$MDN_URL$/Web/API/RTCIceTransport/gatheringState\" ><code>gatheringState</code></a> property, indicates whether or not the ICE agent has begun gathering candidates, and if so, if it has finished doing so.</p>\n<p>The key difference between <code>gatheringstatechange</code> and <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/icegatheringstatechange_event\" ><code>icegatheringstatechange</code></a> is that the latter represents the overall state of the connection including every <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> used by every <a href=\"$MDN_URL$/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a> and every <a href=\"$MDN_URL$/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a> on the entire connection. In contrast, <code>gatheringstatechange</code> represents changes to the candidate gathering state for a single transport.</p>"
    },
    "gesturechange": {
      "url": "$MDN_URL$/web/api/element/gesturechange_event",
      "compatibility": {
        "Safari": "9.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>gesturechange</code></strong> event is fired when digits move during a touch gesture.</p>\n<p>It is a proprietary event specific to WebKit.</p>"
    },
    "gestureend": {
      "url": "$MDN_URL$/web/api/element/gestureend_event",
      "compatibility": {
        "Safari": "9.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>gestureend</code></strong> event is fired when there are no longer multiple fingers contacting the touch surface, thus ending the gesture.</p>\n<p>It is a proprietary event specific to WebKit.</p>"
    },
    "gesturestart": {
      "url": "$MDN_URL$/web/api/element/gesturestart_event",
      "compatibility": {
        "Safari": "9.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>gesturestart</code></strong> event is fired when multiple fingers contact the touch surface, thus starting a new gesture. During the gesture, <code><a href=\"$MDN_URL$/Web/API/Element/gesturechange_event\" >gesturechange</a></code> events will be fired. When the gesture has ended, a <code><a href=\"$MDN_URL$/Web/API/Element/gestureend_event\" >gestureend</a></code> event will be fired.</p>\n<p>It is a proprietary event specific to WebKit.</p>"
    },
    "gotpointercapture": {
      "url": "$MDN_URL$/web/api/htmlelement/gotpointercapture_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "17",
        "Firefox": "59",
        "Opera": "44",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <strong><code>gotpointercapture</code></strong> event is fired when an element captures a pointer using <code><a href=\"$MDN_URL$/Web/API/Element/setPointerCapture\">setPointerCapture()</a></code>.</p>"
    },
    "hashchange": {
      "url": "$MDN_URL$/web/api/window/hashchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.6",
        "IE": "8",
        "Opera": "10.6",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "<p>The <strong><code>hashchange</code></strong> event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the <code>#</code> symbol).</p>"
    },
    "icecandidate": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/icecandidate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>An <strong><code>icecandidate</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when an <a href=\"$MDN_URL$/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a> has been identified and added to the local peer by a call to <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/setLocalDescription\"><code>RTCPeerConnection.setLocalDescription()</code></a>. The event handler should transmit the candidate to the remote peer over the signaling channel so the remote peer can add it to its set of remote candidates.</p>"
    },
    "iceconnectionstatechange": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/iceconnectionstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "28",
        "ChromeAndroid": "28",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>An <strong><code>iceconnectionstatechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> object each time the <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> connection state changes during the negotiation process.\nThe new ICE connection state is available in the object's <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/iceConnectionState\" ><code>iceConnectionState</code></a> property.</p>\n<p>One common task performed by the <code>iceconnectionstatechange</code> event listener: to trigger ICE restart when the state changes to <code>failed</code>. See <a href=\"$MDN_URL$/Web/API/WebRTC_API/Session_lifetime#ice_restart\">ICE restart</a> in <a href=\"$MDN_URL$/Web/API/WebRTC_API/Session_lifetime\">Lifetime of a WebRTC session</a> for further information.</p>"
    },
    "icegatheringstatechange": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/icegatheringstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "59",
        "ChromeAndroid": "59",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "46",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>The <strong><code>icegatheringstatechange</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/onicegatheringstatechange\" ><code>onicegatheringstatechange</code></a> event handler on an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when the state of the <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> candidate gathering process changes.\nThis signifies that the value of the connection's <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/iceGatheringState\" ><code>iceGatheringState</code></a> property has changed.</p>\n<p>When ICE firststarts to gather connection candidates, the value changes from <code>new</code> to <code>gathering</code> to indicate that the process of collecting candidate configurations for the connection has begun. When the value changes to <code>complete</code>, all of the transports that make up the <code>RTCPeerConnection</code> have finished gathering ICE candidates.</p>"
    },
    "input": {
      "url": "$MDN_URL$/web/api/htmlelement/input_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "6",
        "Opera": "11.6",
        "Safari": "3.1",
        "SafariIOS": "2"
      },
      "doc": "<p>The <strong><code>input</code></strong> event fires when the <code>value</code> of an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, <a href=\"$MDN_URL$/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>, or <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> element has been changed. </p>\n<p>The event also applies to elements with <a href=\"$MDN_URL$/Web/API/HTMLElement/contentEditable\" ><code>contenteditable</code></a> enabled, and to any element when <a href=\"$MDN_URL$/Web/API/Document/designMode\" ><code>designMode</code></a> is turned on. In the case of <code>contenteditable</code> and <code>designMode</code>, the event target is the <em>editing host</em>. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn't editable.</p>\n<p>For <code>&lt;input&gt;</code> elements with <code>type=checkbox</code> or <code>type=radio</code>, the <code>input</code> event should fire whenever a user toggles the control, per <a href=\"https://html.spec.whatwg.org/multipage/input.html#the-input-element:event-input-2\" class=\"external\" rel=\" noopener\">the HTML5 specification</a>. However, historically this has not always been the case. Check compatibility, or use the <a href=\"$MDN_URL$/Web/API/HTMLElement/change_event\" ><code>change</code></a> event instead for elements of these types.</p>"
    },
    "install": {
      "url": "$MDN_URL$/web/api/window/appinstalled_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "57",
        "Edge": "79"
      },
      "doc": "<p>The <strong><code>appinstalled</code></strong> event of the <a href=\"$MDN_URL$/Web/Manifest\">Web Manifest API</a> is fired when the browser has successfully installed a page as an application.</p>"
    },
    "invalid": {
      "url": "$MDN_URL$/web/api/htmlinputelement/invalid_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "10",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "IE": "10",
        "Opera": "10",
        "Safari": "5",
        "SafariIOS": "5"
      },
      "doc": "<p>The <strong><code>invalid</code></strong> event fires when a submittable element has been checked for validity and doesn't satisfy its constraints.</p>\n<p>This event can be useful for displaying a summary of the problems with a form on submission. When a form is submitted, <code>invalid</code> events are fired at each form control that is invalid. The validity of submittable elements is checked before submitting their owner <a href=\"$MDN_URL$/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a>, or after the <a href=\"$MDN_URL$/Learn/Forms#constraint_validation_api\"><code>checkValidity()</code></a> method of the element or its owner <code>&lt;form&gt;</code> is called.</p>\n<p>It is not checked on <a href=\"$MDN_URL$/Web/API/Element/blur_event\" ><code>blur</code></a>.</p>"
    },
    "keydown": {
      "url": "$MDN_URL$/web/api/document/keydown_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "14",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "2",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>keydown</code></strong> event is fired when a key is pressed.</p>\n<p>Unlike the <a href=\"$MDN_URL$/Web/API/Document/keypress_event\" ><code>keypress</code></a> event, the <code>keydown</code> event is fired for all keys, regardless of whether they produce a character value.</p>\n<p>The <code>keydown</code> and <a href=\"$MDN_URL$/Web/API/Document/keyup_event\" ><code>keyup</code></a> events provide a code indicating which key is pressed, while <a href=\"$MDN_URL$/Web/API/Document/keypress_event\" ><code>keypress</code></a> indicates which <em>character</em> was entered. For example, a lowercase \"a\" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase \"A\" is reported as 65 by all events.</p>"
    },
    "keypress": {
      "url": "$MDN_URL$/web/api/document/keypress_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "14",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "2",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>keypress</code></strong> event is fired when a key that produces a character value is pressed down.</span> Examples of keys that produce a character value are alphabetic, numeric, and punctuation keys. Examples of keys that don't produce a character value are modifier keys such as <kbd>Alt</kbd>, <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, or <kbd>Meta</kbd>.</p>"
    },
    "keyup": {
      "url": "$MDN_URL$/web/api/document/keyup_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "14",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "2",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>keyup</code></strong> event is fired when a key is released.</p>\n<p>The <a href=\"$MDN_URL$/Web/API/Document/keydown_event\" ><code>keydown</code></a> and <code>keyup</code> events provide a code indicating which key is pressed, while <a href=\"$MDN_URL$/Web/API/Document/keypress_event\" ><code>keypress</code></a> indicates which <em>character</em> was entered. For example, a lowercase \"a\" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase \"A\" is reported as 65 by all events.</p>"
    },
    "languagechange": {
      "url": "$MDN_URL$/web/api/window/languagechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "37",
        "ChromeAndroid": "37",
        "Edge": "79",
        "Firefox": "32",
        "Opera": "24",
        "Safari": "10.1",
        "SafariIOS": "10.3"
      },
      "doc": "<p>The <strong><code>languagechange</code></strong> event is fired at the global scope object when the user's preferred language changes.</p>"
    },
    "load": {
      "url": "$MDN_URL$/web/api/window/load_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "4",
        "Opera": "4",
        "Safari": "1.3",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>load</code></strong> event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. This is in contrast to <a href=\"$MDN_URL$/Web/API/Document/DOMContentLoaded_event\" ><code>DOMContentLoaded</code></a>, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.</p>"
    },
    "loadeddata": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/loadeddata_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>loadeddata</code></strong> event is fired when the frame at the current playback position of the media has finished loading; often the first frame. </span></p>"
    },
    "loadedmetadata": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/loadedmetadata_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>loadedmetadata</code> event is fired when the metadata has been loaded.</span></p>"
    },
    "loadend": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/loadend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "IE": "10",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>loadend</code></strong> event is fired when a request has completed, whether successfully (after <a href=\"$MDN_URL$/Web/API/XMLHttpRequest/load_event\" ><code>load</code></a>) or unsuccessfully (after <a href=\"$MDN_URL$/Web/API/XMLHttpRequest/abort_event\" ><code>abort</code></a> or <a href=\"$MDN_URL$/Web/API/XMLHttpRequest/error_event\" ><code>error</code></a>).</p>"
    },
    "loadstart": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/loadstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "IE": "10",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>loadstart</code></strong> event is fired when a request has started to load data.</p>"
    },
    "lostpointercapture": {
      "url": "$MDN_URL$/web/api/htmlelement/lostpointercapture_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "57",
        "ChromeAndroid": "57",
        "Edge": "17",
        "Firefox": "59",
        "Opera": "44",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <strong><code>lostpointercapture</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/API/Pointer_events#pointer_capture\">captured pointer</a> is released.</p>"
    },
    "mark": {
      "url": "$MDN_URL$/web/api/speechsynthesisutterance/mark_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <code><strong>mark</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance</code></a> object is fired when the spoken utterance reaches a named SSML \"mark\" tag.</p>"
    },
    "merchantvalidation": {
      "url": "$MDN_URL$/web/api/paymentrequest/merchantvalidation_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\"><code><strong>merchantvalidation</strong></code> events are delivered by the <a href=\"$MDN_URL$/Web/API/Payment_Request_API\">Payment Request API</a> to a <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object when a payment handler requires that the merchant requesting the purchase validate itself as permitted to use the payment handler.</span></p>\n<p>See <a href=\"$MDN_URL$/Web/API/Payment_Request_API/Concepts#merchant_validation\">Merchant validation</a> in <a href=\"$MDN_URL$/Web/API/Payment_Request_API/Concepts\">Payment processing concepts</a> for details on how the merchant validation process works.</p>"
    },
    "message": {
      "url": "$MDN_URL$/web/api/broadcastchannel/message_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "54",
        "ChromeAndroid": "54",
        "Edge": "79",
        "Firefox": "38",
        "Opera": "41"
      },
      "doc": "<p>The <code>message</code> event is fired on a <a href=\"$MDN_URL$/Web/API/BroadcastChannel\"><code>BroadcastChannel</code></a> object when a message arrives on that channel.</p>"
    },
    "messageerror": {
      "url": "$MDN_URL$/web/api/window/messageerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "60",
        "ChromeAndroid": "60",
        "Edge": "79",
        "Firefox": "57",
        "Opera": "47"
      },
      "doc": "<p>The <code>messageerror</code> event is fired on a <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> object when it receives a message that can't be deserialized.</p>"
    },
    "mousedown": {
      "url": "$MDN_URL$/web/api/element/mousedown_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>mousedown</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device button is pressed while the pointer is inside the element.</span></p>"
    },
    "mouseenter": {
      "url": "$MDN_URL$/web/api/element/mouseenter_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "30",
        "ChromeAndroid": "30",
        "Edge": "",
        "Firefox": "10",
        "IE": "5.5",
        "Opera": "17",
        "Safari": "6.1",
        "SafariIOS": "6.1"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>mouseenter</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device (usually a mouse) is initially moved so that its hotspot is within the element at which the event was fired.</span></p>"
    },
    "mouseleave": {
      "url": "$MDN_URL$/web/api/element/mouseleave_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "30",
        "ChromeAndroid": "30",
        "Edge": "",
        "Firefox": "10",
        "IE": "5.5",
        "Opera": "17",
        "Safari": "6.1",
        "SafariIOS": "6.1"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>mouseleave</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when the cursor of a pointing device (usually a mouse) is moved out of it.</span></p>\n<p><code>mouseleave</code> and <code><a href=\"$MDN_URL$/Web/API/Element/mouseout_event\" >mouseout</a></code> are similar but differ in that <code>mouseleave</code> does not bubble and <code>mouseout</code> does. This means that <code>mouseleave</code> is fired when the pointer has exited the element <em>and</em> all of its descendants, whereas <code>mouseout</code> is fired when the pointer leaves the element <em>or</em> leaves one of the element's descendants (even if the pointer is still within the element).</p>\n<p>One <code>mouseleave</code> event is sent to each element of the hierarchy when leaving them. Here four events are sent to the four elements of the hierarchy when the pointer moves from the text to an area outside of the most outer div represented here.</p>\n<p>One single <code>mouseout</code> event is sent to the deepest element of the DOM tree, then it bubbles up the hierarchy until it is canceled by a handler or reaches the root.</p>"
    },
    "mousemove": {
      "url": "$MDN_URL$/web/api/element/mousemove_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "<p><span class=\"seoSummary\">The <code>mousemove</code> event is fired at an element when a pointing device (usually a mouse) is moved while the cursor's hotspot is inside it.</span></p>"
    },
    "mouseout": {
      "url": "$MDN_URL$/web/api/element/mouseout_event",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>mouseout</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device (usually a mouse) is used to move the cursor so that it is no longer contained within the element or one of its children.</span> <code>mouseout</code> is also delivered to an element if the cursor enters a child element, because the child element obscures the visible area of the element.</p>"
    },
    "mouseover": {
      "url": "$MDN_URL$/web/api/element/mouseover_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "9.5",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>mouseover</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a pointing device (such as a mouse or trackpad) is used to move the cursor onto the element or one of its child elements.</span></p>"
    },
    "mouseup": {
      "url": "$MDN_URL$/web/api/element/mouseup_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "2",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "4",
        "SafariIOS": "3.2"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>mouseup</code></strong> event is fired at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> when a button on a pointing device (such as a mouse or trackpad) is released while the pointer is located inside it.</span> <code>mouseup</code> events are the counterpoint to <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> events.</p>"
    },
    "mousewheel": {
      "url": "$MDN_URL$/web/api/element/mousewheel_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "IE": "9",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p>The <em>obsolete</em> and <em>non-standard</em> <code><strong>mousewheel</strong></code> event is fired asynchronously at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> to provide updates while a mouse wheel or similar device is operated. The <code>mousewheel</code> event was never part of any standard, and while it was implemented by several browsers, it was never implemented by Firefox.</p>"
    },
    "mscontentzoom": {
      "url": "$MDN_URL$/web/api/element/mscontentzoom_event",
      "compatibility": {
        "IE": ""
      },
      "doc": "<p>The <code><strong>msContentZoom</strong></code> event fires when a user zooms the element (changes the scale of the content).</p>\n<p>It is a proprietary event specific to Microsoft Edge and Internet Explorer.</p>\n<p>Zoomed elements can expose their zoom level through <code>msContentZoom</code> (ie. scrollTop/Left). The zoom level can be reset with <a href=\"$MDN_URL$/Web/API/Element/msZoomTo\"><code>Element.msZoomTo()</code></a>.</p>"
    },
    "mute": {
      "url": "$MDN_URL$/web/api/mediastreamtrack/mute_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "59",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code><strong>mute</strong></code> event is sent to a <a href=\"$MDN_URL$/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> when the track's source is temporarily unable to provide media data.</span> When the track is once again able to produce media output, an <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/unmute_event\" ><code>unmute</code></a> event is sent.</p>\n<p>During the time between the <code>mute</code> event and the <code>unmute</code> event, the value of the track's <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/muted\" ><code>muted</code></a> property is <code>true</code>.</p>"
    },
    "negotiationneeded": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/negotiationneeded_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>A <code><strong>negotiationneeded</strong></code> event is sent to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when negotiation of the connection through the signaling channel is required.\nThis occurs both during the initial setup of the connection as well as any time a change to the communication environment requires reconfiguring the connection.</p>\n<p>The <code>negotiationneeded</code> event is first dispatched to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> when media is first added to the connection. This starts the process of <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> negotiation by instructing your code to begin exchanging ICE candidates through the signaling server. See <a href=\"$MDN_URL$/Web/API/WebRTC_API/Signaling_and_video_calling#signaling_transaction_flow\">Signaling transaction flow</a> in <a href=\"$MDN_URL$/Web/API/WebRTC_API/Signaling_and_video_calling\">Signaling and video calling</a> for a description of the signaling process that begins with a <code>negotiationneeded</code> event.</p>"
    },
    "nomatch": {
      "url": "$MDN_URL$/web/api/speechrecognition/nomatch_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>nomatch</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the speech recognition service returns a final result with no significant recognition.</p>\n<p>This may involve some degree of recognition, which doesn't meet or exceed the <a href=\"$MDN_URL$/Web/API/SpeechRecognitionAlternative/confidence\" ><code>confidence</code></a> threshold.</p>"
    },
    "notificationclick": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/notificationclick_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "79",
        "Firefox": "44",
        "Opera": "24",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<p>The <strong><code>notificationclick</code></strong> event is fired to indicate that a system notification spawned by <a href=\"$MDN_URL$/Web/API/ServiceWorkerRegistration/showNotification\"><code>ServiceWorkerRegistration.showNotification()</code></a> has been clicked.</p>"
    },
    "offline": {
      "url": "$MDN_URL$/web/api/window/offline_event",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>offline</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface is fired when the browser has lost access to the network and the value of <a href=\"$MDN_URL$/Web/API/Navigator/onLine\"><code>Navigator.onLine</code></a> switches to <code>false</code>.</p>"
    },
    "online": {
      "url": "$MDN_URL$/web/api/window/online_event",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>online</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface is fired when the browser has gained access to the network and the value of <a href=\"$MDN_URL$/Web/API/Navigator/onLine\"><code>Navigator.onLine</code></a> switches to <code>true</code>.</p>"
    },
    "open": {
      "url": "$MDN_URL$/web/api/rtcdatachannel/open_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "56",
        "ChromeAndroid": "56",
        "Edge": "79",
        "Firefox": "",
        "Opera": "43",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The WebRTC <code><strong>open</strong></code> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> object's <a href=\"$MDN_URL$/Web/API/RTCDataChannel/onopen\" ><code>onopen</code></a> event handler when the underlying transport used to send and receive the data channel's messages is opened or re-opened.</p>"
    },
    "orientationchange": {
      "url": "$MDN_URL$/web/api/window/orientationchange_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "",
        "SafariIOS": ""
      },
      "doc": "<p>The <code>orientationchange</code> event is fired when the orientation of the device has changed.</p>"
    },
    "overflow": {
      "url": "$MDN_URL$/web/api/element/overflow_event",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<p>The <code>overflow</code> event is fired when an element has been overflowed by its content or has been rendered for the first time in this state (only works for elements styled with overflow != visible).</p>\n<p>It is a proprietary event specific to Gecko (Firefox).</p>"
    },
    "pagehide": {
      "url": "$MDN_URL$/web/api/window/pagehide_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>pagehide</code></strong> event is sent to a <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> when the browser hides the current page in the process of presenting a different page from the session's history.</span> For example, when the user clicks the browser's Back button, the current page receives a <code>pagehide</code> event before the previous page is shown.</p>"
    },
    "pageshow": {
      "url": "$MDN_URL$/web/api/window/pageshow_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>pageshow</code></strong> event is sent to a <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> when the browser displays the window's document due to navigation.</span> This includes:</p>"
    },
    "paste": {
      "url": "$MDN_URL$/web/api/element/paste_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "22",
        "IE": "8",
        "Opera": "15",
        "Safari": "3",
        "SafariIOS": "3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>paste</code></strong> event is fired when the user has initiated a \"paste\" action through the browser's user interface.</span></p>\n<p>If the cursor is in an editable context (for example, in a <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> or an element with <code><a href=\"$MDN_URL$/Web/HTML/Global_attributes/contenteditable\">contenteditable</a></code> attribute set to <code>true</code>) then the default action is to insert the contents of the clipboard into the document at the cursor position.</p>\n<p>A handler for this event can access the clipboard contents by calling <a href=\"$MDN_URL$/Web/API/DataTransfer/getData\" ><code>getData()</code></a> on the event's <code>clipboardData</code> property.</p>\n<p>To override the default behavior (for example to insert some different data or a transformation of the clipboard contents) an event handler must cancel the default action using <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>event.preventDefault()</code></a>, and then insert its desired data manually.</p>\n<p>It's possible to construct and dispatch a <a href=\"$MDN_URL$/Web/Events/Creating_and_triggering_events\">synthetic</a> <code>paste</code> event, but this will not affect the document's contents.</p>"
    },
    "pause": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/pause_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>pause</code> event is sent when a request to pause an activity is handled and the activity has entered its paused state, most commonly after the media has been paused through a call to the element's <a href=\"$MDN_URL$/Web/API/HTMLMediaElement/pause\" ><code>pause()</code></a> method.</span> The event is sent once the <code>pause()</code> method returns and after the media element's <a href=\"$MDN_URL$/Web/API/HTMLMediaElement/paused\" ><code>paused</code></a> property has been changed to <code>true</code>.</p>"
    },
    "payerdetailchange": {
      "url": "$MDN_URL$/web/api/paymentresponse/payerdetailchange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "<p><code><strong>payerdetailchange</strong></code> events are delivered by the <a href=\"$MDN_URL$/Web/API/Payment_Request_API\">Payment Request API</a> to a <a href=\"$MDN_URL$/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> object when the user makes changes to their personal information while filling out a payment request form.</p>\n<p>The event handler for <code>payerdetailchange</code> should check each value in the form that has changed and ensure that the values are valid. If any are invalid, appropriate error messages should be configured and the <a href=\"$MDN_URL$/Web/API/PaymentResponse/retry\" ><code>retry()</code></a> method should be called on the <a href=\"$MDN_URL$/Web/API/PaymentResponse\"><code>PaymentResponse</code></a> to ask the user to update the invalid entries.</p>"
    },
    "paymentmethodchange": {
      "url": "$MDN_URL$/web/api/paymentrequest/paymentmethodchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "76",
        "ChromeAndroid": "",
        "Edge": "79",
        "Opera": "47",
        "Safari": "12.1",
        "SafariIOS": "12.2"
      },
      "doc": "<p><span class=\"seoSummary\"><code><strong>paymentmethodchange</strong></code> events are delivered by the <a href=\"$MDN_URL$/Web/API/Payment_Request_API\">Payment Request API</a> to a <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object when the user changes payment methods within a given payment handler.</span> For example, if the user switches from one credit card to another on their <a href=\"https://www.apple.com/apple-pay/\" class=\"external\" rel=\" noopener\">Apple Pay</a> account, a <code>paymentmethodchange</code> event is fired to let you know about the change.</p>"
    },
    "periodicsync": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/periodicsync_event",
      "status": [
        "Experimental"
      ],
      "compatibility": {
        "Chrome": "80",
        "ChromeAndroid": "80",
        "Edge": "80",
        "Opera": "67"
      },
      "doc": "<p class=\"summary\">The <strong><code>periodicsync</code></strong> event of the <a href=\"$MDN_URL$/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> interface is fired at timed intervals, specified when registering a <a href=\"$MDN_URL$/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code></a>.</p>"
    },
    "play": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/play_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p class=\"seoSummary\">The <code>play</code> event is fired when the <code>paused</code> property is changed from <code>true</code> to <code>false</code>, as a result of the <code>play</code> method, or the <code>autoplay</code> attribute.</p>"
    },
    "playing": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/playing_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>playing</code> event is fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.</span></p>"
    },
    "pointercancel": {
      "url": "$MDN_URL$/web/api/htmlelement/pointercancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>pointercancel</code></strong> event is fired when the browser determines that there are unlikely to be any more pointer events, or if after the <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointerdown_event\" >pointerdown</a></code> event is fired, the pointer is then used to manipulate the viewport by panning, zooming, or scrolling.</span></p>\n<p>Some examples of situations that will trigger a <code>pointercancel</code> event:</p>"
    },
    "pointerdown": {
      "url": "$MDN_URL$/web/api/htmlelement/pointerdown_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointerdown</code> event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.</p>"
    },
    "pointerenter": {
      "url": "$MDN_URL$/web/api/htmlelement/pointerenter_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointerenter</code> event fires when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointerdown_event\" >pointerdown</a></code> event from a device that does not support hover (see <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointerdown_event\" >pointerdown</a></code>).</p>"
    },
    "pointerleave": {
      "url": "$MDN_URL$/web/api/htmlelement/pointerleave_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointerleave</code> event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer.</p>"
    },
    "pointerlockchange": {
      "url": "$MDN_URL$/web/api/document/pointerlockchange_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "79",
        "Firefox": "50",
        "Safari": "10.1"
      },
      "doc": "<p>The <code>pointerlockchange</code> event is fired when the pointer is locked/unlocked.</p>"
    },
    "pointerlockerror": {
      "url": "$MDN_URL$/web/api/document/pointerlockerror_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "45",
        "ChromeAndroid": "45",
        "Edge": "79",
        "Firefox": "50",
        "Safari": "10.1"
      },
      "doc": "<p>The <code>pointerlockerror</code> event is fired when locking the pointer failed (for technical reasons or because the permission was denied).</p>"
    },
    "pointermove": {
      "url": "$MDN_URL$/web/api/htmlelement/pointermove_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointermove</code> event is fired when a pointer changes coordinates, and the pointer has not been <a href=\"$MDN_URL$/Web/API/HTMLElement/pointercancel_event\">canceled</a> by a browser <a href=\"$MDN_URL$/Web/CSS/touch-action\">touch-action</a>.</p>"
    },
    "pointerout": {
      "url": "$MDN_URL$/web/api/htmlelement/pointerout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointerout</code> event is fired for several reasons including: pointing device is moved out of the <em>hit test</em> boundaries of an element; firing the <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointerup_event\" >pointerup</a></code> event for a device that does not support hover (see <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointerup_event\" >pointerup</a></code>); after firing the <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointercancel_event\" >pointercancel</a></code> event (see <code><a href=\"$MDN_URL$/Web/API/HTMLElement/pointercancel_event\" >pointercancel</a></code>); when a pen stylus leaves the hover range detectable by the digitizer.</p>"
    },
    "pointerover": {
      "url": "$MDN_URL$/web/api/htmlelement/pointerover_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointerover</code> event is fired when a pointing device is moved into an element's hit test boundaries.</p>"
    },
    "pointerup": {
      "url": "$MDN_URL$/web/api/htmlelement/pointerup_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "55",
        "ChromeAndroid": "55",
        "Edge": "",
        "Firefox": "59",
        "IE": "11",
        "Opera": "42",
        "Safari": "13",
        "SafariIOS": "13"
      },
      "doc": "<p>The <code>pointerup</code> event is fired when a pointer is no longer active.</p>"
    },
    "popstate": {
      "url": "$MDN_URL$/web/api/window/popstate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "5",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "4",
        "IE": "10",
        "Opera": "11.5",
        "Safari": "5",
        "SafariIOS": "4.2"
      },
      "doc": "<p>The <strong><code>popstate</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if <a href=\"$MDN_URL$/Web/API/History/pushState\"><code>history.pushState()</code></a> has been used to add a history entry to the history stack, that history entry is used instead.</p>"
    },
    "progress": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/progress_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "IE": "10",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>progress</code></strong> event is fired periodically when a request receives more data.</p>"
    },
    "push": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/push_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "40",
        "ChromeAndroid": "40",
        "Edge": "79",
        "Firefox": "44",
        "Opera": "24",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>push</code></strong> event is sent to a service worker's global scope (represented by the <a href=\"$MDN_URL$/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> interface) when the service worker has received a push message.</span></p>"
    },
    "pushsubscriptionchange": {
      "url": "$MDN_URL$/web/api/serviceworkerglobalscope/pushsubscriptionchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Firefox": "44",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>pushsubscriptionchange</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/ServiceWorkerGlobalScope\">global scope</a> of a <a href=\"$MDN_URL$/Web/API/ServiceWorker\"><code>ServiceWorker</code></a> to indicate a change in push subscription that was triggered outside the application's control.</span> This may occur if the subscription was refreshed by the browser, but it may also happen if the subscription has been revoked or lost.</p>"
    },
    "ratechange": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/ratechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p class=\"summary\"><span class=\"seoSummary\">The <code>ratechange</code> event is fired when the playback rate has changed.</span></p>"
    },
    "readystatechange": {
      "url": "$MDN_URL$/web/api/document/readystatechange_event",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>readystatechange</code></strong> event is fired when the <a href=\"$MDN_URL$/Web/API/Document/readyState\" ><code>readyState</code></a> attribute of a document has changed.</p>"
    },
    "rejectionhandled": {
      "url": "$MDN_URL$/web/api/window/rejectionhandled_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "69",
        "Opera": "36",
        "Safari": "11",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>rejectionhandled</code></strong> event is sent to the script's global scope (usually <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a> but also <a href=\"$MDN_URL$/Web/API/Worker\"><code>Worker</code></a>) whenever a JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> is rejected but after the promise rejection has been handled.</span> This can be used in debugging and for general application resiliency, in tandem with the <a href=\"$MDN_URL$/Web/API/Window/unhandledrejection_event\" ><code>unhandledrejection</code></a> event, which is sent when a promise is rejected but there is no handler for the rejection.</p>"
    },
    "removestream": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/removestream_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "24",
        "ChromeAndroid": "25",
        "Edge": "15",
        "Opera": "43"
      },
      "doc": "<p>The obsolete <code><strong>removestream</strong></code> event was sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> to inform it that a <a href=\"$MDN_URL$/Web/API/MediaStream\"><code>MediaStream</code></a> had been removed from the connection.\nYou can use the <code>RTCPeerConnection</code> interface's <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/onremovestream\" ><code>onremovestream</code></a> property to set a handler for this event.</p>\n<p>This is the counterpart to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/addstream_event\" ><code>addstream</code></a> event, which is also obsolete.</p>"
    },
    "removetrack": {
      "url": "$MDN_URL$/web/api/videotracklist/removetrack_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "IE": "10",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <code>removetrack</code> event is fired when a track is removed from a <code><a href=\"$MDN_URL$/Web/API/VideoTrackList\">VideoTrackList</a></code>.</p>"
    },
    "repeatevent": {
      "url": "$MDN_URL$/web/api/svganimationelement/repeatevent_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <code>repeatEvent</code> event of the <a href=\"$MDN_URL$/Web/API/SVGAnimationElement\"><code>SVGAnimationElement</code></a> interface is fired when the element's local timeline repeats. It will be fired each time the element repeats, after the first iteration.</p>"
    },
    "reset": {
      "url": "$MDN_URL$/web/api/htmlformelement/reset_event",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reset</code></strong> event fires when a <a href=\"$MDN_URL$/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> is reset.</p>"
    },
    "resize": {
      "url": "$MDN_URL$/web/api/window/resize_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "4",
        "Opera": "7",
        "Safari": "1.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>resize</code></strong> event fires when the document view (window) has been resized.</span></p>\n<p>In some earlier browsers it was possible to register <code>resize</code> event handlers on any HTML element. It is still possible to set <code>onresize</code> attributes or use <a href=\"$MDN_URL$/Web/API/EventTarget/addEventListener\" ><code>addEventListener()</code></a> to set a handler on any element. However, <code>resize</code> events are only fired on the <a href=\"$MDN_URL$/Web/API/Window\" ><code>window</code></a> object (i.e. returned by <a href=\"$MDN_URL$/Web/API/Document/defaultView\"><code>document.defaultView</code></a>). Only handlers registered on the <code>window</code> object will receive <code>resize</code> events.</p>\n<p>There is a proposal to allow all elements to be notified of resize changes. See <a href=\"https://wicg.github.io/ResizeObserver/\" class=\"external\" rel=\" noopener\">Resize Observer</a> to read the draft document, and <a href=\"https://github.com/WICG/ResizeObserver/issues\" class=\"external\" rel=\" noopener\">GitHub issues</a> to read the on-going discussions.</p>"
    },
    "resourcetimingbufferfull": {
      "url": "$MDN_URL$/web/api/performance/resourcetimingbufferfull_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "46",
        "ChromeAndroid": "46",
        "Edge": "79",
        "Firefox": "",
        "Safari": "11"
      },
      "doc": "<p>The <code>resourcetimingbufferfull</code> event is fired when the browser's <a href=\"$MDN_URL$/Web/API/Performance/setResourceTimingBufferSize\">resource timing buffer</a> is full.</p>"
    },
    "result": {
      "url": "$MDN_URL$/web/api/speechrecognition/result_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>result</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app</p>"
    },
    "resume": {
      "url": "$MDN_URL$/web/api/speechsynthesisutterance/resume_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <code><strong>resume</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance</code></a> object is fired when a paused utterance is resumed.</p>"
    },
    "scroll": {
      "url": "$MDN_URL$/web/api/document/scroll_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "6",
        "IE": "9",
        "Opera": "11.6",
        "Safari": "2",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>scroll</code></strong> event fires when the document view has been scrolled. For element scrolling, see <a href=\"$MDN_URL$/Web/API/Element/scroll_event\" ><code>Element: scroll event</code></a>.</p>"
    },
    "search": {
      "url": "$MDN_URL$/web/api/htmlinputelement/search_event",
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Opera": "",
        "Safari": ""
      },
      "doc": "<p>The <strong><code>search</code></strong> event is fired when a search is initiated using an <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element of <code>type=\"search\"</code>.</p>\n<p>There are several ways a search can be initiated, such as by pressing <kbd>Enter</kbd> while the <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> is focused, or, if the <a href=\"$MDN_URL$/Web/HTML/Element/input#attr-incremental\"><code>incremental</code></a> attribute is present, after a UA-defined timeout elapses since the most recent keystroke (with new keystrokes resetting the timeout so the firing of the event is debounced).</p>\n<p>Current UA implementations of <code>&lt;input type=\"search\"&gt;</code> have an additional control to clear the field. Using this control also fires the <code>search</code> event. In that case the <code>value</code> of the <a href=\"$MDN_URL$/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element will be the empty string.</p>"
    },
    "seeked": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/seeked_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>seeked</code> event is fired when a seek operation completed, the current playback position has changed, and the Boolean <code>seeking</code> attribute is changed to <code>false</code>.</span></p>"
    },
    "seeking": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/seeking_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>seeking</code> event is fired when a seek operation starts, meaning the Boolean <code>seeking</code> attribute has changed to <code>true</code> and the media is seeking a new position.</span></p>"
    },
    "select": {
      "url": "$MDN_URL$/web/api/element/select_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "12.1",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>select</code></strong> event fires when some text has been selected.</p>\n<p>The event is not available for all elements in all languages. For example, in HTML, <code>select</code> events can be dispatched only on form <code><a href=\"$MDN_URL$/Web/HTML/Element/input/text\">&lt;input type=\"text\"&gt;</a></code> and <a href=\"$MDN_URL$/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> elements.</p>"
    },
    "selectedcandidatepairchange": {
      "url": "$MDN_URL$/web/api/rtcicetransport/selectedcandidatepairchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "75",
        "ChromeAndroid": "75",
        "Edge": "79",
        "Opera": "62"
      },
      "doc": "<p><span class=\"seoSummary\">A <strong><code>selectedcandidatepairchange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> when the <a href=\"$MDN_URL$/Glossary/ICE\">ICE</a> agent selects a new pair of candidates that describe the endpoints of a viable connection.</span> The pair of candidates is in turn described by an <a href=\"$MDN_URL$/Web/API/RTCIceCandidatePair\"><code>RTCIceCandidatePair</code></a> object which contains one <a href=\"$MDN_URL$/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a> representing the local end of the connection, and another representing the remote end of the connection.</p>\n<p>Together, the candidates can be used to establish a connection to be used by the <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a>, and, by extension, by an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>.</p>"
    },
    "selectionchange": {
      "url": "$MDN_URL$/web/api/document/selectionchange_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "IE": "",
        "Safari": "1.3",
        "SafariIOS": ""
      },
      "doc": "<p>The <code><strong>selectionchange</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Selection\">Selection API</a> is fired when the current text selection on a document is changed.</p>"
    },
    "selectstart": {
      "url": "$MDN_URL$/web/api/document/selectstart_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "52",
        "IE": "",
        "Safari": "1.3"
      },
      "doc": "<p>The <code><strong>selectstart</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Selection\">Selection API</a> is fired when a user starts a new selection.</p>\n<p>If the event is canceled, the selection is not changed.</p>"
    },
    "shippingaddresschange": {
      "url": "$MDN_URL$/web/api/paymentrequest/shippingaddresschange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "61",
        "ChromeAndroid": "53",
        "Edge": "15",
        "Opera": "47",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>shippingaddresschange</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> object when the user selects a shipping address or changes details of their shipping address.</span></p>"
    },
    "shippingoptionchange": {
      "url": "$MDN_URL$/web/api/paymentrequest/shippingoptionchange_event",
      "status": [
        "Deprecated"
      ],
      "compatibility": {
        "Chrome": "61",
        "ChromeAndroid": "53",
        "Edge": "15",
        "Opera": "47",
        "Safari": "11.1",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\">For payment requests that request shipping information, and for which shipping options are offered, the <code><strong>shippingoptionchange</strong></code> event is sent to the <a href=\"$MDN_URL$/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> whenever the user chooses a shipping option from the list of available options.</span> The string identifying the currently-selected shipping option can be found in the <a href=\"$MDN_URL$/Web/API/PaymentRequest/shippingOption\" ><code>shippingOption</code></a> property.</p>"
    },
    "show": {
      "url": "$MDN_URL$/web/api/element/show_event",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<p>The <strong><code>show</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/API/Element/contextmenu_event\" ><code>contextmenu</code></a> event was fired on/bubbled to an element that has a <a href=\"$MDN_URL$/Web/HTML/Global_attributes/contextmenu\"><code>contextmenu</code> attribute</a>.</p>"
    },
    "signalingstatechange": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/signalingstatechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "28",
        "ChromeAndroid": "28",
        "Edge": "15",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11"
      },
      "doc": "<p>An <strong><code>signalingstatechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> to notify it that its signaling state, as indicated by the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/signalingState\" ><code>signalingState</code></a> property, has changed.</p>"
    },
    "slotchange": {
      "url": "$MDN_URL$/web/api/htmlslotelement/slotchange_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "53",
        "ChromeAndroid": "53",
        "Edge": "79",
        "Firefox": "63",
        "Opera": "40",
        "Safari": "10.1",
        "SafariIOS": "10.3"
      },
      "doc": "<p><span class=\"seoSummary\">The <code><strong>slotchange</strong></code> event is fired on an <a href=\"$MDN_URL$/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a> instance (<a href=\"$MDN_URL$/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> element) when the node(s) contained in that slot change.</span></p>\n<p>In order to trigger a <strong>slotchange</strong> event, one has to set or remove the <code>slot </code>attribute.</p>"
    },
    "soundend": {
      "url": "$MDN_URL$/web/api/speechrecognition/soundend_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>soundend</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when any sound — recognisable speech or not — has stopped being detected.</p>"
    },
    "soundstart": {
      "url": "$MDN_URL$/web/api/speechrecognition/soundstart_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>soundstart</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when any sound — recognisable speech or not — has been detected.</p>"
    },
    "speechend": {
      "url": "$MDN_URL$/web/api/speechrecognition/speechend_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>speechend</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when speech recognized by the speech recognition service has stopped being detected.</p>"
    },
    "speechstart": {
      "url": "$MDN_URL$/web/api/speechrecognition/speechstart_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>speechstart</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when sound recognized by the speech recognition service as speech has been detected.</p>"
    },
    "stalled": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/stalled_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>stalled</code> event is fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</span></p>"
    },
    "start": {
      "url": "$MDN_URL$/web/api/speechrecognition/start_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "",
        "Edge": "79",
        "Safari": "14.1",
        "SafariIOS": "14.5"
      },
      "doc": "<p>The <code><strong>start</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> <a href=\"$MDN_URL$/Web/API/SpeechRecognition\"><code>SpeechRecognition</code></a> object is fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current <code>SpeechRecognition</code>.</p>"
    },
    "statechange": {
      "url": "$MDN_URL$/web/api/rtcicetransport/statechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "75",
        "ChromeAndroid": "75",
        "Edge": "79",
        "Opera": "62"
      },
      "doc": "<p>A <strong><code>statechange</code></strong> event occurs when the <a href=\"$MDN_URL$/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a> changes state. The <a href=\"$MDN_URL$/Web/API/RTCIceTransport/state\" ><code>state</code></a> can be used to determine how far through the process of examining, verifying, and selecting a valid candidate pair is prior to successfully connecting the two peers for WebRTC communications.</p>"
    },
    "storage": {
      "url": "$MDN_URL$/web/api/window/storage_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "15",
        "Firefox": "45",
        "IE": "9",
        "Opera": "15",
        "Safari": "4",
        "SafariIOS": "4"
      },
      "doc": "<p>The <strong><code>storage</code></strong> event of the <a href=\"$MDN_URL$/Web/API/Window\"><code>Window</code></a> interface fires when a storage area (<code>localStorage</code>) has been modified in the context of another document.</p>"
    },
    "submit": {
      "url": "$MDN_URL$/web/api/htmlformelement/submit_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "8",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>submit</code></strong> event fires when a <a href=\"$MDN_URL$/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> is submitted.</p>\n<p>Note that the <code>submit</code> event fires on the <code>&lt;form&gt;</code> element itself, and not on any <a href=\"$MDN_URL$/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> or <a href=\"$MDN_URL$/Web/HTML/Element/input/submit\">&lt;input type=\"submit\"&gt;</a> inside it. However, the <a href=\"$MDN_URL$/Web/API/SubmitEvent\"><code>SubmitEvent</code></a> which is sent to indicate the form's submit action has been triggered includes a <a href=\"$MDN_URL$/Web/API/SubmitEvent/submitter\" ><code>submitter</code></a> property, which is the button that was invoked to trigger the submit request.</p>\n<p>The <code>submit</code> event fires when the user clicks a submit button (<a href=\"$MDN_URL$/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> or <a href=\"$MDN_URL$/Web/HTML/Element/input/submit\">&lt;input type=\"submit\"&gt;</a>) or presses <kbd>Enter</kbd> while editing a field (e.g. <a href=\"$MDN_URL$/Web/HTML/Element/input/text\">&lt;input type=\"text\"&gt;</a>) in a form. The event is not sent to the form when calling the <a href=\"$MDN_URL$/Web/API/HTMLFormElement/submit\" ><code>form.submit()</code></a> method directly.</p>"
    },
    "success": {
      "url": "$MDN_URL$/web/api/idbrequest/success_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "7",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code>success</code> event is fired when an <code>IDBRequest</code> succeeds.</p>"
    },
    "suspend": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/suspend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>suspend</code> event is fired when media data loading has been suspended.</span></p>"
    },
    "timeout": {
      "url": "$MDN_URL$/web/api/xmlhttprequest/timeout_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "18",
        "Firefox": "",
        "IE": "10",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>timeout</code></strong> event is fired when progression is terminated due to preset time expiring.</p>"
    },
    "timeupdate": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/timeupdate_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "3",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "3.5",
        "IE": "9",
        "Opera": "10.5",
        "Safari": "3.1",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>timeupdate</code> event is fired when the time indicated by the <code>currentTime</code> attribute has been updated.</span></p>\n<p>The event frequency is dependant on the system load, but will be thrown between about 4Hz and 66Hz (assuming the event handlers don't take longer than 250ms to run). User agents are encouraged to vary the frequency of the event based on the system load and the average cost of processing the event each time, so that the UI updates are not any more frequent than the user agent can comfortably handle while decoding the video.</p>"
    },
    "toggle": {
      "url": "$MDN_URL$/web/api/htmldetailselement/toggle_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "79",
        "Firefox": "",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The <strong><code>toggle</code></strong> event fires when the <code>open</code>/<code>closed</code> state of a <a href=\"$MDN_URL$/Web/HTML/Element/details\"><code>&lt;details&gt;</code></a> element is toggled.</p>"
    },
    "tonechange": {
      "url": "$MDN_URL$/web/api/rtcdtmfsender/tonechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "27",
        "ChromeAndroid": "27",
        "Edge": "79",
        "Firefox": "52",
        "Opera": "",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "<p>The <strong><code>tonechange</code></strong> event is sent to an <a href=\"$MDN_URL$/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code></a> by the <a href=\"$MDN_URL$/Web/API/WebRTC_API\">WebRTC API</a> to indicate when <a href=\"$MDN_URL$/Glossary/DTMF\">DTMF</a> tones previously queued for sending (by calling <a href=\"$MDN_URL$/Web/API/RTCDTMFSender/insertDTMF\"><code>RTCDTMFSender.insertDTMF()</code></a>) begin and end.</p>\n<p>To determine what tone started playing, or if a tone stopped playing, check the value of the event's <a href=\"$MDN_URL$/Web/API/RTCDTMFToneChangeEvent/tone\" ><code>tone</code></a> property.</p>"
    },
    "touchcancel": {
      "url": "$MDN_URL$/web/api/element/touchcancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>touchcancel</code> event is fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).</span></p>"
    },
    "touchend": {
      "url": "$MDN_URL$/web/api/document/touchend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>touchend</code> event fires when one or more touch points are removed from the touch surface.</span></p>"
    },
    "touchmove": {
      "url": "$MDN_URL$/web/api/document/touchmove_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "22",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "52",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>touchmove</code> event is fired when one or more touch points are moved along the touch surface.</span></p>"
    },
    "track": {
      "url": "$MDN_URL$/web/api/rtcpeerconnection/track_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "64",
        "ChromeAndroid": "64",
        "Edge": "18",
        "Firefox": "22",
        "Opera": "43",
        "Safari": "11",
        "SafariIOS": "11"
      },
      "doc": "<p>The <strong><code>track</code></strong> event is sent to the <a href=\"$MDN_URL$/Web/API/RTCPeerConnection/ontrack\" ><code>ontrack</code></a> event handler on <a href=\"$MDN_URL$/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>s after a new track has been added to an <a href=\"$MDN_URL$/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a> which is part of the connection.</p>\n<p>By the time this event is delivered, the new track has been fully added to the peer connection. See <a href=\"$MDN_URL$/Web/API/RTCTrackEvent#track_event_types\">Track event types</a> in <a href=\"$MDN_URL$/Web/API/RTCTrackEvent\">RTCTrackEvent</a> for details.</p>"
    },
    "transitioncancel": {
      "url": "$MDN_URL$/web/api/htmlelement/transitioncancel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "53",
        "Opera": "62",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "<p>The <strong><code>transitioncancel</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Transitions/Using_CSS_transitions\">CSS transition</a> is canceled.</p>\n<p>See <a href=\"$MDN_URL$/Web/API/GlobalEventHandlers/ontransitioncancel\"><code>GlobalEventHandlers.ontransitioncancel</code></a> for more information.</p>"
    },
    "transitionend": {
      "url": "$MDN_URL$/web/api/htmlelement/transitionend_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "26",
        "ChromeAndroid": "26",
        "Edge": "79",
        "Firefox": "51",
        "IE": "10",
        "Opera": "12.1",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <strong><code>transitionend</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Transitions/Using_CSS_transitions\">CSS transition</a> has completed. In the case where a transition is removed before completion, such as if the <a href=\"$MDN_URL$/Web/CSS/transition-property\"><code>transition-property</code></a> is removed or <a href=\"$MDN_URL$/Web/CSS/display\"><code>display</code></a> is set to <code>none</code>, then the event will not be generated.</p>\n<p>The <code>transitionend</code> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state. If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.  If the <code>transitioncancel</code> event is fired, the <code>transitionend</code> event will not fire.</p>"
    },
    "transitionrun": {
      "url": "$MDN_URL$/web/api/htmlelement/transitionrun_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "53",
        "Opera": "62",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "<p>The <strong><code>transitionrun</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Transitions/Using_CSS_transitions\">CSS transition</a> is first created, i.e. before any <a href=\"$MDN_URL$/Web/CSS/transition-delay\"><code>transition-delay</code></a> has begun.</p>"
    },
    "transitionstart": {
      "url": "$MDN_URL$/web/api/htmlelement/transitionstart_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "74",
        "ChromeAndroid": "74",
        "Edge": "79",
        "Firefox": "53",
        "Opera": "62",
        "Safari": "13.1",
        "SafariIOS": "13.4"
      },
      "doc": "<p>The <strong><code>transitionstart</code></strong> event is fired when a <a href=\"$MDN_URL$/Web/CSS/CSS_Transitions/Using_CSS_transitions\">CSS transition</a> has actually started, i.e., after any <a href=\"$MDN_URL$/Web/CSS/transition-delay\"><code>transition-delay</code></a> has ended.</p>"
    },
    "underflow": {
      "url": "$MDN_URL$/web/api/element/underflow_event",
      "compatibility": {
        "Firefox": ""
      },
      "doc": "<p><span class=\"seoSummary\">The non-standard <code>underflow</code> event, which is specific to Firefox, is fired when an element is no longer overflowed by its content.</span> This only works for elements for which <a href=\"$MDN_URL$/Web/CSS/overflow\"><code>overflow</code></a> is <em>not</em> set to <code>visible</code>.</p>\n<p>The counterpart <code><a href=\"$MDN_URL$/Web/API/Element/overflow_event\">overflow</a></code> event is fired when overflow occurs.</p>"
    },
    "unhandledrejection": {
      "url": "$MDN_URL$/web/api/window/unhandledrejection_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "49",
        "ChromeAndroid": "49",
        "Edge": "79",
        "Firefox": "69",
        "Opera": "36",
        "Safari": "11",
        "SafariIOS": "11.3"
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>unhandledrejection</code></strong> event is sent to the global scope of a script when a JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that has no rejection handler is rejected; typically, this is the <a href=\"$MDN_URL$/Web/API/Window\"><code>window</code></a>, but may also be a <a href=\"$MDN_URL$/Web/API/Worker\"><code>Worker</code></a>.</span> This is useful for debugging and for providing fallback error handling for unexpected situations.</p>"
    },
    "unload": {
      "url": "$MDN_URL$/web/api/window/unload_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "4",
        "Opera": "4",
        "Safari": "3",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <strong><code>unload</code></strong> event is fired when the document or a child resource is being unloaded.</span></p>\n<p>It is fired after:</p>\n<p>The document is in the following state:</p>\n<p>Please note that the unload event also follows the document tree: parent frame unload will happen <strong>before</strong> child frame <code>unload</code> (see example below).</p>"
    },
    "unmute": {
      "url": "$MDN_URL$/web/api/mediastreamtrack/unmute_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "59",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code><strong>unmute</strong></code> event is sent to a <a href=\"$MDN_URL$/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> when the track's source is once again able to provide media data after a period of not being able to do so.</span> This ends the <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/muted\" ><code>muted</code></a> state that began with the <a href=\"$MDN_URL$/Web/API/MediaStreamTrack/mute_event\" ><code>mute</code></a> event.</p>"
    },
    "upgradeneeded": {
      "url": "$MDN_URL$/web/api/idbopendbrequest/upgradeneeded_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "7",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code>upgradeneeded</code> event is fired when an attempt was made to open a database with a version number higher than its current version.</p>"
    },
    "versionchange": {
      "url": "$MDN_URL$/web/api/idbdatabase/versionchange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "23",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "10",
        "Opera": "15",
        "Safari": "7",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code>versionchange</code> event is fired when a database structure change (<a href=\"$MDN_URL$/Web/API/IDBOpenDBRequest/onupgradeneeded\" ><code>IDBOpenDBRequest.onupgradeneeded</code></a> event or <a href=\"$MDN_URL$/Web/API/IDBFactory/deleteDatabase\" ><code>IDBFactory.deleteDatabase</code></a>) was requested.</p>"
    },
    "visibilitychange": {
      "url": "$MDN_URL$/web/api/document/visibilitychange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "",
        "Firefox": "56",
        "IE": "10",
        "Opera": "20"
      },
      "doc": "<p>The <code>visibilitychange</code> event is fired at the document when the contents of its tab have become visible or have been hidden.</p>"
    },
    "voiceschanged": {
      "url": "$MDN_URL$/web/api/speechsynthesis/voiceschanged_event",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "33",
        "ChromeAndroid": "33",
        "Edge": "14",
        "Firefox": "49",
        "Opera": "21",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <code><strong>voiceschanged</strong></code> event of the <a href=\"$MDN_URL$/Web/API/Web_Speech_API\">Web Speech API</a> is fired when the list of <a href=\"$MDN_URL$/Web/API/SpeechSynthesisVoice\"><code>SpeechSynthesisVoice</code></a> objects that would be returned by the <a href=\"$MDN_URL$/Web/API/SpeechSynthesis/getVoices\"><code>SpeechSynthesis.getVoices()</code></a> method has changed (when the <code>voiceschanged</code> event fires.)</p>"
    },
    "volumechange": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/volumechange_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>volumechange</code> event is fired when the volume has changed.</span></p>"
    },
    "vrdisplayactivate": {
      "url": "$MDN_URL$/web/api/window/vrdisplayactivate_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplayactivate</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a VR display is able to be presented to, for example if an HMD has been moved to bring it out of standby, or woken up by being put on.</p>"
    },
    "vrdisplayblur": {
      "url": "$MDN_URL$/web/api/window/vrdisplayblur_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "<p>The <strong><code>vrdisplayblur</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when presentation to a VR display has been paused for some reason by the browser, OS, or VR hardware — for example, while the user is interacting with a system menu or browser, to prevent tracking or loss of experience.</p>"
    },
    "vrdisplayconnect": {
      "url": "$MDN_URL$/web/api/window/vrdisplayconnect_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "",
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplayconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is connected to the computer.</p>"
    },
    "vrdisplayconnected": {
      "url": "$MDN_URL$/web/api/window/vrdisplayconnect_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "",
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplayconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is connected to the computer.</p>"
    },
    "vrdisplaydeactivate": {
      "url": "$MDN_URL$/web/api/window/vrdisplaydeactivate_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplaydeactivate</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a VR display can no longer be presented to, for example if an HMD has gone into standby or sleep mode due to a period of inactivity.</p>"
    },
    "vrdisplaydisconnect": {
      "url": "$MDN_URL$/web/api/window/vrdisplaydisconnect_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "56",
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplaydisconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is disconnected from the computer.</p>"
    },
    "vrdisplaydisconnected": {
      "url": "$MDN_URL$/web/api/window/vrdisplaydisconnect_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "56",
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplaydisconnect</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when a compatible VR display is disconnected from the computer.</p>"
    },
    "vrdisplayfocus": {
      "url": "$MDN_URL$/web/api/window/vrdisplayfocus_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {},
      "doc": "<p>The <strong><code>vrdisplayfocus</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when presentation to a VR display has resumed after being blurred.</p>"
    },
    "vrdisplaypresentchange": {
      "url": "$MDN_URL$/web/api/window/vrdisplaypresentchange_event",
      "status": [
        "Experimental",
        "StandardTrack",
        "Deprecated"
      ],
      "compatibility": {
        "ChromeAndroid": "56",
        "Edge": "15",
        "Firefox": "55*,64*"
      },
      "doc": "<p>The <strong><code>vrdisplaypresentchange</code></strong> event of the <a href=\"$MDN_URL$/Web/API/WebVR_API\">WebVR API</a> is fired when the presenting state of a VR display changes — i.e. goes from presenting to not presenting, or vice versa.</p>"
    },
    "waiting": {
      "url": "$MDN_URL$/web/api/htmlmediaelement/waiting_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "",
        "ChromeAndroid": "",
        "Edge": "",
        "Firefox": "",
        "IE": "9",
        "Opera": "",
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The <code>waiting</code> event is fired when playback has stopped because of a temporary lack of data.</span></p>"
    },
    "webglcontextcreationerror": {
      "url": "$MDN_URL$/web/api/htmlcanvaselement/webglcontextcreationerror_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "49",
        "IE": "11",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code><strong>webglcontextcreationerror</strong></code> event of the <a href=\"$MDN_URL$/Web/API/WebGL_API\">WebGL API</a> is fired if the user agent is unable to create a <a href=\"$MDN_URL$/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> context.</p>\n<p>This event has a <a href=\"$MDN_URL$/Web/API/WebGLContextEvent/statusMessage\"><code>WebGLContextEvent.statusMessage</code></a> property, which can contain a platform dependent string with more information about the failure.</p>"
    },
    "webglcontextlost": {
      "url": "$MDN_URL$/web/api/htmlcanvaselement/webglcontextlost_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "4",
        "IE": "11",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code><strong>webglcontextlost</strong></code> event of the <a href=\"$MDN_URL$/Web/API/WebGL_API\">WebGL API</a> is fired if the user agent detects that the drawing buffer associated with a <a href=\"$MDN_URL$/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> object has been lost.</p>"
    },
    "webglcontextrestored": {
      "url": "$MDN_URL$/web/api/htmlcanvaselement/webglcontextrestored_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "9",
        "ChromeAndroid": "25",
        "Edge": "",
        "Firefox": "4",
        "IE": "11",
        "Opera": "12",
        "Safari": "5.1",
        "SafariIOS": "8"
      },
      "doc": "<p>The <code><strong>webglcontextrestored</strong></code> event of the <a href=\"$MDN_URL$/Web/API/WebGL_API\">WebGL API</a> is fired if the user agent restores the drawing buffer for a <a href=\"$MDN_URL$/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a> object.</p>\n<p>Once the context is restored, WebGL resources such as textures and buffers that were created before the context was lost are no longer valid. You need to reinitialize the state of your WebGL application and recreate resources.</p>"
    },
    "webkitmouseforcechanged": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforcechanged_event",
      "compatibility": {
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">The non-standard <strong><code>webkitmouseforcechanged</code></strong> event is fired by Safari each time the amount of pressure changes on the trackpad/touchscreen.</span></p>\n<p><strong><code>webkitmouseforcechanged</code></strong> is a proprietary, WebKit-specific event introduced by Apple to support their <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature.</p>\n<p>This event first fires after the <code><a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" >mousedown</a></code> event and stops firing before the <code><a href=\"$MDN_URL$/Web/API/Element/mouseup_event\" >mouseup</a></code> event.</p>"
    },
    "webkitmouseforcedown": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforcedown_event",
      "compatibility": {
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>After a <a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" ><code>mousedown</code></a> event has been fired at the element, if and when sufficient pressure has been applied to the mouse or trackpad button to qualify as a \"force click,\" Safari begins sending <code><strong>webkitmouseforcedown</strong></code> events to the element.</p>\n<p><strong><code>webkitmouseforcedown</code></strong> is a proprietary, WebKit-specific event. It is part of the <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature.</p>"
    },
    "webkitmouseforceup": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforceup_event",
      "compatibility": {
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p>The non-standard <code><strong>webkitmouseforceup</strong></code> event is fired by Safari at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> some time after the <code><a href=\"$MDN_URL$/Web/API/Element/webkitmouseforcedown_event\" >webkitmouseforcedown</a></code> event, when pressure on the button has been reduced sufficiently to end the \"force click\".</p>\n<p><strong><code>webkitmouseforceup</code></strong> is a proprietary, WebKit-specific event. It is part of the <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature.</p>"
    },
    "webkitmouseforcewillbegin": {
      "url": "$MDN_URL$/web/api/element/webkitmouseforcewillbegin_event",
      "compatibility": {
        "Safari": "",
        "SafariIOS": ""
      },
      "doc": "<p><span class=\"seoSummary\">Safari for macOS fires the non-standard <code><strong>webkitmouseforcewillbegin</strong></code> event at an <a href=\"$MDN_URL$/Web/API/Element\"><code>Element</code></a> before firing the initial <code><a href=\"$MDN_URL$/Web/API/Element/mousedown_event\" >mousedown</a></code> event.</span> This offers the opportunity to tell the system not to trigger any default Force Touch actions if and when the click turns into a <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch event</a>.</p>\n<p>To instruct macOS not to engage any default Force Touch actions if the user apply enough pressure to activate a Force Touch event, call <a href=\"$MDN_URL$/Web/API/Event/preventDefault\" ><code>preventDefault()</code></a> on the <code>webkitmouseforcewillbegin</code> event object.</p>\n<p><strong><code>webkitmouseforcewillbegin</code></strong> is a proprietary, WebKit-specific event. It is part of the <a href=\"$MDN_URL$/Web/API/Force_Touch_events\">Force Touch events</a> feature.</p>"
    },
    "wheel": {
      "url": "$MDN_URL$/web/api/element/wheel_event",
      "status": [
        "StandardTrack"
      ],
      "compatibility": {
        "Chrome": "61",
        "ChromeAndroid": "61",
        "Edge": "",
        "Firefox": "17",
        "IE": "9",
        "Opera": "48",
        "Safari": "7",
        "SafariIOS": "7"
      },
      "doc": "<p>The <strong><code>wheel</code></strong> event fires when the user rotates a wheel button on a pointing device (typically a mouse).</p>\n<p>This event replaces the non-standard deprecated <a href=\"$MDN_URL$/Web/API/Element/mousewheel_event\" ><code>mousewheel</code></a> event.</p>"
    }
  }
}