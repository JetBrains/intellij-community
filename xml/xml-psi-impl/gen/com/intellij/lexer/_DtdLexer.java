/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_DtdLexer.flex</tt>
 */
public class _DtdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DECL = 2;
  public static final int DECL_ATTR = 4;
  public static final int DECL_ATTR_VALUE_DQ = 6;
  public static final int DECL_ATTR_VALUE_SQ = 8;
  public static final int TAG_NAME = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int COMMENT = 14;
  public static final int ATTRIBUTE_VALUE_START = 16;
  public static final int ATTRIBUTE_VALUE_DQ = 18;
  public static final int ATTRIBUTE_VALUE_SQ = 20;
  public static final int PROCESSING_INSTRUCTION = 22;
  public static final int DOCTYPE_MARKUP_STARTED = 24;
  public static final int DOCTYPE = 26;
  public static final int DOCTYPE_EXTERNAL_ID = 28;
  public static final int DOCTYPE_MARKUP = 30;
  public static final int DOCTYPE_MARKUP_DQ = 32;
  public static final int DOCTYPE_MARKUP_SQ = 34;
  public static final int CDATA = 36;
  public static final int CONDITIONAL = 38;
  public static final int DOCTYPE_COMMENT = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13504 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\15"+
    "\1\24\1\52\1\53\1\54\1\55\1\56\1\57\2\15\1\60\1\53\1\54\1\61\1\1\1\62\1\1"+
    "\1\63\1\64\1\21\1\54\1\65\1\1\1\66\1\15\1\67\1\70\1\53\1\54\1\65\1\1\1\57"+
    "\1\15\1\40\1\71\1\72\1\73\1\74\1\1\1\66\2\1\1\75\1\35\1\54\1\50\1\1\1\76\1"+
    "\15\1\1\1\75\1\35\1\54\1\77\1\1\1\56\1\15\1\100\1\75\1\35\1\12\1\101\1\56"+
    "\1\102\1\15\1\41\1\103\1\104\1\12\1\105\1\106\3\1\1\24\2\12\1\107\1\106\3"+
    "\1\1\110\1\111\1\112\1\113\1\114\1\115\2\1\1\66\3\1\1\116\1\12\1\117\1\1\1"+
    "\120\7\1\2\12\1\27\1\102\1\1\1\121\1\122\1\123\1\124\1\1\2\12\1\125\2\12\1"+
    "\126\24\12\1\127\1\130\2\12\1\127\2\12\1\131\1\132\1\13\3\12\1\132\3\12\1"+
    "\27\2\1\1\12\1\1\5\12\1\133\1\24\45\12\1\134\1\12\1\24\1\27\4\12\1\27\1\135"+
    "\1\136\1\15\1\12\1\15\1\12\1\15\1\136\1\66\3\12\1\137\1\1\1\140\4\1\5\12\1"+
    "\26\2\12\1\141\4\12\1\37\1\12\1\142\3\1\1\12\1\143\1\46\2\12\1\144\1\12\1"+
    "\74\3\1\1\12\1\106\3\12\1\46\4\1\1\145\5\1\1\103\2\12\1\137\1\146\3\1\1\147"+
    "\1\12\1\150\1\41\2\12\1\37\1\1\2\12\1\137\1\1\1\36\1\41\1\12\1\143\6\1\1\151"+
    "\1\152\14\12\4\1\21\12\1\133\2\12\1\133\1\153\1\12\1\143\3\12\1\154\1\155"+
    "\1\156\1\117\1\155\7\1\1\157\1\1\1\117\6\1\1\160\1\161\1\162\1\163\1\164\3"+
    "\1\1\165\147\1\2\12\1\142\2\12\1\142\10\12\1\166\1\167\2\12\1\125\3\12\1\170"+
    "\1\1\1\12\1\106\4\171\4\1\1\102\35\1\1\172\2\1\1\173\1\24\4\12\1\174\1\24"+
    "\4\12\1\126\1\103\1\12\1\143\1\24\4\12\1\142\1\1\1\12\1\27\3\1\1\12\40\1\133"+
    "\12\1\37\4\1\135\12\1\37\2\1\10\12\1\117\4\1\2\12\1\143\20\12\1\117\1\12\1"+
    "\175\1\1\2\12\1\142\1\102\1\12\1\143\4\12\1\37\2\1\1\176\1\177\5\12\1\200"+
    "\1\12\1\143\1\26\3\1\1\176\1\201\1\12\1\30\1\1\3\12\1\137\1\177\2\12\1\137"+
    "\3\1\1\202\1\41\1\12\1\37\1\12\1\106\1\1\1\12\1\117\1\47\2\12\1\30\1\102\1"+
    "\1\1\203\1\204\2\12\1\45\1\1\1\205\1\1\1\12\1\206\3\12\1\207\1\210\1\211\1"+
    "\27\1\63\1\212\1\213\1\171\2\12\1\126\1\37\7\12\1\30\1\1\72\12\1\137\1\12"+
    "\1\214\2\12\1\144\20\1\26\12\1\143\6\12\1\74\2\1\1\106\1\215\1\54\1\216\1"+
    "\217\6\12\1\15\1\1\1\147\25\12\1\143\1\1\4\12\1\177\2\12\1\26\2\1\1\144\7"+
    "\1\1\203\7\12\1\117\2\1\1\24\1\27\1\24\1\27\1\220\4\12\1\142\1\221\1\222\2"+
    "\1\1\223\1\12\1\13\1\224\2\143\2\1\7\12\1\27\30\1\1\12\1\117\3\12\1\66\2\1"+
    "\2\12\1\1\1\12\1\225\2\12\1\37\1\12\1\143\2\12\1\226\3\1\11\12\1\143\6\1\2"+
    "\12\1\26\3\12\1\137\11\1\23\12\1\106\1\12\1\37\1\26\11\1\1\227\2\12\1\230"+
    "\1\12\1\37\1\12\1\106\1\12\1\142\4\1\1\12\1\231\1\12\1\37\1\12\1\74\4\1\3"+
    "\12\1\232\4\1\1\66\1\233\1\12\1\137\2\1\1\12\1\117\1\12\1\117\2\1\1\116\1"+
    "\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12"+
    "\1\30\3\12\1\30\60\1\1\147\2\12\1\26\4\1\1\147\2\12\2\1\1\12\1\45\1\1\1\147"+
    "\1\12\1\106\2\1\2\12\1\234\1\147\2\12\1\30\1\235\1\236\2\1\1\12\1\21\1\144"+
    "\5\1\1\237\1\240\1\45\2\12\1\142\2\1\1\70\1\53\1\54\1\65\1\1\1\241\1\15\21"+
    "\1\3\12\1\1\1\242\13\1\2\12\1\142\2\1\1\243\2\1\3\12\1\1\1\244\3\1\2\12\1"+
    "\27\5\1\1\12\1\74\30\1\4\12\1\1\1\102\34\1\3\12\1\45\20\1\71\12\1\74\16\1"+
    "\14\12\1\137\53\1\2\12\1\142\75\1\44\12\1\106\33\1\43\12\1\45\1\12\1\142\7"+
    "\1\1\12\1\143\1\1\3\12\1\1\1\137\1\1\1\147\1\245\1\12\67\1\4\12\1\46\1\66"+
    "\3\1\1\147\6\1\1\15\77\1\6\12\1\27\1\117\1\45\1\74\66\1\5\12\1\203\3\12\1"+
    "\136\1\246\1\247\1\250\3\12\1\251\1\252\1\12\1\253\1\254\1\35\24\12\1\255"+
    "\1\12\1\35\1\126\1\12\1\126\1\12\1\203\1\12\1\203\1\142\1\12\1\142\1\12\1"+
    "\54\1\12\1\54\1\12\1\205\3\1\14\12\1\46\123\1\1\250\1\12\1\256\1\257\1\260"+
    "\1\261\1\262\1\263\1\264\1\144\1\265\1\144\24\1\55\12\1\106\2\1\103\12\1\46"+
    "\15\12\1\143\150\12\1\15\25\1\41\12\1\143\36\1");

  /* The ZZ_CMAP_A table has 2912 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\3\1\0\2\3\22\0\1\40\1\7\1\43\1\32\1\0\1\31\1\27\1\42\1\51\1\52\1\54"+
    "\1\53\1\56\1\5\1\4\1\62\12\2\1\1\1\30\1\6\1\41\1\16\1\35\1\0\1\13\1\50\1\11"+
    "\1\12\1\23\1\60\1\24\1\1\1\17\2\1\1\21\1\47\1\20\1\25\1\45\1\57\1\26\1\46"+
    "\1\14\1\22\2\1\1\61\1\44\1\1\1\10\1\0\1\15\1\0\1\1\1\0\6\34\5\1\1\37\1\36"+
    "\12\1\1\33\2\1\1\0\1\55\15\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12\1\4\0\14"+
    "\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3"+
    "\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1\1\6\0\10\1\10"+
    "\0\13\1\5\0\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\2\1\1\0\16"+
    "\1\15\0\11\1\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3"+
    "\0\1\1\7\0\11\1\7\0\5\1\17\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1\4\0\10\1\2\0\2"+
    "\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0"+
    "\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3\0\3\1\20\0\11\1\1"+
    "\0\2\1\1\0\2\1\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1"+
    "\13\0\10\1\1\0\2\1\10\0\3\1\5\0\4\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0"+
    "\1\1\21\0\1\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2\1"+
    "\15\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1\1\0\24"+
    "\1\13\0\5\1\3\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0"+
    "\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\0"+
    "\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1\1\3\0\11\1\1\0\1\1\5\0\17\1\1\0\16\1"+
    "\2\0\14\1\13\0\1\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3\0\2\1\11"+
    "\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3"+
    "\0\4\1\2\0\6\1\5\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6"+
    "\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1\13"+
    "\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0\2\1"+
    "\3\0\7\1\6\0\3\1\12\0\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4"+
    "\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\0\5\1\1\0\3\1\1\0\10\1\4\0"+
    "\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0"+
    "\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0"+
    "\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1"+
    "\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1"+
    "\1\12\0\4\1\25\0\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0"+
    "\3\1\4\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2"+
    "\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1"+
    "\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12"+
    "\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1"+
    "\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\0\1\2\14\0\1\2\1\3\1\4"+
    "\1\5\1\3\1\6\1\3\1\6\1\7\2\6\1\10"+
    "\2\6\1\11\1\12\1\13\5\1\1\14\5\1\1\15"+
    "\1\5\1\16\1\17\1\20\1\6\1\2\1\6\4\2"+
    "\1\21\1\22\4\1\1\23\6\24\1\6\1\25\1\26"+
    "\2\16\2\6\1\16\1\6\1\16\1\27\1\30\1\16"+
    "\1\31\1\32\1\33\1\6\1\34\1\35\1\36\2\16"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\3\3"+
    "\2\6\1\0\1\46\1\47\4\0\1\50\10\1\1\51"+
    "\2\0\4\2\1\52\1\53\2\16\2\0\1\16\1\0"+
    "\2\16\4\0\2\16\4\0\1\54\1\0\1\55\5\0"+
    "\1\56\1\57\2\0\1\55\1\56\1\57\2\1\1\55"+
    "\1\56\1\57\2\1\1\60\1\0\1\55\1\56\1\0"+
    "\1\57\2\2\2\16\1\0\1\16\1\61\1\16\4\0"+
    "\2\16\1\0\1\62\2\0\1\63\7\0\1\64\1\0"+
    "\1\1\1\64\2\1\1\64\1\1\1\2\1\64\1\2"+
    "\2\16\1\0\1\65\1\16\4\0\2\16\11\0\2\1"+
    "\1\2\2\16\1\65\1\66\4\0\2\16\10\0\1\67"+
    "\2\1\1\2\1\70\1\71\3\0\1\72\1\73\1\74"+
    "\1\0\1\75\6\0\2\1\1\2\2\0\1\76\1\77"+
    "\4\0\1\100\1\0\2\1\1\2\1\101\1\0\1\102"+
    "\1\103\1\104\1\0\1\105\3\102\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u042f\0\u0561\0\u0594\0\u04c8\0\u042f"+
    "\0\u052e\0\u05c7\0\u042f\0\u042f\0\u042f\0\u05fa\0\u062d\0\u0660"+
    "\0\u0693\0\u06c6\0\u042f\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u042f\0\u042f\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u042f\0\u042f\0\u042f\0\u04c8"+
    "\0\u04fb\0\u052e\0\u042f\0\u042f\0\u0594\0\u04c8\0\u04fb\0\u052e"+
    "\0\u09f6\0\u0a29\0\u042f\0\u042f\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u04c8\0\u042f\0\u0bc1\0\u04fb\0\u042f"+
    "\0\u052e\0\u0bf4\0\u042f\0\u042f\0\u042f\0\u0c27\0\u0c5a\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u0c8d\0\u0cc0"+
    "\0\u04fb\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u042f\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u042f\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\u0f8a\0\u0fbd\0\u0ff0\0\u042f\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u042f\0\u042f\0\u1155\0\u1188\0\u0ac2\0\u0af5"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u042f\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u042f\0\u042f"+
    "\0\u15ea\0\u161d\0\u1650\0\u05fa\0\u05fa\0\u1683\0\u16b6\0\u16e9"+
    "\0\u06f9\0\u06f9\0\u171c\0\u174f\0\u042f\0\u1782\0\u17b5\0\u08c4"+
    "\0\u17e8\0\u08c4\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a"+
    "\0\u085e\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u042f\0\u1ae5\0\u1b18\0\u042f\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u042f\0\u1cb0\0\u1ce3\0\u05fa"+
    "\0\u1d16\0\u1d49\0\u06f9\0\u1d7c\0\u1daf\0\u08c4\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u085e\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112"+
    "\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa"+
    "\0\u042f\0\u085e\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u042f\0\u25a7\0\u25da\0\u260d\0\u085e\0\u085e\0\u2640\0\u2673"+
    "\0\u26a6\0\u042f\0\u085e\0\u085e\0\u26d9\0\u042f\0\u270c\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u042f\0\u042f\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u042f"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u042f\0\u2ad5\0\u042f\0\u042f"+
    "\0\u042f\0\u2b08\0\u042f\0\u05fa\0\u06f9\0\u08c4\0\u042f\0\u042f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\26\1\27\2\26\1\30\6\26\1\31\11\26\1\32"+
    "\1\26\1\33\6\26\1\27\22\26\1\34\1\35\1\34"+
    "\1\27\2\34\1\36\2\34\4\35\1\37\1\40\10\35"+
    "\1\32\1\34\1\41\1\34\2\35\1\42\2\35\1\27"+
    "\3\34\5\35\6\34\3\35\4\34\1\27\2\34\1\36"+
    "\6\34\1\37\11\34\1\32\1\34\1\41\6\34\1\27"+
    "\1\43\1\44\1\45\17\34\6\46\1\47\6\46\1\50"+
    "\11\46\1\51\1\46\1\52\11\46\1\53\17\46\6\54"+
    "\1\55\6\54\1\56\11\54\1\57\1\54\1\60\10\54"+
    "\1\53\20\54\1\34\1\61\1\34\1\27\2\34\1\62"+
    "\2\34\4\61\1\37\1\34\10\61\1\32\1\34\1\41"+
    "\1\34\2\61\1\34\2\61\1\27\3\34\5\61\6\34"+
    "\3\61\2\34\1\63\1\34\1\27\2\34\1\62\2\34"+
    "\4\63\1\37\1\64\10\63\1\32\1\34\1\41\1\34"+
    "\2\63\1\34\2\63\1\27\1\65\2\34\5\63\6\34"+
    "\3\63\1\66\5\67\1\70\1\71\6\67\1\72\11\67"+
    "\1\73\1\67\1\74\31\67\3\34\1\27\2\34\1\62"+
    "\6\34\1\37\1\64\10\34\1\32\1\34\1\41\6\34"+
    "\1\27\1\34\1\75\1\76\16\34\1\66\6\77\1\62"+
    "\6\77\1\100\11\77\1\101\1\77\1\102\11\77\1\103"+
    "\25\77\1\62\6\77\1\100\11\77\1\101\1\77\1\102"+
    "\10\77\1\103\20\77\6\104\1\105\6\104\1\106\11\104"+
    "\1\107\1\104\1\110\3\104\1\111\25\104\5\34\1\112"+
    "\1\36\6\34\1\37\11\34\1\32\1\34\1\41\32\34"+
    "\1\63\1\34\1\27\2\34\1\36\1\34\1\113\4\63"+
    "\1\37\1\114\10\63\1\32\1\34\1\41\1\34\2\63"+
    "\1\34\2\63\1\27\3\34\1\63\1\115\1\116\2\63"+
    "\6\34\3\63\4\34\1\27\2\34\1\36\1\34\1\113"+
    "\4\34\1\37\1\114\10\34\1\32\1\34\1\41\6\34"+
    "\1\27\1\34\1\117\1\120\20\34\2\63\1\27\1\63"+
    "\1\121\1\122\2\34\2\63\1\123\1\63\1\124\1\125"+
    "\4\63\1\126\3\63\1\127\1\130\1\131\1\132\2\63"+
    "\1\133\2\63\1\27\1\34\1\134\1\135\1\63\1\136"+
    "\1\137\2\63\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\3\63\1\34\6\46\1\47\6\46\1\50\11\46\1\51"+
    "\1\46\1\52\11\46\1\146\17\46\6\54\1\55\6\54"+
    "\1\56\11\54\1\57\1\54\1\60\10\54\1\146\20\54"+
    "\6\26\1\147\6\26\1\150\11\26\1\151\1\26\1\33"+
    "\31\26\3\34\1\27\2\34\1\36\1\34\1\113\4\34"+
    "\1\37\1\34\1\152\7\34\1\32\1\34\1\41\6\34"+
    "\1\27\22\34\5\67\1\153\1\71\6\67\1\72\11\67"+
    "\1\73\1\67\1\74\31\67\66\0\1\27\34\0\1\27"+
    "\31\0\1\154\25\0\1\155\24\0\1\156\15\0\1\157"+
    "\46\0\1\160\7\0\4\160\2\0\10\160\3\0\1\161"+
    "\2\160\1\0\2\160\4\0\5\160\6\0\3\160\2\0"+
    "\1\160\7\0\4\160\2\0\10\160\4\0\2\160\1\0"+
    "\2\160\4\0\5\160\6\0\3\160\2\0\2\35\1\0"+
    "\2\35\3\0\4\35\2\0\10\35\4\0\2\35\1\0"+
    "\2\35\4\0\5\35\6\0\3\35\10\0\1\162\71\0"+
    "\1\163\44\0\43\46\1\0\26\46\1\164\33\46\1\0"+
    "\34\46\1\165\25\46\1\0\20\46\1\166\7\46\4\166"+
    "\2\46\10\166\3\46\1\167\2\166\1\46\2\166\3\46"+
    "\1\0\5\166\6\46\3\166\2\46\1\166\7\46\4\166"+
    "\2\46\10\166\4\46\2\166\1\46\2\166\3\46\1\0"+
    "\5\166\6\46\3\166\1\46\42\54\1\0\27\54\1\170"+
    "\32\54\1\0\35\54\1\171\24\54\1\0\21\54\1\172"+
    "\7\54\4\172\2\54\10\172\3\54\1\173\2\172\1\54"+
    "\2\172\2\54\1\0\1\54\5\172\6\54\3\172\2\54"+
    "\1\172\7\54\4\172\2\54\10\172\4\54\2\172\1\54"+
    "\2\172\2\54\1\0\1\54\5\172\6\54\3\172\1\54"+
    "\1\0\2\61\1\0\2\61\3\0\4\61\2\0\10\61"+
    "\4\0\2\61\1\0\2\61\4\0\5\61\6\0\3\61"+
    "\10\0\1\162\52\0\1\156\1\0\2\63\1\0\2\63"+
    "\3\0\4\63\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\5\63\6\0\3\63\17\0\1\174\44\0\5\67"+
    "\1\175\62\67\1\176\62\67\1\175\1\67\1\177\60\67"+
    "\1\175\7\67\1\200\46\67\1\201\3\67\1\175\3\67"+
    "\4\201\2\67\10\201\3\67\1\202\2\201\1\67\2\201"+
    "\4\67\5\201\6\67\3\201\2\67\1\201\3\67\1\175"+
    "\3\67\4\201\2\67\10\201\4\67\2\201\1\67\2\201"+
    "\4\67\5\201\6\67\3\201\1\67\16\0\1\203\51\0"+
    "\1\204\56\0\2\63\1\0\2\63\3\0\4\63\2\0"+
    "\3\63\1\205\4\63\4\0\2\63\1\0\2\63\4\0"+
    "\5\63\6\0\3\63\2\0\2\63\1\0\2\63\3\0"+
    "\4\63\2\0\10\63\4\0\2\63\1\0\2\63\4\0"+
    "\1\206\4\63\6\0\3\63\1\0\42\207\1\77\20\207"+
    "\43\210\1\77\17\210\1\0\2\63\1\0\1\63\1\211"+
    "\3\0\4\63\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\5\63\6\0\3\63\10\0\1\212\54\0\2\63"+
    "\1\0\2\63\3\0\4\63\2\0\1\63\1\213\6\63"+
    "\4\0\2\63\1\0\2\63\4\0\5\63\6\0\3\63"+
    "\2\0\2\63\1\0\2\63\3\0\4\63\2\0\10\63"+
    "\4\0\2\63\1\0\2\63\4\0\3\63\1\214\1\63"+
    "\6\0\3\63\20\0\1\215\6\0\1\216\16\0\1\217"+
    "\12\0\1\220\3\0\2\63\1\0\2\63\3\0\4\63"+
    "\2\0\3\63\1\221\4\63\4\0\2\63\1\0\2\63"+
    "\4\0\5\63\6\0\3\63\2\0\2\63\1\0\2\63"+
    "\3\0\4\63\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\1\222\4\63\6\0\3\63\10\0\1\223\70\0"+
    "\1\224\65\0\1\225\3\0\1\226\36\0\5\67\1\227"+
    "\55\67\5\0\1\230\2\0\1\231\1\0\1\232\1\233"+
    "\4\0\1\234\2\0\1\235\72\0\1\236\45\0\1\237"+
    "\45\0\2\160\1\0\2\160\3\0\4\160\2\0\10\160"+
    "\1\0\1\240\2\0\2\160\1\0\2\160\4\0\5\160"+
    "\6\0\3\160\3\0\1\241\30\0\1\242\34\0\1\230"+
    "\2\0\1\231\52\0\10\46\1\243\32\46\1\0\35\46"+
    "\1\244\24\46\1\0\20\46\2\166\1\46\2\166\3\46"+
    "\4\166\2\46\10\166\1\46\1\245\2\46\2\166\1\46"+
    "\2\166\3\46\1\0\5\166\6\46\3\166\3\46\1\246"+
    "\30\46\1\247\7\46\1\0\17\46\10\54\1\250\31\54"+
    "\1\0\36\54\1\251\23\54\1\0\21\54\2\172\1\54"+
    "\2\172\3\54\4\172\2\54\10\172\1\54\1\252\2\54"+
    "\2\172\1\54\2\172\2\54\1\0\1\54\5\172\6\54"+
    "\3\172\3\54\1\253\30\54\1\254\6\54\1\0\20\54"+
    "\5\67\1\0\55\67\16\0\1\255\44\0\5\67\1\256"+
    "\2\67\1\257\57\67\1\175\10\67\1\260\45\67\2\201"+
    "\1\67\1\201\1\261\3\67\4\201\2\67\10\201\1\67"+
    "\1\262\2\67\2\201\1\67\2\201\4\67\5\201\6\67"+
    "\3\201\3\67\1\263\2\67\1\175\25\67\1\264\27\67"+
    "\1\0\2\63\1\0\2\63\3\0\4\63\2\0\10\63"+
    "\4\0\2\63\1\0\2\63\4\0\4\63\1\265\6\0"+
    "\3\63\2\0\2\63\1\0\2\63\3\0\4\63\2\0"+
    "\10\63\4\0\2\63\1\0\2\63\4\0\2\63\1\266"+
    "\2\63\6\0\3\63\1\0\1\267\2\211\1\267\1\211"+
    "\1\270\3\267\4\211\2\267\10\211\4\267\2\211\1\267"+
    "\2\211\4\267\5\211\6\267\3\211\1\267\5\0\1\230"+
    "\2\0\1\231\2\0\1\233\4\0\1\234\2\0\1\235"+
    "\40\0\2\63\1\0\2\63\3\0\4\63\2\0\10\63"+
    "\4\0\2\63\1\0\2\63\4\0\1\271\4\63\6\0"+
    "\3\63\2\0\2\63\1\0\2\63\3\0\4\63\2\0"+
    "\10\63\4\0\2\63\1\0\2\63\4\0\1\63\1\272"+
    "\3\63\6\0\3\63\50\0\1\273\36\0\1\274\50\0"+
    "\1\275\70\0\1\276\44\0\2\63\1\0\2\63\3\0"+
    "\4\63\2\0\10\63\4\0\2\63\1\0\2\63\4\0"+
    "\4\63\1\277\6\0\3\63\2\0\2\63\1\0\2\63"+
    "\3\0\4\63\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\2\63\1\300\2\63\6\0\3\63\6\0\1\301"+
    "\2\0\1\231\70\0\1\302\55\0\1\303\71\0\1\304"+
    "\47\0\1\305\66\0\1\306\76\0\1\307\51\0\1\310"+
    "\73\0\1\311\55\0\1\312\1\313\77\0\1\314\26\0"+
    "\1\241\25\0\1\315\34\0\1\316\6\0\3\316\7\0"+
    "\1\316\10\0\1\316\13\0\1\316\7\0\1\316\2\0"+
    "\11\46\1\317\31\46\1\0\21\46\1\246\25\46\1\320"+
    "\12\46\1\0\21\46\1\321\6\46\3\321\7\46\1\321"+
    "\10\46\1\321\6\46\1\0\4\46\1\321\7\46\1\321"+
    "\2\46\11\54\1\322\30\54\1\0\22\54\1\253\25\54"+
    "\1\323\11\54\1\0\22\54\1\324\6\54\3\324\7\54"+
    "\1\324\10\54\1\324\5\54\1\0\5\54\1\324\7\54"+
    "\1\324\2\54\5\67\1\305\62\67\1\175\3\67\1\325"+
    "\52\67\2\201\1\67\1\201\1\160\3\67\4\201\2\67"+
    "\10\201\1\67\1\262\2\67\2\201\1\67\2\201\4\67"+
    "\5\201\6\67\3\201\3\67\1\263\2\67\1\175\22\67"+
    "\1\326\34\67\1\327\2\67\1\175\3\67\3\327\7\67"+
    "\1\327\10\67\1\327\13\67\1\327\7\67\1\327\2\67"+
    "\1\0\2\63\1\0\2\63\3\0\4\63\2\0\2\63"+
    "\1\330\5\63\4\0\2\63\1\0\2\63\4\0\5\63"+
    "\6\0\3\63\2\0\2\63\1\0\2\63\3\0\3\63"+
    "\1\331\2\0\10\63\4\0\2\63\1\0\2\63\4\0"+
    "\5\63\6\0\3\63\1\0\5\267\1\332\56\267\2\211"+
    "\1\267\1\211\1\333\3\267\4\211\2\267\10\211\4\267"+
    "\2\211\1\267\2\211\4\267\5\211\6\267\3\211\1\267"+
    "\1\0\2\63\1\0\2\63\3\0\3\63\1\334\2\0"+
    "\10\63\4\0\2\63\1\0\2\63\4\0\5\63\6\0"+
    "\3\63\46\0\1\335\74\0\1\336\15\0\1\337\131\0"+
    "\1\340\2\0\2\63\1\0\2\63\3\0\4\63\2\0"+
    "\2\63\1\341\5\63\4\0\2\63\1\0\2\63\4\0"+
    "\5\63\6\0\3\63\2\0\2\63\1\0\2\63\3\0"+
    "\3\63\1\342\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\5\63\6\0\3\63\6\0\1\26\76\0\1\343"+
    "\66\0\1\344\47\0\1\345\61\0\1\346\65\0\1\347"+
    "\62\0\1\350\62\0\1\351\71\0\1\352\76\0\1\353"+
    "\25\0\1\316\6\0\3\316\7\0\1\316\4\0\1\315"+
    "\3\0\1\316\13\0\1\316\7\0\1\316\2\0\12\46"+
    "\1\354\30\46\1\0\21\46\1\321\6\46\3\321\7\46"+
    "\1\321\4\46\1\320\3\46\1\321\6\46\1\0\4\46"+
    "\1\321\7\46\1\321\2\46\12\54\1\355\27\54\1\0"+
    "\22\54\1\324\6\54\3\324\7\54\1\324\4\54\1\323"+
    "\3\54\1\324\5\54\1\0\5\54\1\324\7\54\1\324"+
    "\2\54\5\67\1\175\4\67\1\356\52\67\1\327\2\67"+
    "\1\175\3\67\3\327\7\67\1\327\4\67\1\326\3\67"+
    "\1\327\13\67\1\327\7\67\1\327\2\67\1\0\2\63"+
    "\1\0\2\63\3\0\4\63\2\0\1\357\7\63\4\0"+
    "\2\63\1\0\2\63\4\0\5\63\6\0\3\63\2\0"+
    "\2\63\1\0\2\63\3\0\4\63\2\0\4\63\1\360"+
    "\3\63\4\0\2\63\1\0\2\63\4\0\5\63\6\0"+
    "\3\63\1\0\5\267\1\361\55\267\1\0\2\63\1\0"+
    "\2\63\3\0\4\63\2\0\10\63\4\0\2\63\1\0"+
    "\2\63\4\0\1\362\4\63\6\0\3\63\22\0\1\363"+
    "\63\0\1\364\53\0\1\365\72\0\1\366\40\0\2\63"+
    "\1\0\2\63\3\0\4\63\2\0\1\367\7\63\4\0"+
    "\2\63\1\0\2\63\4\0\5\63\6\0\3\63\2\0"+
    "\2\63\1\0\2\63\3\0\4\63\2\0\4\63\1\370"+
    "\3\63\4\0\2\63\1\0\2\63\4\0\5\63\6\0"+
    "\3\63\23\0\1\371\66\0\1\372\47\0\1\373\63\0"+
    "\1\374\67\0\1\375\54\0\1\376\66\0\1\377\112\0"+
    "\1\u0100\53\0\1\u0101\22\0\13\46\1\u0102\27\46\1\0"+
    "\17\46\13\54\1\u0103\26\54\1\0\20\54\5\67\1\175"+
    "\5\67\1\u0104\47\67\1\0\2\63\1\0\2\63\3\0"+
    "\1\u0105\3\63\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\5\63\6\0\3\63\2\0\2\63\1\0\2\63"+
    "\3\0\4\63\2\0\10\63\4\0\2\63\1\0\2\63"+
    "\4\0\3\63\1\u0106\1\63\6\0\3\63\20\0\1\u0107"+
    "\62\0\1\u0108\57\0\1\u0109\60\0\1\u010a\51\0\2\63"+
    "\1\0\2\63\3\0\1\u010b\3\63\2\0\10\63\4\0"+
    "\2\63\1\0\2\63\4\0\5\63\6\0\3\63\2\0"+
    "\2\63\1\0\2\63\3\0\4\63\2\0\10\63\4\0"+
    "\2\63\1\0\2\63\4\0\3\63\1\u010c\1\63\6\0"+
    "\3\63\13\0\1\u010d\73\0\1\u010e\53\0\1\u010f\112\0"+
    "\1\u0110\35\0\1\u0111\57\0\1\u0112\62\0\1\u0113\71\0"+
    "\1\u0114\37\0\14\46\1\u0115\26\46\1\0\17\46\14\54"+
    "\1\u0116\25\54\1\0\20\54\5\67\1\175\6\67\1\u0117"+
    "\46\67\23\0\1\u0118\65\0\1\u0119\47\0\1\u011a\72\0"+
    "\1\u011b\52\0\1\u011c\114\0\1\u011d\63\0\1\u011e\33\0"+
    "\1\u011f\107\0\1\u0120\36\0\1\u0121\42\0\13\46\1\u0122"+
    "\27\46\1\0\17\46\13\54\1\u0123\26\54\1\0\20\54"+
    "\5\67\1\175\5\67\1\u0124\47\67\12\0\1\u0125\73\0"+
    "\1\u0126\47\0\1\u0127\75\0\1\u0128\53\0\1\u0129\73\0"+
    "\1\u012a\51\0\1\u012b\46\0\10\46\1\u012c\32\46\1\0"+
    "\17\46\10\54\1\u012d\31\54\1\0\20\54\5\67\1\175"+
    "\2\67\1\u012e\52\67\12\0\1\u012f\70\0\1\u0130\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11067];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\2\0\1\1\14\0\1\1\1\11\5\1"+
    "\1\11\3\1\1\11\2\1\3\11\5\1\1\11\10\1"+
    "\2\11\7\1\3\11\3\1\2\11\6\1\2\11\10\1"+
    "\1\11\2\1\1\11\2\1\3\11\2\1\7\11\5\1"+
    "\1\0\1\1\1\11\4\0\1\11\10\1\1\11\2\0"+
    "\4\1\2\11\2\1\2\0\1\1\1\0\2\1\4\0"+
    "\2\1\4\0\1\11\1\0\1\1\5\0\2\11\2\0"+
    "\12\1\1\11\1\0\2\1\1\0\5\1\1\0\3\1"+
    "\4\0\2\1\1\0\1\11\2\0\1\11\7\0\1\11"+
    "\1\0\13\1\1\0\2\1\4\0\2\1\11\0\5\1"+
    "\1\11\1\1\4\0\2\1\10\0\1\11\5\1\3\0"+
    "\1\11\2\1\1\0\1\11\6\0\3\1\2\0\2\11"+
    "\4\0\1\11\1\0\3\1\1\11\1\0\3\11\1\0"+
    "\1\11\3\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private boolean isHighlightModeOn = false;

   public _DtdLexer(boolean highlightModeOn) {
     this((java.io.Reader)null);
     isHighlightModeOn = highlightModeOn;
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DtdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          case 72: break;
          case 2: 
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          case 73: break;
          case 3: 
            { return XmlTokenType.XML_DATA_CHARACTERS;
            }
          case 74: break;
          case 4: 
            { return XmlTokenType.XML_WHITE_SPACE;
            }
          case 75: break;
          case 5: 
            { yybegin(TAG_NAME); return XmlTokenType.XML_START_TAG_START;
            }
          case 76: break;
          case 6: 
            { return XmlTokenType.XML_BAD_CHARACTER;
            }
          case 77: break;
          case 7: 
            { yybegin(DECL_ATTR); return XmlTokenType.XML_NAME;
            }
          case 78: break;
          case 8: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
            }
          case 79: break;
          case 9: 
            { return XmlTokenType.XML_EQ;
            }
          case 80: break;
          case 10: 
            { yybegin(DECL_ATTR_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          case 81: break;
          case 11: 
            { yybegin(DECL_ATTR_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          case 82: break;
          case 12: 
            { yybegin(DECL); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          case 83: break;
          case 13: 
            { yybegin(TAG_ATTRIBUTES); return isHighlightModeOn ? XmlTokenType.XML_TAG_NAME:XmlTokenType.XML_NAME;
            }
          case 84: break;
          case 14: 
            { return XmlTokenType.XML_NAME;
            }
          case 85: break;
          case 15: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
            }
          case 86: break;
          case 16: 
            { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
            }
          case 87: break;
          case 17: 
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          case 88: break;
          case 18: 
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          case 89: break;
          case 19: 
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          case 90: break;
          case 20: 
            { return XmlTokenType.XML_PI_TARGET;
            }
          case 91: break;
          case 21: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_MARKUP_START;
            }
          case 92: break;
          case 22: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
            }
          case 93: break;
          case 23: 
            { yybegin(DOCTYPE); return XmlTokenType.XML_MARKUP_END;
            }
          case 94: break;
          case 24: 
            { return XmlTokenType.XML_TAG_END;
            }
          case 95: break;
          case 25: 
            { return XmlTokenType.XML_AMP;
            }
          case 96: break;
          case 26: 
            { return XmlTokenType.XML_SEMI;
            }
          case 97: break;
          case 27: 
            { return XmlTokenType.XML_PERCENT;
            }
          case 98: break;
          case 28: 
            { return XmlTokenType.XML_QUESTION;
            }
          case 99: break;
          case 29: 
            { yybegin(DOCTYPE_MARKUP_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          case 100: break;
          case 30: 
            { yybegin(DOCTYPE_MARKUP_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          case 101: break;
          case 31: 
            { return XmlTokenType.XML_LEFT_PAREN;
            }
          case 102: break;
          case 32: 
            { return XmlTokenType.XML_RIGHT_PAREN;
            }
          case 103: break;
          case 33: 
            { return XmlTokenType.XML_PLUS;
            }
          case 104: break;
          case 34: 
            { return XmlTokenType.XML_STAR;
            }
          case 105: break;
          case 35: 
            { return XmlTokenType.XML_BAR;
            }
          case 106: break;
          case 36: 
            { return XmlTokenType.XML_COMMA;
            }
          case 107: break;
          case 37: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          case 108: break;
          case 38: 
            { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
            }
          case 109: break;
          case 39: 
            { yybegin(TAG_NAME); return XmlTokenType.XML_END_TAG_START;
            }
          case 110: break;
          case 40: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_DECL_END;
            }
          case 111: break;
          case 41: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            }
          case 112: break;
          case 42: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
            }
          case 113: break;
          case 43: 
            { yybegin(DOCTYPE_COMMENT); return XmlTokenType.XML_COMMENT_START;
            }
          case 114: break;
          case 44: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_COMMENT_END;
            }
          case 115: break;
          case 45: 
            { yybegin(CONDITIONAL); return XmlTokenType.XML_CONDITIONAL_SECTION_START;
            }
          case 116: break;
          case 46: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_CONDITIONAL_SECTION_END;
            }
          case 117: break;
          case 47: 
            { return XmlTokenType.XML_ENTITY_REF_TOKEN;
            }
          case 118: break;
          case 48: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
            }
          case 119: break;
          case 49: 
            { return XmlTokenType.XML_CONTENT_ANY;
            }
          case 120: break;
          case 50: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_CDATA_END;
            }
          case 121: break;
          case 51: 
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
            }
          case 122: break;
          case 52: 
            { return XmlTokenType.XML_CHAR_ENTITY_REF;
            }
          case 123: break;
          case 53: 
            { yybegin(DOCTYPE_MARKUP_STARTED); yypushback(yylength());
            }
          case 124: break;
          case 54: 
            { return XmlTokenType.XML_CONTENT_EMPTY;
            }
          case 125: break;
          case 55: 
            { yybegin(DECL); return XmlTokenType.XML_DECL_START;
            }
          case 126: break;
          case 56: 
            { yybegin(DOCTYPE_EXTERNAL_ID); return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
          case 127: break;
          case 57: 
            { yybegin(DOCTYPE_EXTERNAL_ID); return XmlTokenType.XML_DOCTYPE_SYSTEM;
            }
          case 128: break;
          case 58: 
            { return XmlTokenType.XML_ATT_FIXED;
            }
          case 129: break;
          case 59: 
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
          case 130: break;
          case 60: 
            { return XmlTokenType.XML_DOCTYPE_SYSTEM;
            }
          case 131: break;
          case 61: 
            { return XmlTokenType.XML_CONDITIONAL_IGNORE;
            }
          case 132: break;
          case 62: 
            { return XmlTokenType.XML_PCDATA;
            }
          case 133: break;
          case 63: 
            { return XmlTokenType.XML_CONDITIONAL_INCLUDE;
            }
          case 134: break;
          case 64: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ENTITY_DECL_START;
            }
          case 135: break;
          case 65: 
            { return XmlTokenType.XML_ATT_IMPLIED;
            }
          case 136: break;
          case 66: 
            { yybegin(CDATA); return XmlTokenType.XML_CDATA_START;
            }
          case 137: break;
          case 67: 
            { yybegin(DOCTYPE); return XmlTokenType.XML_DOCTYPE_START;
            }
          case 138: break;
          case 68: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ATTLIST_DECL_START;
            }
          case 139: break;
          case 69: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ELEMENT_DECL_START;
            }
          case 140: break;
          case 70: 
            { return XmlTokenType.XML_ATT_REQUIRED;
            }
          case 141: break;
          case 71: 
            { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_NOTATION_DECL_START;
            }
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
