org.jetbrains.jps.api.CanceledStatus
- sf:NULL:org.jetbrains.jps.api.CanceledStatus
- a:isCanceled():Z
f:org.jetbrains.jps.builders.impl.java.JavacCompilerTool
- org.jetbrains.jps.builders.java.JavaCompilingTool
- sf:ALTERNATIVE_ID:java.lang.String
- sf:ID:java.lang.String
- <init>():V
- createCompiler():javax.tools.JavaCompiler
- getAdditionalClasspath():java.util.List
- getAlternativeId():java.lang.String
- getDefaultCompilerOptions():java.util.List
- getDescription():java.lang.String
- getId():java.lang.String
- isCompilerTreeAPISupported():Z
f:org.jetbrains.jps.builders.java.CannotCreateJavaCompilerException
- java.lang.Exception
- <init>(java.lang.String):V
a:org.jetbrains.jps.builders.java.JavaCompilingTool
- <init>():V
- a:createCompiler():javax.tools.JavaCompiler
- a:getAdditionalClasspath():java.util.List
- getAlternativeId():java.lang.String
- getDefaultCompilerOptions():java.util.List
- a:getDescription():java.lang.String
- a:getId():java.lang.String
- isCompilerTreeAPISupported():Z
- preprocessOptions(java.util.List):V
a:org.jetbrains.jps.builders.java.JavaSourceTransformer
- <init>():V
- s:getTransformers():java.util.Collection
- a:transform(java.io.File,java.lang.CharSequence):java.lang.CharSequence
a:org.jetbrains.jps.builders.java.JavaSourceTransformer$TransformError
- java.io.IOException
- p:<init>(java.lang.String):V
- p:<init>(java.lang.String,java.lang.Throwable):V
- p:<init>(java.lang.Throwable):V
f:org.jetbrains.jps.incremental.BinaryContent
- <init>(B[]):V
- <init>(B[],I,I):V
- getBuffer():B[]
- getLength():I
- getOffset():I
- saveToFile(java.io.File):V
- toByteArray():B[]
f:org.jetbrains.jps.javac.APIWrappers
- <init>():V
- s:unwrap(java.lang.Class,java.lang.Object):java.lang.Object
a:org.jetbrains.jps.javac.AbstractRefCollectorCompilerToolExtension
- org.jetbrains.jps.javac.JavaCompilerToolExtension
- <init>():V
- f:beforeCompileTaskExecution(org.jetbrains.jps.builders.java.JavaCompilingTool,javax.tools.JavaCompiler$CompilationTask,java.lang.Iterable,org.jetbrains.jps.javac.DiagnosticOutputConsumer):V
- pa:isEnabled():Z
org.jetbrains.jps.javac.DiagnosticOutputConsumer
- javax.tools.DiagnosticListener
- a:customOutputData(java.lang.String,java.lang.String,B[]):V
- a:javaFileLoaded(java.io.File):V
- a:outputLineAvailable(java.lang.String):V
- a:registerJavacFileData(org.jetbrains.jps.javac.ast.api.JavacFileData):V
f:org.jetbrains.jps.javac.ExternalRefCollectorCompilerToolExtension
- org.jetbrains.jps.javac.AbstractRefCollectorCompilerToolExtension
- sf:ENABLED_PARAM:java.lang.String
- <init>():V
f:org.jetbrains.jps.javac.Iterators
- <init>():V
- s:asIterable(java.lang.Object):java.lang.Iterable
- s:asIterable(java.lang.Object[]):java.lang.Iterable
- s:asIterator(java.lang.Iterable):java.util.Iterator
- s:asIterator(java.lang.Object):java.util.Iterator
- s:collect(java.lang.Iterable,java.util.Collection):java.util.Collection
- s:contains(java.lang.Iterable,java.lang.Object):Z
- s:count(java.lang.Iterable):I
- s:equals(java.lang.Iterable,java.lang.Iterable):Z
- s:equals(java.lang.Iterable,java.lang.Iterable,org.jetbrains.jps.javac.Iterators$BiFunction):Z
- s:filter(java.lang.Iterable,org.jetbrains.jps.javac.Iterators$BooleanFunction):java.lang.Iterable
- s:filter(java.util.Iterator,org.jetbrains.jps.javac.Iterators$BooleanFunction):java.util.Iterator
- s:filterWithOrder(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable
- s:filterWithOrder(java.util.Iterator,java.util.Iterator):java.util.Iterator
- s:find(java.lang.Iterable,org.jetbrains.jps.javac.Iterators$BooleanFunction):java.lang.Object
- s:flat(java.lang.Iterable):java.lang.Iterable
- s:flat(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable
- s:flat(java.util.Collection):java.lang.Iterable
- s:flat(java.util.Iterator):java.util.Iterator
- s:flat(java.util.Iterator,java.util.Iterator):java.util.Iterator
- s:hashCode(java.lang.Iterable):I
- s:isEmpty(java.lang.Iterable):Z
- s:isEmptyCollection(java.lang.Iterable):Z
- s:lazy(org.jetbrains.jps.javac.Iterators$Provider):java.lang.Iterable
- s:map(java.lang.Iterable,org.jetbrains.jps.javac.Iterators$Function):java.lang.Iterable
- s:map(java.util.Iterator,org.jetbrains.jps.javac.Iterators$Function):java.util.Iterator
- s:notNullFilter():org.jetbrains.jps.javac.Iterators$BooleanFunction
- s:recurse(java.lang.Object,org.jetbrains.jps.javac.Iterators$Function,Z):java.lang.Iterable
- s:recurseDepth(java.lang.Object,org.jetbrains.jps.javac.Iterators$Function,Z):java.lang.Iterable
- s:reverse(java.util.List):java.lang.Iterable
- s:unique(java.lang.Iterable):java.lang.Iterable
- s:unique(java.util.Iterator):java.util.Iterator
- s:uniqueBy(java.lang.Iterable,org.jetbrains.jps.javac.Iterators$Provider):java.lang.Iterable
org.jetbrains.jps.javac.Iterators$BiFunction
- a:fun(java.lang.Object,java.lang.Object):java.lang.Object
org.jetbrains.jps.javac.Iterators$BooleanFunction
- a:fun(java.lang.Object):Z
org.jetbrains.jps.javac.Iterators$Function
- a:fun(java.lang.Object):java.lang.Object
org.jetbrains.jps.javac.Iterators$Provider
- a:get():java.lang.Object
a:org.jetbrains.jps.javac.JavaCompilerToolExtension
- <init>():V
- beforeCompileTaskExecution(org.jetbrains.jps.builders.java.JavaCompilingTool,javax.tools.JavaCompiler$CompilationTask,java.lang.Iterable,org.jetbrains.jps.javac.DiagnosticOutputConsumer):V
- s:getExtensions():java.util.Collection
a:org.jetbrains.jps.javac.JpsFileObject
- javax.tools.SimpleJavaFileObject
- <init>(java.net.URI,javax.tools.JavaFileObject$Kind,javax.tools.JavaFileManager$Location):V
- equals(java.lang.Object):Z
- ps:findKind(java.lang.String):javax.tools.JavaFileObject$Kind
- getLocation():javax.tools.JavaFileManager$Location
- hashCode():I
- pa:inferBinaryName(java.lang.Iterable,Z):java.lang.String
- ps:loadCharContent(java.io.File,java.lang.String):java.lang.CharSequence
- openReader(Z):java.io.Reader
f:org.jetbrains.jps.javac.JpsInfoDiagnostic
- org.jetbrains.jps.javac.PlainMessageDiagnostic
- <init>(java.lang.String):V
a:org.jetbrains.jps.javac.ModulePath
- sf:EMPTY:org.jetbrains.jps.javac.ModulePath
- <init>():V
- s:create(java.util.Collection):org.jetbrains.jps.javac.ModulePath
- a:getModuleName(java.io.File):java.lang.String
- a:getPath():java.util.Collection
- isEmpty():Z
- s:newBuilder():org.jetbrains.jps.javac.ModulePath$Builder
org.jetbrains.jps.javac.ModulePath$Builder
- a:add(java.lang.String,java.io.File):org.jetbrains.jps.javac.ModulePath$Builder
- a:create():org.jetbrains.jps.javac.ModulePath
org.jetbrains.jps.javac.OutputFileConsumer
- a:save(org.jetbrains.jps.javac.OutputFileObject):V
f:org.jetbrains.jps.javac.OutputFileObject
- org.jetbrains.jps.javac.JpsFileObject
- getCharContent(Z):java.lang.CharSequence
- getClassName():java.lang.String
- getContent():org.jetbrains.jps.incremental.BinaryContent
- getFile():java.io.File
- getOutputRoot():java.io.File
- getRelativePath():java.lang.String
- getSourceFiles():java.lang.Iterable
- getSourceUris():java.lang.Iterable
- isGenerated():Z
- openInputStream():java.io.InputStream
- openOutputStream():java.io.ByteArrayOutputStream
- openWriter():java.io.Writer
- updateContent(B[]):V
c:org.jetbrains.jps.javac.PlainMessageDiagnostic
- javax.tools.Diagnostic
- <init>(javax.tools.Diagnostic$Kind,java.lang.String):V
- getCode():java.lang.String
- getColumnNumber():J
- getEndPosition():J
- getKind():javax.tools.Diagnostic$Kind
- getLineNumber():J
- getMessage(java.util.Locale):java.lang.String
- getPosition():J
- getSource():javax.tools.JavaFileObject
- getStartPosition():J
