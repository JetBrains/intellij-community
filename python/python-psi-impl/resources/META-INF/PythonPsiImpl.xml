<idea-plugin>

  <extensions defaultExtensionNs="com.intellij">
    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyReferenceExpression"
                             implementationClass="com.jetbrains.python.psi.impl.PyReferenceExpressionManipulator"/>

    <projectService serviceInterface="com.jetbrains.python.psi.PyElementGenerator"
                    serviceImplementation="com.jetbrains.python.psi.impl.PyElementGeneratorImpl"/>

    <projectService serviceInterface="com.jetbrains.python.psi.PyPsiFacade"
                    serviceImplementation="com.jetbrains.python.psi.impl.PyPsiFacadeImpl"/>

    <projectService serviceInterface="com.jetbrains.python.debugger.PySignatureCacheManager"
                    serviceImplementation="com.jetbrains.python.debugger.PySignatureCacheManagerImpl"/>

    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndexInsensitive"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyFunctionNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PySuperClassIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyVariableNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyDecoratorStubIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassAttributesIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyExportedModuleAttributeIndex"/>
    <fileBasedIndex implementation="com.jetbrains.python.psi.stubs.PyModuleNameIndex"/>
    <fileBasedIndex implementation="com.jetbrains.python.psi.stubs.PySetuptoolsNamespaceIndex"/>

    <definitionsSearch implementation="com.jetbrains.python.psi.search.PyDefinitionsSearch"/>

    <stubElementTypeHolder class="com.jetbrains.python.PyStubElementTypes" externalIdPrefix="py."/>

    <gotoDeclarationHandler implementation="com.jetbrains.python.codeInsight.PyBreakContinueGotoProvider" order="FIRST"/>
    <gotoDeclarationHandler implementation="com.jetbrains.python.psi.impl.PyGotoDeclarationHandler"/>

    <targetElementEvaluator language="Python" implementationClass="com.jetbrains.python.codeInsight.PyTargetElementEvaluator"/>

    <filePropertyPusher implementation="com.jetbrains.python.psi.impl.PythonLanguageLevelPusher"/>

    <applicationService serviceImplementation="com.jetbrains.python.codeInsight.PyCodeInsightSettings"/>

    <weigher key="completion" implementationClass="com.jetbrains.python.codeInsight.completion.PythonCompletionWeigher" order="first"/>

    <referencesSearch implementation="com.jetbrains.python.psi.search.PyInitReferenceSearchExecutor"/>
    <referencesSearch implementation="com.jetbrains.python.psi.search.PyKeywordArgumentSearchExecutor"/>
    <referencesSearch implementation="com.jetbrains.python.psi.search.PyStringReferenceSearch"/>

    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyStringLiteralExpression"
                             implementationClass="com.jetbrains.python.psi.impl.PyStringLiteralExpressionManipulator"/>
    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyKeywordArgument"
                             implementationClass="com.jetbrains.python.psi.impl.PyKeywordArgumentManipulator"/>
    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyKeywordPattern"
                             implementationClass="com.jetbrains.python.psi.impl.references.PyKeywordPatternManipulator"/>
    <lang.parserDefinition language="Python" implementationClass="com.jetbrains.python.PythonParserDefinition"/>

    <lang.formatter language="Python" implementationClass="com.jetbrains.python.formatter.PythonFormattingModelBuilder"/>
    <preFormatProcessor implementation="com.jetbrains.python.formatter.PyPreFormatProcessor"/>
    <postFormatProcessor implementation="com.jetbrains.python.formatter.PyTrailingBlankLinesPostFormatProcessor"/>
    <postFormatProcessor implementation="com.jetbrains.python.formatter.PyFromImportPostFormatProcessor"/>
    <lang.whiteSpaceFormattingStrategy language="Python"
                                       implementationClass="com.jetbrains.python.formatter.PyWhiteSpaceFormattingStrategy"/>
    <lang.lineWrapStrategy language="Python" implementationClass="com.jetbrains.python.formatter.PyLineWrapPositionStrategy"/>

    <lang.commenter language="Python" implementationClass="com.jetbrains.python.PythonCommenter"/>

    <!-- PyFunctionTypeAnnotation -->
    <lang.parserDefinition language="PyFunctionTypeComment"
                           implementationClass="com.jetbrains.python.codeInsight.functionTypeComments.PyFunctionTypeAnnotationParserDefinition"/>

    <lang.parserDefinition language="PyTypeHint"
                           implementationClass="com.jetbrains.python.codeInsight.typeHints.PyTypeHintParserDefinition"/>

    <moduleService serviceInterface="com.jetbrains.python.psi.resolve.PythonPathCache"
                   serviceImplementation="com.jetbrains.python.psi.resolve.PythonModulePathCache"/>

    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.documentation.PythonDocumentationProvider" id="pythonDocumentationProvider"/>

    <applicationService serviceImplementation="com.jetbrains.python.documentation.PythonDocumentationMap"/>

    <moduleService serviceImplementation="com.jetbrains.python.documentation.PyDocumentationSettings$ModuleService"/>
    <applicationService serviceImplementation="com.jetbrains.python.documentation.PyDocumentationSettings$AppService"/>

    <applicationService serviceInterface="com.jetbrains.python.codeInsight.imports.ImportLocationHelper"
                        serviceImplementation="com.jetbrains.python.codeInsight.imports.PyImportLocationHelper"/>

    <psi.referenceContributor implementation="com.jetbrains.python.codeInsight.PyStdReferenceContributor" language="Python"/>
    <psi.referenceContributor implementation="com.jetbrains.python.documentation.docstrings.DocStringReferenceContributor"
                              language="Python"/>
    <psi.referenceContributor implementation="com.jetbrains.python.codeInsight.PythonFormattedStringReferenceContributor"
                              language="Python"/>

    <lang.importOptimizer language="Python" implementationClass="com.jetbrains.python.codeInsight.imports.PyImportOptimizer"/>

    <!-- PyDocstring -->
    <languageInjector implementation="com.jetbrains.python.documentation.doctest.PyDocstringLanguageInjector"/>
    <lang.parserDefinition language="Doctest" implementationClass="com.jetbrains.python.documentation.doctest.PyDocstringParserDefinition"/>
    <highlightErrorFilter implementation="com.jetbrains.python.documentation.doctest.PyDocstringErrorFilter"/>
    <lang.formatter language="Doctest" implementationClass="com.jetbrains.python.documentation.doctest.PyDocstringFormattingModelBuilder"/>


    <lang.parserDefinition language="PythonStub" implementationClass="com.jetbrains.python.pyi.PyiParserDefinition"/>

    <controlFlowProvider implementation="com.jetbrains.python.codeInsight.controlflow.PyControlFlowProvider"/>

    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PySuperMethodCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyDocstringCompletionContributor"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.python.documentation.docstrings.DocStringTagCompletionContributor"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.python.documentation.docstrings.DocStringSectionHeaderCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyKeywordCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PySpecialMethodNamesCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PySuperClassAttributesCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyDictKeyNamesCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyDictLiteralCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyParameterCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyMetaClassCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyStructuralTypeAttributesCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyDataclassCompletionContributor"/>

    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyStringFormatCompletionContributor" />

    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyClassNameCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyModulePackageCompletionContributor"/>
    <completion.contributor language="Python" order="first"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyModuleNameCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyUnresolvedModuleAttributeCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyFStringLikeCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyMultipleArgumentsCompletionContributor"/>

    <lang.tokenSeparatorGenerator language="Python" implementationClass="com.jetbrains.python.PyTokenSeparatorGenerator"/>

    <lang.ast.factory language="Python" implementationClass="com.jetbrains.python.psi.impl.PythonASTFactory"/>

    <lang.inspectionSuppressor language="Python" implementationClass="com.jetbrains.python.inspections.PyInspectionsSuppressor"/>

    <inlineActionHandler implementation="com.jetbrains.python.refactoring.inline.PyInlineLocalHandler"/>
    <inlineActionHandler implementation="com.jetbrains.python.refactoring.inline.PyInlineFunctionHandler"/>

    <localInspection language="Python" shortName="PyUnusedLocalInspection" suppressId="PyUnusedLocal" bundle="messages.PyPsiBundle" key="INSP.NAME.unused" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.unusedLocal.PyUnusedLocalInspection"/>
    <localInspection language="Python" shortName="PyRedundantParenthesesInspection" suppressId="PyRedundantParentheses" bundle="messages.PyPsiBundle" key="INSP.NAME.redundant.parentheses" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyRedundantParenthesesInspection"/>
    <localInspection language="Python" shortName="PySimplifyBooleanCheckInspection" suppressId="PySimplifyBooleanCheck" bundle="messages.PyPsiBundle" key="INSP.NAME.check.can.be.simplified" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PySimplifyBooleanCheckInspection"/>
    <localInspection language="Python" shortName="PyDefaultArgumentInspection" suppressId="PyDefaultArgument" bundle="messages.PyPsiBundle" key="INSP.NAME.default.argument" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDefaultArgumentInspection"/>
    <localInspection language="Python" shortName="PyArgumentEqualDefaultInspection" suppressId="PyArgumentEqualDefault" bundle="messages.PyPsiBundle" key="INSP.NAME.argument.equal.default" groupKey="INSP.GROUP.python" enabledByDefault="false" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyArgumentEqualDefaultInspection"/>
    <localInspection language="Python" shortName="PyAssignmentToLoopOrWithParameterInspection" suppressId="PyAssignmentToLoopOrWithParameter" bundle="messages.PyPsiBundle" key="INSP.NAME.assignment.to.loop.or.with.parameter" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyAssignmentToLoopOrWithParameterInspection"/>
    <localInspection language="Python" shortName="PyAsyncCallInspection" suppressId="PyAsyncCall" bundle="messages.PyPsiBundle" key="INSP.async.call" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyAsyncCallInspection"/>
    <localInspection language="Python" shortName="PyAttributeOutsideInitInspection" suppressId="PyAttributeOutsideInit" bundle="messages.PyPsiBundle" key="INSP.NAME.attribute.outside.init" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyAttributeOutsideInitInspection"/>
    <localInspection language="Python" shortName="PyAugmentAssignmentInspection" suppressId="PyAugmentAssignment" bundle="messages.PyPsiBundle" key="INSP.NAME.augment.assignment" groupKey="INSP.GROUP.python" enabledByDefault="false" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyAugmentAssignmentInspection"/>
    <localInspection language="Python" shortName="PyBroadExceptionInspection" suppressId="PyBroadException" bundle="messages.PyPsiBundle" key="INSP.NAME.too.broad.exception.clauses" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyBroadExceptionInspection"/>
    <localInspection language="Python" shortName="PyByteLiteralInspection" suppressId="PyByteLiteral" bundle="messages.PyPsiBundle" key="INSP.NAME.byte.literal" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyByteLiteralInspection"/>
    <localInspection language="Python" shortName="PyCallingNonCallableInspection" suppressId="PyCallingNonCallable" bundle="messages.PyPsiBundle" key="INSP.NAME.calling.non.callable" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyCallingNonCallableInspection"/>
    <localInspection language="Python" shortName="PyComparisonWithNoneInspection" suppressId="PyComparisonWithNone" bundle="messages.PyPsiBundle" key="INSP.NAME.comparison.with.none" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyComparisonWithNoneInspection"/>
    <localInspection language="Python" shortName="PyDataclassInspection" suppressId="PyDataclass" bundle="messages.PyPsiBundle" key="INSP.NAME.dataclass.definition.and.usages" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDataclassInspection"/>
    <localInspection language="Python" shortName="PyDictCreationInspection" suppressId="PyDictCreation" bundle="messages.PyPsiBundle" key="INSP.NAME.dict.creation" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyDictCreationInspection"/>
    <localInspection language="Python" shortName="PyDictDuplicateKeysInspection" suppressId="PyDictDuplicateKeys" bundle="messages.PyPsiBundle" key="INSP.NAME.duplicate.keys" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDictDuplicateKeysInspection"/>
    <localInspection language="Python" shortName="PyDunderSlotsInspection" suppressId="PyDunderSlots" bundle="messages.PyPsiBundle" key="INSP.NAME.dunder.slots" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDunderSlotsInspection"/>
    <localInspection language="Python" shortName="PyExceptClausesOrderInspection" suppressId="PyExceptClausesOrder" bundle="messages.PyPsiBundle" key="INSP.NAME.bad.except.clauses.order" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyExceptClausesOrderInspection"/>
    <localInspection language="Python" shortName="PyFinalInspection" suppressId="PyFinal" bundle="messages.PyPsiBundle" key="INSP.NAME.final.classes.methods.and.variables" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyFinalInspection"/>
    <localInspection language="Python" shortName="PyClassVarInspection" suppressId="PyClassVar" bundle="messages.PyPsiBundle" key="INSP.NAME.class.var.variables" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyClassVarInspection"/>
    <localInspection language="Python" shortName="PyFromFutureImportInspection" suppressId="PyFromFutureImport" bundle="messages.PyPsiBundle" key="INSP.NAME.from.future.import" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyFromFutureImportInspection"/>
    <localInspection language="Python" shortName="PyGlobalUndefinedInspection" suppressId="PyGlobalUndefined" bundle="messages.PyPsiBundle" key="INSP.NAME.global.undefined" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyGlobalUndefinedInspection"/>
    <localInspection language="Python" shortName="PyInconsistentIndentationInspection" suppressId="PyInconsistentIndentation" bundle="messages.PyPsiBundle" key="INSP.NAME.inconsistent.indentation" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyInconsistentIndentationInspection"/>
    <localInspection language="Python" shortName="PyIncorrectDocstringInspection" suppressId="PyIncorrectDocstring" bundle="messages.PyPsiBundle" key="INSP.NAME.incorrect.docstring" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyIncorrectDocstringInspection"/>
    <localInspection language="Python" shortName="PyMissingOrEmptyDocstringInspection" suppressId="PyMissingOrEmptyDocstring" bundle="messages.PyPsiBundle" key="INSP.NAME.missing.or.empty.docstring" groupKey="INSP.GROUP.python" enabledByDefault="false" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyMissingOrEmptyDocstringInspection"/>
    <localInspection language="Python" shortName="PyNamedTupleInspection" suppressId="PyNamedTuple" bundle="messages.PyPsiBundle" key="INSP.named.tuple" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyNamedTupleInspection"/>
    <localInspection language="Python" shortName="PyArgumentListInspection" suppressId="PyArgumentList" bundle="messages.PyPsiBundle" key="INSP.NAME.incorrect.call.arguments" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyArgumentListInspection"/>
    <localInspection language="Python" shortName="PyRedeclarationInspection" suppressId="PyRedeclaration" bundle="messages.PyPsiBundle" key="INSP.NAME.redeclaration" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyRedeclarationInspection"/>
    <localInspection language="Python" shortName="PyMethodParametersInspection" suppressId="PyMethodParameters" bundle="messages.PyPsiBundle" key="INSP.NAME.problematic.first.parameter" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodParametersInspection"/>
    <localInspection language="Python" shortName="PyUnreachableCodeInspection" suppressId="PyUnreachableCode" bundle="messages.PyPsiBundle" key="INSP.NAME.unreachable.code" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnreachableCodeInspection"/>
    <localInspection language="Python" shortName="PyMethodFirstArgAssignmentInspection" suppressId="PyMethodFirstArgAssignment" bundle="messages.PyPsiBundle" key="INSP.NAME.first.arg.assign" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodFirstArgAssignmentInspection"/>
    <localInspection language="Python" shortName="PyStringFormatInspection" suppressId="PyStringFormat" bundle="messages.PyPsiBundle" key="INSP.NAME.str.format" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyStringFormatInspection"/>
    <localInspection language="Python" shortName="PyMethodOverridingInspection" suppressId="PyMethodOverriding" bundle="messages.PyPsiBundle" key="INSP.NAME.method.over" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodOverridingInspection"/>
    <localInspection language="Python" shortName="PyInitNewSignatureInspection" suppressId="PyInitNewSignature" bundle="messages.PyPsiBundle" key="INSP.NAME.new.init.signature" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyInitNewSignatureInspection"/>
    <localInspection language="Python" shortName="PyTrailingSemicolonInspection" suppressId="PyTrailingSemicolon" bundle="messages.PyPsiBundle" key="INSP.NAME.trailing.semicolon" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTrailingSemicolonInspection"/>
    <localInspection language="Python" shortName="PyReturnFromInitInspection" suppressId="PyReturnFromInit" bundle="messages.PyPsiBundle" key="INSP.NAME.init.return" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyReturnFromInitInspection"/>
    <localInspection language="Python" shortName="PyTupleAssignmentBalanceInspection" suppressId="PyTupleAssignmentBalance" bundle="messages.PyPsiBundle" key="INSP.NAME.tuple.assignment.balance" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTupleAssignmentBalanceInspection"/>
    <localInspection language="Python" shortName="PyClassicStyleClassInspection" suppressId="PyClassicStyleClass" bundle="messages.PyPsiBundle" key="INSP.NAME.classic.class.usage" groupKey="INSP.GROUP.python" enabledByDefault="false" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyClassicStyleClassInspection"/>
    <localInspection language="Python" shortName="PyExceptionInheritInspection" suppressId="PyExceptionInherit" bundle="messages.PyPsiBundle" key="INSP.NAME.exception.not.inherit" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyExceptionInheritInspection"/>
    <localInspection language="Python" shortName="PyUnboundLocalVariableInspection" suppressId="PyUnboundLocalVariable" bundle="messages.PyPsiBundle" key="INSP.NAME.unbound" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnboundLocalVariableInspection"/>
    <localInspection language="Python" shortName="PyStatementEffectInspection" suppressId="PyStatementEffect" bundle="messages.PyPsiBundle" key="INSP.NAME.statement.effect" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyStatementEffectInspection"/>
    <localInspection language="Python" shortName="PySuperArgumentsInspection" suppressId="PySuperArguments" bundle="messages.PyPsiBundle" key="INSP.NAME.wrong.super.arguments" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PySuperArgumentsInspection"/>
    <localInspection language="Python" shortName="PyNonAsciiCharInspection" suppressId="PyNonAsciiChar" bundle="messages.PyPsiBundle" key="INSP.NAME.non.ascii" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyNonAsciiCharInspection"/>
    <localInspection language="Python" shortName="PyTupleItemAssignmentInspection" suppressId="PyTupleItemAssignment" bundle="messages.PyPsiBundle" key="INSP.NAME.tuple.item.assignment" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTupleItemAssignmentInspection"/>
    <localInspection language="Python" shortName="PyPropertyAccessInspection" suppressId="PyPropertyAccess" bundle="messages.PyPsiBundle" key="INSP.NAME.property.access" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyPropertyAccessInspection"/>
    <localInspection language="Python" shortName="PyPropertyDefinitionInspection" suppressId="PyPropertyDefinition" bundle="messages.PyPsiBundle" key="INSP.NAME.property.definition" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyPropertyDefinitionInspection"/>
    <localInspection language="Python" shortName="PyNestedDecoratorsInspection" suppressId="PyNestedDecorators" bundle="messages.PyPsiBundle" key="INSP.NAME.nested.decorators" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyNestedDecoratorsInspection"/>
    <localInspection language="Python" shortName="PyOldStyleClassesInspection" suppressId="PyOldStyleClasses" bundle="messages.PyPsiBundle" key="INSP.NAME.oldstyle.class" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyOldStyleClassesInspection"/>
    <localInspection language="Python" shortName="PyCompatibilityInspection" suppressId="PyCompatibility" bundle="messages.PyPsiBundle" key="INSP.NAME.compatibility" groupKey="INSP.GROUP.python" enabledByDefault="false" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyCompatibilityInspection"/>
    <localInspection language="Python" shortName="PyListCreationInspection" suppressId="PyListCreation" bundle="messages.PyPsiBundle" key="INSP.NAME.list.creation" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyListCreationInspection"/>
    <localInspection language="Python" shortName="PyUnnecessaryBackslashInspection" suppressId="PyUnnecessaryBackslash" bundle="messages.PyPsiBundle" key="INSP.NAME.unnecessary.backslash" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnnecessaryBackslashInspection"/>
    <localInspection language="Python" shortName="PySingleQuotedDocstringInspection" suppressId="PySingleQuotedDocstring" bundle="messages.PyPsiBundle" key="INSP.NAME.single.quoted.docstring" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PySingleQuotedDocstringInspection"/>
    <localInspection language="Python" shortName="PyMissingConstructorInspection" suppressId="PyMissingConstructor" bundle="messages.PyPsiBundle" key="INSP.NAME.missing.super.constructor" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMissingConstructorInspection"/>
    <localInspection language="Python" shortName="PySetFunctionToLiteralInspection" suppressId="PySetFunctionToLiteral" bundle="messages.PyPsiBundle" key="INSP.NAME.set.function.to.literal" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PySetFunctionToLiteralInspection"/>
    <localInspection language="Python" shortName="PyDecoratorInspection" suppressId="PyDecorator" bundle="messages.PyPsiBundle" key="INSP.NAME.decorator.outside.class" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDecoratorInspection"/>
    <localInspection language="Python" shortName="PyTypeCheckerInspection" suppressId="PyTypeChecker" bundle="messages.PyPsiBundle" key="INSP.NAME.type.checker" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTypeCheckerInspection"/>
    <localInspection language="Python" shortName="PyDeprecationInspection" suppressId="PyDeprecation" bundle="messages.PyPsiBundle" key="INSP.NAME.deprecated.function.class.or.module" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDeprecationInspection"/>
    <localInspection language="Python" shortName="PyMandatoryEncodingInspection" suppressId="PyMandatoryEncoding" bundle="messages.PyPsiBundle" key="INSP.NAME.mandatory.encoding" groupKey="INSP.GROUP.python" enabledByDefault="false"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMandatoryEncodingInspection"/>
    <localInspection language="Python" shortName="PyClassHasNoInitInspection" suppressId="PyClassHasNoInit" bundle="messages.PyPsiBundle" key="INSP.NAME.class.has.no.init" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyClassHasNoInitInspection"/>
    <localInspection language="Python" shortName="PyNoneFunctionAssignmentInspection" suppressId="PyNoneFunctionAssignment" bundle="messages.PyPsiBundle" key="INSP.NAME.none.function.assignment" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyNoneFunctionAssignmentInspection"/>
    <localInspection language="Python" shortName="PyProtectedMemberInspection" suppressId="PyProtectedMember" bundle="messages.PyPsiBundle" key="INSP.NAME.protected.member" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyProtectedMemberInspection"/>
    <localInspection language="Python" shortName="PyMethodMayBeStaticInspection" suppressId="PyMethodMayBeStatic" bundle="messages.PyPsiBundle" key="INSP.NAME.method.may.be.static" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodMayBeStaticInspection"/>
    <localInspection language="Python" shortName="PyDocstringTypesInspection" suppressId="PyDocstringTypes" bundle="messages.PyPsiBundle" key="INSP.NAME.docstring.types" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyDocstringTypesInspection"/>
    <localInspection language="Python" shortName="PyShadowingNamesInspection" suppressId="PyShadowingNames" bundle="messages.PyPsiBundle" key="INSP.shadowing.names" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyShadowingNamesInspection"/>
    <localInspection language="Python" shortName="PyAbstractClassInspection" suppressId="PyAbstractClass" bundle="messages.PyPsiBundle" key="INSP.NAME.abstract.class" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyAbstractClassInspection"/>
    <localInspection language="Python" shortName="PyMissingTypeHintsInspection" suppressId="PyMissingTypeHints" bundle="messages.PyPsiBundle" key="INSP.NAME.missing.type.hints" groupKey="INSP.GROUP.python" enabledByDefault="false" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyMissingTypeHintsInspection"/>
    <localInspection language="Python" shortName="PyOverloadsInspection" suppressId="PyOverloads" bundle="messages.PyPsiBundle" key="INSP.NAME.overloads.in.regular.python.files" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyOverloadsInspection"/>
    <localInspection language="Python" shortName="PyProtocolInspection" suppressId="PyProtocol" bundle="messages.PyPsiBundle" key="INSP.NAME.protocol.definition.and.usages" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyProtocolInspection"/>
    <localInspection language="Python" shortName="PyTypeHintsInspection" suppressId="PyTypeHints" bundle="messages.PyPsiBundle" key="INSP.NAME.type.hints" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTypeHintsInspection"/>
    <localInspection language="Python" shortName="PyTypedDictInspection" suppressId="PyTypedDict" bundle="messages.PyPsiBundle" key="INSP.NAME.typed.dict" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTypedDictInspection"/>
    <localInspection language="Python" shortName="PyChainedComparisonsInspection" suppressId="PyChainedComparisons" bundle="messages.PyPsiBundle" key="INSP.NAME.chained.comparisons" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyChainedComparisonsInspection"/>
    <localInspection language="Python" shortName="PyPep8NamingInspection" suppressId="PyPep8Naming" bundle="messages.PyPsiBundle" key="INSP.NAME.pep8.naming" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyPep8NamingInspection"/>
    <localInspection language="Python" shortName="PyShadowingBuiltinsInspection" suppressId="PyShadowingBuiltins" bundle="messages.PyPsiBundle" key="INSP.NAME.shadowing.builtins" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyShadowingBuiltinsInspection"/>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertMethodToPropertyIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportToImportFromIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertStaticMethodToFunctionIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.SpecifyTypeInDocstringIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.SpecifyTypeInPy3AnnotationsIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyAnnotateTypesIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.TypeAssertionIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportFromToImportIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyAbsoluteToRelativeImportIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyRelativeToAbsoluteImportIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportToggleAliasIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PySplitIfIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyNegateComparisonIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyStringConcatenationToFormatIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ConvertFormatOperatorToMethodIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyFlipComparisonIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDemorganIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ReplaceListComprehensionWithForIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyJoinIfIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDictConstructorToLiteralFormIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDictLiteralFormToConstructorIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyQuotedStringIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertLambdaToFunctionIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ConvertVariadicParamIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertTripleQuotedStringIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertLiteralToTupleIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertLiteralToListIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertLiteralToSetIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyTransformConditionalExpressionIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyGenerateDocstringIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyYieldFromIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.convertToFString.PyConvertToFStringIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertTypeCommentToVariableAnnotationIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyAnnotateVariableTypeIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyInvertIfConditionIntention</className>
      <bundleName>messages.PyPsiBundle</bundleName>
      <categoryKey>INTN.category.python</categoryKey>
    </intentionAction>
    
    <registryKey defaultValue="false"
                 description="Enable pyi stubs distributed with numpy (see https://github.com/numpy/numpy/issues/18565)"
                 key="enable.numpy.pyi.stubs"/>
    <registryKey key="python.explicit.namespace.packages" defaultValue="true" restartRequired="true"
                 description="Require marking namespace packages explicitly, treat regular directories as implicit source roots"/>
  </extensions>

  <extensionPoints>
    <extensionPoint qualifiedName="Pythonid.customTargetExpressionStubType"
                    interface="com.jetbrains.python.psi.impl.stubs.CustomTargetExpressionStubType"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.customClassStubType"
                    interface="com.jetbrains.python.psi.impl.stubs.PyCustomClassStubType"
                    dynamic="true"/>

    <extensionPoint qualifiedName="Pythonid.decoratorIndexer"
                    interface="com.jetbrains.python.PyCustomDecoratorIndexer"
                    dynamic="true"/>

    <extensionPoint qualifiedName="Pythonid.visitorFilter"
                    beanClass="com.intellij.lang.LanguageExtensionPoint"
                    dynamic="true">
      <with attribute="implementationClass" implements="com.jetbrains.python.psi.PythonVisitorFilter"/>
    </extensionPoint>
    <extensionPoint qualifiedName="Pythonid.pyReferenceCustomTargetChecker"
                    interface="com.jetbrains.python.psi.impl.references.PyReferenceCustomTargetChecker"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.typeCheckerExtension"
                    interface="com.jetbrains.python.psi.types.PyTypeCheckerExtension"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyDataclassParametersProvider"
                    interface="com.jetbrains.python.codeInsight.PyDataclassParametersProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.importCandidateProvider"
                    interface="com.jetbrains.python.codeInsight.imports.PyImportCandidateProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyiStubSuppressor"
                    interface="com.jetbrains.python.pyi.PyiStubSuppressor"
                    dynamic="true"/>
  </extensionPoints>

  <extensions defaultExtensionNs="Pythonid">
    <pySuperMethodsSearch implementation="com.jetbrains.python.psi.search.PySuperMethodsSearchExecutor"/>
    <pyClassInheritorsSearch implementation="com.jetbrains.python.psi.search.PyClassInheritorsSearchExecutor"/>
    <pyOverridingMethodsSearch implementation="com.jetbrains.python.psi.search.PyOverridingMethodsSearchExecutor"/>

    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PropertyStubType"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PyNamedTupleStubType"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PyTypedDictStubType"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PyTypingAliasStubType"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PyDataclassFieldStubType"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PyTypingNewTypeStubType"/>

    <customClassStubType implementation="com.jetbrains.python.psi.impl.stubs.PyDataclassStubType"/>

    <dialectsTokenSetContributor implementation="com.jetbrains.python.PythonTokenSetContributor"/>

    <typeProvider implementation="com.jetbrains.python.psi.types.PyCollectionTypeByModificationsProvider" order="last"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.decorator.PyDecoratedFunctionTypeProvider"/>


    <!-- typing -->
    <typeProvider implementation="com.jetbrains.python.codeInsight.typing.PyTypingTypeProvider"/>
    <typeProvider implementation="com.jetbrains.python.pyi.PyiTypeProvider"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.typing.PyTypedDictTypeProvider"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.typing.PyTypingNewTypeTypeProvider"/>
    <pyClassMembersProvider implementation="com.jetbrains.python.pyi.PyiClassMembersProvider"/>
    <pyReferenceResolveProvider implementation="com.jetbrains.python.psi.resolve.PyForwardReferenceResolveProvider"/>
    <inspectionExtension implementation="com.jetbrains.python.pyi.PyiInspectionExtension"/>
    <inspectionExtension implementation="com.jetbrains.python.codeInsight.typing.PyTypingInspectionExtension"/>
    <customPackageIdentifier implementation="com.jetbrains.python.pyi.PyiCustomPackageIdentifier"/>

    <!-- IPython -->
    <pyReferenceResolveProvider implementation="com.jetbrains.python.psi.resolve.PyIPythonBuiltinReferenceResolveProvider"/>

    <!-- User skeletons -->
    <pyModuleMembersProvider implementation="com.jetbrains.python.codeInsight.userSkeletons.PyUserSkeletonsModuleMembersProvider"/>
    <pyClassMembersProvider implementation="com.jetbrains.python.codeInsight.userSkeletons.PyUserSkeletonsClassMembersProvider"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.userSkeletons.PyUserSkeletonsTypeProvider"/>

    <pyReferenceResolveProvider implementation="com.jetbrains.python.psi.resolve.PythonBuiltinReferenceResolveProvider"/>
    <pyReferenceResolveProvider implementation="com.jetbrains.python.psi.resolve.PythonOverridingBuiltinReferenceResolveProvider"/>

    <!-- PyDocstring -->
    <typeProvider implementation="com.jetbrains.python.documentation.docstrings.PyDocStringTypeProvider" id="pythonDocstringTypeProvider"/>
    <dialectsTokenSetContributor implementation="com.jetbrains.python.documentation.doctest.PyDocstringTokenSetContributor"/>


    <!-- Type from ancestors -->
    <typeProvider implementation="com.jetbrains.python.codeInsight.typing.PyAncestorTypeProvider" order="last"/>

    <!-- NumPy -->
    <typeProvider implementation="com.jetbrains.numpy.codeInsight.NumpyDocStringTypeProvider" order="before pythonDocstringTypeProvider"/>
    <pyClassMembersProvider implementation="com.jetbrains.numpy.codeInsight.NumpyClassMembersProvider"/>
    <pyModuleMembersProvider implementation="com.jetbrains.numpy.codeInsight.NumpyModuleMembersProvider"/>
    <resolveResultRater implementation="com.jetbrains.numpy.codeInsight.NumpyResolveRater"/>
    <pyiStubSuppressor implementation="com.jetbrains.numpy.codeInsight.NumpyPyiStubsSuppressor"/>

    <!--stdlib-->
    <canonicalPathProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibCanonicalPathProvider"/>
    <inspectionExtension implementation="com.jetbrains.python.inspections.stdlib.PyStdlibInspectionExtension"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyDataclassTypeProvider"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyNamedTupleTypeProvider"/>
    <!-- This provider should be able to override the results on anything else, including types coming from .pyi stubs -->
    <typeProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibTypeProvider" order="first"/>
    <pyClassMembersProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyOverridingClassDunderMembersProvider"/>
    <pyClassMembersProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibClassMembersProvider"/>
    <pyModuleMembersProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibOverridingModuleMembersProvider"/>

    <!-- TensorFlow -->
    <importResolver implementation="com.jetbrains.tensorFlow.PyTensorFlowImportResolver"/>
    <pyModuleMembersProvider implementation="com.jetbrains.tensorFlow.PyTensorFlowModuleMembersProvider"/>
  </extensions>

</idea-plugin>