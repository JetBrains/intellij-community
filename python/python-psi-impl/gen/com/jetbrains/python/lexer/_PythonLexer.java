/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Python.flex</tt>
 */
class _PythonLexer implements FlexLexerEx {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int FSTRING = 6;
  public static final int FSTRING_FRAGMENT = 8;
  public static final int FSTRING_FRAGMENT_FORMAT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\41\1\42\1\51\1\52\1\17\22\0\1\37\1\40\1\32\1\16\1\0\1\104\1\105\1"+
    "\30\1\43\1\44\1\101\1\100\1\113\1\24\1\22\1\103\1\1\1\5\6\3\2\2\1\47\1\53"+
    "\1\111\1\50\1\110\1\0\1\102\1\4\1\11\1\26\1\4\1\23\1\33\3\20\1\25\1\20\1\15"+
    "\1\20\1\36\1\10\2\20\1\27\2\20\1\14\2\20\1\6\2\20\1\45\1\31\1\46\1\107\1\7"+
    "\1\114\1\54\1\63\1\65\1\56\1\60\1\70\1\75\1\77\1\67\1\25\1\64\1\13\1\74\1"+
    "\55\1\66\1\72\1\20\1\61\1\57\1\62\1\12\1\20\1\76\1\71\1\73\1\20\1\34\1\106"+
    "\1\35\1\112\6\0\1\115\24\0\1\20\12\0\1\20\4\0\1\20\5\0\27\20\1\0\12\20\4\0"+
    "\14\20\16\0\5\20\7\0\1\20\1\0\1\20\1\0\5\20\1\0\2\20\2\0\4\20\1\0\1\20\6\0"+
    "\1\20\1\0\3\20\1\0\1\20\1\0\4\20\1\0\23\20\1\0\11\20\1\0\26\20\2\0\1\20\6"+
    "\0\10\20\10\0\16\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\1\20\10\0\13\20\5\0\3\20"+
    "\15\0\12\21\4\0\6\20\1\0\10\20\2\0\12\20\1\0\6\20\12\21\3\20\2\0\14\20\2\0"+
    "\3\20\12\21\14\20\4\0\1\20\5\0\16\20\2\0\14\20\4\0\5\20\1\0\10\20\6\0\20\20"+
    "\2\0\12\21\1\20\2\0\16\20\1\0\1\20\3\0\4\20\2\0\11\20\2\0\2\20\2\0\4\20\10"+
    "\0\1\20\4\0\2\20\1\0\1\20\1\0\3\20\1\0\6\20\4\0\2\20\1\0\2\20\1\0\2\20\1\0"+
    "\2\20\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0\1\20\7\0\4\20\1\0\1\20\7\0\12"+
    "\21\6\20\13\0\3\20\1\0\11\20\1\0\2\20\1\0\2\20\1\0\5\20\2\0\12\20\1\0\3\20"+
    "\1\0\3\20\2\0\1\20\30\0\1\20\7\0\3\20\1\0\10\20\2\0\6\20\2\0\2\20\2\0\3\20"+
    "\10\0\2\20\4\0\2\20\1\0\1\20\1\0\1\20\20\0\2\20\1\0\6\20\3\0\3\20\1\0\4\20"+
    "\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20\3\0\3\20\3\0\14\20\4\0\5\20\3\0\3\20"+
    "\1\0\4\20\2\0\1\20\6\0\1\20\10\0\4\20\1\0\10\20\1\0\3\20\1\0\30\20\3\0\10"+
    "\20\1\0\3\20\1\0\4\20\7\0\2\20\1\0\3\20\5\0\4\20\1\0\5\20\2\0\4\20\5\0\2\20"+
    "\7\0\1\20\2\0\2\20\16\0\3\20\1\0\10\20\1\0\7\20\1\0\3\20\1\0\5\20\5\0\4\20"+
    "\7\0\1\20\12\0\6\20\2\0\2\20\1\0\22\20\3\0\10\20\1\0\11\20\1\0\1\20\2\0\7"+
    "\20\3\0\1\20\4\0\6\20\1\0\1\20\1\0\10\20\2\0\2\20\14\0\17\20\1\0\12\21\7\0"+
    "\2\20\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1"+
    "\20\1\0\1\20\2\0\2\20\1\0\15\20\1\0\3\20\2\0\5\20\1\0\1\20\1\0\6\20\2\0\12"+
    "\21\2\0\4\20\10\0\2\20\13\0\1\20\1\0\1\20\1\0\1\20\4\0\12\20\1\0\24\20\3\0"+
    "\5\20\1\0\12\20\6\0\1\20\11\0\12\21\4\20\2\0\6\20\1\0\1\20\5\0\1\20\2\0\13"+
    "\20\1\0\15\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\1\20\1\0\4\20\2\0\7"+
    "\20\1\0\1\20\1\0\4\20\2\0\16\20\2\0\6\20\2\0\15\20\2\0\14\20\3\0\13\20\7\0"+
    "\15\20\1\0\7\20\13\0\4\20\14\0\1\20\1\0\2\20\14\0\4\20\3\0\1\20\4\0\2\20\15"+
    "\0\3\20\2\0\12\20\15\0\1\20\23\0\5\20\12\21\3\0\6\20\1\0\23\20\1\0\2\20\6"+
    "\0\6\20\5\0\15\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\6\20\1\0\7\20\1\0\1\20\3"+
    "\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20\14\0\2\115\25\0\1\20\4\0\1\20\14\0\1\20"+
    "\15\0\1\20\2\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0\1\20\7\0\17\20\6\0\15\20"+
    "\7\0\10\20\11\0\7\20\1\0\7\20\6\0\3\20\11\0\5\20\2\0\5\20\3\0\7\20\2\0\2\20"+
    "\2\0\3\20\5\0\13\20\12\21\2\20\4\0\3\20\1\0\12\20\1\0\1\20\7\0\11\20\2\0\27"+
    "\20\2\0\15\20\3\0\1\20\1\0\1\20\2\0\1\20\16\0\1\20\12\21\5\20\3\0\5\20\12"+
    "\0\6\20\2\0\6\20\2\0\6\20\11\0\13\20\1\0\2\20\2\0\7\20\4\0\5\20\3\0\5\20\5"+
    "\0\12\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\12\20\3\0\15\20\3\0\2\20"+
    "\30\0\16\20\4\0\1\20\2\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0\14\20\1\0\16"+
    "\20\1\0\2\20\1\0\1\20\15\0\1\20\2\0\4\20\4\0\10\20\1\0\5\20\12\0\6\20\2\0"+
    "\1\20\1\0\14\20\1\0\2\20\3\0\1\20\2\0\4\20\1\0\2\20\12\0\10\20\6\0\6\20\1"+
    "\0\2\20\5\0\10\20\1\0\3\20\1\0\13\20\4\0\3\20\4\0\6\20\1\0\12\21\4\20\2\0"+
    "\1\20\11\0\5\20\5\0\3\20\3\0\12\21\1\20\1\0\1\20\3\0\10\20\6\0\1\20\1\0\7"+
    "\20\1\0\1\20\1\0\4\20\1\0\2\20\6\0\1\20\5\0\7\20\2\0\7\20\3\0\6\20\1\0\1\20"+
    "\10\0\6\20\2\0\10\20\10\0\6\20\2\0\1\20\3\0\1\20\13\0\10\20\5\0\15\20\3\0"+
    "\2\20\6\0\5\20\3\0\6\20\10\0\10\20\2\0\7\20\16\0\4\20\4\0\3\20\15\0\1\20\2"+
    "\0\2\20\2\0\4\20\1\0\14\20\1\0\1\20\1\0\7\20\1\0\21\20\1\0\4\20\2\0\10\20"+
    "\1\0\7\20\1\0\14\20\1\0\4\20\1\0\5\20\1\0\1\20\3\0\11\20\1\0\10\20\2\0\22"+
    "\21\5\0\1\20\12\0\2\20\1\0\2\20\1\0\5\20\6\0\2\20\1\0\1\20\2\0\1\20\1\0\12"+
    "\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20\4\0\1\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\2\20\1\0\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\2\20\1"+
    "\0\1\20\2\0\4\20\1\0\7\20\1\0\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0\5\20\1"+
    "\0\3\20\1\0\5\20\1\0\5\20");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\3\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\3\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\17\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\43"+
    "\1\44\2\45\1\46\1\3\2\47\1\22\3\3\1\50"+
    "\1\51\1\50\1\51\1\52\1\53\1\3\2\54\1\3"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\4\3\2\50\1\52\1\66\1\2\5\0\3\2"+
    "\1\67\1\0\1\70\1\0\2\3\1\67\1\71\1\72"+
    "\3\7\1\73\3\7\1\3\2\74\1\75\1\76\1\77"+
    "\14\3\1\100\1\101\1\102\1\103\10\3\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\0\3\45\1\123"+
    "\3\45\1\3\6\47\2\0\1\124\1\3\2\0\1\51"+
    "\1\50\1\51\1\3\6\54\1\3\2\125\1\57\1\126"+
    "\2\3\1\0\1\50\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\4\2\1\67\1\0\2\3\1\0\1\7"+
    "\1\127\1\130\1\0\1\127\1\3\2\0\1\131\1\3"+
    "\1\132\1\133\1\134\5\3\1\135\5\3\1\136\5\3"+
    "\1\137\1\140\1\141\1\142\1\0\1\45\1\143\1\144"+
    "\1\0\1\143\1\3\1\47\2\145\1\51\1\3\1\54"+
    "\2\146\1\3\2\0\1\50\1\3\1\0\2\147\1\0"+
    "\1\3\1\74\1\3\1\150\1\151\7\3\1\152\1\3"+
    "\1\153\3\3\1\0\2\144\11\0\1\3\1\125\1\3"+
    "\4\0\2\3\1\154\1\3\1\155\1\156\3\3\1\157"+
    "\1\3\1\160\10\0\1\161\1\127\1\162\1\163\1\164"+
    "\1\3\1\165\1\3\1\166\1\143\1\145\1\146\1\147"+
    "\1\0\1\167\1\3\1\170\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u01d4\0\u04e0\0\u052e\0\u01d4\0\u01d4\0\u01d4\0\u057c\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u05ca\0\u0618\0\u01d4"+
    "\0\u01d4\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a"+
    "\0\u0888\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa"+
    "\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a"+
    "\0\u0d68\0\u0db6\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u0e04\0\u0e52"+
    "\0\u0ea0\0\u0eee\0\u01d4\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\u1074"+
    "\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u01d4"+
    "\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u01d4\0\u01d4\0\u141c\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u146a\0\u14b8\0\u1506\0\u1554"+
    "\0\u15a2\0\u15f0\0\u163e\0\u01d4\0\u01d4\0\u168c\0\u16da\0\u1728"+
    "\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998"+
    "\0\u01d4\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u01d4\0\u01d4\0\u1b1e"+
    "\0\u1b6c\0\u1bba\0\u01d4\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40"+
    "\0\u1d8e\0\u01d4\0\u01d4\0\u01d4\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6"+
    "\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136"+
    "\0\u02be\0\u02be\0\u02be\0\u02be\0\u2184\0\u21d2\0\u2220\0\u226e"+
    "\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u01d4\0\u01d4\0\u23f4\0\u01d4"+
    "\0\u01d4\0\u2442\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u2490"+
    "\0\u01d4\0\u01d4\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u01d4"+
    "\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886"+
    "\0\u28d4\0\u2922\0\u2970\0\u29be\0\u01d4\0\u2a0c\0\u11fa\0\u1296"+
    "\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c"+
    "\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u01d4\0\u2e9e"+
    "\0\u2eec\0\u163e\0\u2f3a\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0"+
    "\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u01d4\0\u3246\0\u3294\0\u32e2"+
    "\0\u3330\0\u337e\0\u03f6\0\u33cc\0\u341a\0\u01d4\0\u33cc\0\u3468"+
    "\0\u34b6\0\u3504\0\u3552\0\u02be\0\u35a0\0\u02be\0\u02be\0\u02be"+
    "\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726\0\u02be\0\u3774\0\u37c2"+
    "\0\u3810\0\u385e\0\u38ac\0\u02be\0\u38fa\0\u3948\0\u3996\0\u39e4"+
    "\0\u3a32\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u01d4\0\u3ace\0\u3b6a\0\u3bb8\0\u01d4\0\u3c06\0\u3c54\0\u01d4"+
    "\0\u3ca2\0\u01d4\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u01d4\0\u4098"+
    "\0\u02be\0\u02be\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c"+
    "\0\u42ba\0\u02be\0\u4308\0\u02be\0\u4356\0\u43a4\0\u43f2\0\u4440"+
    "\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0"+
    "\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u01d4\0\u4836\0\u4884\0\u3f60"+
    "\0\u3fae\0\u48d2\0\u4920\0\u496e\0\u02be\0\u49bc\0\u02be\0\u02be"+
    "\0\u4a0a\0\u4a58\0\u4aa6\0\u02be\0\u4af4\0\u02be\0\u4b42\0\u448e"+
    "\0\u44dc\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\u02be\0\u4d16"+
    "\0\u02be\0\u02be\0\u02be\0\u4d64\0\u02be\0\u4db2\0\u02be\0\u3ace"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u4d16\0\u01d4\0\u4e00\0\u02be\0\u02be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\11\1\12\1\11\3\12\2\13\1\14"+
    "\1\13\1\12\1\15\1\7\1\12\1\7\1\16\1\12"+
    "\1\17\1\12\2\13\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\12\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\7\1\40\1\41\1\42"+
    "\1\43\1\44\1\12\1\45\1\46\1\47\1\50\1\12"+
    "\1\51\1\52\1\53\1\54\1\12\1\55\1\56\1\12"+
    "\1\57\1\60\1\12\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\7\11\76\2\77\1\76\1\77\1\76\1\100\1\0"+
    "\6\76\2\77\1\101\1\21\1\102\4\76\1\26\1\76"+
    "\1\30\1\103\6\76\1\7\1\40\6\76\1\77\1\76"+
    "\1\77\1\76\1\77\27\76\1\0\1\7\1\10\2\11"+
    "\1\12\1\11\3\12\2\104\1\14\1\104\1\12\1\100"+
    "\1\7\1\12\1\7\1\16\1\12\1\17\1\12\2\104"+
    "\1\105\1\21\1\106\1\23\1\24\1\25\1\12\1\26"+
    "\1\27\1\30\1\103\1\32\1\33\1\34\1\35\1\107"+
    "\1\37\1\7\1\40\1\41\1\42\1\43\1\44\1\12"+
    "\1\45\1\110\1\47\1\111\1\12\1\112\1\52\1\53"+
    "\1\54\1\12\1\55\1\56\1\12\1\57\1\60\1\12"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\7\17\113\1\7"+
    "\10\113\1\114\1\115\1\116\1\113\1\117\5\113\1\120"+
    "\53\113\1\7\1\10\2\11\1\12\1\11\3\12\2\121"+
    "\1\14\1\121\1\12\1\100\1\7\1\12\1\7\1\16"+
    "\1\12\1\17\1\12\2\121\1\122\1\21\1\123\1\124"+
    "\1\125\1\126\1\12\1\26\1\127\1\30\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\37\1\7\1\40\1\41"+
    "\1\42\1\43\1\44\1\12\1\45\1\136\1\47\1\137"+
    "\1\12\1\140\1\52\1\53\1\141\1\12\1\55\1\56"+
    "\1\12\1\57\1\60\1\12\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\7\17\142\1\7\10\142\1\114\1\143\1\116"+
    "\1\142\1\144\1\145\4\142\1\120\53\142\117\0\1\146"+
    "\1\147\1\146\1\0\1\146\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\154\1\156\4\0\1\157\1\160\1\0"+
    "\1\161\32\0\1\160\2\0\1\153\2\0\1\152\2\0"+
    "\1\150\25\0\3\11\1\0\1\11\1\0\1\162\2\0"+
    "\1\154\1\155\1\154\1\156\4\0\1\157\1\160\1\0"+
    "\1\161\32\0\1\160\36\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\24\12\17\0\10\12\2\163\1\12\1\163\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\163\1\20\1\0"+
    "\1\22\1\23\2\0\1\12\15\0\5\12\1\163\1\12"+
    "\1\163\1\12\1\163\2\12\1\23\7\12\17\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\1\164\23\12\16\0\17\15\1\0"+
    "\22\15\1\0\53\15\1\0\3\165\1\0\1\165\160\0"+
    "\1\166\37\0\1\167\5\0\17\170\1\0\10\170\1\171"+
    "\1\172\10\170\1\173\53\170\17\174\1\0\11\174\1\175"+
    "\1\176\7\174\1\173\53\174\1\0\10\12\2\177\1\12"+
    "\1\177\1\12\2\0\2\12\1\0\1\12\1\0\1\12"+
    "\2\177\1\200\1\0\1\201\1\12\2\0\1\12\15\0"+
    "\5\12\1\177\1\12\1\177\1\12\1\177\12\12\66\0"+
    "\1\202\115\0\1\203\115\0\1\204\46\0\15\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\2\0"+
    "\1\12\15\0\1\12\1\205\1\12\1\206\20\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\12\12\1\207\11\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\4\12\1\210\17\12\17\0"+
    "\12\12\1\211\2\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\2\0\1\12\15\0\15\12\1\212"+
    "\6\12\17\0\10\12\2\163\1\12\1\163\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\163\1\20\1\0"+
    "\1\22\1\23\2\0\1\12\15\0\1\213\3\12\1\214"+
    "\1\163\1\12\1\163\1\12\1\163\2\12\1\23\7\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\5\12\1\215\16\12"+
    "\17\0\10\12\2\163\1\12\1\163\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\163\1\20\1\0\1\22"+
    "\1\23\2\0\1\12\15\0\5\12\1\216\1\12\1\163"+
    "\1\12\1\163\2\12\1\23\7\12\17\0\10\12\2\163"+
    "\1\217\1\163\1\12\2\0\2\12\1\0\1\12\1\0"+
    "\1\12\2\163\1\20\1\0\1\22\1\23\2\0\1\12"+
    "\15\0\5\12\1\163\1\12\1\163\1\12\1\163\1\220"+
    "\1\12\1\23\7\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\5\12\1\221\16\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\1\12\1\222\1\12\1\223\10\12\1\224\3\12\1\225"+
    "\3\12\17\0\10\12\2\177\1\12\1\177\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\177\1\200\1\0"+
    "\1\201\1\12\2\0\1\12\15\0\5\12\1\226\1\12"+
    "\1\177\1\12\1\177\1\227\1\230\10\12\17\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\1\231\23\12\17\0\15\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\2\0"+
    "\1\12\15\0\13\12\1\232\10\12\17\0\12\12\1\233"+
    "\2\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\24\12\17\0\15\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\2\0"+
    "\1\12\15\0\23\12\1\234\66\0\1\235\115\0\1\236"+
    "\30\0\1\237\64\0\1\240\115\0\1\241\32\0\1\242"+
    "\62\0\1\243\115\0\1\244\115\0\1\245\115\0\1\246"+
    "\115\0\1\247\37\0\1\250\55\0\1\251\37\0\1\252"+
    "\1\253\15\0\2\254\1\0\1\254\11\0\2\254\1\101"+
    "\1\0\1\102\26\0\1\254\1\0\1\254\1\0\1\254"+
    "\30\0\17\100\1\0\22\100\1\0\53\100\17\255\1\0"+
    "\10\255\1\256\1\257\10\255\1\260\53\255\17\261\1\0"+
    "\11\261\1\262\1\263\7\261\1\260\53\261\1\0\10\12"+
    "\2\264\1\12\1\264\1\12\2\0\2\12\1\0\1\12"+
    "\1\0\1\12\2\264\1\105\1\0\1\106\1\23\2\0"+
    "\1\12\15\0\5\12\1\264\1\12\1\264\1\12\1\264"+
    "\2\12\1\23\7\12\16\0\17\265\1\0\10\265\1\266"+
    "\1\267\10\265\1\0\53\265\17\270\1\0\11\270\1\271"+
    "\1\272\7\270\1\0\53\270\16\0\1\273\20\0\1\274"+
    "\2\0\1\275\5\0\1\203\46\0\10\12\2\264\1\12"+
    "\1\264\1\12\2\0\2\12\1\0\1\12\1\0\1\12"+
    "\2\264\1\105\1\0\1\106\1\23\2\0\1\12\15\0"+
    "\1\213\3\12\1\214\1\264\1\12\1\264\1\12\1\264"+
    "\2\12\1\23\7\12\17\0\10\12\2\264\1\12\1\264"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\264"+
    "\1\105\1\0\1\106\1\23\2\0\1\12\15\0\5\12"+
    "\1\276\1\12\1\264\1\12\1\264\2\12\1\23\7\12"+
    "\17\0\10\12\2\264\1\217\1\264\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\264\1\105\1\0\1\106"+
    "\1\23\2\0\1\12\15\0\5\12\1\264\1\12\1\264"+
    "\1\12\1\264\1\220\1\12\1\23\7\12\16\0\17\113"+
    "\1\0\10\113\1\0\1\277\1\0\1\113\1\300\5\113"+
    "\1\0\53\113\30\0\1\301\65\0\34\113\2\0\1\302"+
    "\57\113\32\0\1\303\117\0\1\113\62\0\10\12\2\304"+
    "\1\12\1\304\1\12\2\0\2\12\1\0\1\12\1\0"+
    "\1\12\2\304\1\122\1\0\1\123\1\124\2\0\1\12"+
    "\15\0\5\12\1\304\1\12\1\304\1\12\1\304\2\12"+
    "\1\124\7\12\16\0\17\305\1\0\10\305\1\306\1\307"+
    "\10\305\1\0\53\305\17\310\1\0\11\310\1\311\1\312"+
    "\7\310\1\0\53\310\1\0\10\12\2\313\1\12\1\313"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\313"+
    "\1\314\1\0\1\315\1\12\2\0\1\12\15\0\5\12"+
    "\1\313\1\12\1\313\1\12\1\313\12\12\16\0\17\316"+
    "\1\0\10\316\1\0\1\316\1\0\2\316\1\0\1\316"+
    "\1\0\1\316\2\0\4\316\1\0\1\202\45\316\50\0"+
    "\1\317\46\0\10\12\2\304\1\12\1\304\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\304\1\122\1\0"+
    "\1\123\1\124\2\0\1\12\15\0\1\213\3\12\1\214"+
    "\1\304\1\12\1\304\1\12\1\304\2\12\1\124\7\12"+
    "\17\0\10\12\2\304\1\12\1\304\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\304\1\122\1\0\1\123"+
    "\1\124\2\0\1\12\15\0\5\12\1\320\1\12\1\304"+
    "\1\12\1\304\2\12\1\124\7\12\17\0\10\12\2\304"+
    "\1\217\1\304\1\12\2\0\2\12\1\0\1\12\1\0"+
    "\1\12\2\304\1\122\1\0\1\123\1\124\2\0\1\12"+
    "\15\0\5\12\1\304\1\12\1\304\1\12\1\304\1\220"+
    "\1\12\1\124\7\12\17\0\10\12\2\313\1\12\1\313"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\313"+
    "\1\314\1\0\1\315\1\12\2\0\1\12\15\0\5\12"+
    "\1\321\1\12\1\313\1\12\1\313\1\227\1\230\10\12"+
    "\16\0\17\142\1\0\10\142\1\0\1\322\1\0\1\142"+
    "\2\0\4\142\1\0\107\142\2\0\1\323\57\142\1\0"+
    "\1\146\1\147\1\146\1\0\1\146\1\0\1\151\2\0"+
    "\1\154\1\155\1\154\1\156\4\0\1\157\1\160\1\0"+
    "\1\161\32\0\1\160\36\0\3\147\1\0\1\147\1\0"+
    "\1\324\12\0\1\157\1\160\1\0\1\161\32\0\1\160"+
    "\36\0\5\325\1\0\1\326\1\0\1\325\11\0\1\325"+
    "\2\0\1\325\4\0\1\325\20\0\1\325\1\0\1\325"+
    "\1\0\1\325\2\0\1\325\1\0\1\325\2\0\1\325"+
    "\26\0\1\146\1\147\1\146\1\0\1\146\111\0\1\327"+
    "\1\0\1\327\1\0\1\327\1\0\1\330\107\0\1\331"+
    "\3\0\1\331\1\0\1\332\121\0\1\333\1\0\1\334"+
    "\112\0\1\335\1\336\1\335\113\0\1\335\1\0\1\335"+
    "\1\336\101\0\3\165\1\0\1\165\15\0\1\160\1\0"+
    "\1\161\32\0\1\160\36\0\3\337\1\0\1\337\16\0"+
    "\1\340\53\0\1\340\16\0\3\11\1\0\1\11\111\0"+
    "\10\12\2\341\1\12\1\341\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\341\1\20\1\0\1\22\1\23"+
    "\2\0\1\12\15\0\5\12\1\341\1\12\1\341\1\12"+
    "\1\341\2\12\1\23\7\12\17\0\15\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\2\0\1\12"+
    "\15\0\20\12\1\342\3\12\17\0\3\165\1\0\1\165"+
    "\1\0\1\343\13\0\1\160\1\0\1\161\32\0\1\160"+
    "\35\0\17\170\1\0\10\170\1\344\1\172\10\170\1\173"+
    "\53\170\30\0\1\345\1\346\5\0\1\347\1\0\1\347"+
    "\1\173\10\0\1\173\42\0\116\170\17\174\1\0\11\174"+
    "\1\175\1\344\7\174\1\173\171\174\31\0\1\346\1\350"+
    "\4\0\1\347\1\0\1\347\1\173\10\0\1\173\43\0"+
    "\10\12\2\351\1\12\1\351\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\351\1\200\1\0\1\201\1\12"+
    "\2\0\1\12\15\0\5\12\1\351\1\12\1\351\1\12"+
    "\1\351\12\12\46\0\1\352\117\0\1\353\64\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\2\12\1\354\21\12\17\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\3\12\1\355\20\12\17\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\6\12\1\356\15\12\17\0\12\12"+
    "\1\357\2\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\14\12\1\360\7\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\3\12\1\361\7\12"+
    "\1\362\10\12\17\0\15\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\11\12"+
    "\1\363\12\12\17\0\15\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\13\12"+
    "\1\364\10\12\17\0\15\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\6\12"+
    "\1\365\15\12\17\0\15\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\17\12"+
    "\1\366\4\12\17\0\10\12\2\341\1\12\1\341\1\12"+
    "\2\0\2\12\1\0\1\12\1\0\1\12\2\341\1\20"+
    "\1\0\1\22\1\23\2\0\1\12\15\0\4\12\1\367"+
    "\1\341\1\12\1\341\1\12\1\341\2\12\1\23\7\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\1\370\23\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\1\12\1\371\22\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\16\12\1\372\5\12\17\0"+
    "\10\12\2\351\1\12\1\351\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\351\1\200\1\0\1\201\1\12"+
    "\2\0\1\12\15\0\5\12\1\351\1\12\1\351\1\12"+
    "\1\351\1\373\11\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\5\12\1\374\16\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\1\12\1\375\22\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\3\12\1\376\20\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\4\12\1\377\17\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\12\12\1\u0100\11\12\17\0\15\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\2\0\1\12\15\0"+
    "\13\12\1\u0101\10\12\66\0\1\u0102\115\0\1\u0103\115\0"+
    "\1\u0104\115\0\1\u0105\56\0\2\u0106\1\0\1\u0106\11\0"+
    "\2\u0106\1\101\1\0\1\102\26\0\1\u0106\1\0\1\u0106"+
    "\1\0\1\u0106\30\0\17\255\1\0\10\255\1\u0107\1\257"+
    "\10\255\1\260\53\255\30\0\1\u0108\1\u0109\5\0\1\u010a"+
    "\1\0\1\u010a\1\260\10\0\1\260\42\0\116\255\17\261"+
    "\1\0\11\261\1\262\1\u0107\7\261\1\260\171\261\31\0"+
    "\1\u0109\1\u010b\4\0\1\u010a\1\0\1\u010a\1\260\10\0"+
    "\1\260\43\0\10\12\2\u010c\1\12\1\u010c\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\u010c\1\105\1\0"+
    "\1\106\1\23\2\0\1\12\15\0\5\12\1\u010c\1\12"+
    "\1\u010c\1\12\1\u010c\2\12\1\23\7\12\16\0\17\265"+
    "\1\0\10\265\1\u010d\1\267\10\265\1\0\53\265\30\0"+
    "\1\u010e\65\0\116\265\17\270\1\0\11\270\1\271\1\u010d"+
    "\7\270\1\0\171\270\32\0\1\u010f\63\0\17\273\1\0"+
    "\22\273\1\275\53\273\16\0\1\273\20\0\1\274\2\0"+
    "\1\275\54\0\10\12\2\u010c\1\12\1\u010c\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\u010c\1\105\1\0"+
    "\1\106\1\23\2\0\1\12\15\0\4\12\1\367\1\u010c"+
    "\1\12\1\u010c\1\12\1\u010c\2\12\1\23\7\12\46\0"+
    "\1\u0110\65\0\17\113\1\0\10\113\1\0\1\277\1\0"+
    "\1\113\1\302\5\113\1\0\53\113\32\0\1\u0110\64\0"+
    "\10\12\2\u0111\1\12\1\u0111\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\u0111\1\122\1\0\1\123\1\124"+
    "\2\0\1\12\15\0\5\12\1\u0111\1\12\1\u0111\1\12"+
    "\1\u0111\2\12\1\124\7\12\16\0\17\305\1\0\10\305"+
    "\1\u0112\1\307\10\305\1\0\53\305\30\0\1\u0113\65\0"+
    "\116\305\17\310\1\0\11\310\1\311\1\u0112\7\310\1\0"+
    "\171\310\32\0\1\u0114\64\0\10\12\2\u0115\1\12\1\u0115"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\u0115"+
    "\1\314\1\0\1\315\1\12\2\0\1\12\15\0\5\12"+
    "\1\u0115\1\12\1\u0115\1\12\1\u0115\12\12\46\0\1\u0116"+
    "\117\0\1\u0117\63\0\17\316\1\0\10\316\1\0\1\316"+
    "\1\0\2\316\1\0\1\316\1\0\1\316\2\0\4\316"+
    "\2\0\45\316\1\0\10\12\2\u0111\1\12\1\u0111\1\12"+
    "\2\0\2\12\1\0\1\12\1\0\1\12\2\u0111\1\122"+
    "\1\0\1\123\1\124\2\0\1\12\15\0\4\12\1\367"+
    "\1\u0111\1\12\1\u0111\1\12\1\u0111\2\12\1\124\7\12"+
    "\17\0\10\12\2\u0115\1\12\1\u0115\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\u0115\1\314\1\0\1\315"+
    "\1\12\2\0\1\12\15\0\5\12\1\u0115\1\12\1\u0115"+
    "\1\12\1\u0115\1\373\11\12\16\0\17\142\1\0\10\142"+
    "\1\0\1\322\1\0\1\142\1\u0118\1\0\4\142\1\0"+
    "\53\142\1\0\3\147\1\0\1\147\111\0\5\325\1\0"+
    "\1\326\1\0\1\325\1\154\1\155\1\154\1\156\5\0"+
    "\1\325\2\0\1\325\4\0\1\325\20\0\1\325\1\0"+
    "\1\325\1\0\1\325\2\0\1\325\1\0\1\325\2\0"+
    "\1\325\26\0\5\325\3\0\1\325\11\0\1\325\2\0"+
    "\1\325\4\0\1\325\20\0\1\325\1\0\1\325\1\0"+
    "\1\325\2\0\1\325\1\0\1\325\2\0\1\325\26\0"+
    "\1\327\1\0\1\327\1\0\1\327\1\0\1\330\2\0"+
    "\1\154\1\155\1\154\1\156\101\0\1\327\1\0\1\327"+
    "\1\0\1\327\111\0\1\331\3\0\1\331\1\0\1\332"+
    "\2\0\1\154\1\155\1\154\1\156\101\0\1\331\3\0"+
    "\1\331\123\0\1\335\117\0\1\335\112\0\1\335\1\0"+
    "\1\335\102\0\3\337\1\0\1\337\1\0\1\340\15\0"+
    "\1\161\71\0\3\337\1\0\1\337\111\0\15\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\1\20\1\0\1\22"+
    "\1\23\2\0\1\12\15\0\14\12\1\23\7\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\7\12\1\u0119\14\12\47\0"+
    "\1\346\5\0\1\347\1\0\1\347\1\173\10\0\1\173"+
    "\42\0\30\345\1\u011a\1\u011b\64\345\31\350\1\u011c\1\u011d"+
    "\63\350\1\0\10\12\2\u011e\1\12\1\u011e\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\u011e\1\200\1\0"+
    "\1\201\1\12\2\0\1\12\15\0\5\12\1\u011e\1\12"+
    "\1\u011e\1\12\1\u011e\12\12\46\0\1\u011f\117\0\1\u011f"+
    "\64\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\4\12\1\u0120\17\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\4\12\1\u0121\17\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\14\12\1\u0122\7\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\4\12\1\u0123\17\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\3\12\1\u0124\20\12"+
    "\17\0\11\12\1\u0125\3\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\24\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\1\u0126\23\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\3\12\1\u0127\20\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\6\12\1\u0128\15\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\12\12\1\u0129\11\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\20\12\1\u012a\3\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\1\u012b\23\12\17\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\3\12\1\u012c\20\12\17\0\12\12"+
    "\1\u012d\2\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\24\12\17\0\15\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\2\0\1\12\15\0\7\12\1\u012e\14\12\17\0\12\12"+
    "\1\u012f\2\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\24\12\46\0\1\101"+
    "\1\0\1\102\114\0\1\u0109\5\0\1\u010a\1\0\1\u010a"+
    "\1\260\10\0\1\260\42\0\30\u0108\1\u0130\1\u0131\64\u0108"+
    "\31\u010b\1\u0132\1\u0133\63\u010b\1\0\15\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\1\105\1\0\1\106\1\23"+
    "\2\0\1\12\15\0\14\12\1\23\7\12\16\0\30\u010e"+
    "\1\u0134\1\u0135\64\u010e\31\u010f\1\u0136\1\u0137\63\u010f\1\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\1\122"+
    "\1\0\1\123\1\124\2\0\1\12\15\0\14\12\1\124"+
    "\7\12\16\0\30\u0113\1\u0138\1\u0139\64\u0113\31\u0114\1\u013a"+
    "\1\u013b\63\u0114\1\0\10\12\2\u013c\1\12\1\u013c\1\12"+
    "\2\0\2\12\1\0\1\12\1\0\1\12\2\u013c\1\314"+
    "\1\0\1\315\1\12\2\0\1\12\15\0\5\12\1\u013c"+
    "\1\12\1\u013c\1\12\1\u013c\12\12\46\0\1\u013d\117\0"+
    "\1\u013d\63\0\1\142\15\u0118\1\142\1\0\2\u0118\1\142"+
    "\1\u0118\1\142\3\u0118\1\0\1\322\1\0\1\u0118\1\0"+
    "\1\142\2\u0118\2\142\1\0\11\142\24\u0118\16\142\1\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\2\12\1\u013e\21\12\16\0"+
    "\30\345\1\u013f\1\u0140\202\345\147\350\1\u0141\1\u0142\63\350"+
    "\1\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\1\200\1\0\1\201\1\12\2\0\1\12\15\0\24\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\5\12\1\u0143\16\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\16\12\1\u0144\5\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\4\12\1\u0145\17\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\5\12\1\u0146\16\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\10\12\1\u0147\13\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\3\12\1\u0148\20\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\13\12\1\u0149\10\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\5\12\1\u014a\16\12"+
    "\17\0\12\12\1\u014b\2\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\24\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\2\12\1\u014c\21\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\1\u014d\23\12\17\0"+
    "\15\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\2\0\1\12\15\0\4\12\1\u014e\17\12\16\0"+
    "\30\u0108\1\u014f\1\u0150\202\u0108\147\u010b\1\u0151\1\u0152\63\u010b"+
    "\30\u010e\1\u0153\1\u0135\202\u010e\147\u010f\1\u0136\1\u0154\63\u010f"+
    "\30\u0113\1\u0155\1\u0139\202\u0113\147\u0114\1\u013a\1\u0156\63\u0114"+
    "\1\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\1\314\1\0\1\315\1\12\2\0\1\12\15\0\24\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\1\u0157\23\12\16\0"+
    "\30\345\1\u0158\1\u0140\64\345\31\350\1\u0141\1\u0158\63\350"+
    "\1\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\6\12\1\u0159\15\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\6\12\1\u015a\15\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\1\12\1\u015b\22\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\1\12\1\u015c\22\12"+
    "\17\0\15\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\2\0\1\12\15\0\6\12\1\u015d\15\12"+
    "\17\0\12\12\1\u015e\2\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\24\12"+
    "\17\0\12\12\1\u015f\2\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\24\12"+
    "\16\0\30\u0108\1\u0160\1\u0150\64\u0108\31\u010b\1\u0151\1\u0160"+
    "\63\u010b\30\u010e\1\u0161\1\u0135\64\u010e\31\u010f\1\u0136\1\u0161"+
    "\63\u010f\30\u0113\1\u0162\1\u0139\64\u0113\31\u0114\1\u013a\1\u0162"+
    "\63\u0114\31\0\1\u0163\5\0\1\u0164\1\0\1\u0164\1\u0165"+
    "\10\0\1\u0165\43\0\11\12\1\u0166\3\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\2\0\1\12"+
    "\15\0\24\12\17\0\15\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\17\12"+
    "\1\u0167\4\12\17\0\15\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\2\0\1\12\15\0\4\12"+
    "\1\u0168\17\12\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20046];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\11\1\1\11\2\1\3\11\1\1\6\11"+
    "\2\1\2\11\31\1\4\11\4\1\1\11\14\1\1\11"+
    "\4\1\2\11\1\1\5\11\7\1\2\11\1\1\5\0"+
    "\4\1\1\0\1\11\1\0\3\1\2\11\3\1\1\11"+
    "\6\1\3\11\30\1\2\11\1\1\2\11\1\1\5\11"+
    "\1\1\2\11\1\1\1\0\3\1\1\11\12\1\2\0"+
    "\1\11\1\1\2\0\16\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\2\1\1\0\2\1\1\0\2\1\1\11\1\0"+
    "\2\1\2\0\26\1\4\11\1\0\2\1\1\11\1\0"+
    "\2\1\1\11\2\1\1\11\1\1\1\11\3\1\2\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\20\1\1\0"+
    "\2\1\11\0\1\1\1\11\1\1\4\0\14\1\10\0"+
    "\12\1\3\11\1\0\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private final PyLexerFStringHelper fStringHelper = new PyLexerFStringHelper(this);

private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    fStringHelper.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return PyTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 122: break;
          case 2: 
            { return PyTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 123: break;
          case 3: 
            { return PyTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 124: break;
          case 4: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 125: break;
          case 5: 
            { return PyTokenTypes.DOT;
            } 
            // fall through
          case 126: break;
          case 6: 
            { return PyTokenTypes.MINUS;
            } 
            // fall through
          case 127: break;
          case 7: 
            { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 128: break;
          case 8: 
            { return PyTokenTypes.BACKSLASH;
            } 
            // fall through
          case 129: break;
          case 9: 
            { return PyTokenTypes.LBRACE;
            } 
            // fall through
          case 130: break;
          case 10: 
            { return PyTokenTypes.RBRACE;
            } 
            // fall through
          case 131: break;
          case 11: 
            { return PyTokenTypes.SPACE;
            } 
            // fall through
          case 132: break;
          case 12: 
            { return PyTokenTypes.TAB;
            } 
            // fall through
          case 133: break;
          case 13: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 134: break;
          case 14: 
            { return PyTokenTypes.LPAR;
            } 
            // fall through
          case 135: break;
          case 15: 
            { return PyTokenTypes.RPAR;
            } 
            // fall through
          case 136: break;
          case 16: 
            { return PyTokenTypes.LBRACKET;
            } 
            // fall through
          case 137: break;
          case 17: 
            { return PyTokenTypes.RBRACKET;
            } 
            // fall through
          case 138: break;
          case 18: 
            { return PyTokenTypes.COLON;
            } 
            // fall through
          case 139: break;
          case 19: 
            { return PyTokenTypes.EQ;
            } 
            // fall through
          case 140: break;
          case 20: 
            { return PyTokenTypes.FORMFEED;
            } 
            // fall through
          case 141: break;
          case 21: 
            { return PyTokenTypes.SEMICOLON;
            } 
            // fall through
          case 142: break;
          case 22: 
            { return PyTokenTypes.PLUS;
            } 
            // fall through
          case 143: break;
          case 23: 
            { return PyTokenTypes.MULT;
            } 
            // fall through
          case 144: break;
          case 24: 
            { return PyTokenTypes.AT;
            } 
            // fall through
          case 145: break;
          case 25: 
            { return PyTokenTypes.DIV;
            } 
            // fall through
          case 146: break;
          case 26: 
            { return PyTokenTypes.PERC;
            } 
            // fall through
          case 147: break;
          case 27: 
            { return PyTokenTypes.AND;
            } 
            // fall through
          case 148: break;
          case 28: 
            { return PyTokenTypes.OR;
            } 
            // fall through
          case 149: break;
          case 29: 
            { return PyTokenTypes.XOR;
            } 
            // fall through
          case 150: break;
          case 30: 
            { return PyTokenTypes.GT;
            } 
            // fall through
          case 151: break;
          case 31: 
            { return PyTokenTypes.LT;
            } 
            // fall through
          case 152: break;
          case 32: 
            { return PyTokenTypes.TILDE;
            } 
            // fall through
          case 153: break;
          case 33: 
            { return PyTokenTypes.COMMA;
            } 
            // fall through
          case 154: break;
          case 34: 
            { return PyTokenTypes.TICK;
            } 
            // fall through
          case 155: break;
          case 35: 
            { yypushback(1); yybegin(YYINITIAL);
            } 
            // fall through
          case 156: break;
          case 36: 
            { return PyTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 157: break;
          case 37: 
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 158: break;
          case 38: 
            { return PyTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 159: break;
          case 39: 
            { return PyTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 160: break;
          case 40: 
            { return fStringHelper.getTextTokenType();
            } 
            // fall through
          case 161: break;
          case 41: 
            { return fStringHelper.handleFStringEnd();
            } 
            // fall through
          case 162: break;
          case 42: 
            { return fStringHelper.handleFragmentStart();
            } 
            // fall through
          case 163: break;
          case 43: 
            { return fStringHelper.handleLineBreakInLiteralText();
            } 
            // fall through
          case 164: break;
          case 44: 
            { return fStringHelper.handleStringLiteral(PyTokenTypes.SINGLE_QUOTED_STRING);
            } 
            // fall through
          case 165: break;
          case 45: 
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LBRACE);
            } 
            // fall through
          case 166: break;
          case 46: 
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RBRACE);
            } 
            // fall through
          case 167: break;
          case 47: 
            { return PyTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION;
            } 
            // fall through
          case 168: break;
          case 48: 
            { return fStringHelper.handleLineBreakInFragment();
            } 
            // fall through
          case 169: break;
          case 49: 
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LPAR);
            } 
            // fall through
          case 170: break;
          case 50: 
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RPAR);
            } 
            // fall through
          case 171: break;
          case 51: 
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LBRACKET);
            } 
            // fall through
          case 172: break;
          case 52: 
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RBRACKET);
            } 
            // fall through
          case 173: break;
          case 53: 
            { return fStringHelper.handleColonInFragment();
            } 
            // fall through
          case 174: break;
          case 54: 
            { return fStringHelper.handleFragmentEnd();
            } 
            // fall through
          case 175: break;
          case 55: 
            { return PyTokenTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 176: break;
          case 56: 
            { return PyTokenTypes.IMAGINARY_LITERAL;
            } 
            // fall through
          case 177: break;
          case 57: 
            { return PyTokenTypes.MINUSEQ;
            } 
            // fall through
          case 178: break;
          case 58: 
            { return PyTokenTypes.RARROW;
            } 
            // fall through
          case 179: break;
          case 59: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 180: break;
          case 60: 
            { return fStringHelper.handleFStringStart();
            } 
            // fall through
          case 181: break;
          case 61: 
            { return PyTokenTypes.NE;
            } 
            // fall through
          case 182: break;
          case 62: 
            { return PyTokenTypes.COLONEQ;
            } 
            // fall through
          case 183: break;
          case 63: 
            { return PyTokenTypes.EQEQ;
            } 
            // fall through
          case 184: break;
          case 64: 
            { return PyTokenTypes.OR_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 65: 
            { return PyTokenTypes.IN_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 66: 
            { return PyTokenTypes.IS_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 67: 
            { return PyTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 68: 
            { return PyTokenTypes.PLUSEQ;
            } 
            // fall through
          case 189: break;
          case 69: 
            { return PyTokenTypes.MULTEQ;
            } 
            // fall through
          case 190: break;
          case 70: 
            { return PyTokenTypes.EXP;
            } 
            // fall through
          case 191: break;
          case 71: 
            { return PyTokenTypes.ATEQ;
            } 
            // fall through
          case 192: break;
          case 72: 
            { return PyTokenTypes.DIVEQ;
            } 
            // fall through
          case 193: break;
          case 73: 
            { return PyTokenTypes.FLOORDIV;
            } 
            // fall through
          case 194: break;
          case 74: 
            { return PyTokenTypes.PERCEQ;
            } 
            // fall through
          case 195: break;
          case 75: 
            { return PyTokenTypes.ANDEQ;
            } 
            // fall through
          case 196: break;
          case 76: 
            { return PyTokenTypes.OREQ;
            } 
            // fall through
          case 197: break;
          case 77: 
            { return PyTokenTypes.XOREQ;
            } 
            // fall through
          case 198: break;
          case 78: 
            { return PyTokenTypes.GE;
            } 
            // fall through
          case 199: break;
          case 79: 
            { return PyTokenTypes.GTGT;
            } 
            // fall through
          case 200: break;
          case 80: 
            { return PyTokenTypes.LE;
            } 
            // fall through
          case 201: break;
          case 81: 
            { return PyTokenTypes.NE_OLD;
            } 
            // fall through
          case 202: break;
          case 82: 
            { return PyTokenTypes.LTLT;
            } 
            // fall through
          case 203: break;
          case 83: 
            { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 204: break;
          case 84: 
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
            } 
            // fall through
          case 205: break;
          case 85: 
            { return fStringHelper.handleFStringStartInFragment();
            } 
            // fall through
          case 206: break;
          case 86: 
            { return fStringHelper.handleColonEqInFragment();
            } 
            // fall through
          case 207: break;
          case 87: 
            { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 208: break;
          case 88: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 209: break;
          case 89: 
            { return PyTokenTypes.AND_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 90: 
            { return PyTokenTypes.NOT_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 91: 
            { return PyTokenTypes.DEL_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 92: 
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 93: 
            { return PyTokenTypes.TRY_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 94: 
            { return PyTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 95: 
            { return PyTokenTypes.EXPEQ;
            } 
            // fall through
          case 216: break;
          case 96: 
            { return PyTokenTypes.FLOORDIVEQ;
            } 
            // fall through
          case 217: break;
          case 97: 
            { return PyTokenTypes.GTGTEQ;
            } 
            // fall through
          case 218: break;
          case 98: 
            { return PyTokenTypes.LTLTEQ;
            } 
            // fall through
          case 219: break;
          case 99: 
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 220: break;
          case 100: 
            { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 221: break;
          case 101: 
            { return PyTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 222: break;
          case 102: 
            { return fStringHelper.handleStringLiteral(PyTokenTypes.TRIPLE_QUOTED_STRING);
            } 
            // fall through
          case 223: break;
          case 103: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 224: break;
          case 104: 
            { return PyTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 225: break;
          case 105: 
            { return PyTokenTypes.ELIF_KEYWORD;
            } 
            // fall through
          case 226: break;
          case 106: 
            { return PyTokenTypes.FROM_KEYWORD;
            } 
            // fall through
          case 227: break;
          case 107: 
            { return PyTokenTypes.PASS_KEYWORD;
            } 
            // fall through
          case 228: break;
          case 108: 
            { return PyTokenTypes.RAISE_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 109: 
            { return PyTokenTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 230: break;
          case 110: 
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
            } 
            // fall through
          case 231: break;
          case 111: 
            { return PyTokenTypes.YIELD_KEYWORD;
            } 
            // fall through
          case 232: break;
          case 112: 
            { return PyTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 233: break;
          case 113: 
            { return PyTokenTypes.LAMBDA_KEYWORD;
            } 
            // fall through
          case 234: break;
          case 114: 
            { return PyTokenTypes.ASSERT_KEYWORD;
            } 
            // fall through
          case 235: break;
          case 115: 
            { return PyTokenTypes.EXCEPT_KEYWORD;
            } 
            // fall through
          case 236: break;
          case 116: 
            { return PyTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 237: break;
          case 117: 
            { return PyTokenTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 238: break;
          case 118: 
            { return PyTokenTypes.GLOBAL_KEYWORD;
            } 
            // fall through
          case 239: break;
          case 119: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 240: break;
          case 120: 
            { return PyTokenTypes.FINALLY_KEYWORD;
            } 
            // fall through
          case 241: break;
          case 121: 
            { return PyTokenTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 242: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
