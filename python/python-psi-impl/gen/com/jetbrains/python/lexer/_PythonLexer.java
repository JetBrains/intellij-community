// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Python.flex

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


class _PythonLexer implements FlexLexerEx {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int FSTRING = 6;
  public static final int FSTRING_FRAGMENT = 8;
  public static final int FSTRING_FRAGMENT_FORMAT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\1\37\1\42\1\43"+
    "\3\44\1\45\1\44\1\46\1\44\1\47\1\50\2\44"+
    "\1\51\2\44\1\52\2\44\1\53\2\44\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\45\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\44\1\101\1\102\1\103"+
    "\1\104\1\44\1\105\1\106\1\107\1\44\1\110\1\111"+
    "\1\112\1\113\6\0\1\114\44\0\1\44\12\0\1\44"+
    "\4\0\1\44\5\0\27\44\1\0\37\44\1\0\u01ca\44"+
    "\4\0\14\44\16\0\5\44\7\0\1\44\1\0\1\44"+
    "\21\0\165\44\1\0\2\44\2\0\4\44\1\0\1\44"+
    "\6\0\1\44\1\0\3\44\1\0\1\44\1\0\24\44"+
    "\1\0\123\44\1\0\213\44\1\0\255\44\1\0\46\44"+
    "\2\0\1\44\6\0\51\44\10\0\55\44\1\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\0\1\44\10\0\33\44"+
    "\4\0\4\44\35\0\13\44\5\0\100\44\12\115\4\0"+
    "\146\44\1\0\10\44\2\0\12\44\1\0\6\44\12\115"+
    "\3\44\2\0\1\44\20\0\73\44\2\0\145\44\16\0"+
    "\12\115\54\44\4\0\1\44\2\0\1\44\2\0\56\44"+
    "\22\0\34\44\4\0\13\44\65\0\25\44\1\0\10\44"+
    "\25\0\17\44\1\0\201\44\2\0\12\115\1\0\23\44"+
    "\1\0\10\44\2\0\2\44\2\0\26\44\1\0\7\44"+
    "\1\0\1\44\3\0\4\44\2\0\11\44\2\0\2\44"+
    "\2\0\4\44\10\0\1\44\4\0\2\44\1\0\5\44"+
    "\2\0\12\115\2\44\12\0\1\44\1\0\1\44\2\0"+
    "\3\44\1\0\6\44\4\0\2\44\2\0\26\44\1\0"+
    "\7\44\1\0\2\44\1\0\2\44\1\0\2\44\2\0"+
    "\1\44\1\0\5\44\4\0\2\44\2\0\3\44\3\0"+
    "\1\44\7\0\4\44\1\0\1\44\7\0\12\115\6\44"+
    "\13\0\3\44\1\0\11\44\1\0\3\44\1\0\26\44"+
    "\1\0\7\44\1\0\2\44\1\0\5\44\2\0\12\44"+
    "\1\0\3\44\1\0\3\44\2\0\1\44\17\0\4\44"+
    "\2\0\12\115\11\0\7\44\1\0\3\44\1\0\10\44"+
    "\2\0\2\44\2\0\26\44\1\0\7\44\1\0\2\44"+
    "\1\0\5\44\2\0\11\44\2\0\2\44\2\0\3\44"+
    "\10\0\2\44\4\0\2\44\1\0\5\44\2\0\12\115"+
    "\1\0\1\44\20\0\2\44\1\0\6\44\3\0\3\44"+
    "\1\0\4\44\3\0\2\44\1\0\1\44\1\0\2\44"+
    "\3\0\2\44\3\0\3\44\3\0\14\44\4\0\5\44"+
    "\3\0\3\44\1\0\4\44\2\0\1\44\6\0\1\44"+
    "\16\0\12\115\20\0\15\44\1\0\3\44\1\0\27\44"+
    "\1\0\20\44\3\0\10\44\1\0\3\44\1\0\4\44"+
    "\7\0\2\44\1\0\3\44\5\0\4\44\2\0\12\115"+
    "\20\0\4\44\1\0\10\44\1\0\3\44\1\0\27\44"+
    "\1\0\12\44\1\0\5\44\2\0\11\44\1\0\3\44"+
    "\1\0\4\44\7\0\2\44\7\0\1\44\1\0\4\44"+
    "\2\0\12\115\1\0\2\44\15\0\4\44\1\0\10\44"+
    "\1\0\3\44\1\0\63\44\1\0\3\44\1\0\5\44"+
    "\5\0\4\44\7\0\5\44\2\0\12\115\12\0\6\44"+
    "\2\0\2\44\1\0\22\44\3\0\30\44\1\0\11\44"+
    "\1\0\1\44\2\0\7\44\3\0\1\44\4\0\6\44"+
    "\1\0\1\44\1\0\10\44\6\0\12\115\2\0\2\44"+
    "\15\0\72\44\5\0\17\44\1\0\12\115\47\0\2\44"+
    "\1\0\1\44\1\0\5\44\1\0\30\44\1\0\1\44"+
    "\1\0\27\44\2\0\5\44\1\0\1\44\1\0\6\44"+
    "\2\0\12\115\2\0\4\44\40\0\1\44\27\0\2\44"+
    "\6\0\12\115\13\0\1\44\1\0\1\44\1\0\1\44"+
    "\4\0\12\44\1\0\44\44\4\0\24\44\1\0\22\44"+
    "\1\0\44\44\11\0\1\44\71\0\100\44\12\115\6\0"+
    "\100\44\12\115\4\44\2\0\46\44\1\0\1\44\5\0"+
    "\1\44\2\0\53\44\1\0\115\44\1\0\4\44\2\0"+
    "\7\44\1\0\1\44\1\0\4\44\2\0\51\44\1\0"+
    "\4\44\2\0\41\44\1\0\4\44\2\0\7\44\1\0"+
    "\1\44\1\0\4\44\2\0\17\44\1\0\71\44\1\0"+
    "\4\44\2\0\103\44\2\0\3\44\40\0\20\44\20\0"+
    "\126\44\2\0\6\44\3\0\u016c\44\2\0\21\44\1\0"+
    "\32\44\5\0\113\44\3\0\13\44\7\0\15\44\1\0"+
    "\7\44\13\0\25\44\13\0\24\44\14\0\15\44\1\0"+
    "\3\44\1\0\2\44\14\0\124\44\3\0\1\44\4\0"+
    "\2\44\2\0\12\115\41\0\3\44\2\0\12\115\6\0"+
    "\131\44\7\0\53\44\5\0\106\44\12\0\37\44\1\0"+
    "\14\44\4\0\14\44\12\0\12\115\36\44\2\0\5\44"+
    "\13\0\54\44\4\0\32\44\6\0\12\115\46\0\34\44"+
    "\4\0\77\44\1\0\35\44\2\0\1\44\12\115\6\0"+
    "\12\115\15\0\1\44\10\0\17\44\101\0\114\44\4\0"+
    "\12\115\21\0\11\44\14\0\60\44\12\115\72\44\14\0"+
    "\70\44\10\0\12\115\3\0\3\44\12\115\44\44\2\0"+
    "\11\44\7\0\53\44\2\0\3\44\20\0\3\44\1\0"+
    "\47\44\5\0\372\44\1\0\33\44\2\0\6\44\2\0"+
    "\46\44\2\0\6\44\2\0\10\44\1\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\37\44\2\0\65\44\1\0"+
    "\7\44\1\0\1\44\3\0\3\44\1\0\7\44\3\0"+
    "\4\44\2\0\6\44\4\0\15\44\5\0\3\44\1\0"+
    "\7\44\53\0\2\114\25\0\2\44\23\0\1\44\34\0"+
    "\1\44\15\0\1\44\20\0\15\44\63\0\41\44\21\0"+
    "\1\44\4\0\1\44\2\0\12\44\1\0\1\44\3\0"+
    "\5\44\6\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\4\44\1\0\13\44\2\0\4\44\5\0\5\44\4\0"+
    "\1\44\21\0\51\44\u022d\0\64\44\26\0\57\44\1\0"+
    "\57\44\1\0\205\44\6\0\11\44\14\0\46\44\1\0"+
    "\1\44\5\0\1\44\2\0\70\44\7\0\1\44\17\0"+
    "\30\44\11\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\40\44\57\0\1\44\325\0\3\44\31\0"+
    "\17\44\1\0\5\44\2\0\5\44\4\0\126\44\2\0"+
    "\2\44\2\0\3\44\1\0\132\44\1\0\4\44\5\0"+
    "\53\44\1\0\136\44\21\0\33\44\65\0\306\44\112\0"+
    "\360\44\20\0\215\44\103\0\56\44\2\0\15\44\3\0"+
    "\20\44\12\115\2\44\24\0\63\44\1\0\12\44\1\0"+
    "\163\44\45\0\11\44\2\0\147\44\2\0\65\44\2\0"+
    "\5\44\60\0\61\44\30\0\64\44\14\0\106\44\12\0"+
    "\12\115\6\0\30\44\3\0\1\44\1\0\3\44\12\115"+
    "\44\44\2\0\44\44\14\0\35\44\3\0\101\44\16\0"+
    "\1\44\12\115\6\0\20\44\12\115\5\44\1\0\67\44"+
    "\11\0\16\44\2\0\12\115\6\0\27\44\3\0\111\44"+
    "\30\0\3\44\2\0\20\44\2\0\5\44\12\0\6\44"+
    "\2\0\6\44\2\0\6\44\11\0\7\44\1\0\7\44"+
    "\1\0\53\44\1\0\14\44\10\0\173\44\1\0\2\44"+
    "\2\0\12\115\6\0\244\44\14\0\27\44\4\0\61\44"+
    "\4\0\u0100\114\156\44\2\0\152\44\46\0\7\44\14\0"+
    "\5\44\5\0\14\44\1\0\15\44\1\0\5\44\1\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\0\154\44\41\0"+
    "\153\44\22\0\100\44\2\0\66\44\50\0\14\44\4\0"+
    "\20\44\20\0\20\44\3\0\2\44\30\0\3\44\40\0"+
    "\5\44\1\0\207\44\23\0\12\115\7\0\32\44\4\0"+
    "\1\44\1\0\32\44\13\0\131\44\3\0\6\44\2\0"+
    "\6\44\2\0\6\44\2\0\3\44\43\0\14\44\1\0"+
    "\32\44\1\0\23\44\1\0\2\44\1\0\17\44\2\0"+
    "\16\44\42\0\173\44\105\0\65\44\210\0\1\44\202\0"+
    "\35\44\3\0\61\44\17\0\1\44\37\0\40\44\15\0"+
    "\36\44\5\0\53\44\5\0\36\44\2\0\44\44\4\0"+
    "\10\44\1\0\5\44\52\0\236\44\2\0\12\115\6\0"+
    "\44\44\4\0\44\44\4\0\50\44\10\0\64\44\234\0"+
    "\67\44\11\0\26\44\12\0\10\44\230\0\6\44\2\0"+
    "\1\44\1\0\54\44\1\0\2\44\3\0\1\44\2\0"+
    "\27\44\12\0\27\44\11\0\37\44\101\0\23\44\1\0"+
    "\2\44\12\0\26\44\12\0\32\44\106\0\70\44\6\0"+
    "\2\44\100\0\4\44\1\0\2\44\5\0\10\44\1\0"+
    "\3\44\1\0\35\44\2\0\3\44\4\0\1\44\40\0"+
    "\35\44\3\0\35\44\43\0\10\44\1\0\36\44\31\0"+
    "\66\44\12\0\26\44\12\0\23\44\15\0\22\44\156\0"+
    "\111\44\67\0\63\44\15\0\63\44\15\0\50\44\10\0"+
    "\12\115\306\0\35\44\12\0\1\44\10\0\41\44\217\0"+
    "\27\44\11\0\107\44\37\0\12\115\17\0\74\44\25\0"+
    "\31\44\7\0\12\115\6\0\65\44\1\0\12\115\4\0"+
    "\3\44\11\0\44\44\2\0\1\44\11\0\105\44\4\0"+
    "\4\44\3\0\12\115\1\44\1\0\1\44\43\0\22\44"+
    "\1\0\45\44\6\0\1\44\101\0\7\44\1\0\1\44"+
    "\1\0\4\44\1\0\17\44\1\0\12\44\7\0\73\44"+
    "\5\0\12\115\6\0\4\44\1\0\10\44\2\0\2\44"+
    "\2\0\26\44\1\0\7\44\1\0\2\44\1\0\5\44"+
    "\1\0\12\44\2\0\2\44\2\0\3\44\2\0\1\44"+
    "\6\0\1\44\5\0\7\44\2\0\7\44\3\0\5\44"+
    "\213\0\113\44\5\0\12\115\4\0\2\44\40\0\106\44"+
    "\1\0\1\44\10\0\12\115\246\0\66\44\2\0\11\44"+
    "\27\0\6\44\42\0\101\44\3\0\1\44\13\0\12\115"+
    "\46\0\71\44\7\0\12\115\66\0\33\44\2\0\17\44"+
    "\4\0\12\115\306\0\73\44\145\0\100\44\12\115\25\0"+
    "\1\44\240\0\10\44\2\0\56\44\2\0\10\44\1\0"+
    "\2\44\33\0\77\44\10\0\1\44\10\0\112\44\3\0"+
    "\1\44\42\0\71\44\7\0\11\44\1\0\55\44\1\0"+
    "\11\44\17\0\12\115\30\0\36\44\2\0\26\44\1\0"+
    "\16\44\111\0\7\44\1\0\2\44\1\0\54\44\3\0"+
    "\1\44\1\0\2\44\1\0\11\44\10\0\12\115\6\0"+
    "\6\44\1\0\2\44\1\0\45\44\1\0\2\44\1\0"+
    "\6\44\7\0\12\115\u0136\0\27\44\11\0\232\44\146\0"+
    "\157\44\21\0\304\44\274\0\57\44\321\0\107\44\271\0"+
    "\71\44\7\0\37\44\1\0\12\115\146\0\36\44\2\0"+
    "\5\44\13\0\67\44\11\0\4\44\14\0\12\115\11\0"+
    "\25\44\5\0\23\44\260\0\100\44\200\0\113\44\4\0"+
    "\71\44\7\0\21\44\100\0\2\44\1\0\1\44\34\0"+
    "\370\44\10\0\363\44\15\0\37\44\61\0\3\44\21\0"+
    "\4\44\10\0\u018c\44\4\0\153\44\5\0\15\44\3\0"+
    "\11\44\7\0\12\44\3\0\2\44\306\0\5\44\3\0"+
    "\6\44\10\0\10\44\2\0\7\44\36\0\4\44\224\0"+
    "\3\44\273\0\125\44\1\0\107\44\1\0\2\44\2\0"+
    "\1\44\2\0\2\44\2\0\4\44\1\0\14\44\1\0"+
    "\1\44\1\0\7\44\1\0\101\44\1\0\4\44\2\0"+
    "\10\44\1\0\7\44\1\0\34\44\1\0\4\44\1\0"+
    "\5\44\1\0\1\44\3\0\7\44\1\0\u0154\44\2\0"+
    "\31\44\1\0\31\44\1\0\37\44\1\0\31\44\1\0"+
    "\37\44\1\0\31\44\1\0\37\44\1\0\31\44\1\0"+
    "\37\44\1\0\31\44\1\0\10\44\2\0\62\115\67\44"+
    "\4\0\62\44\10\0\1\44\16\0\1\44\26\0\5\44"+
    "\1\0\17\44\120\0\7\44\1\0\21\44\2\0\7\44"+
    "\1\0\2\44\1\0\5\44\325\0\55\44\3\0\16\44"+
    "\2\0\12\115\4\0\1\44\u0171\0\60\44\12\115\6\0"+
    "\305\44\13\0\7\44\51\0\114\44\4\0\12\115\246\0"+
    "\4\44\1\0\33\44\1\0\2\44\1\0\1\44\2\0"+
    "\1\44\1\0\12\44\1\0\4\44\1\0\1\44\1\0"+
    "\1\44\6\0\1\44\4\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\3\44\1\0\2\44\1\0\1\44\2\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\2\44\1\0\1\44\2\0\4\44\1\0"+
    "\7\44\1\0\4\44\1\0\4\44\1\0\1\44\1\0"+
    "\12\44\1\0\21\44\5\0\3\44\1\0\5\44\1\0"+
    "\21\44\164\0\32\44\6\0\32\44\6\0\32\44\166\0"+
    "\327\44\51\0\65\44\13\0\336\44\2\0\u0182\44\16\0"+
    "\u0131\44\37\0\36\44\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\3\31\1\32\1\33\1\34\1\35"+
    "\1\36\20\31\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\45\1\43\2\47\1\23\4\31\1\50"+
    "\1\51\2\52\1\50\1\53\1\54\1\55\2\56\1\57"+
    "\1\60\1\61\2\31\1\62\1\63\4\31\1\64\1\65"+
    "\2\50\1\53\1\66\1\67\1\6\1\70\2\6\1\71"+
    "\1\72\3\6\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\100\1\22\3\0\1\103\1\22\1\0"+
    "\1\22\2\0\1\22\1\0\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\31\2\114\1\31\1\115"+
    "\14\31\1\116\1\31\1\117\1\120\2\31\1\121\6\31"+
    "\1\122\1\45\1\123\5\45\1\0\6\47\1\124\2\0"+
    "\2\31\2\0\2\52\1\50\1\55\6\56\1\125\1\31"+
    "\2\126\3\31\1\0\1\50\1\6\1\0\1\127\1\130"+
    "\1\127\1\131\1\0\1\132\1\0\1\22\2\0\1\100"+
    "\3\22\1\0\3\22\1\0\1\133\1\134\1\31\2\0"+
    "\1\31\1\135\4\31\1\136\1\137\4\31\1\140\4\31"+
    "\1\141\3\31\1\142\2\31\1\45\1\0\1\143\1\144"+
    "\1\143\1\0\1\47\2\145\1\31\1\52\1\56\2\146"+
    "\1\31\2\0\1\31\1\50\1\0\1\147\1\0\1\147"+
    "\1\114\5\31\1\150\1\151\2\31\1\152\3\31\1\153"+
    "\4\31\1\0\1\144\1\0\1\144\10\0\1\126\1\31"+
    "\4\0\1\31\1\154\1\155\6\31\1\156\1\31\1\157"+
    "\1\160\10\0\1\127\1\161\1\31\1\162\1\31\1\163"+
    "\1\164\1\165\1\166\1\143\1\145\1\146\1\0\1\167"+
    "\1\147\1\31\1\170\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u0222\0\u0270\0\u02be\0\u030c\0\u035a"+
    "\0\u03a8\0\u01d4\0\u01d4\0\u03f6\0\u0444\0\u01d4\0\u0492\0\u04e0"+
    "\0\u052e\0\u057c\0\u05ca\0\u0618\0\u01d4\0\u0666\0\u06b4\0\u0702"+
    "\0\u0750\0\u079e\0\u07ec\0\u083a\0\u01d4\0\u01d4\0\u01d4\0\u0888"+
    "\0\u01d4\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa"+
    "\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a"+
    "\0\u0d68\0\u01d4\0\u0db6\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u0e04"+
    "\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\u1074"+
    "\0\u10c2\0\u1110\0\u115e\0\u01d4\0\u11ac\0\u11fa\0\u1248\0\u1296"+
    "\0\u01d4\0\u12e4\0\u1332\0\u1380\0\u01d4\0\u01d4\0\u13ce\0\u141c"+
    "\0\u146a\0\u01d4\0\u01d4\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u01d4"+
    "\0\u01d4\0\u15f0\0\u163e\0\u01d4\0\u01d4\0\u01d4\0\u168c\0\u01d4"+
    "\0\u16da\0\u1728\0\u01d4\0\u01d4\0\u1776\0\u17c4\0\u1812\0\u1860"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u18ae\0\u18fc\0\u01d4\0\u194a"+
    "\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u01d4\0\u1ad0\0\u1b1e\0\u1b6c"+
    "\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u01d4\0\u1cf2\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u1d40\0\u01d4\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78"+
    "\0\u01d4\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a"+
    "\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220\0\u079e\0\u226e\0\u079e"+
    "\0\u079e\0\u22bc\0\u230a\0\u079e\0\u2358\0\u23a6\0\u23f4\0\u2442"+
    "\0\u2490\0\u24de\0\u01d4\0\u252c\0\u01d4\0\u257a\0\u25c8\0\u2616"+
    "\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886"+
    "\0\u28d4\0\u01d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u1248\0\u1296"+
    "\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c"+
    "\0\u2cca\0\u2d18\0\u01d4\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e"+
    "\0\u2eec\0\u163e\0\u2f3a\0\u2f88\0\u2f88\0\u2fd6\0\u01d4\0\u3024"+
    "\0\u01d4\0\u04e0\0\u01d4\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa"+
    "\0\u31f8\0\u01d4\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc"+
    "\0\u01d4\0\u01d4\0\u341a\0\u3468\0\u34b6\0\u3504\0\u079e\0\u3552"+
    "\0\u35a0\0\u35ee\0\u363c\0\u079e\0\u079e\0\u368a\0\u36d8\0\u3726"+
    "\0\u3774\0\u079e\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u079e\0\u38fa"+
    "\0\u3948\0\u3996\0\u079e\0\u39e4\0\u3a32\0\u3a80\0\u3a80\0\u3ace"+
    "\0\u01d4\0\u3b1c\0\u3b6a\0\u01d4\0\u3bb8\0\u3c06\0\u3c54\0\u01d4"+
    "\0\u01d4\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u01d4\0\u3ffc\0\u404a\0\u4098"+
    "\0\u40e6\0\u4134\0\u079e\0\u079e\0\u4182\0\u41d0\0\u079e\0\u421e"+
    "\0\u426c\0\u42ba\0\u079e\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440"+
    "\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0"+
    "\0\u46fe\0\u474c\0\u479a\0\u01d4\0\u47e8\0\u4836\0\u3f12\0\u4884"+
    "\0\u3fae\0\u48d2\0\u079e\0\u079e\0\u4920\0\u496e\0\u49bc\0\u4a0a"+
    "\0\u4a58\0\u4aa6\0\u079e\0\u4af4\0\u079e\0\u079e\0\u4b42\0\u448e"+
    "\0\u4b90\0\u452a\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u079e"+
    "\0\u4d64\0\u079e\0\u4db2\0\u079e\0\u079e\0\u079e\0\u079e\0\u3a80"+
    "\0\u01d4\0\u01d4\0\u4d16\0\u01d4\0\u01d4\0\u4e00\0\u079e\0\u079e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\7\1\12\1\7\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\3\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\43\1\42"+
    "\1\44\5\42\2\43\1\42\1\45\1\46\1\47\1\50"+
    "\1\42\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\42\1\61\1\42\1\62\1\42\1\63\1\64"+
    "\1\65\1\66\1\42\1\67\1\43\1\70\1\42\1\71"+
    "\1\72\1\73\1\74\1\75\2\7\1\76\1\10\1\77"+
    "\1\7\1\12\1\0\1\13\1\76\1\100\1\101\2\76"+
    "\1\102\23\76\2\103\7\76\2\103\2\76\1\46\5\76"+
    "\2\103\14\76\1\103\2\76\1\103\7\76\1\0\1\76"+
    "\1\7\1\10\1\77\1\7\1\12\1\7\1\13\1\14"+
    "\1\104\1\101\1\17\1\20\1\105\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\3\33\1\106"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\107\1\42"+
    "\1\44\5\42\2\107\1\42\1\45\1\46\1\47\1\50"+
    "\1\42\1\51\1\52\1\110\1\111\1\55\1\56\1\57"+
    "\1\60\1\42\1\61\1\42\1\62\1\42\1\63\1\64"+
    "\1\65\1\112\1\42\1\67\1\107\1\70\1\42\1\71"+
    "\1\72\1\73\1\74\1\75\2\7\2\113\1\114\2\113"+
    "\1\7\2\113\1\115\3\113\1\116\40\113\1\117\32\113"+
    "\1\120\5\113\1\7\1\10\1\121\1\7\1\12\1\7"+
    "\1\13\1\122\1\123\1\101\1\17\1\20\1\124\1\125"+
    "\1\126\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\33\1\127\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\130\1\42\1\131\5\42\2\130\1\42\1\132\1\46"+
    "\1\133\1\50\1\42\1\51\1\52\1\134\1\135\1\55"+
    "\1\56\1\136\1\60\1\42\1\61\1\42\1\62\1\42"+
    "\1\63\1\64\1\65\1\137\1\42\1\67\1\130\1\70"+
    "\1\42\1\71\1\140\1\73\1\141\1\75\2\7\2\142"+
    "\1\114\2\142\1\7\2\142\1\115\3\142\1\116\40\142"+
    "\1\143\32\142\1\144\1\142\1\145\3\142\152\0\1\146"+
    "\61\0\2\147\1\150\2\147\1\0\2\147\1\151\44\147"+
    "\1\152\40\147\2\16\1\0\2\16\1\0\110\16\34\0"+
    "\1\153\115\0\1\154\61\0\2\155\1\150\2\155\1\0"+
    "\6\155\1\156\40\155\1\157\40\155\17\0\1\160\14\0"+
    "\1\161\115\0\1\162\115\0\1\163\1\164\105\0\4\165"+
    "\111\0\1\166\7\0\1\167\104\0\1\170\1\0\3\171"+
    "\1\172\7\0\1\173\1\0\1\174\2\0\1\175\1\176"+
    "\1\0\1\177\1\0\1\200\1\201\4\0\1\202\2\0"+
    "\1\173\2\0\1\174\5\0\1\203\2\0\1\177\4\0"+
    "\1\200\1\0\1\201\32\0\1\170\1\0\4\33\11\0"+
    "\1\174\2\0\1\175\1\176\3\0\1\200\5\0\1\204"+
    "\5\0\1\174\5\0\1\203\7\0\1\200\45\0\1\205"+
    "\114\0\1\206\1\207\1\210\114\0\1\211\115\0\1\212"+
    "\1\213\114\0\1\214\106\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\26\42\5\0\1\42\10\0\1\15\3\0"+
    "\1\21\10\0\4\42\6\0\1\42\2\215\1\42\1\44"+
    "\5\42\2\215\1\42\4\0\1\42\1\0\1\42\2\215"+
    "\2\42\1\44\11\42\1\215\2\42\1\215\3\42\5\0"+
    "\1\42\10\0\1\216\3\0\1\217\10\0\4\42\6\0"+
    "\1\42\2\220\7\42\2\220\1\42\4\0\1\42\1\0"+
    "\1\42\2\220\14\42\1\220\2\42\1\220\3\42\5\0"+
    "\1\42\34\0\1\221\106\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\14\42\1\222\3\42\1\223\5\42\5\0"+
    "\1\42\10\0\1\15\3\0\1\21\10\0\4\42\6\0"+
    "\1\42\2\215\1\42\1\44\5\42\2\215\1\42\4\0"+
    "\1\42\1\0\1\42\2\215\2\42\1\44\11\42\1\224"+
    "\2\42\1\215\3\42\5\0\1\42\10\0\1\15\3\0"+
    "\1\21\10\0\4\42\6\0\1\42\2\215\1\42\1\44"+
    "\5\42\2\215\1\42\4\0\1\42\1\0\1\42\2\215"+
    "\2\42\1\44\4\42\1\225\2\42\1\226\1\42\1\215"+
    "\2\42\1\215\3\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\4\42\1\227\21\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\12\42\1\230\11\42\1\231\1\42\5\0\1\42\10\0"+
    "\1\216\3\0\1\217\10\0\4\42\6\0\1\42\2\220"+
    "\7\42\2\220\1\42\4\0\1\42\1\0\1\42\2\220"+
    "\5\42\1\232\4\42\1\233\1\42\1\234\2\42\1\220"+
    "\3\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\12\42\1\235\13\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\5\42\1\236"+
    "\5\42\1\237\1\240\3\42\1\241\5\42\5\0\1\42"+
    "\25\0\4\42\6\0\15\42\4\0\1\42\1\0\1\242"+
    "\25\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\15\42\1\243\10\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\17\42\1\244"+
    "\6\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\1\245\25\42\5\0\1\42\10\0\1\15"+
    "\3\0\1\21\10\0\4\42\6\0\1\42\2\215\1\42"+
    "\1\44\5\42\2\215\1\42\4\0\1\42\1\0\1\246"+
    "\2\215\1\42\1\247\1\44\11\42\1\215\2\42\1\215"+
    "\3\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\17\42\1\250\6\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\7\42\1\251"+
    "\16\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\10\42\1\252\15\42\5\0\1\42\34\0"+
    "\1\253\61\0\2\254\1\255\2\254\1\0\2\254\1\256"+
    "\44\254\1\257\40\254\2\101\1\0\2\101\1\0\110\101"+
    "\2\260\1\255\2\260\1\0\6\260\1\261\40\260\1\262"+
    "\40\260\10\0\1\100\3\0\1\102\23\0\2\263\7\0"+
    "\2\263\10\0\2\263\14\0\1\263\2\0\1\263\11\0"+
    "\2\264\1\0\2\264\1\0\2\264\1\265\44\264\1\266"+
    "\40\264\2\267\1\0\2\267\1\0\6\267\1\270\40\267"+
    "\1\271\40\267\2\0\1\272\3\0\1\273\2\0\1\274"+
    "\22\0\1\205\71\0\1\104\3\0\1\105\10\0\4\42"+
    "\6\0\1\42\2\275\1\42\1\44\5\42\2\275\1\42"+
    "\4\0\1\42\1\0\1\42\2\275\2\42\1\44\11\42"+
    "\1\275\2\42\1\275\3\42\5\0\1\42\10\0\1\104"+
    "\3\0\1\105\10\0\4\42\6\0\1\42\2\275\1\42"+
    "\1\44\5\42\2\275\1\42\4\0\1\42\1\0\1\42"+
    "\2\275\2\42\1\44\11\42\1\276\2\42\1\275\3\42"+
    "\5\0\1\42\10\0\1\104\3\0\1\105\10\0\4\42"+
    "\6\0\1\42\2\275\1\42\1\44\5\42\2\275\1\42"+
    "\4\0\1\42\1\0\1\42\2\275\2\42\1\44\4\42"+
    "\1\225\2\42\1\226\1\42\1\275\2\42\1\275\3\42"+
    "\5\0\1\42\10\0\1\104\3\0\1\105\10\0\4\42"+
    "\6\0\1\42\2\275\1\42\1\44\5\42\2\275\1\42"+
    "\4\0\1\42\1\0\1\246\2\275\1\42\1\247\1\44"+
    "\11\42\1\275\2\42\1\275\3\42\5\0\1\42\2\113"+
    "\1\0\2\113\1\0\2\113\1\0\3\113\1\0\40\113"+
    "\1\277\32\113\1\300\5\113\10\0\1\301\121\0\1\302"+
    "\101\0\47\113\1\303\40\113\1\0\1\113\1\0\3\113"+
    "\110\0\1\113\5\0\1\304\2\0\2\304\2\0\1\304"+
    "\1\0\3\304\1\0\14\304\1\0\2\304\1\146\55\304"+
    "\1\0\3\304\2\305\1\0\2\305\1\0\2\305\1\306"+
    "\44\305\1\307\40\305\2\310\1\0\2\310\1\0\6\310"+
    "\1\311\40\310\1\312\40\310\34\0\1\313\71\0\1\123"+
    "\3\0\1\124\10\0\4\42\6\0\1\42\2\314\1\42"+
    "\1\131\5\42\2\314\1\42\4\0\1\42\1\0\1\42"+
    "\2\314\2\42\1\131\11\42\1\314\2\42\1\314\3\42"+
    "\5\0\1\42\10\0\1\315\3\0\1\316\10\0\4\42"+
    "\6\0\1\42\2\317\7\42\2\317\1\42\4\0\1\42"+
    "\1\0\1\42\2\317\14\42\1\317\2\42\1\317\3\42"+
    "\5\0\1\42\10\0\1\123\3\0\1\124\10\0\4\42"+
    "\6\0\1\42\2\314\1\42\1\131\5\42\2\314\1\42"+
    "\4\0\1\42\1\0\1\42\2\314\2\42\1\131\11\42"+
    "\1\320\2\42\1\314\3\42\5\0\1\42\10\0\1\123"+
    "\3\0\1\124\10\0\4\42\6\0\1\42\2\314\1\42"+
    "\1\131\5\42\2\314\1\42\4\0\1\42\1\0\1\42"+
    "\2\314\2\42\1\131\4\42\1\225\2\42\1\226\1\42"+
    "\1\314\2\42\1\314\3\42\5\0\1\42\10\0\1\315"+
    "\3\0\1\316\10\0\4\42\6\0\1\42\2\317\7\42"+
    "\2\317\1\42\4\0\1\42\1\0\1\42\2\317\5\42"+
    "\1\232\4\42\1\233\1\42\1\321\2\42\1\317\3\42"+
    "\5\0\1\42\10\0\1\123\3\0\1\124\10\0\4\42"+
    "\6\0\1\42\2\314\1\42\1\131\5\42\2\314\1\42"+
    "\4\0\1\42\1\0\1\246\2\314\1\42\1\247\1\131"+
    "\11\42\1\314\2\42\1\314\3\42\5\0\1\42\2\142"+
    "\1\0\2\142\1\0\2\142\1\0\3\142\1\0\40\142"+
    "\1\322\32\142\1\0\1\142\1\0\52\142\1\323\40\142"+
    "\1\0\1\142\1\0\3\142\2\147\1\150\2\147\1\0"+
    "\2\147\1\324\44\147\1\152\40\147\1\0\1\325\1\150"+
    "\3\0\1\325\1\0\1\326\21\0\1\150\22\0\1\327"+
    "\40\0\116\147\2\155\1\150\2\155\1\0\6\155\1\324"+
    "\40\155\1\157\40\155\1\0\1\325\1\150\3\0\1\325"+
    "\5\0\1\330\15\0\1\150\22\0\1\327\40\0\116\155"+
    "\34\0\1\331\106\0\4\165\11\0\1\174\2\0\1\175"+
    "\12\0\1\332\5\0\1\174\63\0\1\333\106\0\4\165"+
    "\11\0\1\174\2\0\1\175\20\0\1\174\52\0\1\170"+
    "\1\0\3\171\1\172\11\0\1\174\2\0\1\175\1\176"+
    "\3\0\1\200\5\0\1\202\5\0\1\174\5\0\1\203"+
    "\7\0\1\200\34\0\1\170\1\0\4\172\11\0\1\174"+
    "\2\0\1\175\12\0\1\334\5\0\1\174\54\0\2\335"+
    "\31\0\1\336\55\0\1\337\1\0\1\337\2\0\4\340"+
    "\133\0\1\341\3\0\1\342\31\0\1\342\36\0\3\343"+
    "\30\0\1\344\103\0\1\345\25\0\1\346\46\0\4\347"+
    "\6\0\5\347\14\0\1\350\1\0\6\347\53\0\3\171"+
    "\1\172\137\0\1\342\21\0\1\341\7\0\1\342\36\0"+
    "\4\33\121\0\1\351\115\0\1\352\71\0\1\15\3\0"+
    "\1\21\10\0\4\42\6\0\1\42\2\353\1\42\1\44"+
    "\5\42\2\353\1\42\4\0\1\42\1\0\1\42\2\353"+
    "\2\42\1\44\11\42\1\353\2\42\1\353\3\42\5\0"+
    "\1\42\10\0\1\354\121\0\1\355\111\0\1\216\3\0"+
    "\1\217\10\0\4\42\6\0\1\42\2\356\7\42\2\356"+
    "\1\42\4\0\1\42\1\0\1\42\2\356\14\42\1\356"+
    "\2\42\1\356\3\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\3\42\1\357\22\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\20\42\1\360\5\42\5\0\1\42\10\0\1\15\3\0"+
    "\1\21\10\0\4\42\6\0\1\42\2\353\1\42\1\44"+
    "\5\42\2\353\1\42\4\0\1\42\1\0\1\42\2\353"+
    "\1\42\1\361\1\44\11\42\1\353\2\42\1\353\3\42"+
    "\5\0\1\42\25\0\4\42\6\0\15\42\4\0\1\42"+
    "\1\0\1\362\25\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\14\42\1\363\11\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\5\42\1\364\4\42\1\365\13\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\10\42\1\366"+
    "\7\42\1\367\5\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\2\42\1\370\23\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\14\42\1\371\11\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\17\42\1\372\6\42\5\0"+
    "\1\42\10\0\1\216\3\0\1\217\10\0\4\42\6\0"+
    "\1\42\2\356\7\42\2\356\1\42\4\0\1\42\1\0"+
    "\1\42\2\356\12\42\1\373\1\42\1\356\2\42\1\356"+
    "\3\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\15\42\1\374\10\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\16\42\1\375"+
    "\7\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\13\42\1\376\12\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\21\42\1\377"+
    "\4\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\20\42\1\u0100\5\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\10\42\1\u0101"+
    "\15\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\21\42\1\u0102\4\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\25\42\1\u0103"+
    "\5\0\1\42\25\0\4\42\6\0\15\42\4\0\1\42"+
    "\1\0\10\42\1\u0104\15\42\5\0\1\42\25\0\4\42"+
    "\6\0\15\42\4\0\1\42\1\0\4\42\1\u0105\21\42"+
    "\5\0\1\42\2\254\1\255\2\254\1\0\2\254\1\u0106"+
    "\44\254\1\257\40\254\1\0\1\u0107\1\255\3\0\1\u0107"+
    "\1\0\1\u0108\21\0\1\255\22\0\1\u0109\40\0\116\254"+
    "\2\260\1\255\2\260\1\0\6\260\1\u0106\40\260\1\262"+
    "\40\260\1\0\1\u0107\1\255\3\0\1\u0107\5\0\1\u010a"+
    "\15\0\1\255\22\0\1\u0109\40\0\116\260\10\0\1\100"+
    "\3\0\1\102\23\0\2\u010b\7\0\2\u010b\10\0\2\u010b"+
    "\14\0\1\u010b\2\0\1\u010b\11\0\2\264\1\0\2\264"+
    "\1\0\2\264\1\u010c\44\264\1\266\40\264\10\0\1\u010d"+
    "\105\0\116\264\2\267\1\0\2\267\1\0\6\267\1\u010c"+
    "\40\267\1\271\40\267\14\0\1\u010e\101\0\116\267\2\0"+
    "\1\272\3\0\1\273\2\0\1\274\104\0\2\274\1\272"+
    "\2\274\1\0\110\274\10\0\1\104\3\0\1\105\10\0"+
    "\4\42\6\0\1\42\2\u010f\1\42\1\44\5\42\2\u010f"+
    "\1\42\4\0\1\42\1\0\1\42\2\u010f\2\42\1\44"+
    "\11\42\1\u010f\2\42\1\u010f\3\42\5\0\1\42\10\0"+
    "\1\104\3\0\1\105\10\0\4\42\6\0\1\42\2\u010f"+
    "\1\42\1\44\5\42\2\u010f\1\42\4\0\1\42\1\0"+
    "\1\42\2\u010f\1\42\1\361\1\44\11\42\1\u010f\2\42"+
    "\1\u010f\3\42\5\0\1\42\10\0\1\u0110\121\0\1\u0110"+
    "\101\0\2\113\1\0\2\113\1\0\2\113\1\0\3\113"+
    "\1\0\40\113\1\277\32\113\1\303\5\113\1\304\2\0"+
    "\2\304\2\0\1\304\1\0\3\304\1\0\14\304\1\0"+
    "\2\304\1\0\55\304\1\0\3\304\2\305\1\0\2\305"+
    "\1\0\2\305\1\u0111\44\305\1\307\40\305\10\0\1\u0112"+
    "\105\0\116\305\2\310\1\0\2\310\1\0\6\310\1\u0111"+
    "\40\310\1\312\40\310\14\0\1\u0113\101\0\116\310\10\0"+
    "\1\123\3\0\1\124\10\0\4\42\6\0\1\42\2\u0114"+
    "\1\42\1\131\5\42\2\u0114\1\42\4\0\1\42\1\0"+
    "\1\42\2\u0114\2\42\1\131\11\42\1\u0114\2\42\1\u0114"+
    "\3\42\5\0\1\42\10\0\1\u0115\121\0\1\u0116\111\0"+
    "\1\315\3\0\1\316\10\0\4\42\6\0\1\42\2\u0117"+
    "\7\42\2\u0117\1\42\4\0\1\42\1\0\1\42\2\u0117"+
    "\14\42\1\u0117\2\42\1\u0117\3\42\5\0\1\42\10\0"+
    "\1\123\3\0\1\124\10\0\4\42\6\0\1\42\2\u0114"+
    "\1\42\1\131\5\42\2\u0114\1\42\4\0\1\42\1\0"+
    "\1\42\2\u0114\1\42\1\361\1\131\11\42\1\u0114\2\42"+
    "\1\u0114\3\42\5\0\1\42\10\0\1\315\3\0\1\316"+
    "\10\0\4\42\6\0\1\42\2\u0117\7\42\2\u0117\1\42"+
    "\4\0\1\42\1\0\1\42\2\u0117\12\42\1\373\1\42"+
    "\1\u0117\2\42\1\u0117\3\42\5\0\1\42\2\142\1\0"+
    "\2\142\1\0\2\142\1\0\3\142\1\0\40\142\1\322"+
    "\32\142\1\u0118\1\142\1\0\3\142\1\0\1\325\1\150"+
    "\3\0\1\325\23\0\1\150\22\0\1\327\40\0\10\326"+
    "\1\u0119\44\326\1\u011a\40\326\14\330\1\u011b\40\330\1\u011c"+
    "\40\330\25\0\4\172\112\0\2\335\17\0\1\176\3\0"+
    "\1\200\5\0\1\336\13\0\1\203\7\0\1\200\36\0"+
    "\2\335\114\0\4\340\112\0\4\340\14\0\1\175\12\0"+
    "\1\337\107\0\1\342\31\0\1\342\36\0\3\343\16\0"+
    "\1\176\3\0\1\200\5\0\1\344\13\0\1\203\7\0"+
    "\1\200\36\0\3\343\134\0\1\342\143\0\1\342\46\0"+
    "\4\347\6\0\5\347\2\0\1\176\3\0\1\200\5\0"+
    "\1\350\1\0\6\347\4\0\1\203\7\0\1\200\36\0"+
    "\4\347\6\0\5\347\16\0\6\347\36\0\1\15\3\0"+
    "\1\21\10\0\4\42\6\0\4\42\1\44\10\42\4\0"+
    "\1\42\1\0\5\42\1\44\20\42\5\0\1\42\10\0"+
    "\1\u011d\121\0\1\u011d\111\0\1\216\3\0\1\217\10\0"+
    "\4\42\6\0\1\42\2\u011e\7\42\2\u011e\1\42\4\0"+
    "\1\42\1\0\1\42\2\u011e\14\42\1\u011e\2\42\1\u011e"+
    "\3\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\4\42\1\u011f\21\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\1\u0120\25\42"+
    "\5\0\1\42\25\0\4\42\6\0\15\42\4\0\1\42"+
    "\1\0\20\42\1\u0121\5\42\5\0\1\42\25\0\4\42"+
    "\6\0\15\42\4\0\1\42\1\0\21\42\1\u0122\4\42"+
    "\5\0\1\42\25\0\4\42\6\0\15\42\4\0\1\42"+
    "\1\0\5\42\1\u0123\20\42\5\0\1\42\25\0\4\42"+
    "\6\0\15\42\4\0\1\42\1\0\4\42\1\u0124\21\42"+
    "\5\0\1\42\25\0\4\42\6\0\15\42\4\0\1\42"+
    "\1\0\4\42\1\u0125\21\42\5\0\1\42\25\0\4\42"+
    "\6\0\15\42\4\0\1\42\1\0\1\u0126\25\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\13\42\1\u0127\12\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\1\42\1\u0128\24\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\15\42\1\u0129\10\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\1\42\1\u012a\24\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\20\42\1\u012b\5\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\20\42\1\u012c\5\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\22\42\1\u012d\3\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\12\42\1\u012e\13\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\12\42\1\u012f\13\42\5\0\1\42\1\0\1\u0107\1\255"+
    "\3\0\1\u0107\23\0\1\255\22\0\1\u0109\40\0\10\u0108"+
    "\1\u0130\44\u0108\1\u0131\40\u0108\14\u010a\1\u0132\40\u010a\1\u0133"+
    "\40\u010a\10\0\1\100\3\0\1\102\101\0\10\u010d\1\u0134"+
    "\44\u010d\1\u0135\40\u010d\14\u010e\1\u0136\40\u010e\1\u0137\40\u010e"+
    "\10\0\1\104\3\0\1\105\10\0\4\42\6\0\4\42"+
    "\1\44\10\42\4\0\1\42\1\0\5\42\1\44\20\42"+
    "\5\0\1\42\10\u0112\1\u0138\44\u0112\1\u0139\40\u0112\14\u0113"+
    "\1\u013a\40\u0113\1\u013b\40\u0113\10\0\1\123\3\0\1\124"+
    "\10\0\4\42\6\0\4\42\1\131\10\42\4\0\1\42"+
    "\1\0\5\42\1\131\20\42\5\0\1\42\10\0\1\u013c"+
    "\121\0\1\u013c\111\0\1\315\3\0\1\316\10\0\4\42"+
    "\6\0\1\42\2\u013d\7\42\2\u013d\1\42\4\0\1\42"+
    "\1\0\1\42\2\u013d\14\42\1\u013d\2\42\1\u013d\3\42"+
    "\5\0\1\42\2\142\1\0\2\142\1\0\1\u0118\1\142"+
    "\1\0\3\142\1\0\10\142\4\u0118\6\142\15\u0118\1\142"+
    "\1\322\2\142\1\u0118\1\142\26\u0118\1\0\4\142\1\u0118"+
    "\10\326\1\u013e\44\326\1\u013f\156\326\14\330\1\u0140\40\330"+
    "\1\u0141\156\330\10\0\1\216\3\0\1\217\10\0\4\42"+
    "\6\0\15\42\4\0\1\42\1\0\26\42\5\0\1\42"+
    "\25\0\4\42\6\0\15\42\4\0\1\42\1\0\17\42"+
    "\1\u0142\6\42\5\0\1\42\25\0\4\42\6\0\15\42"+
    "\4\0\1\42\1\0\11\42\1\u0143\14\42\5\0\1\42"+
    "\25\0\4\42\6\0\15\42\4\0\1\42\1\0\20\42"+
    "\1\u0144\5\42\5\0\1\42\25\0\4\42\6\0\15\42"+
    "\4\0\1\42\1\0\10\42\1\u0145\15\42\5\0\1\42"+
    "\25\0\4\42\6\0\15\42\4\0\1\42\1\0\16\42"+
    "\1\u0146\7\42\5\0\1\42\25\0\4\42\6\0\15\42"+
    "\4\0\1\42\1\0\12\42\1\u0147\13\42\5\0\1\42"+
    "\25\0\4\42\6\0\15\42\4\0\1\42\1\0\1\u0148"+
    "\25\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\17\42\1\u0149\6\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\3\42\1\u014a"+
    "\22\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\4\42\1\u014b\21\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\17\42\1\u014c"+
    "\6\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\4\42\1\u014d\21\42\5\0\1\42\25\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\3\42\1\u014e"+
    "\22\42\5\0\1\42\10\u0108\1\u014f\44\u0108\1\u0150\156\u0108"+
    "\14\u010a\1\u0151\40\u010a\1\u0152\156\u010a\10\u010d\1\u0153\44\u010d"+
    "\1\u0135\156\u010d\14\u010e\1\u0154\40\u010e\1\u0137\156\u010e\10\u0112"+
    "\1\u0155\44\u0112\1\u0139\156\u0112\14\u0113\1\u0156\40\u0113\1\u013b"+
    "\156\u0113\10\0\1\315\3\0\1\316\10\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\26\42\5\0\1\42\10\326"+
    "\1\u0157\44\326\1\u013f\40\326\14\330\1\u0157\40\330\1\u0141"+
    "\40\330\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\21\42\1\u0158\4\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\14\42\1\u0159\11\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\21\42\1\u015a\4\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\12\42\1\u015b\13\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\12\42\1\u015c\13\42\5\0\1\42\25\0\4\42\6\0"+
    "\15\42\4\0\1\42\1\0\21\42\1\u015d\4\42\5\0"+
    "\1\42\25\0\4\42\6\0\15\42\4\0\1\42\1\0"+
    "\1\u015e\25\42\5\0\1\42\25\0\4\42\6\0\15\42"+
    "\4\0\1\42\1\0\14\42\1\u015f\11\42\5\0\1\42"+
    "\10\u0108\1\u0160\44\u0108\1\u0150\40\u0108\14\u010a\1\u0160\40\u010a"+
    "\1\u0152\40\u010a\10\u010d\1\u0161\44\u010d\1\u0135\40\u010d\14\u010e"+
    "\1\u0161\40\u010e\1\u0137\40\u010e\10\u0112\1\u0162\44\u0112\1\u0139"+
    "\40\u0112\14\u0113\1\u0162\40\u0113\1\u013b\40\u0113\1\0\1\u0163"+
    "\1\u0164\3\0\1\u0163\23\0\1\u0164\22\0\1\u0165\65\0"+
    "\4\42\6\0\15\42\4\0\1\42\1\0\22\42\1\u0166"+
    "\3\42\5\0\1\42\25\0\4\42\6\0\15\42\4\0"+
    "\1\42\1\0\25\42\1\u0167\5\0\1\42\25\0\4\42"+
    "\6\0\15\42\4\0\1\42\1\0\4\42\1\u0168\21\42"+
    "\5\0\1\42";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20046];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\5\11\6\1\2\11\2\1\1\11\6\1\1\11"+
    "\7\1\3\11\1\1\1\11\20\1\1\11\1\1\4\11"+
    "\14\1\1\11\4\1\1\11\3\1\2\11\3\1\2\11"+
    "\4\1\2\11\2\1\3\11\1\1\1\11\2\1\2\11"+
    "\4\1\4\11\2\1\1\11\2\1\3\0\1\11\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\11\1\1\4\11"+
    "\1\1\1\11\4\1\1\11\31\1\1\11\1\1\1\11"+
    "\5\1\1\0\6\1\1\11\2\0\2\1\2\0\12\1"+
    "\1\11\6\1\1\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\1\1\2\0\2\1\1\11"+
    "\1\1\1\0\3\1\1\0\2\11\1\1\2\0\31\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\11\3\1\2\11"+
    "\3\1\2\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\22\1\1\0\1\1\1\0\1\1\10\0\1\11\1\1"+
    "\4\0\15\1\10\0\12\1\2\11\1\0\2\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private final PythonLexerKind myKind;
private boolean isConsole() {
  return myKind == PythonLexerKind.CONSOLE;
}
private final PyLexerFStringHelper fStringHelper = new PyLexerFStringHelper(this);

private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PythonLexer(java.io.Reader in, PythonLexerKind kind) {
    this.myKind = kind;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    fStringHelper.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PyTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 122: break;
          case 2:
            { return PyTokenTypes.TAB;
            }
          // fall through
          case 123: break;
          case 3:
            { if (zzCurrentPos == 0 && !isConsole()) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
            }
          // fall through
          case 124: break;
          case 4:
            { return PyTokenTypes.FORMFEED;
            }
          // fall through
          case 125: break;
          case 5:
            { return PyTokenTypes.SPACE;
            }
          // fall through
          case 126: break;
          case 6:
            { if (zzInput == YYEOF && zzStartRead == 0 && !isConsole()) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 127: break;
          case 7:
            { if (zzCurrentPos == 0 && !isConsole()) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
            }
          // fall through
          case 128: break;
          case 8:
            { return PyTokenTypes.PERC;
            }
          // fall through
          case 129: break;
          case 9:
            { return PyTokenTypes.AND;
            }
          // fall through
          case 130: break;
          case 10:
            { return PyTokenTypes.LPAR;
            }
          // fall through
          case 131: break;
          case 11:
            { return PyTokenTypes.RPAR;
            }
          // fall through
          case 132: break;
          case 12:
            { return PyTokenTypes.MULT;
            }
          // fall through
          case 133: break;
          case 13:
            { return PyTokenTypes.PLUS;
            }
          // fall through
          case 134: break;
          case 14:
            { return PyTokenTypes.COMMA;
            }
          // fall through
          case 135: break;
          case 15:
            { return PyTokenTypes.MINUS;
            }
          // fall through
          case 136: break;
          case 16:
            { return PyTokenTypes.DOT;
            }
          // fall through
          case 137: break;
          case 17:
            { return PyTokenTypes.DIV;
            }
          // fall through
          case 138: break;
          case 18:
            { return PyTokenTypes.INTEGER_LITERAL;
            }
          // fall through
          case 139: break;
          case 19:
            { return PyTokenTypes.COLON;
            }
          // fall through
          case 140: break;
          case 20:
            { return PyTokenTypes.SEMICOLON;
            }
          // fall through
          case 141: break;
          case 21:
            { return PyTokenTypes.LT;
            }
          // fall through
          case 142: break;
          case 22:
            { return PyTokenTypes.EQ;
            }
          // fall through
          case 143: break;
          case 23:
            { return PyTokenTypes.GT;
            }
          // fall through
          case 144: break;
          case 24:
            { return PyTokenTypes.AT;
            }
          // fall through
          case 145: break;
          case 25:
            { return PyTokenTypes.IDENTIFIER;
            }
          // fall through
          case 146: break;
          case 26:
            { return PyTokenTypes.LBRACKET;
            }
          // fall through
          case 147: break;
          case 27:
            { return PyTokenTypes.BACKSLASH;
            }
          // fall through
          case 148: break;
          case 28:
            { return PyTokenTypes.RBRACKET;
            }
          // fall through
          case 149: break;
          case 29:
            { return PyTokenTypes.XOR;
            }
          // fall through
          case 150: break;
          case 30:
            { return PyTokenTypes.TICK;
            }
          // fall through
          case 151: break;
          case 31:
            { return PyTokenTypes.LBRACE;
            }
          // fall through
          case 152: break;
          case 32:
            { return PyTokenTypes.OR;
            }
          // fall through
          case 153: break;
          case 33:
            { return PyTokenTypes.RBRACE;
            }
          // fall through
          case 154: break;
          case 34:
            { return PyTokenTypes.TILDE;
            }
          // fall through
          case 155: break;
          case 35:
            { yypushback(1); yybegin(YYINITIAL);
            }
          // fall through
          case 156: break;
          case 36:
            { return PyTokenTypes.LINE_BREAK;
            }
          // fall through
          case 157: break;
          case 37:
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 158: break;
          case 38:
            { return PyTokenTypes.END_OF_LINE_COMMENT;
            }
          // fall through
          case 159: break;
          case 39:
            { return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 160: break;
          case 40:
            { return fStringHelper.getTextTokenType();
            }
          // fall through
          case 161: break;
          case 41:
            { return fStringHelper.handleLineBreakInLiteralText();
            }
          // fall through
          case 162: break;
          case 42:
            { return fStringHelper.handleFStringEnd();
            }
          // fall through
          case 163: break;
          case 43:
            { return fStringHelper.handleFragmentStart();
            }
          // fall through
          case 164: break;
          case 44:
            { return fStringHelper.handleLineBreakInFragment();
            }
          // fall through
          case 165: break;
          case 45:
            { return PyTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION;
            }
          // fall through
          case 166: break;
          case 46:
            { return fStringHelper.handleStringLiteral(PyTokenTypes.SINGLE_QUOTED_STRING);
            }
          // fall through
          case 167: break;
          case 47:
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LPAR);
            }
          // fall through
          case 168: break;
          case 48:
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RPAR);
            }
          // fall through
          case 169: break;
          case 49:
            { return fStringHelper.handleColonInFragment();
            }
          // fall through
          case 170: break;
          case 50:
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LBRACKET);
            }
          // fall through
          case 171: break;
          case 51:
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RBRACKET);
            }
          // fall through
          case 172: break;
          case 52:
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LBRACE);
            }
          // fall through
          case 173: break;
          case 53:
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RBRACE);
            }
          // fall through
          case 174: break;
          case 54:
            { return fStringHelper.handleFragmentEnd();
            }
          // fall through
          case 175: break;
          case 55:
            { return PyTokenTypes.NE;
            }
          // fall through
          case 176: break;
          case 56:
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 177: break;
          case 57:
            { return PyTokenTypes.PERCEQ;
            }
          // fall through
          case 178: break;
          case 58:
            { return PyTokenTypes.ANDEQ;
            }
          // fall through
          case 179: break;
          case 59:
            { return PyTokenTypes.EXP;
            }
          // fall through
          case 180: break;
          case 60:
            { return PyTokenTypes.MULTEQ;
            }
          // fall through
          case 181: break;
          case 61:
            { return PyTokenTypes.PLUSEQ;
            }
          // fall through
          case 182: break;
          case 62:
            { return PyTokenTypes.MINUSEQ;
            }
          // fall through
          case 183: break;
          case 63:
            { return PyTokenTypes.RARROW;
            }
          // fall through
          case 184: break;
          case 64:
            { return PyTokenTypes.FLOAT_LITERAL;
            }
          // fall through
          case 185: break;
          case 65:
            { return PyTokenTypes.FLOORDIV;
            }
          // fall through
          case 186: break;
          case 66:
            { return PyTokenTypes.DIVEQ;
            }
          // fall through
          case 187: break;
          case 67:
            { return PyTokenTypes.IMAGINARY_LITERAL;
            }
          // fall through
          case 188: break;
          case 68:
            { return PyTokenTypes.COLONEQ;
            }
          // fall through
          case 189: break;
          case 69:
            { return PyTokenTypes.LTLT;
            }
          // fall through
          case 190: break;
          case 70:
            { return PyTokenTypes.LE;
            }
          // fall through
          case 191: break;
          case 71:
            { return PyTokenTypes.NE_OLD;
            }
          // fall through
          case 192: break;
          case 72:
            { return PyTokenTypes.EQEQ;
            }
          // fall through
          case 193: break;
          case 73:
            { return PyTokenTypes.GE;
            }
          // fall through
          case 194: break;
          case 74:
            { return PyTokenTypes.GTGT;
            }
          // fall through
          case 195: break;
          case 75:
            { return PyTokenTypes.ATEQ;
            }
          // fall through
          case 196: break;
          case 76:
            { return fStringHelper.handleFStringStart();
            }
          // fall through
          case 197: break;
          case 77:
            { return PyTokenTypes.XOREQ;
            }
          // fall through
          case 198: break;
          case 78:
            { return PyTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 199: break;
          case 79:
            { return PyTokenTypes.IN_KEYWORD;
            }
          // fall through
          case 200: break;
          case 80:
            { return PyTokenTypes.IS_KEYWORD;
            }
          // fall through
          case 201: break;
          case 81:
            { return PyTokenTypes.OR_KEYWORD;
            }
          // fall through
          case 202: break;
          case 82:
            { return PyTokenTypes.OREQ;
            }
          // fall through
          case 203: break;
          case 83:
            { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 204: break;
          case 84:
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
            }
          // fall through
          case 205: break;
          case 85:
            { return fStringHelper.handleColonEqInFragment();
            }
          // fall through
          case 206: break;
          case 86:
            { return fStringHelper.handleFStringStartInFragment();
            }
          // fall through
          case 207: break;
          case 87:
            { if (zzInput == YYEOF && zzStartRead == 0 && !isConsole()) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 208: break;
          case 88:
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 209: break;
          case 89:
            { return PyTokenTypes.EXPEQ;
            }
          // fall through
          case 210: break;
          case 90:
            { return PyTokenTypes.FLOORDIVEQ;
            }
          // fall through
          case 211: break;
          case 91:
            { return PyTokenTypes.LTLTEQ;
            }
          // fall through
          case 212: break;
          case 92:
            { return PyTokenTypes.GTGTEQ;
            }
          // fall through
          case 213: break;
          case 93:
            { return PyTokenTypes.AND_KEYWORD;
            }
          // fall through
          case 214: break;
          case 94:
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
            }
          // fall through
          case 215: break;
          case 95:
            { return PyTokenTypes.DEL_KEYWORD;
            }
          // fall through
          case 216: break;
          case 96:
            { return PyTokenTypes.FOR_KEYWORD;
            }
          // fall through
          case 217: break;
          case 97:
            { return PyTokenTypes.NOT_KEYWORD;
            }
          // fall through
          case 218: break;
          case 98:
            { return PyTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 219: break;
          case 99:
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 220: break;
          case 100:
            { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 221: break;
          case 101:
            { return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 222: break;
          case 102:
            { return fStringHelper.handleStringLiteral(PyTokenTypes.TRIPLE_QUOTED_STRING);
            }
          // fall through
          case 223: break;
          case 103:
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 224: break;
          case 104:
            { return PyTokenTypes.ELIF_KEYWORD;
            }
          // fall through
          case 225: break;
          case 105:
            { return PyTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 226: break;
          case 106:
            { return PyTokenTypes.FROM_KEYWORD;
            }
          // fall through
          case 227: break;
          case 107:
            { return PyTokenTypes.PASS_KEYWORD;
            }
          // fall through
          case 228: break;
          case 108:
            { return PyTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 229: break;
          case 109:
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
            }
          // fall through
          case 230: break;
          case 110:
            { return PyTokenTypes.RAISE_KEYWORD;
            }
          // fall through
          case 231: break;
          case 111:
            { return PyTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 232: break;
          case 112:
            { return PyTokenTypes.YIELD_KEYWORD;
            }
          // fall through
          case 233: break;
          case 113:
            { return PyTokenTypes.ASSERT_KEYWORD;
            }
          // fall through
          case 234: break;
          case 114:
            { return PyTokenTypes.EXCEPT_KEYWORD;
            }
          // fall through
          case 235: break;
          case 115:
            { return PyTokenTypes.GLOBAL_KEYWORD;
            }
          // fall through
          case 236: break;
          case 116:
            { return PyTokenTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 237: break;
          case 117:
            { return PyTokenTypes.LAMBDA_KEYWORD;
            }
          // fall through
          case 238: break;
          case 118:
            { return PyTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 239: break;
          case 119:
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 240: break;
          case 120:
            { return PyTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 241: break;
          case 121:
            { return PyTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 242: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
