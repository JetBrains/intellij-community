import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id "com.jetbrains.python.envs" version "0.0.9"
}


envs {
  bootstrapDirectory = new File(System.getenv().getOrDefault("PYCHARM_PYTHONS", new File(buildDir, 'pythons').path))
  envsDirectory = new File(System.getenv().getOrDefault("PYCHARM_PYTHON_VIRTUAL_ENVS", new File(buildDir, 'envs').path))
  minicondaVersion = 'latest'
  packages = ["pip", "setuptools"]
  _64Bits = true

  conda "django19", "2.7", ["django==1.9", "tox", "nose", "pytest", "behave", "lettuce>=0.2.22"], true
  textfile "django19/tags.txt", "django\nnose\npytest\nbehave\nlettuce\npackaging\ntox"

  conda "django110", "3.4", ["django==1.10"], false
  textfile "django110/tags.txt", "django\nskeletons"

  conda "python34", "3.4", ["ipython==2.1", "django==1.8", "behave", "jinja2", "tox>=2.0", "pandas"], true
  textfile "python34/tags.txt", "python3\nipython\nipython200\nskeletons\ndjango\nbehave\ntox\njinja2\npython34\npackaging\npandas"

  if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
    conda "pyqt_env", "2.7", [install("pyqt=5.6.0")], true
    textfile "pyqt_env/tags.txt", "pyqt5"
//    jython "jython25", []
//    textfile "jython25/tags.txt", "jython"
  }

  conda "django_latest", "3.5", ["django"], true
  textfile "django_latest/tags.txt", "django"
}

if (new File(envs.envsDirectory, "django_latest").exists() && 
    new File(envs.envsDirectory, "django_latest").lastModified()<System.currentTimeMillis() - 24*60*60*1000) {
  // older then a day
  println "Cleaning django_latest at" + new File(envs.envsDirectory, "django_latest")
  delete new File(envs.envsDirectory, "django_latest")
}

def bootstrapDirNotEmpty = envs.bootstrapDirectory.exists() &&
                        (new File(envs.bootstrapDirectory, "latest_64/bin/conda").exists() ||
                         new File(envs.bootstrapDirectory, "latest_64/Scripts/conda.exe").exists())

if (!bootstrapDirNotEmpty || (System.getenv("NO_CLEAN") == null && envs.envsDirectory.exists() &&
    envs.envsDirectory.lastModified() < project.buildscript.sourceFile.lastModified())) {
  // clean the cache if the build script if modified later
  println "Cleaning cached environments at " + envs.envsDirectory
  delete envs.envsDirectory
  println "Cleaning cached pythons at " + envs.bootstrapDirectory
  delete envs.bootstrapDirectory
}
