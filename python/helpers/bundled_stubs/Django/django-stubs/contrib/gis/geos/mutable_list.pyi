from typing import Any

from typing_extensions import Self

class ListMixin:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getitem__(self, index: int | slice) -> Any: ...
    def __delitem__(self, index: int | slice) -> None: ...
    def __setitem__(self, index: int | slice, val: Any) -> None: ...
    def __add__(self, other: Any) -> Self: ...
    def __radd__(self, other: Any) -> Any: ...
    def __iadd__(self, other: Any) -> Self: ...
    def __mul__(self, n: int) -> Self: ...
    def __rmul__(self, n: int) -> Self: ...
    def __imul__(self, n: int) -> Self: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def count(self, val: Any) -> int: ...
    def index(self, val: Any) -> int: ...
    def append(self, val: Any) -> None: ...
    def extend(self, vals: Any) -> None: ...
    def insert(self, index: int, val: Any) -> None: ...
    def pop(self, index: int = ...) -> Any: ...
    def remove(self, val: Any) -> None: ...
    def reverse(self) -> None: ...
    def sort(self, key: Any | None = ..., reverse: bool = ...) -> None: ...
