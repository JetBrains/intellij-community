from abc import ABC
from typing import Any

class Transition(ABC):
    def dict_as_string(self) -> None: ...

class SplitTransition(Transition):
    dimension: Any
    direction: Any
    def __init__(self, dimension, direction) -> None: ...
    def dict_as_string(self): ...

class BlindsTransition(Transition):
    dimension: Any
    def __init__(self, dimension) -> None: ...
    def dict_as_string(self): ...

class BoxTransition(Transition):
    direction: Any
    def __init__(self, direction) -> None: ...
    def dict_as_string(self): ...

class WipeTransition(Transition):
    direction: Any
    def __init__(self, direction) -> None: ...
    def dict_as_string(self): ...

class DissolveTransition(Transition):
    def dict_as_string(self): ...

class GlitterTransition(Transition):
    direction: Any
    def __init__(self, direction) -> None: ...
    def dict_as_string(self): ...

class FlyTransition(Transition):
    dimension: Any
    direction: Any
    def __init__(self, dimension, direction: Any | None = ...) -> None: ...
    def dict_as_string(self): ...

class PushTransition(Transition):
    direction: Any
    def __init__(self, direction) -> None: ...
    def dict_as_string(self): ...

class CoverTransition(Transition):
    direction: Any
    def __init__(self, direction) -> None: ...
    def dict_as_string(self): ...

class UncoverTransition(Transition):
    direction: Any
    def __init__(self, direction) -> None: ...
    def dict_as_string(self): ...

class FadeTransition(Transition):
    def dict_as_string(self): ...
