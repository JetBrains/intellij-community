from typing import Any

class CollectionNotFound(Exception):
    name: Any
    start: Any
    def __init__(self, name, start) -> None: ...

class Failure(Exception):
    result: Any
    reason: Any
    def __init__(self, result, reason=...) -> None: ...
    def streams_for_display(self): ...

class UnexpectedExit(Failure): ...

class CommandTimedOut(Failure):
    timeout: Any
    def __init__(self, result, timeout) -> None: ...

class AuthFailure(Failure):
    result: Any
    prompt: Any
    def __init__(self, result, prompt) -> None: ...

class ParseError(Exception):
    context: Any
    def __init__(self, msg, context=...) -> None: ...

class Exit(Exception):
    message: Any
    def __init__(self, message=..., code=...) -> None: ...
    @property
    def code(self): ...

class PlatformError(Exception): ...
class AmbiguousEnvVar(Exception): ...
class UncastableEnvVar(Exception): ...
class UnknownFileType(Exception): ...
class UnpicklableConfigMember(Exception): ...

class ThreadException(Exception):
    exceptions: Any
    def __init__(self, exceptions) -> None: ...

class WatcherError(Exception): ...
class ResponseNotAccepted(WatcherError): ...
class SubprocessPipeError(Exception): ...
