from _typeshed import Incomplete

from networkx.utils.backends import _dispatch

@_dispatch
def complete_bipartite_graph(n1, n2, create_using: Incomplete | None = None): ...
@_dispatch
def configuration_model(aseq, bseq, create_using: Incomplete | None = None, seed: Incomplete | None = None): ...
@_dispatch
def havel_hakimi_graph(aseq, bseq, create_using: Incomplete | None = None): ...
@_dispatch
def reverse_havel_hakimi_graph(aseq, bseq, create_using: Incomplete | None = None): ...
@_dispatch
def alternating_havel_hakimi_graph(aseq, bseq, create_using: Incomplete | None = None): ...
@_dispatch
def preferential_attachment_graph(aseq, p, create_using: Incomplete | None = None, seed: Incomplete | None = None): ...
@_dispatch
def random_graph(n, m, p, seed: Incomplete | None = None, directed: bool = False): ...
@_dispatch
def gnmk_random_graph(n, m, k, seed: Incomplete | None = None, directed: bool = False): ...
