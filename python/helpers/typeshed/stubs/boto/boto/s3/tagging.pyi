from _typeshed import Incomplete
from typing import Any

class Tag:
    key: Any
    value: Any
    def __init__(self, key: Incomplete | None = None, value: Incomplete | None = None) -> None: ...
    def startElement(self, name, attrs, connection): ...
    def endElement(self, name, value, connection): ...
    def to_xml(self): ...
    def __eq__(self, other): ...

class TagSet(list[Tag]):
    def startElement(self, name, attrs, connection): ...
    def endElement(self, name, value, connection): ...
    def add_tag(self, key, value): ...
    def to_xml(self): ...

class Tags(list[TagSet]):
    def startElement(self, name, attrs, connection): ...
    def endElement(self, name, value, connection): ...
    def to_xml(self): ...
    def add_tag_set(self, tag_set): ...
