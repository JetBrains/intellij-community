from typing import Any

class ProxyTypeFactory:
    @staticmethod
    def make(ff_value, string): ...

class ProxyType:
    DIRECT: Any
    MANUAL: Any
    PAC: Any
    RESERVED_1: Any
    AUTODETECT: Any
    SYSTEM: Any
    UNSPECIFIED: Any
    @classmethod
    def load(cls, value): ...

class Proxy:
    proxyType: Any
    autodetect: bool
    ftpProxy: str
    httpProxy: str
    noProxy: str
    proxyAutoconfigUrl: str
    sslProxy: str
    socksProxy: str
    socksUsername: str
    socksPassword: str
    def __init__(self, raw: Any | None = ...) -> None: ...
    @property
    def proxy_type(self): ...
    @proxy_type.setter
    def proxy_type(self, value) -> None: ...
    @property
    def auto_detect(self): ...
    @auto_detect.setter
    def auto_detect(self, value) -> None: ...
    @property
    def ftp_proxy(self): ...
    @ftp_proxy.setter
    def ftp_proxy(self, value) -> None: ...
    @property
    def http_proxy(self): ...
    @http_proxy.setter
    def http_proxy(self, value) -> None: ...
    @property
    def no_proxy(self): ...
    @no_proxy.setter
    def no_proxy(self, value) -> None: ...
    @property
    def proxy_autoconfig_url(self): ...
    @proxy_autoconfig_url.setter
    def proxy_autoconfig_url(self, value) -> None: ...
    @property
    def ssl_proxy(self): ...
    @ssl_proxy.setter
    def ssl_proxy(self, value) -> None: ...
    @property
    def socks_proxy(self): ...
    @socks_proxy.setter
    def socks_proxy(self, value) -> None: ...
    @property
    def socks_username(self): ...
    @socks_username.setter
    def socks_username(self, value) -> None: ...
    @property
    def socks_password(self): ...
    @socks_password.setter
    def socks_password(self, value) -> None: ...
    def add_to_capabilities(self, capabilities) -> None: ...
