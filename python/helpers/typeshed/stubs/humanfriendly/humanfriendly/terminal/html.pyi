from _typeshed import Incomplete
from typing import Any

from humanfriendly.compat import HTMLParser

def html_to_ansi(data, callback: Incomplete | None = None): ...

class HTMLConverter(HTMLParser):
    BLOCK_TAGS: Any
    callback: Any
    output: Any
    def __init__(self, *args, **kw) -> None: ...
    def __call__(self, data): ...
    @property
    def current_style(self): ...
    stack: Any
    def close(self) -> None: ...
    def emit_style(self, style: Incomplete | None = None) -> None: ...
    def handle_charref(self, value) -> None: ...
    link_text: Any
    def handle_data(self, data) -> None: ...
    def handle_endtag(self, tag) -> None: ...
    def handle_entityref(self, name) -> None: ...
    link_url: Any
    def handle_starttag(self, tag, attrs) -> None: ...
    def normalize_url(self, url): ...
    def parse_color(self, value): ...
    def push_styles(self, **changes) -> None: ...
    def render_url(self, url): ...
    preformatted_text_level: int
    def reset(self) -> None: ...
    def urls_match(self, a, b): ...
