from typing import Any

reContainer: Any

def is_container(node): ...

class NodeWalker:
    current: Any
    root: Any
    entering: bool
    def __init__(self, root) -> None: ...
    def __next__(self): ...
    next: Any
    def __iter__(self): ...
    def nxt(self): ...
    def resume_at(self, node, entering) -> None: ...

class Node:
    t: Any
    parent: Any
    first_child: Any
    last_child: Any
    prv: Any
    nxt: Any
    sourcepos: Any
    last_line_blank: bool
    last_line_checked: bool
    is_open: bool
    string_content: str
    literal: Any
    list_data: Any
    info: Any
    destination: Any
    title: Any
    is_fenced: bool
    fence_char: Any
    fence_length: int
    fence_offset: Any
    level: Any
    on_enter: Any
    on_exit: Any
    def __init__(self, node_type, sourcepos) -> None: ...
    def pretty(self) -> None: ...
    def normalize(self) -> None: ...
    def is_container(self): ...
    def append_child(self, child) -> None: ...
    def prepend_child(self, child) -> None: ...
    def unlink(self) -> None: ...
    def insert_after(self, sibling) -> None: ...
    def insert_before(self, sibling) -> None: ...
    def walker(self): ...
