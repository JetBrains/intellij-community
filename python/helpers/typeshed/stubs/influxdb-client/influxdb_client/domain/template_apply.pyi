from _typeshed import Incomplete

class TemplateApply:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        dry_run: Incomplete | None = None,
        org_id: Incomplete | None = None,
        stack_id: Incomplete | None = None,
        template: Incomplete | None = None,
        templates: Incomplete | None = None,
        env_refs: Incomplete | None = None,
        secrets: Incomplete | None = None,
        remotes: Incomplete | None = None,
        actions: Incomplete | None = None,
    ) -> None: ...
    @property
    def dry_run(self): ...
    @dry_run.setter
    def dry_run(self, dry_run) -> None: ...
    @property
    def org_id(self): ...
    @org_id.setter
    def org_id(self, org_id) -> None: ...
    @property
    def stack_id(self): ...
    @stack_id.setter
    def stack_id(self, stack_id) -> None: ...
    @property
    def template(self): ...
    @template.setter
    def template(self, template) -> None: ...
    @property
    def templates(self): ...
    @templates.setter
    def templates(self, templates) -> None: ...
    @property
    def env_refs(self): ...
    @env_refs.setter
    def env_refs(self, env_refs) -> None: ...
    @property
    def secrets(self): ...
    @secrets.setter
    def secrets(self, secrets) -> None: ...
    @property
    def remotes(self): ...
    @remotes.setter
    def remotes(self, remotes) -> None: ...
    @property
    def actions(self): ...
    @actions.setter
    def actions(self, actions) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
