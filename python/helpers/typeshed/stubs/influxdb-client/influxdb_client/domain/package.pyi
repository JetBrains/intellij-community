from _typeshed import Incomplete

class Package:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        type: Incomplete | None = None,
        path: Incomplete | None = None,
        package: Incomplete | None = None,
        files: Incomplete | None = None,
    ) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type) -> None: ...
    @property
    def path(self): ...
    @path.setter
    def path(self, path) -> None: ...
    @property
    def package(self): ...
    @package.setter
    def package(self, package) -> None: ...
    @property
    def files(self): ...
    @files.setter
    def files(self, files) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
