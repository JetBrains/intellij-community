from _typeshed import Incomplete

class DBRPCreate:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        org: str | None = None,
        org_id: str | None = None,
        bucket_id: Incomplete | None = None,
        database: Incomplete | None = None,
        retention_policy: Incomplete | None = None,
        default: Incomplete | None = None,
    ) -> None: ...
    org: str | None
    org_id: str | None
    @property
    def bucket_id(self): ...
    @bucket_id.setter
    def bucket_id(self, bucket_id) -> None: ...
    @property
    def database(self): ...
    @database.setter
    def database(self, database) -> None: ...
    @property
    def retention_policy(self): ...
    @retention_policy.setter
    def retention_policy(self, retention_policy) -> None: ...
    @property
    def default(self): ...
    @default.setter
    def default(self, default) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
