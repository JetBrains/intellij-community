from _typeshed import Incomplete

from influxdb_client.domain.expression import Expression

class ConditionalExpression(Expression):
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        type: Incomplete | None = None,
        test: Incomplete | None = None,
        alternate: Incomplete | None = None,
        consequent: Incomplete | None = None,
    ) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type) -> None: ...
    @property
    def test(self): ...
    @test.setter
    def test(self, test) -> None: ...
    @property
    def alternate(self): ...
    @alternate.setter
    def alternate(self, alternate) -> None: ...
    @property
    def consequent(self): ...
    @consequent.setter
    def consequent(self, consequent) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
