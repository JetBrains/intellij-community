from _typeshed import Incomplete

class StackEvents:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        event_type: Incomplete | None = None,
        name: Incomplete | None = None,
        description: Incomplete | None = None,
        sources: Incomplete | None = None,
        resources: Incomplete | None = None,
        urls: Incomplete | None = None,
        updated_at: Incomplete | None = None,
    ) -> None: ...
    @property
    def event_type(self): ...
    @event_type.setter
    def event_type(self, event_type) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description) -> None: ...
    @property
    def sources(self): ...
    @sources.setter
    def sources(self, sources) -> None: ...
    @property
    def resources(self): ...
    @resources.setter
    def resources(self, resources) -> None: ...
    @property
    def urls(self): ...
    @urls.setter
    def urls(self, urls) -> None: ...
    @property
    def updated_at(self): ...
    @updated_at.setter
    def updated_at(self, updated_at) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
