from _typeshed import Incomplete

class Cell:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        id: Incomplete | None = None,
        links: Incomplete | None = None,
        x: Incomplete | None = None,
        y: Incomplete | None = None,
        w: Incomplete | None = None,
        h: Incomplete | None = None,
        view_id: Incomplete | None = None,
    ) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id) -> None: ...
    @property
    def links(self): ...
    @links.setter
    def links(self, links) -> None: ...
    @property
    def x(self): ...
    @x.setter
    def x(self, x) -> None: ...
    @property
    def y(self): ...
    @y.setter
    def y(self, y) -> None: ...
    @property
    def w(self): ...
    @w.setter
    def w(self, w) -> None: ...
    @property
    def h(self): ...
    @h.setter
    def h(self, h) -> None: ...
    @property
    def view_id(self): ...
    @view_id.setter
    def view_id(self, view_id) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
