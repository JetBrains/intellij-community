from _typeshed import Incomplete

class NotificationRuleBase:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        latest_completed: Incomplete | None = None,
        last_run_status: Incomplete | None = None,
        last_run_error: Incomplete | None = None,
        id: Incomplete | None = None,
        endpoint_id: Incomplete | None = None,
        org_id: Incomplete | None = None,
        task_id: Incomplete | None = None,
        owner_id: Incomplete | None = None,
        created_at: Incomplete | None = None,
        updated_at: Incomplete | None = None,
        status: Incomplete | None = None,
        name: Incomplete | None = None,
        sleep_until: Incomplete | None = None,
        every: Incomplete | None = None,
        offset: Incomplete | None = None,
        runbook_link: Incomplete | None = None,
        limit_every: Incomplete | None = None,
        limit: Incomplete | None = None,
        tag_rules: Incomplete | None = None,
        description: Incomplete | None = None,
        status_rules: Incomplete | None = None,
        labels: Incomplete | None = None,
        links: Incomplete | None = None,
    ) -> None: ...
    @property
    def latest_completed(self): ...
    @latest_completed.setter
    def latest_completed(self, latest_completed) -> None: ...
    @property
    def last_run_status(self): ...
    @last_run_status.setter
    def last_run_status(self, last_run_status) -> None: ...
    @property
    def last_run_error(self): ...
    @last_run_error.setter
    def last_run_error(self, last_run_error) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id) -> None: ...
    @property
    def endpoint_id(self): ...
    @endpoint_id.setter
    def endpoint_id(self, endpoint_id) -> None: ...
    @property
    def org_id(self): ...
    @org_id.setter
    def org_id(self, org_id) -> None: ...
    @property
    def task_id(self): ...
    @task_id.setter
    def task_id(self, task_id) -> None: ...
    @property
    def owner_id(self): ...
    @owner_id.setter
    def owner_id(self, owner_id) -> None: ...
    @property
    def created_at(self): ...
    @created_at.setter
    def created_at(self, created_at) -> None: ...
    @property
    def updated_at(self): ...
    @updated_at.setter
    def updated_at(self, updated_at) -> None: ...
    @property
    def status(self): ...
    @status.setter
    def status(self, status) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name) -> None: ...
    @property
    def sleep_until(self): ...
    @sleep_until.setter
    def sleep_until(self, sleep_until) -> None: ...
    @property
    def every(self): ...
    @every.setter
    def every(self, every) -> None: ...
    @property
    def offset(self): ...
    @offset.setter
    def offset(self, offset) -> None: ...
    @property
    def runbook_link(self): ...
    @runbook_link.setter
    def runbook_link(self, runbook_link) -> None: ...
    @property
    def limit_every(self): ...
    @limit_every.setter
    def limit_every(self, limit_every) -> None: ...
    @property
    def limit(self): ...
    @limit.setter
    def limit(self, limit) -> None: ...
    @property
    def tag_rules(self): ...
    @tag_rules.setter
    def tag_rules(self, tag_rules) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description) -> None: ...
    @property
    def status_rules(self): ...
    @status_rules.setter
    def status_rules(self, status_rules) -> None: ...
    @property
    def labels(self): ...
    @labels.setter
    def labels(self, labels) -> None: ...
    @property
    def links(self): ...
    @links.setter
    def links(self, links) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
