from _typeshed import Incomplete

class TemplateSummarySummaryTasks:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        kind: Incomplete | None = None,
        template_meta_name: Incomplete | None = None,
        id: Incomplete | None = None,
        name: Incomplete | None = None,
        cron: Incomplete | None = None,
        description: Incomplete | None = None,
        every: Incomplete | None = None,
        offset: Incomplete | None = None,
        query: Incomplete | None = None,
        status: Incomplete | None = None,
        env_references: Incomplete | None = None,
    ) -> None: ...
    @property
    def kind(self): ...
    @kind.setter
    def kind(self, kind) -> None: ...
    @property
    def template_meta_name(self): ...
    @template_meta_name.setter
    def template_meta_name(self, template_meta_name) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name) -> None: ...
    @property
    def cron(self): ...
    @cron.setter
    def cron(self, cron) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description) -> None: ...
    @property
    def every(self): ...
    @every.setter
    def every(self, every) -> None: ...
    @property
    def offset(self): ...
    @offset.setter
    def offset(self, offset) -> None: ...
    @property
    def query(self): ...
    @query.setter
    def query(self, query) -> None: ...
    @property
    def status(self): ...
    @status.setter
    def status(self, status) -> None: ...
    @property
    def env_references(self): ...
    @env_references.setter
    def env_references(self, env_references) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
