from _typeshed import Incomplete

class Query:
    openapi_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(
        self,
        extern: Incomplete | None = None,
        query: Incomplete | None = None,
        type: Incomplete | None = None,
        params: Incomplete | None = None,
        dialect: Incomplete | None = None,
        now: Incomplete | None = None,
    ) -> None: ...
    @property
    def extern(self): ...
    @extern.setter
    def extern(self, extern) -> None: ...
    @property
    def query(self): ...
    @query.setter
    def query(self, query) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type) -> None: ...
    @property
    def params(self): ...
    @params.setter
    def params(self, params) -> None: ...
    @property
    def dialect(self): ...
    @dialect.setter
    def dialect(self, dialect) -> None: ...
    @property
    def now(self): ...
    @now.setter
    def now(self, now) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
