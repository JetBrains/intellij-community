from _typeshed import Incomplete

from influxdb_client.service._base_service import _BaseService

class RemoteConnectionsService(_BaseService):
    def __init__(self, api_client: Incomplete | None = None) -> None: ...
    def delete_remote_connection_by_id(self, remote_id, **kwargs): ...
    def delete_remote_connection_by_id_with_http_info(self, remote_id, **kwargs): ...
    async def delete_remote_connection_by_id_async(self, remote_id, **kwargs): ...
    def get_remote_connection_by_id(self, remote_id, **kwargs): ...
    def get_remote_connection_by_id_with_http_info(self, remote_id, **kwargs): ...
    async def get_remote_connection_by_id_async(self, remote_id, **kwargs): ...
    def get_remote_connections(self, org_id, **kwargs): ...
    def get_remote_connections_with_http_info(self, org_id, **kwargs): ...
    async def get_remote_connections_async(self, org_id, **kwargs): ...
    def patch_remote_connection_by_id(self, remote_id, remote_connection_update_request, **kwargs): ...
    def patch_remote_connection_by_id_with_http_info(self, remote_id, remote_connection_update_request, **kwargs): ...
    async def patch_remote_connection_by_id_async(self, remote_id, remote_connection_update_request, **kwargs): ...
    def post_remote_connection(self, remote_connection_creation_request, **kwargs): ...
    def post_remote_connection_with_http_info(self, remote_connection_creation_request, **kwargs): ...
    async def post_remote_connection_async(self, remote_connection_creation_request, **kwargs): ...
