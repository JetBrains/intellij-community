from typing import AnyStr, Callable, ContextManager, IO, Optional, Text, Type

def replace_atomic(src: AnyStr, dst: AnyStr) -> None: ...
def move_atomic(src: AnyStr, dst: AnyStr) -> None: ...
class AtomicWriter(object):
    def __init__(self, path: AnyStr, mode: Text = ..., overwrite: bool = ...) -> None: ...
    def open(self) -> ContextManager[IO]: ...
    def _open(self, get_fileobject: Callable) -> ContextManager[IO]: ...
    def get_fileobject(self, dir: Optional[AnyStr] = ..., **kwargs) -> IO: ...
    def sync(self, f: IO) -> None: ...
    def commit(self, f: IO) -> None: ...
    def rollback(self, f: IO) -> None: ...
def atomic_write(path: AnyStr, writer_cls: Type[AtomicWriter] = ..., **cls_kwargs: object) -> ContextManager[IO]: ...
