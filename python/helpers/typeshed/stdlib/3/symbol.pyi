# Stubs for symbol (Python 3)

import sys
from typing import Dict

single_input = ...  # type: int
file_input = ...  # type: int
eval_input = ...  # type: int
decorator = ...  # type: int
decorators = ...  # type: int
decorated = ...  # type: int
if sys.version_info >= (3, 5):
    async_funcdef = ...  # type: int
funcdef = ...  # type: int
parameters = ...  # type: int
typedargslist = ...  # type: int
tfpdef = ...  # type: int
varargslist = ...  # type: int
vfpdef = ...  # type: int
stmt = ...  # type: int
simple_stmt = ...  # type: int
small_stmt = ...  # type: int
expr_stmt = ...  # type: int
if sys.version_info >= (3, 6):
    annassign = ...  # type: int
testlist_star_expr = ...  # type: int
augassign = ...  # type: int
del_stmt = ...  # type: int
pass_stmt = ...  # type: int
flow_stmt = ...  # type: int
break_stmt = ...  # type: int
continue_stmt = ...  # type: int
return_stmt = ...  # type: int
yield_stmt = ...  # type: int
raise_stmt = ...  # type: int
import_stmt = ...  # type: int
import_name = ...  # type: int
import_from = ...  # type: int
import_as_name = ...  # type: int
dotted_as_name = ...  # type: int
import_as_names = ...  # type: int
dotted_as_names = ...  # type: int
dotted_name = ...  # type: int
global_stmt = ...  # type: int
nonlocal_stmt = ...  # type: int
assert_stmt = ...  # type: int
compound_stmt = ...  # type: int
if sys.version_info >= (3, 5):
    async_stmt = ...  # type: int
if_stmt = ...  # type: int
while_stmt = ...  # type: int
for_stmt = ...  # type: int
try_stmt = ...  # type: int
with_stmt = ...  # type: int
with_item = ...  # type: int
except_clause = ...  # type: int
suite = ...  # type: int
test = ...  # type: int
test_nocond = ...  # type: int
lambdef = ...  # type: int
lambdef_nocond = ...  # type: int
or_test = ...  # type: int
and_test = ...  # type: int
not_test = ...  # type: int
comparison = ...  # type: int
comp_op = ...  # type: int
star_expr = ...  # type: int
expr = ...  # type: int
xor_expr = ...  # type: int
and_expr = ...  # type: int
shift_expr = ...  # type: int
arith_expr = ...  # type: int
term = ...  # type: int
factor = ...  # type: int
power = ...  # type: int
if sys.version_info >= (3, 5):
    atom_expr = ...  # type: int
atom = ...  # type: int
testlist_comp = ...  # type: int
trailer = ...  # type: int
subscriptlist = ...  # type: int
subscript = ...  # type: int
sliceop = ...  # type: int
exprlist = ...  # type: int
testlist = ...  # type: int
dictorsetmaker = ...  # type: int
classdef = ...  # type: int
arglist = ...  # type: int
argument = ...  # type: int
comp_iter = ...  # type: int
comp_for = ...  # type: int
comp_if = ...  # type: int
encoding_decl = ...  # type: int
yield_expr = ...  # type: int
if sys.version_info >= (3, 3):
    yield_arg = ...  # type: int

sym_name = ...  # type: Dict[int, str]
