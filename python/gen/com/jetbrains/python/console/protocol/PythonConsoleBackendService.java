/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jetbrains.python.console.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-02-22")
public class PythonConsoleBackendService {

  public interface Iface {

    /**
     * Returns `true` if Python console script needs more code to evaluate it.
     * Returns `false` if the code is scheduled for evaluation.
     * 
     * @param line
     */
    public boolean execLine(java.lang.String line) throws PythonUnhandledException, org.apache.thrift.TException;

    /**
     * Returns `true` if Python console script needs more code to evaluate it.
     * Returns `false` if the code is scheduled for evaluation.
     * 
     * @param lines
     */
    public boolean execMultipleLines(java.lang.String lines) throws PythonUnhandledException, org.apache.thrift.TException;

    public java.util.List<CompletionOption> getCompletions(java.lang.String text, java.lang.String actTok) throws PythonUnhandledException, org.apache.thrift.TException;

    /**
     * The description of the given attribute in the shell.
     * 
     * @param text
     */
    public java.lang.String getDescription(java.lang.String text) throws org.apache.thrift.TException;

    /**
     * Return Frame
     *
     * @param type
     */
    public java.util.List<DebugValue> getFrame(int type) throws PythonUnhandledException, org.apache.thrift.TException;

    /**
     * Parameter is a full path in a variables tree from the top-level parent to the debug value.
     * 
     * 
     * @param variable
     */
    public java.util.List<DebugValue> getVariable(java.lang.String variable) throws PythonUnhandledException, org.apache.thrift.TException;

    /**
     * Parameter is a serialized user type renderers.
     *
     *
     * @param renderers
     */
    public boolean setUserTypeRenderers(java.lang.String renderers) throws PythonUnhandledException, org.apache.thrift.TException;

    /**
     * Changes the variable value asynchronously.
     * 
     * @param evaluationExpression
     * @param value
     */
    public void changeVariable(java.lang.String evaluationExpression, java.lang.String value) throws PythonUnhandledException, org.apache.thrift.TException;

    public void connectToDebugger(int localPort, java.lang.String host, java.util.Map<java.lang.String,java.lang.Boolean> opts, java.util.Map<java.lang.String,java.lang.String> extraEnvs) throws PythonUnhandledException, org.apache.thrift.TException;

    public void interrupt() throws org.apache.thrift.TException;

    /**
     * Should normally return "PyCharm" string.
     */
    public java.lang.String handshake() throws org.apache.thrift.TException;

    /**
     * Closes Python console script.
     */
    public void close() throws org.apache.thrift.TException;

    public java.util.List<DebugValue> evaluate(java.lang.String expression, boolean doTrunc) throws PythonUnhandledException, org.apache.thrift.TException;

    public GetArrayResponse getArray(java.lang.String vars, int rowOffset, int colOffset, int rows, int cols, java.lang.String format) throws UnsupportedArrayTypeException, ExceedingArrayDimensionsException, PythonUnhandledException, org.apache.thrift.TException;

    public void execDataViewerAction(java.lang.String varName, java.lang.String action, java.lang.String myArgs) throws PythonUnhandledException, org.apache.thrift.TException;

    /**
     * The result is returned asyncronously with `PythonConsoleFrontendService.returnFullValue`.
     * 
     * @param seq
     * @param variables
     */
    public void loadFullValue(int seq, java.util.List<java.lang.String> variables) throws PythonUnhandledException, org.apache.thrift.TException;

    public java.lang.String execTableCommand(java.lang.String command, java.lang.String commandType) throws PythonUnhandledException, PythonTableException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void execLine(java.lang.String line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void execMultipleLines(java.lang.String lines, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getCompletions(java.lang.String text, java.lang.String actTok, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CompletionOption>> resultHandler) throws org.apache.thrift.TException;

    public void getDescription(java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getFrame(int type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException;

    public void getVariable(java.lang.String variable, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException;

    public void setUserTypeRenderers(java.lang.String renderers, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void changeVariable(java.lang.String evaluationExpression, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void connectToDebugger(int localPort, java.lang.String host, java.util.Map<java.lang.String,java.lang.Boolean> opts, java.util.Map<java.lang.String,java.lang.String> extraEnvs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void interrupt(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void handshake(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void close(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void evaluate(java.lang.String expression, boolean doTrunc, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException;

    public void getArray(java.lang.String vars, int rowOffset, int colOffset, int rows, int cols, java.lang.String format, org.apache.thrift.async.AsyncMethodCallback<GetArrayResponse> resultHandler) throws org.apache.thrift.TException;

    public void execDataViewerAction(java.lang.String varName, java.lang.String action, java.lang.String myArgs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void loadFullValue(int seq, java.util.List<java.lang.String> variables, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void execTableCommand(java.lang.String command, java.lang.String commandType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean execLine(java.lang.String line) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_execLine(line);
      return recv_execLine();
    }

    public void send_execLine(java.lang.String line) throws org.apache.thrift.TException
    {
      execLine_args args = new execLine_args();
      args.setLine(line);
      sendBase("execLine", args);
    }

    public boolean recv_execLine() throws PythonUnhandledException, org.apache.thrift.TException
    {
      execLine_result result = new execLine_result();
      receiveBase(result, "execLine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execLine failed: unknown result");
    }

    public boolean execMultipleLines(java.lang.String lines) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_execMultipleLines(lines);
      return recv_execMultipleLines();
    }

    public void send_execMultipleLines(java.lang.String lines) throws org.apache.thrift.TException
    {
      execMultipleLines_args args = new execMultipleLines_args();
      args.setLines(lines);
      sendBase("execMultipleLines", args);
    }

    public boolean recv_execMultipleLines() throws PythonUnhandledException, org.apache.thrift.TException
    {
      execMultipleLines_result result = new execMultipleLines_result();
      receiveBase(result, "execMultipleLines");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execMultipleLines failed: unknown result");
    }

    public java.util.List<CompletionOption> getCompletions(java.lang.String text, java.lang.String actTok) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_getCompletions(text, actTok);
      return recv_getCompletions();
    }

    public void send_getCompletions(java.lang.String text, java.lang.String actTok) throws org.apache.thrift.TException
    {
      getCompletions_args args = new getCompletions_args();
      args.setText(text);
      args.setActTok(actTok);
      sendBase("getCompletions", args);
    }

    public java.util.List<CompletionOption> recv_getCompletions() throws PythonUnhandledException, org.apache.thrift.TException
    {
      getCompletions_result result = new getCompletions_result();
      receiveBase(result, "getCompletions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompletions failed: unknown result");
    }

    public java.lang.String getDescription(java.lang.String text) throws org.apache.thrift.TException
    {
      send_getDescription(text);
      return recv_getDescription();
    }

    public void send_getDescription(java.lang.String text) throws org.apache.thrift.TException
    {
      getDescription_args args = new getDescription_args();
      args.setText(text);
      sendBase("getDescription", args);
    }

    public java.lang.String recv_getDescription() throws org.apache.thrift.TException
    {
      getDescription_result result = new getDescription_result();
      receiveBase(result, "getDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDescription failed: unknown result");
    }

    public java.util.List<DebugValue> getFrame(int type) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_getFrame(type);
      return recv_getFrame();
    }

    public void send_getFrame(int type) throws org.apache.thrift.TException
    {
      getFrame_args args = new getFrame_args();
      args.setType(type);
      sendBase("getFrame", args);
    }

    public java.util.List<DebugValue> recv_getFrame() throws PythonUnhandledException, org.apache.thrift.TException
    {
      getFrame_result result = new getFrame_result();
      receiveBase(result, "getFrame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFrame failed: unknown result");
    }

    public java.util.List<DebugValue> getVariable(java.lang.String variable) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_getVariable(variable);
      return recv_getVariable();
    }

    public void send_getVariable(java.lang.String variable) throws org.apache.thrift.TException
    {
      getVariable_args args = new getVariable_args();
      args.setVariable(variable);
      sendBase("getVariable", args);
    }

    public java.util.List<DebugValue> recv_getVariable() throws PythonUnhandledException, org.apache.thrift.TException
    {
      getVariable_result result = new getVariable_result();
      receiveBase(result, "getVariable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVariable failed: unknown result");
    }

    public boolean setUserTypeRenderers(java.lang.String renderers) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_setUserTypeRenderers(renderers);
      return recv_setUserTypeRenderers();
    }

    public void send_setUserTypeRenderers(java.lang.String renderers) throws org.apache.thrift.TException
    {
      setUserTypeRenderers_args args = new setUserTypeRenderers_args();
      args.setRenderers(renderers);
      sendBase("setUserTypeRenderers", args);
    }

    public boolean recv_setUserTypeRenderers() throws PythonUnhandledException, org.apache.thrift.TException
    {
      setUserTypeRenderers_result result = new setUserTypeRenderers_result();
      receiveBase(result, "setUserTypeRenderers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUserTypeRenderers failed: unknown result");
    }

    public void changeVariable(java.lang.String evaluationExpression, java.lang.String value) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_changeVariable(evaluationExpression, value);
      recv_changeVariable();
    }

    public void send_changeVariable(java.lang.String evaluationExpression, java.lang.String value) throws org.apache.thrift.TException
    {
      changeVariable_args args = new changeVariable_args();
      args.setEvaluationExpression(evaluationExpression);
      args.setValue(value);
      sendBase("changeVariable", args);
    }

    public void recv_changeVariable() throws PythonUnhandledException, org.apache.thrift.TException
    {
      changeVariable_result result = new changeVariable_result();
      receiveBase(result, "changeVariable");
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      return;
    }

    public void connectToDebugger(int localPort, java.lang.String host, java.util.Map<java.lang.String,java.lang.Boolean> opts, java.util.Map<java.lang.String,java.lang.String> extraEnvs) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_connectToDebugger(localPort, host, opts, extraEnvs);
      recv_connectToDebugger();
    }

    public void send_connectToDebugger(int localPort, java.lang.String host, java.util.Map<java.lang.String,java.lang.Boolean> opts, java.util.Map<java.lang.String,java.lang.String> extraEnvs) throws org.apache.thrift.TException
    {
      connectToDebugger_args args = new connectToDebugger_args();
      args.setLocalPort(localPort);
      args.setHost(host);
      args.setOpts(opts);
      args.setExtraEnvs(extraEnvs);
      sendBase("connectToDebugger", args);
    }

    public void recv_connectToDebugger() throws PythonUnhandledException, org.apache.thrift.TException
    {
      connectToDebugger_result result = new connectToDebugger_result();
      receiveBase(result, "connectToDebugger");
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      return;
    }

    public void interrupt() throws org.apache.thrift.TException
    {
      send_interrupt();
      recv_interrupt();
    }

    public void send_interrupt() throws org.apache.thrift.TException
    {
      interrupt_args args = new interrupt_args();
      sendBase("interrupt", args);
    }

    public void recv_interrupt() throws org.apache.thrift.TException
    {
      interrupt_result result = new interrupt_result();
      receiveBase(result, "interrupt");
      return;
    }

    public java.lang.String handshake() throws org.apache.thrift.TException
    {
      send_handshake();
      return recv_handshake();
    }

    public void send_handshake() throws org.apache.thrift.TException
    {
      handshake_args args = new handshake_args();
      sendBase("handshake", args);
    }

    public java.lang.String recv_handshake() throws org.apache.thrift.TException
    {
      handshake_result result = new handshake_result();
      receiveBase(result, "handshake");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "handshake failed: unknown result");
    }

    public void close() throws org.apache.thrift.TException
    {
      send_close();
    }

    public void send_close() throws org.apache.thrift.TException
    {
      close_args args = new close_args();
      sendBaseOneway("close", args);
    }

    public java.util.List<DebugValue> evaluate(java.lang.String expression, boolean doTrunc) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_evaluate(expression, doTrunc);
      return recv_evaluate();
    }

    public void send_evaluate(java.lang.String expression, boolean doTrunc) throws org.apache.thrift.TException
    {
      evaluate_args args = new evaluate_args();
      args.setExpression(expression);
      args.setDoTrunc(doTrunc);
      sendBase("evaluate", args);
    }

    public java.util.List<DebugValue> recv_evaluate() throws PythonUnhandledException, org.apache.thrift.TException
    {
      evaluate_result result = new evaluate_result();
      receiveBase(result, "evaluate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evaluate failed: unknown result");
    }

    public GetArrayResponse getArray(java.lang.String vars, int rowOffset, int colOffset, int rows, int cols, java.lang.String format) throws UnsupportedArrayTypeException, ExceedingArrayDimensionsException, PythonUnhandledException, org.apache.thrift.TException
    {
      send_getArray(vars, rowOffset, colOffset, rows, cols, format);
      return recv_getArray();
    }

    public void send_getArray(java.lang.String vars, int rowOffset, int colOffset, int rows, int cols, java.lang.String format) throws org.apache.thrift.TException
    {
      getArray_args args = new getArray_args();
      args.setVars(vars);
      args.setRowOffset(rowOffset);
      args.setColOffset(colOffset);
      args.setRows(rows);
      args.setCols(cols);
      args.setFormat(format);
      sendBase("getArray", args);
    }

    public GetArrayResponse recv_getArray() throws UnsupportedArrayTypeException, ExceedingArrayDimensionsException, PythonUnhandledException, org.apache.thrift.TException
    {
      getArray_result result = new getArray_result();
      receiveBase(result, "getArray");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unsupported != null) {
        throw result.unsupported;
      }
      if (result.exceedingDimensions != null) {
        throw result.exceedingDimensions;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArray failed: unknown result");
    }

    public void execDataViewerAction(java.lang.String varName, java.lang.String action, java.lang.String myArgs) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_execDataViewerAction(varName, action, myArgs);
      recv_execDataViewerAction();
    }

    public void send_execDataViewerAction(java.lang.String varName, java.lang.String action, java.lang.String myArgs) throws org.apache.thrift.TException
    {
      execDataViewerAction_args args = new execDataViewerAction_args();
      args.setVarName(varName);
      args.setAction(action);
      args.setMyArgs(myArgs);
      sendBase("execDataViewerAction", args);
    }

    public void recv_execDataViewerAction() throws PythonUnhandledException, org.apache.thrift.TException
    {
      execDataViewerAction_result result = new execDataViewerAction_result();
      receiveBase(result, "execDataViewerAction");
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      return;
    }

    public void loadFullValue(int seq, java.util.List<java.lang.String> variables) throws PythonUnhandledException, org.apache.thrift.TException
    {
      send_loadFullValue(seq, variables);
      recv_loadFullValue();
    }

    public void send_loadFullValue(int seq, java.util.List<java.lang.String> variables) throws org.apache.thrift.TException
    {
      loadFullValue_args args = new loadFullValue_args();
      args.setSeq(seq);
      args.setVariables(variables);
      sendBase("loadFullValue", args);
    }

    public void recv_loadFullValue() throws PythonUnhandledException, org.apache.thrift.TException
    {
      loadFullValue_result result = new loadFullValue_result();
      receiveBase(result, "loadFullValue");
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      return;
    }

    public java.lang.String execTableCommand(java.lang.String command, java.lang.String commandType) throws PythonUnhandledException, PythonTableException, org.apache.thrift.TException
    {
      send_execTableCommand(command, commandType);
      return recv_execTableCommand();
    }

    public void send_execTableCommand(java.lang.String command, java.lang.String commandType) throws org.apache.thrift.TException
    {
      execTableCommand_args args = new execTableCommand_args();
      args.setCommand(command);
      args.setCommandType(commandType);
      sendBase("execTableCommand", args);
    }

    public java.lang.String recv_execTableCommand() throws PythonUnhandledException, PythonTableException, org.apache.thrift.TException
    {
      execTableCommand_result result = new execTableCommand_result();
      receiveBase(result, "execTableCommand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unhandledException != null) {
        throw result.unhandledException;
      }
      if (result.tableException != null) {
        throw result.tableException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execTableCommand failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execLine(java.lang.String line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execLine_call method_call = new execLine_call(line, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execLine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String line;
      public execLine_call(java.lang.String line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.line = line;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execLine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execLine_args args = new execLine_args();
        args.setLine(line);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execLine();
      }
    }

    public void execMultipleLines(java.lang.String lines, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execMultipleLines_call method_call = new execMultipleLines_call(lines, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execMultipleLines_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String lines;
      public execMultipleLines_call(java.lang.String lines, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lines = lines;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execMultipleLines", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execMultipleLines_args args = new execMultipleLines_args();
        args.setLines(lines);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execMultipleLines();
      }
    }

    public void getCompletions(java.lang.String text, java.lang.String actTok, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CompletionOption>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompletions_call method_call = new getCompletions_call(text, actTok, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompletions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CompletionOption>> {
      private java.lang.String text;
      private java.lang.String actTok;
      public getCompletions_call(java.lang.String text, java.lang.String actTok, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CompletionOption>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
        this.actTok = actTok;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompletions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompletions_args args = new getCompletions_args();
        args.setText(text);
        args.setActTok(actTok);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CompletionOption> getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompletions();
      }
    }

    public void getDescription(java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDescription_call method_call = new getDescription_call(text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDescription_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String text;
      public getDescription_call(java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDescription_args args = new getDescription_args();
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDescription();
      }
    }

    public void getFrame(int type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFrame_call method_call = new getFrame_call(type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFrame_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DebugValue>> {
      private int type;
      public getFrame_call(int type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFrame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFrame_args args = new getFrame_args();
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DebugValue> getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFrame();
      }
    }

    public void getVariable(java.lang.String variable, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVariable_call method_call = new getVariable_call(variable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVariable_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DebugValue>> {
      private java.lang.String variable;
      public getVariable_call(java.lang.String variable, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.variable = variable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVariable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVariable_args args = new getVariable_args();
        args.setVariable(variable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DebugValue> getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVariable();
      }
    }

    public void setUserTypeRenderers(java.lang.String renderers, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUserTypeRenderers_call method_call = new setUserTypeRenderers_call(renderers, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUserTypeRenderers_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String renderers;
      public setUserTypeRenderers_call(java.lang.String renderers, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.renderers = renderers;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserTypeRenderers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUserTypeRenderers_args args = new setUserTypeRenderers_args();
        args.setRenderers(renderers);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUserTypeRenderers();
      }
    }

    public void changeVariable(java.lang.String evaluationExpression, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeVariable_call method_call = new changeVariable_call(evaluationExpression, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeVariable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String evaluationExpression;
      private java.lang.String value;
      public changeVariable_call(java.lang.String evaluationExpression, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.evaluationExpression = evaluationExpression;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeVariable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeVariable_args args = new changeVariable_args();
        args.setEvaluationExpression(evaluationExpression);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void connectToDebugger(int localPort, java.lang.String host, java.util.Map<java.lang.String,java.lang.Boolean> opts, java.util.Map<java.lang.String,java.lang.String> extraEnvs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connectToDebugger_call method_call = new connectToDebugger_call(localPort, host, opts, extraEnvs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connectToDebugger_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int localPort;
      private java.lang.String host;
      private java.util.Map<java.lang.String,java.lang.Boolean> opts;
      private java.util.Map<java.lang.String,java.lang.String> extraEnvs;
      public connectToDebugger_call(int localPort, java.lang.String host, java.util.Map<java.lang.String,java.lang.Boolean> opts, java.util.Map<java.lang.String,java.lang.String> extraEnvs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.localPort = localPort;
        this.host = host;
        this.opts = opts;
        this.extraEnvs = extraEnvs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connectToDebugger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connectToDebugger_args args = new connectToDebugger_args();
        args.setLocalPort(localPort);
        args.setHost(host);
        args.setOpts(opts);
        args.setExtraEnvs(extraEnvs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void interrupt(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      interrupt_call method_call = new interrupt_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class interrupt_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public interrupt_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("interrupt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        interrupt_args args = new interrupt_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void handshake(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      handshake_call method_call = new handshake_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class handshake_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public handshake_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handshake", org.apache.thrift.protocol.TMessageType.CALL, 0));
        handshake_args args = new handshake_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_handshake();
      }
    }

    public void close(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_call method_call = new close_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public close_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        close_args args = new close_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void evaluate(java.lang.String expression, boolean doTrunc, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evaluate_call method_call = new evaluate_call(expression, doTrunc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evaluate_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DebugValue>> {
      private java.lang.String expression;
      private boolean doTrunc;
      public evaluate_call(java.lang.String expression, boolean doTrunc, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
        this.doTrunc = doTrunc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evaluate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evaluate_args args = new evaluate_args();
        args.setExpression(expression);
        args.setDoTrunc(doTrunc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DebugValue> getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evaluate();
      }
    }

    public void getArray(java.lang.String vars, int rowOffset, int colOffset, int rows, int cols, java.lang.String format, org.apache.thrift.async.AsyncMethodCallback<GetArrayResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArray_call method_call = new getArray_call(vars, rowOffset, colOffset, rows, cols, format, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArray_call extends org.apache.thrift.async.TAsyncMethodCall<GetArrayResponse> {
      private java.lang.String vars;
      private int rowOffset;
      private int colOffset;
      private int rows;
      private int cols;
      private java.lang.String format;
      public getArray_call(java.lang.String vars, int rowOffset, int colOffset, int rows, int cols, java.lang.String format, org.apache.thrift.async.AsyncMethodCallback<GetArrayResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vars = vars;
        this.rowOffset = rowOffset;
        this.colOffset = colOffset;
        this.rows = rows;
        this.cols = cols;
        this.format = format;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArray", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArray_args args = new getArray_args();
        args.setVars(vars);
        args.setRowOffset(rowOffset);
        args.setColOffset(colOffset);
        args.setRows(rows);
        args.setCols(cols);
        args.setFormat(format);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetArrayResponse getResult() throws UnsupportedArrayTypeException, ExceedingArrayDimensionsException, PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArray();
      }
    }

    public void execDataViewerAction(java.lang.String varName, java.lang.String action, java.lang.String myArgs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execDataViewerAction_call method_call = new execDataViewerAction_call(varName, action, myArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execDataViewerAction_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String varName;
      private java.lang.String action;
      private java.lang.String myArgs;
      public execDataViewerAction_call(java.lang.String varName, java.lang.String action, java.lang.String myArgs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.varName = varName;
        this.action = action;
        this.myArgs = myArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execDataViewerAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execDataViewerAction_args args = new execDataViewerAction_args();
        args.setVarName(varName);
        args.setAction(action);
        args.setMyArgs(myArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void loadFullValue(int seq, java.util.List<java.lang.String> variables, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFullValue_call method_call = new loadFullValue_call(seq, variables, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFullValue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int seq;
      private java.util.List<java.lang.String> variables;
      public loadFullValue_call(int seq, java.util.List<java.lang.String> variables, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seq = seq;
        this.variables = variables;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFullValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFullValue_args args = new loadFullValue_args();
        args.setSeq(seq);
        args.setVariables(variables);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws PythonUnhandledException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void execTableCommand(java.lang.String command, java.lang.String commandType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execTableCommand_call method_call = new execTableCommand_call(command, commandType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execTableCommand_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String command;
      private java.lang.String commandType;
      public execTableCommand_call(java.lang.String command, java.lang.String commandType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.command = command;
        this.commandType = commandType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execTableCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execTableCommand_args args = new execTableCommand_args();
        args.setCommand(command);
        args.setCommandType(commandType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws PythonUnhandledException, PythonTableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execTableCommand();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("execLine", new execLine());
      processMap.put("execMultipleLines", new execMultipleLines());
      processMap.put("getCompletions", new getCompletions());
      processMap.put("getDescription", new getDescription());
      processMap.put("getFrame", new getFrame());
      processMap.put("getVariable", new getVariable());
      processMap.put("setUserTypeRenderers", new setUserTypeRenderers());
      processMap.put("changeVariable", new changeVariable());
      processMap.put("connectToDebugger", new connectToDebugger());
      processMap.put("interrupt", new interrupt());
      processMap.put("handshake", new handshake());
      processMap.put("close", new close());
      processMap.put("evaluate", new evaluate());
      processMap.put("getArray", new getArray());
      processMap.put("execDataViewerAction", new execDataViewerAction());
      processMap.put("loadFullValue", new loadFullValue());
      processMap.put("execTableCommand", new execTableCommand());
      return processMap;
    }

    public static class execLine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execLine_args> {
      public execLine() {
        super("execLine");
      }

      public execLine_args getEmptyArgsInstance() {
        return new execLine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public execLine_result getResult(I iface, execLine_args args) throws org.apache.thrift.TException {
        execLine_result result = new execLine_result();
        try {
          result.success = iface.execLine(args.line);
          result.setSuccessIsSet(true);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class execMultipleLines<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execMultipleLines_args> {
      public execMultipleLines() {
        super("execMultipleLines");
      }

      public execMultipleLines_args getEmptyArgsInstance() {
        return new execMultipleLines_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public execMultipleLines_result getResult(I iface, execMultipleLines_args args) throws org.apache.thrift.TException {
        execMultipleLines_result result = new execMultipleLines_result();
        try {
          result.success = iface.execMultipleLines(args.lines);
          result.setSuccessIsSet(true);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class getCompletions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompletions_args> {
      public getCompletions() {
        super("getCompletions");
      }

      public getCompletions_args getEmptyArgsInstance() {
        return new getCompletions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCompletions_result getResult(I iface, getCompletions_args args) throws org.apache.thrift.TException {
        getCompletions_result result = new getCompletions_result();
        try {
          result.success = iface.getCompletions(args.text, args.actTok);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class getDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDescription_args> {
      public getDescription() {
        super("getDescription");
      }

      public getDescription_args getEmptyArgsInstance() {
        return new getDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDescription_result getResult(I iface, getDescription_args args) throws org.apache.thrift.TException {
        getDescription_result result = new getDescription_result();
        result.success = iface.getDescription(args.text);
        return result;
      }
    }

    public static class getFrame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFrame_args> {
      public getFrame() {
        super("getFrame");
      }

      public getFrame_args getEmptyArgsInstance() {
        return new getFrame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getFrame_result getResult(I iface, getFrame_args args) throws org.apache.thrift.TException {
        getFrame_result result = new getFrame_result();
        try {
          result.success = iface.getFrame(args.type);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class getVariable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVariable_args> {
      public getVariable() {
        super("getVariable");
      }

      public getVariable_args getEmptyArgsInstance() {
        return new getVariable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getVariable_result getResult(I iface, getVariable_args args) throws org.apache.thrift.TException {
        getVariable_result result = new getVariable_result();
        try {
          result.success = iface.getVariable(args.variable);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class setUserTypeRenderers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserTypeRenderers_args> {
      public setUserTypeRenderers() {
        super("setUserTypeRenderers");
      }

      public setUserTypeRenderers_args getEmptyArgsInstance() {
        return new setUserTypeRenderers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public setUserTypeRenderers_result getResult(I iface, setUserTypeRenderers_args args) throws org.apache.thrift.TException {
        setUserTypeRenderers_result result = new setUserTypeRenderers_result();
        try {
          result.success = iface.setUserTypeRenderers(args.renderers);
          result.setSuccessIsSet(true);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class changeVariable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeVariable_args> {
      public changeVariable() {
        super("changeVariable");
      }

      public changeVariable_args getEmptyArgsInstance() {
        return new changeVariable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public changeVariable_result getResult(I iface, changeVariable_args args) throws org.apache.thrift.TException {
        changeVariable_result result = new changeVariable_result();
        try {
          iface.changeVariable(args.evaluationExpression, args.value);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class connectToDebugger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connectToDebugger_args> {
      public connectToDebugger() {
        super("connectToDebugger");
      }

      public connectToDebugger_args getEmptyArgsInstance() {
        return new connectToDebugger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public connectToDebugger_result getResult(I iface, connectToDebugger_args args) throws org.apache.thrift.TException {
        connectToDebugger_result result = new connectToDebugger_result();
        try {
          iface.connectToDebugger(args.localPort, args.host, args.opts, args.extraEnvs);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class interrupt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, interrupt_args> {
      public interrupt() {
        super("interrupt");
      }

      public interrupt_args getEmptyArgsInstance() {
        return new interrupt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public interrupt_result getResult(I iface, interrupt_args args) throws org.apache.thrift.TException {
        interrupt_result result = new interrupt_result();
        iface.interrupt();
        return result;
      }
    }

    public static class handshake<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handshake_args> {
      public handshake() {
        super("handshake");
      }

      public handshake_args getEmptyArgsInstance() {
        return new handshake_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public handshake_result getResult(I iface, handshake_args args) throws org.apache.thrift.TException {
        handshake_result result = new handshake_result();
        result.success = iface.handshake();
        return result;
      }
    }

    public static class close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_args> {
      public close() {
        super("close");
      }

      public close_args getEmptyArgsInstance() {
        return new close_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, close_args args) throws org.apache.thrift.TException {
        iface.close();
        return null;
      }
    }

    public static class evaluate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evaluate_args> {
      public evaluate() {
        super("evaluate");
      }

      public evaluate_args getEmptyArgsInstance() {
        return new evaluate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public evaluate_result getResult(I iface, evaluate_args args) throws org.apache.thrift.TException {
        evaluate_result result = new evaluate_result();
        try {
          result.success = iface.evaluate(args.expression, args.doTrunc);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class getArray<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArray_args> {
      public getArray() {
        super("getArray");
      }

      public getArray_args getEmptyArgsInstance() {
        return new getArray_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getArray_result getResult(I iface, getArray_args args) throws org.apache.thrift.TException {
        getArray_result result = new getArray_result();
        try {
          result.success = iface.getArray(args.vars, args.rowOffset, args.colOffset, args.rows, args.cols, args.format);
        } catch (UnsupportedArrayTypeException unsupported) {
          result.unsupported = unsupported;
        } catch (ExceedingArrayDimensionsException exceedingDimensions) {
          result.exceedingDimensions = exceedingDimensions;
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class execDataViewerAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execDataViewerAction_args> {
      public execDataViewerAction() {
        super("execDataViewerAction");
      }

      public execDataViewerAction_args getEmptyArgsInstance() {
        return new execDataViewerAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public execDataViewerAction_result getResult(I iface, execDataViewerAction_args args) throws org.apache.thrift.TException {
        execDataViewerAction_result result = new execDataViewerAction_result();
        try {
          iface.execDataViewerAction(args.varName, args.action, args.myArgs);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class loadFullValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFullValue_args> {
      public loadFullValue() {
        super("loadFullValue");
      }

      public loadFullValue_args getEmptyArgsInstance() {
        return new loadFullValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public loadFullValue_result getResult(I iface, loadFullValue_args args) throws org.apache.thrift.TException {
        loadFullValue_result result = new loadFullValue_result();
        try {
          iface.loadFullValue(args.seq, args.variables);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        }
        return result;
      }
    }

    public static class execTableCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execTableCommand_args> {
      public execTableCommand() {
        super("execTableCommand");
      }

      public execTableCommand_args getEmptyArgsInstance() {
        return new execTableCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public execTableCommand_result getResult(I iface, execTableCommand_args args) throws org.apache.thrift.TException {
        execTableCommand_result result = new execTableCommand_result();
        try {
          result.success = iface.execTableCommand(args.command, args.commandType);
        } catch (PythonUnhandledException unhandledException) {
          result.unhandledException = unhandledException;
        } catch (PythonTableException tableException) {
          result.tableException = tableException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("execLine", new execLine());
      processMap.put("execMultipleLines", new execMultipleLines());
      processMap.put("getCompletions", new getCompletions());
      processMap.put("getDescription", new getDescription());
      processMap.put("getFrame", new getFrame());
      processMap.put("getVariable", new getVariable());
      processMap.put("setUserTypeRenderers", new setUserTypeRenderers());
      processMap.put("changeVariable", new changeVariable());
      processMap.put("connectToDebugger", new connectToDebugger());
      processMap.put("interrupt", new interrupt());
      processMap.put("handshake", new handshake());
      processMap.put("close", new close());
      processMap.put("evaluate", new evaluate());
      processMap.put("getArray", new getArray());
      processMap.put("execDataViewerAction", new execDataViewerAction());
      processMap.put("loadFullValue", new loadFullValue());
      processMap.put("execTableCommand", new execTableCommand());
      return processMap;
    }

    public static class execLine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execLine_args, java.lang.Boolean> {
      public execLine() {
        super("execLine");
      }

      public execLine_args getEmptyArgsInstance() {
        return new execLine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            execLine_result result = new execLine_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            execLine_result result = new execLine_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execLine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.execLine(args.line,resultHandler);
      }
    }

    public static class execMultipleLines<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execMultipleLines_args, java.lang.Boolean> {
      public execMultipleLines() {
        super("execMultipleLines");
      }

      public execMultipleLines_args getEmptyArgsInstance() {
        return new execMultipleLines_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            execMultipleLines_result result = new execMultipleLines_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            execMultipleLines_result result = new execMultipleLines_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execMultipleLines_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.execMultipleLines(args.lines,resultHandler);
      }
    }

    public static class getCompletions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompletions_args, java.util.List<CompletionOption>> {
      public getCompletions() {
        super("getCompletions");
      }

      public getCompletions_args getEmptyArgsInstance() {
        return new getCompletions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CompletionOption>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CompletionOption>>() { 
          public void onComplete(java.util.List<CompletionOption> o) {
            getCompletions_result result = new getCompletions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCompletions_result result = new getCompletions_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompletions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CompletionOption>> resultHandler) throws org.apache.thrift.TException {
        iface.getCompletions(args.text, args.actTok,resultHandler);
      }
    }

    public static class getDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDescription_args, java.lang.String> {
      public getDescription() {
        super("getDescription");
      }

      public getDescription_args getEmptyArgsInstance() {
        return new getDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getDescription_result result = new getDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDescription_result result = new getDescription_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDescription_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getDescription(args.text,resultHandler);
      }
    }

    public static class getFrame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFrame_args, java.util.List<DebugValue>> {
      public getFrame() {
        super("getFrame");
      }

      public getFrame_args getEmptyArgsInstance() {
        return new getFrame_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>>() { 
          public void onComplete(java.util.List<DebugValue> o) {
            getFrame_result result = new getFrame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getFrame_result result = new getFrame_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFrame_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException {
        iface.getFrame(args.type,resultHandler);
      }
    }

    public static class getVariable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVariable_args, java.util.List<DebugValue>> {
      public getVariable() {
        super("getVariable");
      }

      public getVariable_args getEmptyArgsInstance() {
        return new getVariable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>>() { 
          public void onComplete(java.util.List<DebugValue> o) {
            getVariable_result result = new getVariable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getVariable_result result = new getVariable_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVariable_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException {
        iface.getVariable(args.variable,resultHandler);
      }
    }

    public static class setUserTypeRenderers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUserTypeRenderers_args, java.lang.Boolean> {
      public setUserTypeRenderers() {
        super("setUserTypeRenderers");
      }

      public setUserTypeRenderers_args getEmptyArgsInstance() {
        return new setUserTypeRenderers_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
          public void onComplete(java.lang.Boolean o) {
            setUserTypeRenderers_result result = new setUserTypeRenderers_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setUserTypeRenderers_result result = new setUserTypeRenderers_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setUserTypeRenderers_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.setUserTypeRenderers(args.renderers,resultHandler);
      }
    }

    public static class changeVariable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeVariable_args, Void> {
      public changeVariable() {
        super("changeVariable");
      }

      public changeVariable_args getEmptyArgsInstance() {
        return new changeVariable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            changeVariable_result result = new changeVariable_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changeVariable_result result = new changeVariable_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeVariable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.changeVariable(args.evaluationExpression, args.value,resultHandler);
      }
    }

    public static class connectToDebugger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connectToDebugger_args, Void> {
      public connectToDebugger() {
        super("connectToDebugger");
      }

      public connectToDebugger_args getEmptyArgsInstance() {
        return new connectToDebugger_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            connectToDebugger_result result = new connectToDebugger_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connectToDebugger_result result = new connectToDebugger_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connectToDebugger_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.connectToDebugger(args.localPort, args.host, args.opts, args.extraEnvs,resultHandler);
      }
    }

    public static class interrupt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, interrupt_args, Void> {
      public interrupt() {
        super("interrupt");
      }

      public interrupt_args getEmptyArgsInstance() {
        return new interrupt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            interrupt_result result = new interrupt_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            interrupt_result result = new interrupt_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, interrupt_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.interrupt(resultHandler);
      }
    }

    public static class handshake<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handshake_args, java.lang.String> {
      public handshake() {
        super("handshake");
      }

      public handshake_args getEmptyArgsInstance() {
        return new handshake_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            handshake_result result = new handshake_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            handshake_result result = new handshake_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, handshake_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.handshake(resultHandler);
      }
    }

    public static class close<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, close_args, Void> {
      public close() {
        super("close");
      }

      public close_args getEmptyArgsInstance() {
        return new close_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, close_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.close(resultHandler);
      }
    }

    public static class evaluate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, evaluate_args, java.util.List<DebugValue>> {
      public evaluate() {
        super("evaluate");
      }

      public evaluate_args getEmptyArgsInstance() {
        return new evaluate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>>() { 
          public void onComplete(java.util.List<DebugValue> o) {
            evaluate_result result = new evaluate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            evaluate_result result = new evaluate_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, evaluate_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DebugValue>> resultHandler) throws org.apache.thrift.TException {
        iface.evaluate(args.expression, args.doTrunc,resultHandler);
      }
    }

    public static class getArray<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArray_args, GetArrayResponse> {
      public getArray() {
        super("getArray");
      }

      public getArray_args getEmptyArgsInstance() {
        return new getArray_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<GetArrayResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GetArrayResponse>() { 
          public void onComplete(GetArrayResponse o) {
            getArray_result result = new getArray_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getArray_result result = new getArray_result();
            if (e instanceof UnsupportedArrayTypeException) {
              result.unsupported = (UnsupportedArrayTypeException) e;
              result.setUnsupportedIsSet(true);
              msg = result;
            } else if (e instanceof ExceedingArrayDimensionsException) {
              result.exceedingDimensions = (ExceedingArrayDimensionsException) e;
              result.setExceedingDimensionsIsSet(true);
              msg = result;
            } else if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArray_args args, org.apache.thrift.async.AsyncMethodCallback<GetArrayResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getArray(args.vars, args.rowOffset, args.colOffset, args.rows, args.cols, args.format,resultHandler);
      }
    }

    public static class execDataViewerAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execDataViewerAction_args, Void> {
      public execDataViewerAction() {
        super("execDataViewerAction");
      }

      public execDataViewerAction_args getEmptyArgsInstance() {
        return new execDataViewerAction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            execDataViewerAction_result result = new execDataViewerAction_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            execDataViewerAction_result result = new execDataViewerAction_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execDataViewerAction_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.execDataViewerAction(args.varName, args.action, args.myArgs,resultHandler);
      }
    }

    public static class loadFullValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadFullValue_args, Void> {
      public loadFullValue() {
        super("loadFullValue");
      }

      public loadFullValue_args getEmptyArgsInstance() {
        return new loadFullValue_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            loadFullValue_result result = new loadFullValue_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loadFullValue_result result = new loadFullValue_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadFullValue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.loadFullValue(args.seq, args.variables,resultHandler);
      }
    }

    public static class execTableCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execTableCommand_args, java.lang.String> {
      public execTableCommand() {
        super("execTableCommand");
      }

      public execTableCommand_args getEmptyArgsInstance() {
        return new execTableCommand_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            execTableCommand_result result = new execTableCommand_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            execTableCommand_result result = new execTableCommand_result();
            if (e instanceof PythonUnhandledException) {
              result.unhandledException = (PythonUnhandledException) e;
              result.setUnhandledExceptionIsSet(true);
              msg = result;
            } else if (e instanceof PythonTableException) {
              result.tableException = (PythonTableException) e;
              result.setTableExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execTableCommand_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.execTableCommand(args.command, args.commandType,resultHandler);
      }
    }

  }

  public static class execLine_args implements org.apache.thrift.TBase<execLine_args, execLine_args._Fields>, java.io.Serializable, Cloneable, Comparable<execLine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execLine_args");

    private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execLine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execLine_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String line; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINE((short)1, "line");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINE
            return LINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execLine_args.class, metaDataMap);
    }

    public execLine_args() {
    }

    public execLine_args(
      java.lang.String line)
    {
      this();
      this.line = line;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execLine_args(execLine_args other) {
      if (other.isSetLine()) {
        this.line = other.line;
      }
    }

    public execLine_args deepCopy() {
      return new execLine_args(this);
    }

    @Override
    public void clear() {
      this.line = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLine() {
      return this.line;
    }

    public execLine_args setLine(@org.apache.thrift.annotation.Nullable java.lang.String line) {
      this.line = line;
      return this;
    }

    public void unsetLine() {
      this.line = null;
    }

    /** Returns true if field line is set (has been assigned a value) and false otherwise */
    public boolean isSetLine() {
      return this.line != null;
    }

    public void setLineIsSet(boolean value) {
      if (!value) {
        this.line = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LINE:
        if (value == null) {
          unsetLine();
        } else {
          setLine((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LINE:
        return getLine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LINE:
        return isSetLine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execLine_args)
        return this.equals((execLine_args)that);
      return false;
    }

    public boolean equals(execLine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_line = true && this.isSetLine();
      boolean that_present_line = true && that.isSetLine();
      if (this_present_line || that_present_line) {
        if (!(this_present_line && that_present_line))
          return false;
        if (!this.line.equals(that.line))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLine()) ? 131071 : 524287);
      if (isSetLine())
        hashCode = hashCode * 8191 + line.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execLine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLine(), other.isSetLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, other.line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execLine_args(");
      boolean first = true;

      sb.append("line:");
      if (this.line == null) {
        sb.append("null");
      } else {
        sb.append(this.line);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execLine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execLine_argsStandardScheme getScheme() {
        return new execLine_argsStandardScheme();
      }
    }

    private static class execLine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execLine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.line = iprot.readString();
                struct.setLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execLine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.line != null) {
          oprot.writeFieldBegin(LINE_FIELD_DESC);
          oprot.writeString(struct.line);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execLine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execLine_argsTupleScheme getScheme() {
        return new execLine_argsTupleScheme();
      }
    }

    private static class execLine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execLine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLine()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLine()) {
          oprot.writeString(struct.line);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.line = iprot.readString();
          struct.setLineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execLine_result implements org.apache.thrift.TBase<execLine_result, execLine_result._Fields>, java.io.Serializable, Cloneable, Comparable<execLine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execLine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execLine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execLine_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execLine_result.class, metaDataMap);
    }

    public execLine_result() {
    }

    public execLine_result(
      boolean success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execLine_result(execLine_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public execLine_result deepCopy() {
      return new execLine_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unhandledException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public execLine_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public execLine_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execLine_result)
        return this.equals((execLine_result)that);
      return false;
    }

    public boolean equals(execLine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execLine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execLine_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execLine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execLine_resultStandardScheme getScheme() {
        return new execLine_resultStandardScheme();
      }
    }

    private static class execLine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execLine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execLine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execLine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execLine_resultTupleScheme getScheme() {
        return new execLine_resultTupleScheme();
      }
    }

    private static class execLine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execLine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execMultipleLines_args implements org.apache.thrift.TBase<execMultipleLines_args, execMultipleLines_args._Fields>, java.io.Serializable, Cloneable, Comparable<execMultipleLines_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execMultipleLines_args");

    private static final org.apache.thrift.protocol.TField LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("lines", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execMultipleLines_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execMultipleLines_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String lines; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINES((short)1, "lines");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINES
            return LINES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINES, new org.apache.thrift.meta_data.FieldMetaData("lines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execMultipleLines_args.class, metaDataMap);
    }

    public execMultipleLines_args() {
    }

    public execMultipleLines_args(
      java.lang.String lines)
    {
      this();
      this.lines = lines;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execMultipleLines_args(execMultipleLines_args other) {
      if (other.isSetLines()) {
        this.lines = other.lines;
      }
    }

    public execMultipleLines_args deepCopy() {
      return new execMultipleLines_args(this);
    }

    @Override
    public void clear() {
      this.lines = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLines() {
      return this.lines;
    }

    public execMultipleLines_args setLines(@org.apache.thrift.annotation.Nullable java.lang.String lines) {
      this.lines = lines;
      return this;
    }

    public void unsetLines() {
      this.lines = null;
    }

    /** Returns true if field lines is set (has been assigned a value) and false otherwise */
    public boolean isSetLines() {
      return this.lines != null;
    }

    public void setLinesIsSet(boolean value) {
      if (!value) {
        this.lines = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LINES:
        if (value == null) {
          unsetLines();
        } else {
          setLines((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LINES:
        return getLines();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LINES:
        return isSetLines();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execMultipleLines_args)
        return this.equals((execMultipleLines_args)that);
      return false;
    }

    public boolean equals(execMultipleLines_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lines = true && this.isSetLines();
      boolean that_present_lines = true && that.isSetLines();
      if (this_present_lines || that_present_lines) {
        if (!(this_present_lines && that_present_lines))
          return false;
        if (!this.lines.equals(that.lines))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLines()) ? 131071 : 524287);
      if (isSetLines())
        hashCode = hashCode * 8191 + lines.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execMultipleLines_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLines(), other.isSetLines());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLines()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lines, other.lines);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execMultipleLines_args(");
      boolean first = true;

      sb.append("lines:");
      if (this.lines == null) {
        sb.append("null");
      } else {
        sb.append(this.lines);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execMultipleLines_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultipleLines_argsStandardScheme getScheme() {
        return new execMultipleLines_argsStandardScheme();
      }
    }

    private static class execMultipleLines_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execMultipleLines_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execMultipleLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lines = iprot.readString();
                struct.setLinesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execMultipleLines_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lines != null) {
          oprot.writeFieldBegin(LINES_FIELD_DESC);
          oprot.writeString(struct.lines);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execMultipleLines_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultipleLines_argsTupleScheme getScheme() {
        return new execMultipleLines_argsTupleScheme();
      }
    }

    private static class execMultipleLines_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execMultipleLines_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execMultipleLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLines()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLines()) {
          oprot.writeString(struct.lines);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execMultipleLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lines = iprot.readString();
          struct.setLinesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execMultipleLines_result implements org.apache.thrift.TBase<execMultipleLines_result, execMultipleLines_result._Fields>, java.io.Serializable, Cloneable, Comparable<execMultipleLines_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execMultipleLines_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execMultipleLines_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execMultipleLines_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execMultipleLines_result.class, metaDataMap);
    }

    public execMultipleLines_result() {
    }

    public execMultipleLines_result(
      boolean success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execMultipleLines_result(execMultipleLines_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public execMultipleLines_result deepCopy() {
      return new execMultipleLines_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unhandledException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public execMultipleLines_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public execMultipleLines_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execMultipleLines_result)
        return this.equals((execMultipleLines_result)that);
      return false;
    }

    public boolean equals(execMultipleLines_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execMultipleLines_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execMultipleLines_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execMultipleLines_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultipleLines_resultStandardScheme getScheme() {
        return new execMultipleLines_resultStandardScheme();
      }
    }

    private static class execMultipleLines_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execMultipleLines_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execMultipleLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execMultipleLines_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execMultipleLines_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultipleLines_resultTupleScheme getScheme() {
        return new execMultipleLines_resultTupleScheme();
      }
    }

    private static class execMultipleLines_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execMultipleLines_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execMultipleLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execMultipleLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompletions_args implements org.apache.thrift.TBase<getCompletions_args, getCompletions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompletions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompletions_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACT_TOK_FIELD_DESC = new org.apache.thrift.protocol.TField("actTok", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompletions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompletions_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String text; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String actTok; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text"),
      ACT_TOK((short)2, "actTok");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          case 2: // ACT_TOK
            return ACT_TOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACT_TOK, new org.apache.thrift.meta_data.FieldMetaData("actTok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompletions_args.class, metaDataMap);
    }

    public getCompletions_args() {
    }

    public getCompletions_args(
      java.lang.String text,
      java.lang.String actTok)
    {
      this();
      this.text = text;
      this.actTok = actTok;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompletions_args(getCompletions_args other) {
      if (other.isSetText()) {
        this.text = other.text;
      }
      if (other.isSetActTok()) {
        this.actTok = other.actTok;
      }
    }

    public getCompletions_args deepCopy() {
      return new getCompletions_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
      this.actTok = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getText() {
      return this.text;
    }

    public getCompletions_args setText(@org.apache.thrift.annotation.Nullable java.lang.String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getActTok() {
      return this.actTok;
    }

    public getCompletions_args setActTok(@org.apache.thrift.annotation.Nullable java.lang.String actTok) {
      this.actTok = actTok;
      return this;
    }

    public void unsetActTok() {
      this.actTok = null;
    }

    /** Returns true if field actTok is set (has been assigned a value) and false otherwise */
    public boolean isSetActTok() {
      return this.actTok != null;
    }

    public void setActTokIsSet(boolean value) {
      if (!value) {
        this.actTok = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((java.lang.String)value);
        }
        break;

      case ACT_TOK:
        if (value == null) {
          unsetActTok();
        } else {
          setActTok((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      case ACT_TOK:
        return getActTok();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      case ACT_TOK:
        return isSetActTok();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCompletions_args)
        return this.equals((getCompletions_args)that);
      return false;
    }

    public boolean equals(getCompletions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      boolean this_present_actTok = true && this.isSetActTok();
      boolean that_present_actTok = true && that.isSetActTok();
      if (this_present_actTok || that_present_actTok) {
        if (!(this_present_actTok && that_present_actTok))
          return false;
        if (!this.actTok.equals(that.actTok))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
      if (isSetText())
        hashCode = hashCode * 8191 + text.hashCode();

      hashCode = hashCode * 8191 + ((isSetActTok()) ? 131071 : 524287);
      if (isSetActTok())
        hashCode = hashCode * 8191 + actTok.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCompletions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetText(), other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetActTok(), other.isSetActTok());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActTok()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actTok, other.actTok);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompletions_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actTok:");
      if (this.actTok == null) {
        sb.append("null");
      } else {
        sb.append(this.actTok);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompletions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletions_argsStandardScheme getScheme() {
        return new getCompletions_argsStandardScheme();
      }
    }

    private static class getCompletions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompletions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompletions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACT_TOK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actTok = iprot.readString();
                struct.setActTokIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompletions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        if (struct.actTok != null) {
          oprot.writeFieldBegin(ACT_TOK_FIELD_DESC);
          oprot.writeString(struct.actTok);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompletions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletions_argsTupleScheme getScheme() {
        return new getCompletions_argsTupleScheme();
      }
    }

    private static class getCompletions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompletions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompletions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        if (struct.isSetActTok()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
        if (struct.isSetActTok()) {
          oprot.writeString(struct.actTok);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompletions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.actTok = iprot.readString();
          struct.setActTokIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompletions_result implements org.apache.thrift.TBase<getCompletions_result, getCompletions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompletions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompletions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompletions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompletions_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<CompletionOption> success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "GetCompletionsResponse")));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompletions_result.class, metaDataMap);
    }

    public getCompletions_result() {
    }

    public getCompletions_result(
      java.util.List<CompletionOption> success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompletions_result(getCompletions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CompletionOption> __this__success = new java.util.ArrayList<CompletionOption>(other.success.size());
        for (CompletionOption other_element : other.success) {
          __this__success.add(new CompletionOption(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public getCompletions_result deepCopy() {
      return new getCompletions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unhandledException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<CompletionOption> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CompletionOption elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CompletionOption>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<CompletionOption> getSuccess() {
      return this.success;
    }

    public getCompletions_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<CompletionOption> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public getCompletions_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CompletionOption>)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCompletions_result)
        return this.equals((getCompletions_result)that);
      return false;
    }

    public boolean equals(getCompletions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCompletions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompletions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompletions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletions_resultStandardScheme getScheme() {
        return new getCompletions_resultStandardScheme();
      }
    }

    private static class getCompletions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompletions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompletions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CompletionOption>(_list40.size);
                  @org.apache.thrift.annotation.Nullable CompletionOption _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new CompletionOption();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompletions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CompletionOption _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompletions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletions_resultTupleScheme getScheme() {
        return new getCompletions_resultTupleScheme();
      }
    }

    private static class getCompletions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompletions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompletions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CompletionOption _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompletions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CompletionOption>(_list45.size);
            @org.apache.thrift.annotation.Nullable CompletionOption _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new CompletionOption();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDescription_args implements org.apache.thrift.TBase<getDescription_args, getDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDescription_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDescription_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDescription_args.class, metaDataMap);
    }

    public getDescription_args() {
    }

    public getDescription_args(
      java.lang.String text)
    {
      this();
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDescription_args(getDescription_args other) {
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    public getDescription_args deepCopy() {
      return new getDescription_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getText() {
      return this.text;
    }

    public getDescription_args setText(@org.apache.thrift.annotation.Nullable java.lang.String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDescription_args)
        return this.equals((getDescription_args)that);
      return false;
    }

    public boolean equals(getDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
      if (isSetText())
        hashCode = hashCode * 8191 + text.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetText(), other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDescription_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescription_argsStandardScheme getScheme() {
        return new getDescription_argsStandardScheme();
      }
    }

    private static class getDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescription_argsTupleScheme getScheme() {
        return new getDescription_argsTupleScheme();
      }
    }

    private static class getDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDescription_result implements org.apache.thrift.TBase<getDescription_result, getDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDescription_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AttributeDescription")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDescription_result.class, metaDataMap);
    }

    public getDescription_result() {
    }

    public getDescription_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDescription_result(getDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getDescription_result deepCopy() {
      return new getDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getDescription_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDescription_result)
        return this.equals((getDescription_result)that);
      return false;
    }

    public boolean equals(getDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescription_resultStandardScheme getScheme() {
        return new getDescription_resultStandardScheme();
      }
    }

    private static class getDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescription_resultTupleScheme getScheme() {
        return new getDescription_resultTupleScheme();
      }
    }

    private static class getDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFrame_args implements org.apache.thrift.TBase<getFrame_args, getFrame_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFrame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFrame_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFrame_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFrame_argsTupleSchemeFactory();

    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFrame_args.class, metaDataMap);
    }

    public getFrame_args() {
    }

    public getFrame_args(
      int type)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFrame_args(getFrame_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
    }

    public getFrame_args deepCopy() {
      return new getFrame_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
    }

    public int getType() {
      return this.type;
    }

    public getFrame_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getFrame_args)
        return this.equals((getFrame_args)that);
      return false;
    }

    public boolean equals(getFrame_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + type;

      return hashCode;
    }

    @Override
    public int compareTo(getFrame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFrame_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFrame_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFrame_argsStandardScheme getScheme() {
        return new getFrame_argsStandardScheme();
      }
    }

    private static class getFrame_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFrame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFrame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFrame_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFrame_argsTupleScheme getScheme() {
        return new getFrame_argsTupleScheme();
      }
    }

    private static class getFrame_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFrame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFrame_result implements org.apache.thrift.TBase<getFrame_result, getFrame_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFrame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFrame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFrame_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFrame_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<DebugValue> success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "GetFrameResponse")));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFrame_result.class, metaDataMap);
    }

    public getFrame_result() {
    }

    public getFrame_result(
      java.util.List<DebugValue> success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFrame_result(getFrame_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DebugValue> __this__success = new java.util.ArrayList<DebugValue>(other.success.size());
        for (DebugValue other_element : other.success) {
          __this__success.add(new DebugValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public getFrame_result deepCopy() {
      return new getFrame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unhandledException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DebugValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DebugValue elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DebugValue>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DebugValue> getSuccess() {
      return this.success;
    }

    public getFrame_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<DebugValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public getFrame_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DebugValue>)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getFrame_result)
        return this.equals((getFrame_result)that);
      return false;
    }

    public boolean equals(getFrame_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFrame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFrame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFrame_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFrame_resultStandardScheme getScheme() {
        return new getFrame_resultStandardScheme();
      }
    }

    private static class getFrame_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFrame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DebugValue>(_list48.size);
                  @org.apache.thrift.annotation.Nullable DebugValue _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new DebugValue();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFrame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DebugValue _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFrame_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFrame_resultTupleScheme getScheme() {
        return new getFrame_resultTupleScheme();
      }
    }

    private static class getFrame_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFrame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DebugValue _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DebugValue>(_list53.size);
            @org.apache.thrift.annotation.Nullable DebugValue _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new DebugValue();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getVariable_args implements org.apache.thrift.TBase<getVariable_args, getVariable_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVariable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariable_args");

    private static final org.apache.thrift.protocol.TField VARIABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("variable", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVariable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVariable_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String variable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VARIABLE((short)1, "variable");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VARIABLE
            return VARIABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VARIABLE, new org.apache.thrift.meta_data.FieldMetaData("variable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariable_args.class, metaDataMap);
    }

    public getVariable_args() {
    }

    public getVariable_args(
      java.lang.String variable)
    {
      this();
      this.variable = variable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariable_args(getVariable_args other) {
      if (other.isSetVariable()) {
        this.variable = other.variable;
      }
    }

    public getVariable_args deepCopy() {
      return new getVariable_args(this);
    }

    @Override
    public void clear() {
      this.variable = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVariable() {
      return this.variable;
    }

    public getVariable_args setVariable(@org.apache.thrift.annotation.Nullable java.lang.String variable) {
      this.variable = variable;
      return this;
    }

    public void unsetVariable() {
      this.variable = null;
    }

    /** Returns true if field variable is set (has been assigned a value) and false otherwise */
    public boolean isSetVariable() {
      return this.variable != null;
    }

    public void setVariableIsSet(boolean value) {
      if (!value) {
        this.variable = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VARIABLE:
        if (value == null) {
          unsetVariable();
        } else {
          setVariable((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VARIABLE:
        return getVariable();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VARIABLE:
        return isSetVariable();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getVariable_args)
        return this.equals((getVariable_args)that);
      return false;
    }

    public boolean equals(getVariable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_variable = true && this.isSetVariable();
      boolean that_present_variable = true && that.isSetVariable();
      if (this_present_variable || that_present_variable) {
        if (!(this_present_variable && that_present_variable))
          return false;
        if (!this.variable.equals(that.variable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVariable()) ? 131071 : 524287);
      if (isSetVariable())
        hashCode = hashCode * 8191 + variable.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getVariable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVariable(), other.isSetVariable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable, other.variable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getVariable_args(");
      boolean first = true;

      sb.append("variable:");
      if (this.variable == null) {
        sb.append("null");
      } else {
        sb.append(this.variable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariable_argsStandardScheme getScheme() {
        return new getVariable_argsStandardScheme();
      }
    }

    private static class getVariable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getVariable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VARIABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.variable = iprot.readString();
                struct.setVariableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.variable != null) {
          oprot.writeFieldBegin(VARIABLE_FIELD_DESC);
          oprot.writeString(struct.variable);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariable_argsTupleScheme getScheme() {
        return new getVariable_argsTupleScheme();
      }
    }

    private static class getVariable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVariable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVariable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVariable()) {
          oprot.writeString(struct.variable);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.variable = iprot.readString();
          struct.setVariableIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getVariable_result implements org.apache.thrift.TBase<getVariable_result, getVariable_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVariable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVariable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVariable_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<DebugValue> success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "DebugValues")));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariable_result.class, metaDataMap);
    }

    public getVariable_result() {
    }

    public getVariable_result(
      java.util.List<DebugValue> success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariable_result(getVariable_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DebugValue> __this__success = new java.util.ArrayList<DebugValue>(other.success.size());
        for (DebugValue other_element : other.success) {
          __this__success.add(new DebugValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public getVariable_result deepCopy() {
      return new getVariable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unhandledException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DebugValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DebugValue elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DebugValue>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DebugValue> getSuccess() {
      return this.success;
    }

    public getVariable_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<DebugValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public getVariable_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DebugValue>)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getVariable_result)
        return this.equals((getVariable_result)that);
      return false;
    }

    public boolean equals(getVariable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getVariable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getVariable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariable_resultStandardScheme getScheme() {
        return new getVariable_resultStandardScheme();
      }
    }

    private static class getVariable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getVariable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DebugValue>(_list56.size);
                  @org.apache.thrift.annotation.Nullable DebugValue _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new DebugValue();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DebugValue _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariable_resultTupleScheme getScheme() {
        return new getVariable_resultTupleScheme();
      }
    }

    private static class getVariable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVariable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DebugValue _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DebugValue>(_list61.size);
            @org.apache.thrift.annotation.Nullable DebugValue _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new DebugValue();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setUserTypeRenderers_args implements org.apache.thrift.TBase<setUserTypeRenderers_args, setUserTypeRenderers_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUserTypeRenderers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserTypeRenderers_args");

    private static final org.apache.thrift.protocol.TField RENDERERS_FIELD_DESC = new org.apache.thrift.protocol.TField("renderers", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserTypeRenderers_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserTypeRenderers_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String renderers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RENDERERS((short)1, "renderers");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RENDERERS
            return RENDERERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RENDERERS, new org.apache.thrift.meta_data.FieldMetaData("renderers", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserTypeRenderers_args.class, metaDataMap);
    }

    public setUserTypeRenderers_args() {
    }

    public setUserTypeRenderers_args(
      java.lang.String renderers)
    {
      this();
      this.renderers = renderers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserTypeRenderers_args(setUserTypeRenderers_args other) {
      if (other.isSetRenderers()) {
        this.renderers = other.renderers;
      }
    }

    public setUserTypeRenderers_args deepCopy() {
      return new setUserTypeRenderers_args(this);
    }

    @Override
    public void clear() {
      this.renderers = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRenderers() {
      return this.renderers;
    }

    public setUserTypeRenderers_args setRenderers(@org.apache.thrift.annotation.Nullable java.lang.String renderers) {
      this.renderers = renderers;
      return this;
    }

    public void unsetRenderers() {
      this.renderers = null;
    }

    /** Returns true if field renderers is set (has been assigned a value) and false otherwise */
    public boolean isSetRenderers() {
      return this.renderers != null;
    }

    public void setRenderersIsSet(boolean value) {
      if (!value) {
        this.renderers = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RENDERERS:
        if (value == null) {
          unsetRenderers();
        } else {
          setRenderers((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RENDERERS:
        return getRenderers();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RENDERERS:
        return isSetRenderers();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserTypeRenderers_args)
        return this.equals((setUserTypeRenderers_args)that);
      return false;
    }

    public boolean equals(setUserTypeRenderers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_renderers = true && this.isSetRenderers();
      boolean that_present_renderers = true && that.isSetRenderers();
      if (this_present_renderers || that_present_renderers) {
        if (!(this_present_renderers && that_present_renderers))
          return false;
        if (!this.renderers.equals(that.renderers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRenderers()) ? 131071 : 524287);
      if (isSetRenderers())
        hashCode = hashCode * 8191 + renderers.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setUserTypeRenderers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRenderers()).compareTo(other.isSetRenderers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRenderers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.renderers, other.renderers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserTypeRenderers_args(");
      boolean first = true;

      sb.append("renderers:");
      if (this.renderers == null) {
        sb.append("null");
      } else {
        sb.append(this.renderers);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserTypeRenderers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setUserTypeRenderers_argsStandardScheme getScheme() {
        return new setUserTypeRenderers_argsStandardScheme();
      }
    }

    private static class setUserTypeRenderers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUserTypeRenderers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserTypeRenderers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RENDERERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.renderers = iprot.readString();
                struct.setRenderersIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserTypeRenderers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.renderers != null) {
          oprot.writeFieldBegin(RENDERERS_FIELD_DESC);
          oprot.writeString(struct.renderers);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserTypeRenderers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setUserTypeRenderers_argsTupleScheme getScheme() {
        return new setUserTypeRenderers_argsTupleScheme();
      }
    }

    private static class setUserTypeRenderers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserTypeRenderers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserTypeRenderers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRenderers()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRenderers()) {
          oprot.writeString(struct.renderers);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserTypeRenderers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.renderers = iprot.readString();
          struct.setRenderersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setUserTypeRenderers_result implements org.apache.thrift.TBase<setUserTypeRenderers_result, setUserTypeRenderers_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUserTypeRenderers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserTypeRenderers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserTypeRenderers_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserTypeRenderers_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserTypeRenderers_result.class, metaDataMap);
    }

    public setUserTypeRenderers_result() {
    }

    public setUserTypeRenderers_result(
      boolean success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserTypeRenderers_result(setUserTypeRenderers_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public setUserTypeRenderers_result deepCopy() {
      return new setUserTypeRenderers_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unhandledException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setUserTypeRenderers_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public setUserTypeRenderers_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserTypeRenderers_result)
        return this.equals((setUserTypeRenderers_result)that);
      return false;
    }

    public boolean equals(setUserTypeRenderers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setUserTypeRenderers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnhandledException()).compareTo(other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserTypeRenderers_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserTypeRenderers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setUserTypeRenderers_resultStandardScheme getScheme() {
        return new setUserTypeRenderers_resultStandardScheme();
      }
    }

    private static class setUserTypeRenderers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUserTypeRenderers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserTypeRenderers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserTypeRenderers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserTypeRenderers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setUserTypeRenderers_resultTupleScheme getScheme() {
        return new setUserTypeRenderers_resultTupleScheme();
      }
    }

    private static class setUserTypeRenderers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserTypeRenderers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserTypeRenderers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserTypeRenderers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeVariable_args implements org.apache.thrift.TBase<changeVariable_args, changeVariable_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeVariable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeVariable_args");

    private static final org.apache.thrift.protocol.TField EVALUATION_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationExpression", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeVariable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeVariable_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String evaluationExpression; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVALUATION_EXPRESSION((short)1, "evaluationExpression"),
      VALUE((short)2, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVALUATION_EXPRESSION
            return EVALUATION_EXPRESSION;
          case 2: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVALUATION_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("evaluationExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeVariable_args.class, metaDataMap);
    }

    public changeVariable_args() {
    }

    public changeVariable_args(
      java.lang.String evaluationExpression,
      java.lang.String value)
    {
      this();
      this.evaluationExpression = evaluationExpression;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeVariable_args(changeVariable_args other) {
      if (other.isSetEvaluationExpression()) {
        this.evaluationExpression = other.evaluationExpression;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public changeVariable_args deepCopy() {
      return new changeVariable_args(this);
    }

    @Override
    public void clear() {
      this.evaluationExpression = null;
      this.value = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEvaluationExpression() {
      return this.evaluationExpression;
    }

    public changeVariable_args setEvaluationExpression(@org.apache.thrift.annotation.Nullable java.lang.String evaluationExpression) {
      this.evaluationExpression = evaluationExpression;
      return this;
    }

    public void unsetEvaluationExpression() {
      this.evaluationExpression = null;
    }

    /** Returns true if field evaluationExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetEvaluationExpression() {
      return this.evaluationExpression != null;
    }

    public void setEvaluationExpressionIsSet(boolean value) {
      if (!value) {
        this.evaluationExpression = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getValue() {
      return this.value;
    }

    public changeVariable_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EVALUATION_EXPRESSION:
        if (value == null) {
          unsetEvaluationExpression();
        } else {
          setEvaluationExpression((java.lang.String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EVALUATION_EXPRESSION:
        return getEvaluationExpression();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EVALUATION_EXPRESSION:
        return isSetEvaluationExpression();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof changeVariable_args)
        return this.equals((changeVariable_args)that);
      return false;
    }

    public boolean equals(changeVariable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_evaluationExpression = true && this.isSetEvaluationExpression();
      boolean that_present_evaluationExpression = true && that.isSetEvaluationExpression();
      if (this_present_evaluationExpression || that_present_evaluationExpression) {
        if (!(this_present_evaluationExpression && that_present_evaluationExpression))
          return false;
        if (!this.evaluationExpression.equals(that.evaluationExpression))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEvaluationExpression()) ? 131071 : 524287);
      if (isSetEvaluationExpression())
        hashCode = hashCode * 8191 + evaluationExpression.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeVariable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEvaluationExpression(), other.isSetEvaluationExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvaluationExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationExpression, other.evaluationExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeVariable_args(");
      boolean first = true;

      sb.append("evaluationExpression:");
      if (this.evaluationExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.evaluationExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeVariable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeVariable_argsStandardScheme getScheme() {
        return new changeVariable_argsStandardScheme();
      }
    }

    private static class changeVariable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeVariable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeVariable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVALUATION_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.evaluationExpression = iprot.readString();
                struct.setEvaluationExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeVariable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.evaluationExpression != null) {
          oprot.writeFieldBegin(EVALUATION_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.evaluationExpression);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeVariable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeVariable_argsTupleScheme getScheme() {
        return new changeVariable_argsTupleScheme();
      }
    }

    private static class changeVariable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeVariable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeVariable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEvaluationExpression()) {
          optionals.set(0);
        }
        if (struct.isSetValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEvaluationExpression()) {
          oprot.writeString(struct.evaluationExpression);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeVariable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.evaluationExpression = iprot.readString();
          struct.setEvaluationExpressionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeVariable_result implements org.apache.thrift.TBase<changeVariable_result, changeVariable_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeVariable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeVariable_result");

    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeVariable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeVariable_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeVariable_result.class, metaDataMap);
    }

    public changeVariable_result() {
    }

    public changeVariable_result(
      PythonUnhandledException unhandledException)
    {
      this();
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeVariable_result(changeVariable_result other) {
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public changeVariable_result deepCopy() {
      return new changeVariable_result(this);
    }

    @Override
    public void clear() {
      this.unhandledException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public changeVariable_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof changeVariable_result)
        return this.equals((changeVariable_result)that);
      return false;
    }

    public boolean equals(changeVariable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeVariable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeVariable_result(");
      boolean first = true;

      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeVariable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeVariable_resultStandardScheme getScheme() {
        return new changeVariable_resultStandardScheme();
      }
    }

    private static class changeVariable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeVariable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeVariable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeVariable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeVariable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeVariable_resultTupleScheme getScheme() {
        return new changeVariable_resultTupleScheme();
      }
    }

    private static class changeVariable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeVariable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeVariable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnhandledException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeVariable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class connectToDebugger_args implements org.apache.thrift.TBase<connectToDebugger_args, connectToDebugger_args._Fields>, java.io.Serializable, Cloneable, Comparable<connectToDebugger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectToDebugger_args");

    private static final org.apache.thrift.protocol.TField LOCAL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("localPort", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField EXTRA_ENVS_FIELD_DESC = new org.apache.thrift.protocol.TField("extraEnvs", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connectToDebugger_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connectToDebugger_argsTupleSchemeFactory();

    public int localPort; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Boolean> opts; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraEnvs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCAL_PORT((short)1, "localPort"),
      HOST((short)2, "host"),
      OPTS((short)3, "opts"),
      EXTRA_ENVS((short)4, "extraEnvs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCAL_PORT
            return LOCAL_PORT;
          case 2: // HOST
            return HOST;
          case 3: // OPTS
            return OPTS;
          case 4: // EXTRA_ENVS
            return EXTRA_ENVS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOCALPORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCAL_PORT, new org.apache.thrift.meta_data.FieldMetaData("localPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      tmpMap.put(_Fields.EXTRA_ENVS, new org.apache.thrift.meta_data.FieldMetaData("extraEnvs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectToDebugger_args.class, metaDataMap);
    }

    public connectToDebugger_args() {
    }

    public connectToDebugger_args(
      int localPort,
      java.lang.String host,
      java.util.Map<java.lang.String,java.lang.Boolean> opts,
      java.util.Map<java.lang.String,java.lang.String> extraEnvs)
    {
      this();
      this.localPort = localPort;
      setLocalPortIsSet(true);
      this.host = host;
      this.opts = opts;
      this.extraEnvs = extraEnvs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connectToDebugger_args(connectToDebugger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.localPort = other.localPort;
      if (other.isSetHost()) {
        this.host = other.host;
      }
      if (other.isSetOpts()) {
        java.util.Map<java.lang.String,java.lang.Boolean> __this__opts = new java.util.HashMap<java.lang.String,java.lang.Boolean>(other.opts);
        this.opts = __this__opts;
      }
      if (other.isSetExtraEnvs()) {
        java.util.Map<java.lang.String,java.lang.String> __this__extraEnvs = new java.util.HashMap<java.lang.String,java.lang.String>(other.extraEnvs);
        this.extraEnvs = __this__extraEnvs;
      }
    }

    public connectToDebugger_args deepCopy() {
      return new connectToDebugger_args(this);
    }

    @Override
    public void clear() {
      setLocalPortIsSet(false);
      this.localPort = 0;
      this.host = null;
      this.opts = null;
      this.extraEnvs = null;
    }

    public int getLocalPort() {
      return this.localPort;
    }

    public connectToDebugger_args setLocalPort(int localPort) {
      this.localPort = localPort;
      setLocalPortIsSet(true);
      return this;
    }

    public void unsetLocalPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALPORT_ISSET_ID);
    }

    /** Returns true if field localPort is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALPORT_ISSET_ID);
    }

    public void setLocalPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALPORT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHost() {
      return this.host;
    }

    public connectToDebugger_args setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public int getOptsSize() {
      return (this.opts == null) ? 0 : this.opts.size();
    }

    public void putToOpts(java.lang.String key, boolean val) {
      if (this.opts == null) {
        this.opts = new java.util.HashMap<java.lang.String,java.lang.Boolean>();
      }
      this.opts.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.Boolean> getOpts() {
      return this.opts;
    }

    public connectToDebugger_args setOpts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Boolean> opts) {
      this.opts = opts;
      return this;
    }

    public void unsetOpts() {
      this.opts = null;
    }

    /** Returns true if field opts is set (has been assigned a value) and false otherwise */
    public boolean isSetOpts() {
      return this.opts != null;
    }

    public void setOptsIsSet(boolean value) {
      if (!value) {
        this.opts = null;
      }
    }

    public int getExtraEnvsSize() {
      return (this.extraEnvs == null) ? 0 : this.extraEnvs.size();
    }

    public void putToExtraEnvs(java.lang.String key, java.lang.String val) {
      if (this.extraEnvs == null) {
        this.extraEnvs = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.extraEnvs.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getExtraEnvs() {
      return this.extraEnvs;
    }

    public connectToDebugger_args setExtraEnvs(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraEnvs) {
      this.extraEnvs = extraEnvs;
      return this;
    }

    public void unsetExtraEnvs() {
      this.extraEnvs = null;
    }

    /** Returns true if field extraEnvs is set (has been assigned a value) and false otherwise */
    public boolean isSetExtraEnvs() {
      return this.extraEnvs != null;
    }

    public void setExtraEnvsIsSet(boolean value) {
      if (!value) {
        this.extraEnvs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LOCAL_PORT:
        if (value == null) {
          unsetLocalPort();
        } else {
          setLocalPort((java.lang.Integer)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((java.lang.String)value);
        }
        break;

      case OPTS:
        if (value == null) {
          unsetOpts();
        } else {
          setOpts((java.util.Map<java.lang.String,java.lang.Boolean>)value);
        }
        break;

      case EXTRA_ENVS:
        if (value == null) {
          unsetExtraEnvs();
        } else {
          setExtraEnvs((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCAL_PORT:
        return getLocalPort();

      case HOST:
        return getHost();

      case OPTS:
        return getOpts();

      case EXTRA_ENVS:
        return getExtraEnvs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCAL_PORT:
        return isSetLocalPort();
      case HOST:
        return isSetHost();
      case OPTS:
        return isSetOpts();
      case EXTRA_ENVS:
        return isSetExtraEnvs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connectToDebugger_args)
        return this.equals((connectToDebugger_args)that);
      return false;
    }

    public boolean equals(connectToDebugger_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localPort = true;
      boolean that_present_localPort = true;
      if (this_present_localPort || that_present_localPort) {
        if (!(this_present_localPort && that_present_localPort))
          return false;
        if (this.localPort != that.localPort)
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      boolean this_present_opts = true && this.isSetOpts();
      boolean that_present_opts = true && that.isSetOpts();
      if (this_present_opts || that_present_opts) {
        if (!(this_present_opts && that_present_opts))
          return false;
        if (!this.opts.equals(that.opts))
          return false;
      }

      boolean this_present_extraEnvs = true && this.isSetExtraEnvs();
      boolean that_present_extraEnvs = true && that.isSetExtraEnvs();
      if (this_present_extraEnvs || that_present_extraEnvs) {
        if (!(this_present_extraEnvs && that_present_extraEnvs))
          return false;
        if (!this.extraEnvs.equals(that.extraEnvs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + localPort;

      hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost())
        hashCode = hashCode * 8191 + host.hashCode();

      hashCode = hashCode * 8191 + ((isSetOpts()) ? 131071 : 524287);
      if (isSetOpts())
        hashCode = hashCode * 8191 + opts.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtraEnvs()) ? 131071 : 524287);
      if (isSetExtraEnvs())
        hashCode = hashCode * 8191 + extraEnvs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(connectToDebugger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLocalPort(), other.isSetLocalPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localPort, other.localPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHost(), other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOpts(), other.isSetOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, other.opts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetExtraEnvs(), other.isSetExtraEnvs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtraEnvs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraEnvs, other.extraEnvs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connectToDebugger_args(");
      boolean first = true;

      sb.append("localPort:");
      sb.append(this.localPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opts:");
      if (this.opts == null) {
        sb.append("null");
      } else {
        sb.append(this.opts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extraEnvs:");
      if (this.extraEnvs == null) {
        sb.append("null");
      } else {
        sb.append(this.extraEnvs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connectToDebugger_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connectToDebugger_argsStandardScheme getScheme() {
        return new connectToDebugger_argsStandardScheme();
      }
    }

    private static class connectToDebugger_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connectToDebugger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connectToDebugger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCAL_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.localPort = iprot.readI32();
                struct.setLocalPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.opts = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map64.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key65;
                  boolean _val66;
                  for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                  {
                    _key65 = iprot.readString();
                    _val66 = iprot.readBool();
                    struct.opts.put(_key65, _val66);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXTRA_ENVS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                  struct.extraEnvs = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map68.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key69;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val70;
                  for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                  {
                    _key69 = iprot.readString();
                    _val70 = iprot.readString();
                    struct.extraEnvs.put(_key69, _val70);
                  }
                  iprot.readMapEnd();
                }
                struct.setExtraEnvsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connectToDebugger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOCAL_PORT_FIELD_DESC);
        oprot.writeI32(struct.localPort);
        oprot.writeFieldEnd();
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        if (struct.opts != null) {
          oprot.writeFieldBegin(OPTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.opts.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter72 : struct.opts.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              oprot.writeBool(_iter72.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.extraEnvs != null) {
          oprot.writeFieldBegin(EXTRA_ENVS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraEnvs.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter73 : struct.extraEnvs.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              oprot.writeString(_iter73.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connectToDebugger_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connectToDebugger_argsTupleScheme getScheme() {
        return new connectToDebugger_argsTupleScheme();
      }
    }

    private static class connectToDebugger_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connectToDebugger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connectToDebugger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocalPort()) {
          optionals.set(0);
        }
        if (struct.isSetHost()) {
          optionals.set(1);
        }
        if (struct.isSetOpts()) {
          optionals.set(2);
        }
        if (struct.isSetExtraEnvs()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLocalPort()) {
          oprot.writeI32(struct.localPort);
        }
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
        if (struct.isSetOpts()) {
          {
            oprot.writeI32(struct.opts.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter74 : struct.opts.entrySet())
            {
              oprot.writeString(_iter74.getKey());
              oprot.writeBool(_iter74.getValue());
            }
          }
        }
        if (struct.isSetExtraEnvs()) {
          {
            oprot.writeI32(struct.extraEnvs.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter75 : struct.extraEnvs.entrySet())
            {
              oprot.writeString(_iter75.getKey());
              oprot.writeString(_iter75.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connectToDebugger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.localPort = iprot.readI32();
          struct.setLocalPortIsSet(true);
        }
        if (incoming.get(1)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.opts = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map76.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key77;
            boolean _val78;
            for (int _i79 = 0; _i79 < _map76.size; ++_i79)
            {
              _key77 = iprot.readString();
              _val78 = iprot.readBool();
              struct.opts.put(_key77, _val78);
            }
          }
          struct.setOptsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.extraEnvs = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map80.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key81;
            @org.apache.thrift.annotation.Nullable java.lang.String _val82;
            for (int _i83 = 0; _i83 < _map80.size; ++_i83)
            {
              _key81 = iprot.readString();
              _val82 = iprot.readString();
              struct.extraEnvs.put(_key81, _val82);
            }
          }
          struct.setExtraEnvsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class connectToDebugger_result implements org.apache.thrift.TBase<connectToDebugger_result, connectToDebugger_result._Fields>, java.io.Serializable, Cloneable, Comparable<connectToDebugger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectToDebugger_result");

    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connectToDebugger_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connectToDebugger_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectToDebugger_result.class, metaDataMap);
    }

    public connectToDebugger_result() {
    }

    public connectToDebugger_result(
      PythonUnhandledException unhandledException)
    {
      this();
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connectToDebugger_result(connectToDebugger_result other) {
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public connectToDebugger_result deepCopy() {
      return new connectToDebugger_result(this);
    }

    @Override
    public void clear() {
      this.unhandledException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public connectToDebugger_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connectToDebugger_result)
        return this.equals((connectToDebugger_result)that);
      return false;
    }

    public boolean equals(connectToDebugger_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(connectToDebugger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connectToDebugger_result(");
      boolean first = true;

      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connectToDebugger_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connectToDebugger_resultStandardScheme getScheme() {
        return new connectToDebugger_resultStandardScheme();
      }
    }

    private static class connectToDebugger_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connectToDebugger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connectToDebugger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connectToDebugger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connectToDebugger_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public connectToDebugger_resultTupleScheme getScheme() {
        return new connectToDebugger_resultTupleScheme();
      }
    }

    private static class connectToDebugger_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connectToDebugger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connectToDebugger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnhandledException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connectToDebugger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class interrupt_args implements org.apache.thrift.TBase<interrupt_args, interrupt_args._Fields>, java.io.Serializable, Cloneable, Comparable<interrupt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("interrupt_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new interrupt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new interrupt_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(interrupt_args.class, metaDataMap);
    }

    public interrupt_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public interrupt_args(interrupt_args other) {
    }

    public interrupt_args deepCopy() {
      return new interrupt_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof interrupt_args)
        return this.equals((interrupt_args)that);
      return false;
    }

    public boolean equals(interrupt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(interrupt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("interrupt_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class interrupt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public interrupt_argsStandardScheme getScheme() {
        return new interrupt_argsStandardScheme();
      }
    }

    private static class interrupt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<interrupt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, interrupt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, interrupt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class interrupt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public interrupt_argsTupleScheme getScheme() {
        return new interrupt_argsTupleScheme();
      }
    }

    private static class interrupt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<interrupt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, interrupt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, interrupt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class interrupt_result implements org.apache.thrift.TBase<interrupt_result, interrupt_result._Fields>, java.io.Serializable, Cloneable, Comparable<interrupt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("interrupt_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new interrupt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new interrupt_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(interrupt_result.class, metaDataMap);
    }

    public interrupt_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public interrupt_result(interrupt_result other) {
    }

    public interrupt_result deepCopy() {
      return new interrupt_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof interrupt_result)
        return this.equals((interrupt_result)that);
      return false;
    }

    public boolean equals(interrupt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(interrupt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("interrupt_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class interrupt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public interrupt_resultStandardScheme getScheme() {
        return new interrupt_resultStandardScheme();
      }
    }

    private static class interrupt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<interrupt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, interrupt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, interrupt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class interrupt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public interrupt_resultTupleScheme getScheme() {
        return new interrupt_resultTupleScheme();
      }
    }

    private static class interrupt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<interrupt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, interrupt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, interrupt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handshake_args implements org.apache.thrift.TBase<handshake_args, handshake_args._Fields>, java.io.Serializable, Cloneable, Comparable<handshake_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handshake_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handshake_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handshake_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handshake_args.class, metaDataMap);
    }

    public handshake_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handshake_args(handshake_args other) {
    }

    public handshake_args deepCopy() {
      return new handshake_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handshake_args)
        return this.equals((handshake_args)that);
      return false;
    }

    public boolean equals(handshake_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(handshake_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handshake_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handshake_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handshake_argsStandardScheme getScheme() {
        return new handshake_argsStandardScheme();
      }
    }

    private static class handshake_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handshake_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handshake_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handshake_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handshake_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handshake_argsTupleScheme getScheme() {
        return new handshake_argsTupleScheme();
      }
    }

    private static class handshake_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handshake_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handshake_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handshake_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handshake_result implements org.apache.thrift.TBase<handshake_result, handshake_result._Fields>, java.io.Serializable, Cloneable, Comparable<handshake_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handshake_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handshake_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handshake_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handshake_result.class, metaDataMap);
    }

    public handshake_result() {
    }

    public handshake_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handshake_result(handshake_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public handshake_result deepCopy() {
      return new handshake_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public handshake_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handshake_result)
        return this.equals((handshake_result)that);
      return false;
    }

    public boolean equals(handshake_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(handshake_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handshake_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handshake_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handshake_resultStandardScheme getScheme() {
        return new handshake_resultStandardScheme();
      }
    }

    private static class handshake_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handshake_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handshake_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handshake_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handshake_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handshake_resultTupleScheme getScheme() {
        return new handshake_resultTupleScheme();
      }
    }

    private static class handshake_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handshake_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handshake_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handshake_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class close_args implements org.apache.thrift.TBase<close_args, close_args._Fields>, java.io.Serializable, Cloneable, Comparable<close_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new close_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new close_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_args.class, metaDataMap);
    }

    public close_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_args(close_args other) {
    }

    public close_args deepCopy() {
      return new close_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof close_args)
        return this.equals((close_args)that);
      return false;
    }

    public boolean equals(close_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("close_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public close_argsStandardScheme getScheme() {
        return new close_argsStandardScheme();
      }
    }

    private static class close_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<close_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public close_argsTupleScheme getScheme() {
        return new close_argsTupleScheme();
      }
    }

    private static class close_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<close_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class evaluate_args implements org.apache.thrift.TBase<evaluate_args, evaluate_args._Fields>, java.io.Serializable, Cloneable, Comparable<evaluate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluate_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DO_TRUNC_FIELD_DESC = new org.apache.thrift.protocol.TField("doTrunc", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new evaluate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new evaluate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String expression; // required
    public boolean doTrunc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression"),
      DO_TRUNC((short)2, "doTrunc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          case 2: // DO_TRUNC
            return DO_TRUNC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOTRUNC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DO_TRUNC, new org.apache.thrift.meta_data.FieldMetaData("doTrunc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluate_args.class, metaDataMap);
    }

    public evaluate_args() {
    }

    public evaluate_args(
      java.lang.String expression,
      boolean doTrunc)
    {
      this();
      this.expression = expression;
      this.doTrunc = doTrunc;
      setDoTruncIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluate_args(evaluate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
      this.doTrunc = other.doTrunc;
    }

    public evaluate_args deepCopy() {
      return new evaluate_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
      setDoTruncIsSet(false);
      this.doTrunc = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getExpression() {
      return this.expression;
    }

    public evaluate_args setExpression(@org.apache.thrift.annotation.Nullable java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public boolean isDoTrunc() {
      return this.doTrunc;
    }

    public evaluate_args setDoTrunc(boolean doTrunc) {
      this.doTrunc = doTrunc;
      setDoTruncIsSet(true);
      return this;
    }

    public void unsetDoTrunc() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOTRUNC_ISSET_ID);
    }

    /** Returns true if field doTrunc is set (has been assigned a value) and false otherwise */
    public boolean isSetDoTrunc() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOTRUNC_ISSET_ID);
    }

    public void setDoTruncIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOTRUNC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      case DO_TRUNC:
        if (value == null) {
          unsetDoTrunc();
        } else {
          setDoTrunc((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      case DO_TRUNC:
        return isDoTrunc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      case DO_TRUNC:
        return isSetDoTrunc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof evaluate_args)
        return this.equals((evaluate_args)that);
      return false;
    }

    public boolean equals(evaluate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      boolean this_present_doTrunc = true;
      boolean that_present_doTrunc = true;
      if (this_present_doTrunc || that_present_doTrunc) {
        if (!(this_present_doTrunc && that_present_doTrunc))
          return false;
        if (this.doTrunc != that.doTrunc)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      hashCode = hashCode * 8191 + ((doTrunc) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(evaluate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetExpression(), other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDoTrunc(), other.isSetDoTrunc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoTrunc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doTrunc, other.doTrunc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("evaluate_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doTrunc:");
      sb.append(this.doTrunc);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evaluate_argsStandardScheme getScheme() {
        return new evaluate_argsStandardScheme();
      }
    }

    private static class evaluate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<evaluate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DO_TRUNC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.doTrunc = iprot.readBool();
                struct.setDoTruncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DO_TRUNC_FIELD_DESC);
        oprot.writeBool(struct.doTrunc);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evaluate_argsTupleScheme getScheme() {
        return new evaluate_argsTupleScheme();
      }
    }

    private static class evaluate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<evaluate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        if (struct.isSetDoTrunc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
        if (struct.isSetDoTrunc()) {
          oprot.writeBool(struct.doTrunc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.doTrunc = iprot.readBool();
          struct.setDoTruncIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class evaluate_result implements org.apache.thrift.TBase<evaluate_result, evaluate_result._Fields>, java.io.Serializable, Cloneable, Comparable<evaluate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new evaluate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new evaluate_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<DebugValue> success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "DebugValues")));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluate_result.class, metaDataMap);
    }

    public evaluate_result() {
    }

    public evaluate_result(
      java.util.List<DebugValue> success,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluate_result(evaluate_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DebugValue> __this__success = new java.util.ArrayList<DebugValue>(other.success.size());
        for (DebugValue other_element : other.success) {
          __this__success.add(new DebugValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public evaluate_result deepCopy() {
      return new evaluate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unhandledException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DebugValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DebugValue elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DebugValue>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DebugValue> getSuccess() {
      return this.success;
    }

    public evaluate_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<DebugValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public evaluate_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DebugValue>)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof evaluate_result)
        return this.equals((evaluate_result)that);
      return false;
    }

    public boolean equals(evaluate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(evaluate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("evaluate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evaluate_resultStandardScheme getScheme() {
        return new evaluate_resultStandardScheme();
      }
    }

    private static class evaluate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<evaluate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DebugValue>(_list84.size);
                  @org.apache.thrift.annotation.Nullable DebugValue _elem85;
                  for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                  {
                    _elem85 = new DebugValue();
                    _elem85.read(iprot);
                    struct.success.add(_elem85);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DebugValue _iter87 : struct.success)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evaluate_resultTupleScheme getScheme() {
        return new evaluate_resultTupleScheme();
      }
    }

    private static class evaluate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<evaluate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DebugValue _iter88 : struct.success)
            {
              _iter88.write(oprot);
            }
          }
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DebugValue>(_list89.size);
            @org.apache.thrift.annotation.Nullable DebugValue _elem90;
            for (int _i91 = 0; _i91 < _list89.size; ++_i91)
            {
              _elem90 = new DebugValue();
              _elem90.read(iprot);
              struct.success.add(_elem90);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArray_args implements org.apache.thrift.TBase<getArray_args, getArray_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArray_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArray_args");

    private static final org.apache.thrift.protocol.TField VARS_FIELD_DESC = new org.apache.thrift.protocol.TField("vars", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROW_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("rowOffset", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COL_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("colOffset", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cols", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArray_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArray_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String vars; // required
    public int rowOffset; // required
    public int colOffset; // required
    public int rows; // required
    public int cols; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String format; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VARS((short)1, "vars"),
      ROW_OFFSET((short)2, "rowOffset"),
      COL_OFFSET((short)3, "colOffset"),
      ROWS((short)4, "rows"),
      COLS((short)5, "cols"),
      FORMAT((short)6, "format");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VARS
            return VARS;
          case 2: // ROW_OFFSET
            return ROW_OFFSET;
          case 3: // COL_OFFSET
            return COL_OFFSET;
          case 4: // ROWS
            return ROWS;
          case 5: // COLS
            return COLS;
          case 6: // FORMAT
            return FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWOFFSET_ISSET_ID = 0;
    private static final int __COLOFFSET_ISSET_ID = 1;
    private static final int __ROWS_ISSET_ID = 2;
    private static final int __COLS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VARS, new org.apache.thrift.meta_data.FieldMetaData("vars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("rowOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COL_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("colOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COLS, new org.apache.thrift.meta_data.FieldMetaData("cols", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArray_args.class, metaDataMap);
    }

    public getArray_args() {
    }

    public getArray_args(
      java.lang.String vars,
      int rowOffset,
      int colOffset,
      int rows,
      int cols,
      java.lang.String format)
    {
      this();
      this.vars = vars;
      this.rowOffset = rowOffset;
      setRowOffsetIsSet(true);
      this.colOffset = colOffset;
      setColOffsetIsSet(true);
      this.rows = rows;
      setRowsIsSet(true);
      this.cols = cols;
      setColsIsSet(true);
      this.format = format;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArray_args(getArray_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVars()) {
        this.vars = other.vars;
      }
      this.rowOffset = other.rowOffset;
      this.colOffset = other.colOffset;
      this.rows = other.rows;
      this.cols = other.cols;
      if (other.isSetFormat()) {
        this.format = other.format;
      }
    }

    public getArray_args deepCopy() {
      return new getArray_args(this);
    }

    @Override
    public void clear() {
      this.vars = null;
      setRowOffsetIsSet(false);
      this.rowOffset = 0;
      setColOffsetIsSet(false);
      this.colOffset = 0;
      setRowsIsSet(false);
      this.rows = 0;
      setColsIsSet(false);
      this.cols = 0;
      this.format = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVars() {
      return this.vars;
    }

    public getArray_args setVars(@org.apache.thrift.annotation.Nullable java.lang.String vars) {
      this.vars = vars;
      return this;
    }

    public void unsetVars() {
      this.vars = null;
    }

    /** Returns true if field vars is set (has been assigned a value) and false otherwise */
    public boolean isSetVars() {
      return this.vars != null;
    }

    public void setVarsIsSet(boolean value) {
      if (!value) {
        this.vars = null;
      }
    }

    public int getRowOffset() {
      return this.rowOffset;
    }

    public getArray_args setRowOffset(int rowOffset) {
      this.rowOffset = rowOffset;
      setRowOffsetIsSet(true);
      return this;
    }

    public void unsetRowOffset() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWOFFSET_ISSET_ID);
    }

    /** Returns true if field rowOffset is set (has been assigned a value) and false otherwise */
    public boolean isSetRowOffset() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWOFFSET_ISSET_ID);
    }

    public void setRowOffsetIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWOFFSET_ISSET_ID, value);
    }

    public int getColOffset() {
      return this.colOffset;
    }

    public getArray_args setColOffset(int colOffset) {
      this.colOffset = colOffset;
      setColOffsetIsSet(true);
      return this;
    }

    public void unsetColOffset() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLOFFSET_ISSET_ID);
    }

    /** Returns true if field colOffset is set (has been assigned a value) and false otherwise */
    public boolean isSetColOffset() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLOFFSET_ISSET_ID);
    }

    public void setColOffsetIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLOFFSET_ISSET_ID, value);
    }

    public int getRows() {
      return this.rows;
    }

    public getArray_args setRows(int rows) {
      this.rows = rows;
      setRowsIsSet(true);
      return this;
    }

    public void unsetRows() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
    }

    /** Returns true if field rows is set (has been assigned a value) and false otherwise */
    public boolean isSetRows() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
    }

    public void setRowsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
    }

    public int getCols() {
      return this.cols;
    }

    public getArray_args setCols(int cols) {
      this.cols = cols;
      setColsIsSet(true);
      return this;
    }

    public void unsetCols() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLS_ISSET_ID);
    }

    /** Returns true if field cols is set (has been assigned a value) and false otherwise */
    public boolean isSetCols() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLS_ISSET_ID);
    }

    public void setColsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFormat() {
      return this.format;
    }

    public getArray_args setFormat(@org.apache.thrift.annotation.Nullable java.lang.String format) {
      this.format = format;
      return this;
    }

    public void unsetFormat() {
      this.format = null;
    }

    /** Returns true if field format is set (has been assigned a value) and false otherwise */
    public boolean isSetFormat() {
      return this.format != null;
    }

    public void setFormatIsSet(boolean value) {
      if (!value) {
        this.format = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VARS:
        if (value == null) {
          unsetVars();
        } else {
          setVars((java.lang.String)value);
        }
        break;

      case ROW_OFFSET:
        if (value == null) {
          unsetRowOffset();
        } else {
          setRowOffset((java.lang.Integer)value);
        }
        break;

      case COL_OFFSET:
        if (value == null) {
          unsetColOffset();
        } else {
          setColOffset((java.lang.Integer)value);
        }
        break;

      case ROWS:
        if (value == null) {
          unsetRows();
        } else {
          setRows((java.lang.Integer)value);
        }
        break;

      case COLS:
        if (value == null) {
          unsetCols();
        } else {
          setCols((java.lang.Integer)value);
        }
        break;

      case FORMAT:
        if (value == null) {
          unsetFormat();
        } else {
          setFormat((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VARS:
        return getVars();

      case ROW_OFFSET:
        return getRowOffset();

      case COL_OFFSET:
        return getColOffset();

      case ROWS:
        return getRows();

      case COLS:
        return getCols();

      case FORMAT:
        return getFormat();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VARS:
        return isSetVars();
      case ROW_OFFSET:
        return isSetRowOffset();
      case COL_OFFSET:
        return isSetColOffset();
      case ROWS:
        return isSetRows();
      case COLS:
        return isSetCols();
      case FORMAT:
        return isSetFormat();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getArray_args)
        return this.equals((getArray_args)that);
      return false;
    }

    public boolean equals(getArray_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_vars = true && this.isSetVars();
      boolean that_present_vars = true && that.isSetVars();
      if (this_present_vars || that_present_vars) {
        if (!(this_present_vars && that_present_vars))
          return false;
        if (!this.vars.equals(that.vars))
          return false;
      }

      boolean this_present_rowOffset = true;
      boolean that_present_rowOffset = true;
      if (this_present_rowOffset || that_present_rowOffset) {
        if (!(this_present_rowOffset && that_present_rowOffset))
          return false;
        if (this.rowOffset != that.rowOffset)
          return false;
      }

      boolean this_present_colOffset = true;
      boolean that_present_colOffset = true;
      if (this_present_colOffset || that_present_colOffset) {
        if (!(this_present_colOffset && that_present_colOffset))
          return false;
        if (this.colOffset != that.colOffset)
          return false;
      }

      boolean this_present_rows = true;
      boolean that_present_rows = true;
      if (this_present_rows || that_present_rows) {
        if (!(this_present_rows && that_present_rows))
          return false;
        if (this.rows != that.rows)
          return false;
      }

      boolean this_present_cols = true;
      boolean that_present_cols = true;
      if (this_present_cols || that_present_cols) {
        if (!(this_present_cols && that_present_cols))
          return false;
        if (this.cols != that.cols)
          return false;
      }

      boolean this_present_format = true && this.isSetFormat();
      boolean that_present_format = true && that.isSetFormat();
      if (this_present_format || that_present_format) {
        if (!(this_present_format && that_present_format))
          return false;
        if (!this.format.equals(that.format))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVars()) ? 131071 : 524287);
      if (isSetVars())
        hashCode = hashCode * 8191 + vars.hashCode();

      hashCode = hashCode * 8191 + rowOffset;

      hashCode = hashCode * 8191 + colOffset;

      hashCode = hashCode * 8191 + rows;

      hashCode = hashCode * 8191 + cols;

      hashCode = hashCode * 8191 + ((isSetFormat()) ? 131071 : 524287);
      if (isSetFormat())
        hashCode = hashCode * 8191 + format.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArray_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVars(), other.isSetVars());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVars()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vars, other.vars);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRowOffset(), other.isSetRowOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowOffset, other.rowOffset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetColOffset(), other.isSetColOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colOffset, other.colOffset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRows(), other.isSetRows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCols(), other.isSetCols());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCols()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cols, other.cols);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFormat(), other.isSetFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getArray_args(");
      boolean first = true;

      sb.append("vars:");
      if (this.vars == null) {
        sb.append("null");
      } else {
        sb.append(this.vars);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rowOffset:");
      sb.append(this.rowOffset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("colOffset:");
      sb.append(this.colOffset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rows:");
      sb.append(this.rows);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cols:");
      sb.append(this.cols);
      first = false;
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArray_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArray_argsStandardScheme getScheme() {
        return new getArray_argsStandardScheme();
      }
    }

    private static class getArray_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArray_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArray_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VARS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vars = iprot.readString();
                struct.setVarsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROW_OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rowOffset = iprot.readI32();
                struct.setRowOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COL_OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.colOffset = iprot.readI32();
                struct.setColOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROWS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rows = iprot.readI32();
                struct.setRowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COLS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cols = iprot.readI32();
                struct.setColsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.format = iprot.readString();
                struct.setFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArray_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vars != null) {
          oprot.writeFieldBegin(VARS_FIELD_DESC);
          oprot.writeString(struct.vars);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROW_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.rowOffset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COL_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.colOffset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        oprot.writeI32(struct.rows);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLS_FIELD_DESC);
        oprot.writeI32(struct.cols);
        oprot.writeFieldEnd();
        if (struct.format != null) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeString(struct.format);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArray_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArray_argsTupleScheme getScheme() {
        return new getArray_argsTupleScheme();
      }
    }

    private static class getArray_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArray_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArray_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVars()) {
          optionals.set(0);
        }
        if (struct.isSetRowOffset()) {
          optionals.set(1);
        }
        if (struct.isSetColOffset()) {
          optionals.set(2);
        }
        if (struct.isSetRows()) {
          optionals.set(3);
        }
        if (struct.isSetCols()) {
          optionals.set(4);
        }
        if (struct.isSetFormat()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetVars()) {
          oprot.writeString(struct.vars);
        }
        if (struct.isSetRowOffset()) {
          oprot.writeI32(struct.rowOffset);
        }
        if (struct.isSetColOffset()) {
          oprot.writeI32(struct.colOffset);
        }
        if (struct.isSetRows()) {
          oprot.writeI32(struct.rows);
        }
        if (struct.isSetCols()) {
          oprot.writeI32(struct.cols);
        }
        if (struct.isSetFormat()) {
          oprot.writeString(struct.format);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArray_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.vars = iprot.readString();
          struct.setVarsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rowOffset = iprot.readI32();
          struct.setRowOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.colOffset = iprot.readI32();
          struct.setColOffsetIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rows = iprot.readI32();
          struct.setRowsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.cols = iprot.readI32();
          struct.setColsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.format = iprot.readString();
          struct.setFormatIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArray_result implements org.apache.thrift.TBase<getArray_result, getArray_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArray_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArray_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNSUPPORTED_FIELD_DESC = new org.apache.thrift.protocol.TField("unsupported", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXCEEDING_DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("exceedingDimensions", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArray_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArray_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable GetArrayResponse success; // required
    public @org.apache.thrift.annotation.Nullable UnsupportedArrayTypeException unsupported; // required
    public @org.apache.thrift.annotation.Nullable ExceedingArrayDimensionsException exceedingDimensions; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNSUPPORTED((short)1, "unsupported"),
      EXCEEDING_DIMENSIONS((short)2, "exceedingDimensions"),
      UNHANDLED_EXCEPTION((short)3, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNSUPPORTED
            return UNSUPPORTED;
          case 2: // EXCEEDING_DIMENSIONS
            return EXCEEDING_DIMENSIONS;
          case 3: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetArrayResponse.class)));
      tmpMap.put(_Fields.UNSUPPORTED, new org.apache.thrift.meta_data.FieldMetaData("unsupported", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnsupportedArrayTypeException.class)));
      tmpMap.put(_Fields.EXCEEDING_DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("exceedingDimensions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExceedingArrayDimensionsException.class)));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArray_result.class, metaDataMap);
    }

    public getArray_result() {
    }

    public getArray_result(
      GetArrayResponse success,
      UnsupportedArrayTypeException unsupported,
      ExceedingArrayDimensionsException exceedingDimensions,
      PythonUnhandledException unhandledException)
    {
      this();
      this.success = success;
      this.unsupported = unsupported;
      this.exceedingDimensions = exceedingDimensions;
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArray_result(getArray_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetArrayResponse(other.success);
      }
      if (other.isSetUnsupported()) {
        this.unsupported = new UnsupportedArrayTypeException(other.unsupported);
      }
      if (other.isSetExceedingDimensions()) {
        this.exceedingDimensions = new ExceedingArrayDimensionsException(other.exceedingDimensions);
      }
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public getArray_result deepCopy() {
      return new getArray_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unsupported = null;
      this.exceedingDimensions = null;
      this.unhandledException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public GetArrayResponse getSuccess() {
      return this.success;
    }

    public getArray_result setSuccess(@org.apache.thrift.annotation.Nullable GetArrayResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public UnsupportedArrayTypeException getUnsupported() {
      return this.unsupported;
    }

    public getArray_result setUnsupported(@org.apache.thrift.annotation.Nullable UnsupportedArrayTypeException unsupported) {
      this.unsupported = unsupported;
      return this;
    }

    public void unsetUnsupported() {
      this.unsupported = null;
    }

    /** Returns true if field unsupported is set (has been assigned a value) and false otherwise */
    public boolean isSetUnsupported() {
      return this.unsupported != null;
    }

    public void setUnsupportedIsSet(boolean value) {
      if (!value) {
        this.unsupported = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ExceedingArrayDimensionsException getExceedingDimensions() {
      return this.exceedingDimensions;
    }

    public getArray_result setExceedingDimensions(@org.apache.thrift.annotation.Nullable ExceedingArrayDimensionsException exceedingDimensions) {
      this.exceedingDimensions = exceedingDimensions;
      return this;
    }

    public void unsetExceedingDimensions() {
      this.exceedingDimensions = null;
    }

    /** Returns true if field exceedingDimensions is set (has been assigned a value) and false otherwise */
    public boolean isSetExceedingDimensions() {
      return this.exceedingDimensions != null;
    }

    public void setExceedingDimensionsIsSet(boolean value) {
      if (!value) {
        this.exceedingDimensions = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public getArray_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetArrayResponse)value);
        }
        break;

      case UNSUPPORTED:
        if (value == null) {
          unsetUnsupported();
        } else {
          setUnsupported((UnsupportedArrayTypeException)value);
        }
        break;

      case EXCEEDING_DIMENSIONS:
        if (value == null) {
          unsetExceedingDimensions();
        } else {
          setExceedingDimensions((ExceedingArrayDimensionsException)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNSUPPORTED:
        return getUnsupported();

      case EXCEEDING_DIMENSIONS:
        return getExceedingDimensions();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNSUPPORTED:
        return isSetUnsupported();
      case EXCEEDING_DIMENSIONS:
        return isSetExceedingDimensions();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getArray_result)
        return this.equals((getArray_result)that);
      return false;
    }

    public boolean equals(getArray_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unsupported = true && this.isSetUnsupported();
      boolean that_present_unsupported = true && that.isSetUnsupported();
      if (this_present_unsupported || that_present_unsupported) {
        if (!(this_present_unsupported && that_present_unsupported))
          return false;
        if (!this.unsupported.equals(that.unsupported))
          return false;
      }

      boolean this_present_exceedingDimensions = true && this.isSetExceedingDimensions();
      boolean that_present_exceedingDimensions = true && that.isSetExceedingDimensions();
      if (this_present_exceedingDimensions || that_present_exceedingDimensions) {
        if (!(this_present_exceedingDimensions && that_present_exceedingDimensions))
          return false;
        if (!this.exceedingDimensions.equals(that.exceedingDimensions))
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnsupported()) ? 131071 : 524287);
      if (isSetUnsupported())
        hashCode = hashCode * 8191 + unsupported.hashCode();

      hashCode = hashCode * 8191 + ((isSetExceedingDimensions()) ? 131071 : 524287);
      if (isSetExceedingDimensions())
        hashCode = hashCode * 8191 + exceedingDimensions.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArray_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnsupported(), other.isSetUnsupported());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnsupported()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsupported, other.unsupported);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetExceedingDimensions(), other.isSetExceedingDimensions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExceedingDimensions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceedingDimensions, other.exceedingDimensions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getArray_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unsupported:");
      if (this.unsupported == null) {
        sb.append("null");
      } else {
        sb.append(this.unsupported);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exceedingDimensions:");
      if (this.exceedingDimensions == null) {
        sb.append("null");
      } else {
        sb.append(this.exceedingDimensions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArray_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArray_resultStandardScheme getScheme() {
        return new getArray_resultStandardScheme();
      }
    }

    private static class getArray_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArray_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArray_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetArrayResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNSUPPORTED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unsupported = new UnsupportedArrayTypeException();
                struct.unsupported.read(iprot);
                struct.setUnsupportedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCEEDING_DIMENSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exceedingDimensions = new ExceedingArrayDimensionsException();
                struct.exceedingDimensions.read(iprot);
                struct.setExceedingDimensionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArray_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unsupported != null) {
          oprot.writeFieldBegin(UNSUPPORTED_FIELD_DESC);
          struct.unsupported.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exceedingDimensions != null) {
          oprot.writeFieldBegin(EXCEEDING_DIMENSIONS_FIELD_DESC);
          struct.exceedingDimensions.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArray_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArray_resultTupleScheme getScheme() {
        return new getArray_resultTupleScheme();
      }
    }

    private static class getArray_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArray_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArray_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnsupported()) {
          optionals.set(1);
        }
        if (struct.isSetExceedingDimensions()) {
          optionals.set(2);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnsupported()) {
          struct.unsupported.write(oprot);
        }
        if (struct.isSetExceedingDimensions()) {
          struct.exceedingDimensions.write(oprot);
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArray_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new GetArrayResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unsupported = new UnsupportedArrayTypeException();
          struct.unsupported.read(iprot);
          struct.setUnsupportedIsSet(true);
        }
        if (incoming.get(2)) {
          struct.exceedingDimensions = new ExceedingArrayDimensionsException();
          struct.exceedingDimensions.read(iprot);
          struct.setExceedingDimensionsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execDataViewerAction_args implements org.apache.thrift.TBase<execDataViewerAction_args, execDataViewerAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<execDataViewerAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execDataViewerAction_args");

    private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MY_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("myArgs", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execDataViewerAction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execDataViewerAction_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String varName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String action; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String myArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAR_NAME((short)1, "varName"),
      ACTION((short)2, "action"),
      MY_ARGS((short)3, "myArgs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAR_NAME
            return VAR_NAME;
          case 2: // ACTION
            return ACTION;
          case 3: // MY_ARGS
            return MY_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MY_ARGS, new org.apache.thrift.meta_data.FieldMetaData("myArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execDataViewerAction_args.class, metaDataMap);
    }

    public execDataViewerAction_args() {
    }

    public execDataViewerAction_args(
      java.lang.String varName,
      java.lang.String action,
      java.lang.String myArgs)
    {
      this();
      this.varName = varName;
      this.action = action;
      this.myArgs = myArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execDataViewerAction_args(execDataViewerAction_args other) {
      if (other.isSetVarName()) {
        this.varName = other.varName;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
      if (other.isSetMyArgs()) {
        this.myArgs = other.myArgs;
      }
    }

    public execDataViewerAction_args deepCopy() {
      return new execDataViewerAction_args(this);
    }

    @Override
    public void clear() {
      this.varName = null;
      this.action = null;
      this.myArgs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVarName() {
      return this.varName;
    }

    public execDataViewerAction_args setVarName(@org.apache.thrift.annotation.Nullable java.lang.String varName) {
      this.varName = varName;
      return this;
    }

    public void unsetVarName() {
      this.varName = null;
    }

    /** Returns true if field varName is set (has been assigned a value) and false otherwise */
    public boolean isSetVarName() {
      return this.varName != null;
    }

    public void setVarNameIsSet(boolean value) {
      if (!value) {
        this.varName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAction() {
      return this.action;
    }

    public execDataViewerAction_args setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMyArgs() {
      return this.myArgs;
    }

    public execDataViewerAction_args setMyArgs(@org.apache.thrift.annotation.Nullable java.lang.String myArgs) {
      this.myArgs = myArgs;
      return this;
    }

    public void unsetMyArgs() {
      this.myArgs = null;
    }

    /** Returns true if field myArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetMyArgs() {
      return this.myArgs != null;
    }

    public void setMyArgsIsSet(boolean value) {
      if (!value) {
        this.myArgs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VAR_NAME:
        if (value == null) {
          unsetVarName();
        } else {
          setVarName((java.lang.String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((java.lang.String)value);
        }
        break;

      case MY_ARGS:
        if (value == null) {
          unsetMyArgs();
        } else {
          setMyArgs((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VAR_NAME:
        return getVarName();

      case ACTION:
        return getAction();

      case MY_ARGS:
        return getMyArgs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VAR_NAME:
        return isSetVarName();
      case ACTION:
        return isSetAction();
      case MY_ARGS:
        return isSetMyArgs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execDataViewerAction_args)
        return this.equals((execDataViewerAction_args)that);
      return false;
    }

    public boolean equals(execDataViewerAction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_varName = true && this.isSetVarName();
      boolean that_present_varName = true && that.isSetVarName();
      if (this_present_varName || that_present_varName) {
        if (!(this_present_varName && that_present_varName))
          return false;
        if (!this.varName.equals(that.varName))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_myArgs = true && this.isSetMyArgs();
      boolean that_present_myArgs = true && that.isSetMyArgs();
      if (this_present_myArgs || that_present_myArgs) {
        if (!(this_present_myArgs && that_present_myArgs))
          return false;
        if (!this.myArgs.equals(that.myArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
      if (isSetVarName())
        hashCode = hashCode * 8191 + varName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
      if (isSetAction())
        hashCode = hashCode * 8191 + action.hashCode();

      hashCode = hashCode * 8191 + ((isSetMyArgs()) ? 131071 : 524287);
      if (isSetMyArgs())
        hashCode = hashCode * 8191 + myArgs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execDataViewerAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVarName(), other.isSetVarName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAction(), other.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMyArgs(), other.isSetMyArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myArgs, other.myArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execDataViewerAction_args(");
      boolean first = true;

      sb.append("varName:");
      if (this.varName == null) {
        sb.append("null");
      } else {
        sb.append(this.varName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myArgs:");
      if (this.myArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.myArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execDataViewerAction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execDataViewerAction_argsStandardScheme getScheme() {
        return new execDataViewerAction_argsStandardScheme();
      }
    }

    private static class execDataViewerAction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execDataViewerAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execDataViewerAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.varName = iprot.readString();
                struct.setVarNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action = iprot.readString();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MY_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.myArgs = iprot.readString();
                struct.setMyArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execDataViewerAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.varName != null) {
          oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
          oprot.writeString(struct.varName);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
        if (struct.myArgs != null) {
          oprot.writeFieldBegin(MY_ARGS_FIELD_DESC);
          oprot.writeString(struct.myArgs);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execDataViewerAction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execDataViewerAction_argsTupleScheme getScheme() {
        return new execDataViewerAction_argsTupleScheme();
      }
    }

    private static class execDataViewerAction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execDataViewerAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execDataViewerAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVarName()) {
          optionals.set(0);
        }
        if (struct.isSetAction()) {
          optionals.set(1);
        }
        if (struct.isSetMyArgs()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVarName()) {
          oprot.writeString(struct.varName);
        }
        if (struct.isSetAction()) {
          oprot.writeString(struct.action);
        }
        if (struct.isSetMyArgs()) {
          oprot.writeString(struct.myArgs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execDataViewerAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.varName = iprot.readString();
          struct.setVarNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.action = iprot.readString();
          struct.setActionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.myArgs = iprot.readString();
          struct.setMyArgsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execDataViewerAction_result implements org.apache.thrift.TBase<execDataViewerAction_result, execDataViewerAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<execDataViewerAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execDataViewerAction_result");

    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execDataViewerAction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execDataViewerAction_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execDataViewerAction_result.class, metaDataMap);
    }

    public execDataViewerAction_result() {
    }

    public execDataViewerAction_result(
      PythonUnhandledException unhandledException)
    {
      this();
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execDataViewerAction_result(execDataViewerAction_result other) {
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public execDataViewerAction_result deepCopy() {
      return new execDataViewerAction_result(this);
    }

    @Override
    public void clear() {
      this.unhandledException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public execDataViewerAction_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execDataViewerAction_result)
        return this.equals((execDataViewerAction_result)that);
      return false;
    }

    public boolean equals(execDataViewerAction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execDataViewerAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execDataViewerAction_result(");
      boolean first = true;

      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execDataViewerAction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execDataViewerAction_resultStandardScheme getScheme() {
        return new execDataViewerAction_resultStandardScheme();
      }
    }

    private static class execDataViewerAction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execDataViewerAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execDataViewerAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execDataViewerAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execDataViewerAction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execDataViewerAction_resultTupleScheme getScheme() {
        return new execDataViewerAction_resultTupleScheme();
      }
    }

    private static class execDataViewerAction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execDataViewerAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execDataViewerAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnhandledException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execDataViewerAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loadFullValue_args implements org.apache.thrift.TBase<loadFullValue_args, loadFullValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadFullValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFullValue_args");

    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadFullValue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadFullValue_argsTupleSchemeFactory();

    public int seq; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> variables; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEQ((short)1, "seq"),
      VARIABLES((short)2, "variables");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEQ
            return SEQ;
          case 2: // VARIABLES
            return VARIABLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "LoadFullValueRequestSeq")));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFullValue_args.class, metaDataMap);
    }

    public loadFullValue_args() {
    }

    public loadFullValue_args(
      int seq,
      java.util.List<java.lang.String> variables)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.variables = variables;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFullValue_args(loadFullValue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.seq = other.seq;
      if (other.isSetVariables()) {
        java.util.List<java.lang.String> __this__variables = new java.util.ArrayList<java.lang.String>(other.variables);
        this.variables = __this__variables;
      }
    }

    public loadFullValue_args deepCopy() {
      return new loadFullValue_args(this);
    }

    @Override
    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.variables = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public loadFullValue_args setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
      return this;
    }

    public void unsetSeq() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    public void setSeqIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(java.lang.String elem) {
      if (this.variables == null) {
        this.variables = new java.util.ArrayList<java.lang.String>();
      }
      this.variables.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getVariables() {
      return this.variables;
    }

    public loadFullValue_args setVariables(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((java.lang.Integer)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEQ:
        return getSeq();

      case VARIABLES:
        return getVariables();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SEQ:
        return isSetSeq();
      case VARIABLES:
        return isSetVariables();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loadFullValue_args)
        return this.equals((loadFullValue_args)that);
      return false;
    }

    public boolean equals(loadFullValue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + seq;

      hashCode = hashCode * 8191 + ((isSetVariables()) ? 131071 : 524287);
      if (isSetVariables())
        hashCode = hashCode * 8191 + variables.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loadFullValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVariables(), other.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loadFullValue_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFullValue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFullValue_argsStandardScheme getScheme() {
        return new loadFullValue_argsStandardScheme();
      }
    }

    private static class loadFullValue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadFullValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFullValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seq = iprot.readI32();
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                  struct.variables = new java.util.ArrayList<java.lang.String>(_list92.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem93;
                  for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                  {
                    _elem93 = iprot.readString();
                    struct.variables.add(_elem93);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFullValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SEQ_FIELD_DESC);
        oprot.writeI32(struct.seq);
        oprot.writeFieldEnd();
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (java.lang.String _iter95 : struct.variables)
            {
              oprot.writeString(_iter95);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFullValue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFullValue_argsTupleScheme getScheme() {
        return new loadFullValue_argsTupleScheme();
      }
    }

    private static class loadFullValue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadFullValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFullValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSeq()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSeq()) {
          oprot.writeI32(struct.seq);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (java.lang.String _iter96 : struct.variables)
            {
              oprot.writeString(_iter96);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFullValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.seq = iprot.readI32();
          struct.setSeqIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new java.util.ArrayList<java.lang.String>(_list97.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem98;
            for (int _i99 = 0; _i99 < _list97.size; ++_i99)
            {
              _elem98 = iprot.readString();
              struct.variables.add(_elem98);
            }
          }
          struct.setVariablesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loadFullValue_result implements org.apache.thrift.TBase<loadFullValue_result, loadFullValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadFullValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFullValue_result");

    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadFullValue_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadFullValue_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNHANDLED_EXCEPTION((short)1, "unhandledException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFullValue_result.class, metaDataMap);
    }

    public loadFullValue_result() {
    }

    public loadFullValue_result(
      PythonUnhandledException unhandledException)
    {
      this();
      this.unhandledException = unhandledException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFullValue_result(loadFullValue_result other) {
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
    }

    public loadFullValue_result deepCopy() {
      return new loadFullValue_result(this);
    }

    @Override
    public void clear() {
      this.unhandledException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public loadFullValue_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loadFullValue_result)
        return this.equals((loadFullValue_result)that);
      return false;
    }

    public boolean equals(loadFullValue_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loadFullValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loadFullValue_result(");
      boolean first = true;

      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFullValue_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFullValue_resultStandardScheme getScheme() {
        return new loadFullValue_resultStandardScheme();
      }
    }

    private static class loadFullValue_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadFullValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFullValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFullValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFullValue_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFullValue_resultTupleScheme getScheme() {
        return new loadFullValue_resultTupleScheme();
      }
    }

    private static class loadFullValue_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadFullValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFullValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnhandledException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFullValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execTableCommand_args implements org.apache.thrift.TBase<execTableCommand_args, execTableCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<execTableCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execTableCommand_args");

    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commandType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execTableCommand_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execTableCommand_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String command; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String commandType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMAND((short)1, "command"),
      COMMAND_TYPE((short)2, "commandType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMAND
            return COMMAND;
          case 2: // COMMAND_TYPE
            return COMMAND_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMAND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commandType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execTableCommand_args.class, metaDataMap);
    }

    public execTableCommand_args() {
    }

    public execTableCommand_args(
      java.lang.String command,
      java.lang.String commandType)
    {
      this();
      this.command = command;
      this.commandType = commandType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execTableCommand_args(execTableCommand_args other) {
      if (other.isSetCommand()) {
        this.command = other.command;
      }
      if (other.isSetCommandType()) {
        this.commandType = other.commandType;
      }
    }

    public execTableCommand_args deepCopy() {
      return new execTableCommand_args(this);
    }

    @Override
    public void clear() {
      this.command = null;
      this.commandType = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCommand() {
      return this.command;
    }

    public execTableCommand_args setCommand(@org.apache.thrift.annotation.Nullable java.lang.String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCommandType() {
      return this.commandType;
    }

    public execTableCommand_args setCommandType(@org.apache.thrift.annotation.Nullable java.lang.String commandType) {
      this.commandType = commandType;
      return this;
    }

    public void unsetCommandType() {
      this.commandType = null;
    }

    /** Returns true if field commandType is set (has been assigned a value) and false otherwise */
    public boolean isSetCommandType() {
      return this.commandType != null;
    }

    public void setCommandTypeIsSet(boolean value) {
      if (!value) {
        this.commandType = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((java.lang.String)value);
        }
        break;

      case COMMAND_TYPE:
        if (value == null) {
          unsetCommandType();
        } else {
          setCommandType((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMAND:
        return getCommand();

      case COMMAND_TYPE:
        return getCommandType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMMAND:
        return isSetCommand();
      case COMMAND_TYPE:
        return isSetCommandType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execTableCommand_args)
        return this.equals((execTableCommand_args)that);
      return false;
    }

    public boolean equals(execTableCommand_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      boolean this_present_commandType = true && this.isSetCommandType();
      boolean that_present_commandType = true && that.isSetCommandType();
      if (this_present_commandType || that_present_commandType) {
        if (!(this_present_commandType && that_present_commandType))
          return false;
        if (!this.commandType.equals(that.commandType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
      if (isSetCommand())
        hashCode = hashCode * 8191 + command.hashCode();

      hashCode = hashCode * 8191 + ((isSetCommandType()) ? 131071 : 524287);
      if (isSetCommandType())
        hashCode = hashCode * 8191 + commandType.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execTableCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCommand(), other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCommandType(), other.isSetCommandType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommandType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commandType, other.commandType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execTableCommand_args(");
      boolean first = true;

      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commandType:");
      if (this.commandType == null) {
        sb.append("null");
      } else {
        sb.append(this.commandType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execTableCommand_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execTableCommand_argsStandardScheme getScheme() {
        return new execTableCommand_argsStandardScheme();
      }
    }

    private static class execTableCommand_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execTableCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execTableCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.commandType = iprot.readString();
                struct.setCommandTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execTableCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        if (struct.commandType != null) {
          oprot.writeFieldBegin(COMMAND_TYPE_FIELD_DESC);
          oprot.writeString(struct.commandType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execTableCommand_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execTableCommand_argsTupleScheme getScheme() {
        return new execTableCommand_argsTupleScheme();
      }
    }

    private static class execTableCommand_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execTableCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execTableCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCommand()) {
          optionals.set(0);
        }
        if (struct.isSetCommandType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
        if (struct.isSetCommandType()) {
          oprot.writeString(struct.commandType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execTableCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commandType = iprot.readString();
          struct.setCommandTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execTableCommand_result implements org.apache.thrift.TBase<execTableCommand_result, execTableCommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<execTableCommand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execTableCommand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UNHANDLED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unhandledException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tableException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execTableCommand_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execTableCommand_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException; // required
    public @org.apache.thrift.annotation.Nullable PythonTableException tableException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNHANDLED_EXCEPTION((short)1, "unhandledException"),
      TABLE_EXCEPTION((short)2, "tableException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNHANDLED_EXCEPTION
            return UNHANDLED_EXCEPTION;
          case 2: // TABLE_EXCEPTION
            return TABLE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNHANDLED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unhandledException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonUnhandledException.class)));
      tmpMap.put(_Fields.TABLE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tableException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PythonTableException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execTableCommand_result.class, metaDataMap);
    }

    public execTableCommand_result() {
    }

    public execTableCommand_result(
      java.lang.String success,
      PythonUnhandledException unhandledException,
      PythonTableException tableException)
    {
      this();
      this.success = success;
      this.unhandledException = unhandledException;
      this.tableException = tableException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execTableCommand_result(execTableCommand_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUnhandledException()) {
        this.unhandledException = new PythonUnhandledException(other.unhandledException);
      }
      if (other.isSetTableException()) {
        this.tableException = new PythonTableException(other.tableException);
      }
    }

    public execTableCommand_result deepCopy() {
      return new execTableCommand_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unhandledException = null;
      this.tableException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public execTableCommand_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonUnhandledException getUnhandledException() {
      return this.unhandledException;
    }

    public execTableCommand_result setUnhandledException(@org.apache.thrift.annotation.Nullable PythonUnhandledException unhandledException) {
      this.unhandledException = unhandledException;
      return this;
    }

    public void unsetUnhandledException() {
      this.unhandledException = null;
    }

    /** Returns true if field unhandledException is set (has been assigned a value) and false otherwise */
    public boolean isSetUnhandledException() {
      return this.unhandledException != null;
    }

    public void setUnhandledExceptionIsSet(boolean value) {
      if (!value) {
        this.unhandledException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PythonTableException getTableException() {
      return this.tableException;
    }

    public execTableCommand_result setTableException(@org.apache.thrift.annotation.Nullable PythonTableException tableException) {
      this.tableException = tableException;
      return this;
    }

    public void unsetTableException() {
      this.tableException = null;
    }

    /** Returns true if field tableException is set (has been assigned a value) and false otherwise */
    public boolean isSetTableException() {
      return this.tableException != null;
    }

    public void setTableExceptionIsSet(boolean value) {
      if (!value) {
        this.tableException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case UNHANDLED_EXCEPTION:
        if (value == null) {
          unsetUnhandledException();
        } else {
          setUnhandledException((PythonUnhandledException)value);
        }
        break;

      case TABLE_EXCEPTION:
        if (value == null) {
          unsetTableException();
        } else {
          setTableException((PythonTableException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNHANDLED_EXCEPTION:
        return getUnhandledException();

      case TABLE_EXCEPTION:
        return getTableException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNHANDLED_EXCEPTION:
        return isSetUnhandledException();
      case TABLE_EXCEPTION:
        return isSetTableException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof execTableCommand_result)
        return this.equals((execTableCommand_result)that);
      return false;
    }

    public boolean equals(execTableCommand_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unhandledException = true && this.isSetUnhandledException();
      boolean that_present_unhandledException = true && that.isSetUnhandledException();
      if (this_present_unhandledException || that_present_unhandledException) {
        if (!(this_present_unhandledException && that_present_unhandledException))
          return false;
        if (!this.unhandledException.equals(that.unhandledException))
          return false;
      }

      boolean this_present_tableException = true && this.isSetTableException();
      boolean that_present_tableException = true && that.isSetTableException();
      if (this_present_tableException || that_present_tableException) {
        if (!(this_present_tableException && that_present_tableException))
          return false;
        if (!this.tableException.equals(that.tableException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnhandledException()) ? 131071 : 524287);
      if (isSetUnhandledException())
        hashCode = hashCode * 8191 + unhandledException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTableException()) ? 131071 : 524287);
      if (isSetTableException())
        hashCode = hashCode * 8191 + tableException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execTableCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnhandledException(), other.isSetUnhandledException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnhandledException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unhandledException, other.unhandledException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTableException(), other.isSetTableException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableException, other.tableException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execTableCommand_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unhandledException:");
      if (this.unhandledException == null) {
        sb.append("null");
      } else {
        sb.append(this.unhandledException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableException:");
      if (this.tableException == null) {
        sb.append("null");
      } else {
        sb.append(this.tableException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execTableCommand_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execTableCommand_resultStandardScheme getScheme() {
        return new execTableCommand_resultStandardScheme();
      }
    }

    private static class execTableCommand_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execTableCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execTableCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNHANDLED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unhandledException = new PythonUnhandledException();
                struct.unhandledException.read(iprot);
                struct.setUnhandledExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tableException = new PythonTableException();
                struct.tableException.read(iprot);
                struct.setTableExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execTableCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unhandledException != null) {
          oprot.writeFieldBegin(UNHANDLED_EXCEPTION_FIELD_DESC);
          struct.unhandledException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tableException != null) {
          oprot.writeFieldBegin(TABLE_EXCEPTION_FIELD_DESC);
          struct.tableException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execTableCommand_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execTableCommand_resultTupleScheme getScheme() {
        return new execTableCommand_resultTupleScheme();
      }
    }

    private static class execTableCommand_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execTableCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execTableCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnhandledException()) {
          optionals.set(1);
        }
        if (struct.isSetTableException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUnhandledException()) {
          struct.unhandledException.write(oprot);
        }
        if (struct.isSetTableException()) {
          struct.tableException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execTableCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unhandledException = new PythonUnhandledException();
          struct.unhandledException.read(iprot);
          struct.setUnhandledExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tableException = new PythonTableException();
          struct.tableException.read(iprot);
          struct.setTableExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
