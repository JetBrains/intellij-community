/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jetbrains.python.console.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-02-22")
public class PythonConsoleFrontendService {

  public interface Iface {

    public void notifyFinished(boolean needsMoreInput, boolean exceptionOccurred) throws org.apache.thrift.TException;

    public java.lang.String requestInput(java.lang.String path) throws KeyboardInterruptException, org.apache.thrift.TException;

    public void notifyAboutMagic(java.util.List<java.lang.String> commands, boolean isAutoMagic) throws org.apache.thrift.TException;

    public void showConsole() throws org.apache.thrift.TException;

    /**
     * Returns the result for `PythonConsoleBackendService.loadFullValue`.
     * 
     * @param requestSeq
     * @param response
     */
    public void returnFullValue(int requestSeq, java.util.List<DebugValue> response) throws org.apache.thrift.TException;

    public boolean IPythonEditor(java.lang.String path, java.lang.String line) throws org.apache.thrift.TException;

    public void sendRichOutput(java.util.Map<java.lang.String,java.lang.String> data) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notifyFinished(boolean needsMoreInput, boolean exceptionOccurred, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void requestInput(java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void notifyAboutMagic(java.util.List<java.lang.String> commands, boolean isAutoMagic, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void showConsole(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void returnFullValue(int requestSeq, java.util.List<DebugValue> response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void IPythonEditor(java.lang.String path, java.lang.String line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void sendRichOutput(java.util.Map<java.lang.String,java.lang.String> data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void notifyFinished(boolean needsMoreInput, boolean exceptionOccurred) throws org.apache.thrift.TException
    {
      send_notifyFinished(needsMoreInput, exceptionOccurred);
      recv_notifyFinished();
    }

    public void send_notifyFinished(boolean needsMoreInput, boolean exceptionOccurred) throws org.apache.thrift.TException
    {
      notifyFinished_args args = new notifyFinished_args();
      args.setNeedsMoreInput(needsMoreInput);
      args.setExceptionOccurred(exceptionOccurred);
      sendBase("notifyFinished", args);
    }

    public void recv_notifyFinished() throws org.apache.thrift.TException
    {
      notifyFinished_result result = new notifyFinished_result();
      receiveBase(result, "notifyFinished");
      return;
    }

    public java.lang.String requestInput(java.lang.String path) throws KeyboardInterruptException, org.apache.thrift.TException
    {
      send_requestInput(path);
      return recv_requestInput();
    }

    public void send_requestInput(java.lang.String path) throws org.apache.thrift.TException
    {
      requestInput_args args = new requestInput_args();
      args.setPath(path);
      sendBase("requestInput", args);
    }

    public java.lang.String recv_requestInput() throws KeyboardInterruptException, org.apache.thrift.TException
    {
      requestInput_result result = new requestInput_result();
      receiveBase(result, "requestInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.interrupted != null) {
        throw result.interrupted;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestInput failed: unknown result");
    }

    public void notifyAboutMagic(java.util.List<java.lang.String> commands, boolean isAutoMagic) throws org.apache.thrift.TException
    {
      send_notifyAboutMagic(commands, isAutoMagic);
      recv_notifyAboutMagic();
    }

    public void send_notifyAboutMagic(java.util.List<java.lang.String> commands, boolean isAutoMagic) throws org.apache.thrift.TException
    {
      notifyAboutMagic_args args = new notifyAboutMagic_args();
      args.setCommands(commands);
      args.setIsAutoMagic(isAutoMagic);
      sendBase("notifyAboutMagic", args);
    }

    public void recv_notifyAboutMagic() throws org.apache.thrift.TException
    {
      notifyAboutMagic_result result = new notifyAboutMagic_result();
      receiveBase(result, "notifyAboutMagic");
      return;
    }

    public void showConsole() throws org.apache.thrift.TException
    {
      send_showConsole();
      recv_showConsole();
    }

    public void send_showConsole() throws org.apache.thrift.TException
    {
      showConsole_args args = new showConsole_args();
      sendBase("showConsole", args);
    }

    public void recv_showConsole() throws org.apache.thrift.TException
    {
      showConsole_result result = new showConsole_result();
      receiveBase(result, "showConsole");
      return;
    }

    public void returnFullValue(int requestSeq, java.util.List<DebugValue> response) throws org.apache.thrift.TException
    {
      send_returnFullValue(requestSeq, response);
      recv_returnFullValue();
    }

    public void send_returnFullValue(int requestSeq, java.util.List<DebugValue> response) throws org.apache.thrift.TException
    {
      returnFullValue_args args = new returnFullValue_args();
      args.setRequestSeq(requestSeq);
      args.setResponse(response);
      sendBase("returnFullValue", args);
    }

    public void recv_returnFullValue() throws org.apache.thrift.TException
    {
      returnFullValue_result result = new returnFullValue_result();
      receiveBase(result, "returnFullValue");
      return;
    }

    public boolean IPythonEditor(java.lang.String path, java.lang.String line) throws org.apache.thrift.TException
    {
      send_IPythonEditor(path, line);
      return recv_IPythonEditor();
    }

    public void send_IPythonEditor(java.lang.String path, java.lang.String line) throws org.apache.thrift.TException
    {
      IPythonEditor_args args = new IPythonEditor_args();
      args.setPath(path);
      args.setLine(line);
      sendBase("IPythonEditor", args);
    }

    public boolean recv_IPythonEditor() throws org.apache.thrift.TException
    {
      IPythonEditor_result result = new IPythonEditor_result();
      receiveBase(result, "IPythonEditor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IPythonEditor failed: unknown result");
    }

    public void sendRichOutput(java.util.Map<java.lang.String,java.lang.String> data) throws org.apache.thrift.TException
    {
      send_sendRichOutput(data);
      recv_sendRichOutput();
    }

    public void send_sendRichOutput(java.util.Map<java.lang.String,java.lang.String> data) throws org.apache.thrift.TException
    {
      sendRichOutput_args args = new sendRichOutput_args();
      args.setData(data);
      sendBase("sendRichOutput", args);
    }

    public void recv_sendRichOutput() throws org.apache.thrift.TException
    {
      sendRichOutput_result result = new sendRichOutput_result();
      receiveBase(result, "sendRichOutput");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notifyFinished(boolean needsMoreInput, boolean exceptionOccurred, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyFinished_call method_call = new notifyFinished_call(needsMoreInput, exceptionOccurred, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyFinished_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private boolean needsMoreInput;
      private boolean exceptionOccurred;
      public notifyFinished_call(boolean needsMoreInput, boolean exceptionOccurred, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.needsMoreInput = needsMoreInput;
        this.exceptionOccurred = exceptionOccurred;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyFinished", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyFinished_args args = new notifyFinished_args();
        args.setNeedsMoreInput(needsMoreInput);
        args.setExceptionOccurred(exceptionOccurred);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void requestInput(java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestInput_call method_call = new requestInput_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String path;
      public requestInput_call(java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestInput_args args = new requestInput_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws KeyboardInterruptException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestInput();
      }
    }

    public void notifyAboutMagic(java.util.List<java.lang.String> commands, boolean isAutoMagic, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyAboutMagic_call method_call = new notifyAboutMagic_call(commands, isAutoMagic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyAboutMagic_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.lang.String> commands;
      private boolean isAutoMagic;
      public notifyAboutMagic_call(java.util.List<java.lang.String> commands, boolean isAutoMagic, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commands = commands;
        this.isAutoMagic = isAutoMagic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyAboutMagic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyAboutMagic_args args = new notifyAboutMagic_args();
        args.setCommands(commands);
        args.setIsAutoMagic(isAutoMagic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void showConsole(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      showConsole_call method_call = new showConsole_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class showConsole_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public showConsole_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("showConsole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        showConsole_args args = new showConsole_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void returnFullValue(int requestSeq, java.util.List<DebugValue> response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnFullValue_call method_call = new returnFullValue_call(requestSeq, response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnFullValue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int requestSeq;
      private java.util.List<DebugValue> response;
      public returnFullValue_call(int requestSeq, java.util.List<DebugValue> response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestSeq = requestSeq;
        this.response = response;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnFullValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnFullValue_args args = new returnFullValue_args();
        args.setRequestSeq(requestSeq);
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void IPythonEditor(java.lang.String path, java.lang.String line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IPythonEditor_call method_call = new IPythonEditor_call(path, line, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IPythonEditor_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String path;
      private java.lang.String line;
      public IPythonEditor_call(java.lang.String path, java.lang.String line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.line = line;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IPythonEditor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IPythonEditor_args args = new IPythonEditor_args();
        args.setPath(path);
        args.setLine(line);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IPythonEditor();
      }
    }

    public void sendRichOutput(java.util.Map<java.lang.String,java.lang.String> data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendRichOutput_call method_call = new sendRichOutput_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendRichOutput_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<java.lang.String,java.lang.String> data;
      public sendRichOutput_call(java.util.Map<java.lang.String,java.lang.String> data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendRichOutput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendRichOutput_args args = new sendRichOutput_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notifyFinished", new notifyFinished());
      processMap.put("requestInput", new requestInput());
      processMap.put("notifyAboutMagic", new notifyAboutMagic());
      processMap.put("showConsole", new showConsole());
      processMap.put("returnFullValue", new returnFullValue());
      processMap.put("IPythonEditor", new IPythonEditor());
      processMap.put("sendRichOutput", new sendRichOutput());
      return processMap;
    }

    public static class notifyFinished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyFinished_args> {
      public notifyFinished() {
        super("notifyFinished");
      }

      public notifyFinished_args getEmptyArgsInstance() {
        return new notifyFinished_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public notifyFinished_result getResult(I iface, notifyFinished_args args) throws org.apache.thrift.TException {
        notifyFinished_result result = new notifyFinished_result();
        iface.notifyFinished(args.needsMoreInput, args.exceptionOccurred);
        return result;
      }
    }

    public static class requestInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestInput_args> {
      public requestInput() {
        super("requestInput");
      }

      public requestInput_args getEmptyArgsInstance() {
        return new requestInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public requestInput_result getResult(I iface, requestInput_args args) throws org.apache.thrift.TException {
        requestInput_result result = new requestInput_result();
        try {
          result.success = iface.requestInput(args.path);
        } catch (KeyboardInterruptException interrupted) {
          result.interrupted = interrupted;
        }
        return result;
      }
    }

    public static class notifyAboutMagic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyAboutMagic_args> {
      public notifyAboutMagic() {
        super("notifyAboutMagic");
      }

      public notifyAboutMagic_args getEmptyArgsInstance() {
        return new notifyAboutMagic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public notifyAboutMagic_result getResult(I iface, notifyAboutMagic_args args) throws org.apache.thrift.TException {
        notifyAboutMagic_result result = new notifyAboutMagic_result();
        iface.notifyAboutMagic(args.commands, args.isAutoMagic);
        return result;
      }
    }

    public static class showConsole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, showConsole_args> {
      public showConsole() {
        super("showConsole");
      }

      public showConsole_args getEmptyArgsInstance() {
        return new showConsole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public showConsole_result getResult(I iface, showConsole_args args) throws org.apache.thrift.TException {
        showConsole_result result = new showConsole_result();
        iface.showConsole();
        return result;
      }
    }

    public static class returnFullValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnFullValue_args> {
      public returnFullValue() {
        super("returnFullValue");
      }

      public returnFullValue_args getEmptyArgsInstance() {
        return new returnFullValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public returnFullValue_result getResult(I iface, returnFullValue_args args) throws org.apache.thrift.TException {
        returnFullValue_result result = new returnFullValue_result();
        iface.returnFullValue(args.requestSeq, args.response);
        return result;
      }
    }

    public static class IPythonEditor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IPythonEditor_args> {
      public IPythonEditor() {
        super("IPythonEditor");
      }

      public IPythonEditor_args getEmptyArgsInstance() {
        return new IPythonEditor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public IPythonEditor_result getResult(I iface, IPythonEditor_args args) throws org.apache.thrift.TException {
        IPythonEditor_result result = new IPythonEditor_result();
        result.success = iface.IPythonEditor(args.path, args.line);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendRichOutput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendRichOutput_args> {
      public sendRichOutput() {
        super("sendRichOutput");
      }

      public sendRichOutput_args getEmptyArgsInstance() {
        return new sendRichOutput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sendRichOutput_result getResult(I iface, sendRichOutput_args args) throws org.apache.thrift.TException {
        sendRichOutput_result result = new sendRichOutput_result();
        iface.sendRichOutput(args.data);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("notifyFinished", new notifyFinished());
      processMap.put("requestInput", new requestInput());
      processMap.put("notifyAboutMagic", new notifyAboutMagic());
      processMap.put("showConsole", new showConsole());
      processMap.put("returnFullValue", new returnFullValue());
      processMap.put("IPythonEditor", new IPythonEditor());
      processMap.put("sendRichOutput", new sendRichOutput());
      return processMap;
    }

    public static class notifyFinished<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyFinished_args, Void> {
      public notifyFinished() {
        super("notifyFinished");
      }

      public notifyFinished_args getEmptyArgsInstance() {
        return new notifyFinished_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyFinished_result result = new notifyFinished_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyFinished_result result = new notifyFinished_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyFinished_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.notifyFinished(args.needsMoreInput, args.exceptionOccurred,resultHandler);
      }
    }

    public static class requestInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestInput_args, java.lang.String> {
      public requestInput() {
        super("requestInput");
      }

      public requestInput_args getEmptyArgsInstance() {
        return new requestInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            requestInput_result result = new requestInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestInput_result result = new requestInput_result();
            if (e instanceof KeyboardInterruptException) {
              result.interrupted = (KeyboardInterruptException) e;
              result.setInterruptedIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.requestInput(args.path,resultHandler);
      }
    }

    public static class notifyAboutMagic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyAboutMagic_args, Void> {
      public notifyAboutMagic() {
        super("notifyAboutMagic");
      }

      public notifyAboutMagic_args getEmptyArgsInstance() {
        return new notifyAboutMagic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyAboutMagic_result result = new notifyAboutMagic_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyAboutMagic_result result = new notifyAboutMagic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyAboutMagic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.notifyAboutMagic(args.commands, args.isAutoMagic,resultHandler);
      }
    }

    public static class showConsole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, showConsole_args, Void> {
      public showConsole() {
        super("showConsole");
      }

      public showConsole_args getEmptyArgsInstance() {
        return new showConsole_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            showConsole_result result = new showConsole_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            showConsole_result result = new showConsole_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, showConsole_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.showConsole(resultHandler);
      }
    }

    public static class returnFullValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnFullValue_args, Void> {
      public returnFullValue() {
        super("returnFullValue");
      }

      public returnFullValue_args getEmptyArgsInstance() {
        return new returnFullValue_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            returnFullValue_result result = new returnFullValue_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            returnFullValue_result result = new returnFullValue_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnFullValue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.returnFullValue(args.requestSeq, args.response,resultHandler);
      }
    }

    public static class IPythonEditor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, IPythonEditor_args, java.lang.Boolean> {
      public IPythonEditor() {
        super("IPythonEditor");
      }

      public IPythonEditor_args getEmptyArgsInstance() {
        return new IPythonEditor_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            IPythonEditor_result result = new IPythonEditor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            IPythonEditor_result result = new IPythonEditor_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, IPythonEditor_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.IPythonEditor(args.path, args.line,resultHandler);
      }
    }

    public static class sendRichOutput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendRichOutput_args, Void> {
      public sendRichOutput() {
        super("sendRichOutput");
      }

      public sendRichOutput_args getEmptyArgsInstance() {
        return new sendRichOutput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendRichOutput_result result = new sendRichOutput_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendRichOutput_result result = new sendRichOutput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendRichOutput_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendRichOutput(args.data,resultHandler);
      }
    }

  }

  public static class notifyFinished_args implements org.apache.thrift.TBase<notifyFinished_args, notifyFinished_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyFinished_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyFinished_args");

    private static final org.apache.thrift.protocol.TField NEEDS_MORE_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("needsMoreInput", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField EXCEPTION_OCCURRED_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionOccurred", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyFinished_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyFinished_argsTupleSchemeFactory();

    public boolean needsMoreInput; // required
    public boolean exceptionOccurred; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEEDS_MORE_INPUT((short)1, "needsMoreInput"),
      EXCEPTION_OCCURRED((short)2, "exceptionOccurred");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEEDS_MORE_INPUT
            return NEEDS_MORE_INPUT;
          case 2: // EXCEPTION_OCCURRED
            return EXCEPTION_OCCURRED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEEDSMOREINPUT_ISSET_ID = 0;
    private static final int __EXCEPTIONOCCURRED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEEDS_MORE_INPUT, new org.apache.thrift.meta_data.FieldMetaData("needsMoreInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXCEPTION_OCCURRED, new org.apache.thrift.meta_data.FieldMetaData("exceptionOccurred", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyFinished_args.class, metaDataMap);
    }

    public notifyFinished_args() {
    }

    public notifyFinished_args(
      boolean needsMoreInput,
      boolean exceptionOccurred)
    {
      this();
      this.needsMoreInput = needsMoreInput;
      setNeedsMoreInputIsSet(true);
      this.exceptionOccurred = exceptionOccurred;
      setExceptionOccurredIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyFinished_args(notifyFinished_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.needsMoreInput = other.needsMoreInput;
      this.exceptionOccurred = other.exceptionOccurred;
    }

    public notifyFinished_args deepCopy() {
      return new notifyFinished_args(this);
    }

    @Override
    public void clear() {
      setNeedsMoreInputIsSet(false);
      this.needsMoreInput = false;
      setExceptionOccurredIsSet(false);
      this.exceptionOccurred = false;
    }

    public boolean isNeedsMoreInput() {
      return this.needsMoreInput;
    }

    public notifyFinished_args setNeedsMoreInput(boolean needsMoreInput) {
      this.needsMoreInput = needsMoreInput;
      setNeedsMoreInputIsSet(true);
      return this;
    }

    public void unsetNeedsMoreInput() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEEDSMOREINPUT_ISSET_ID);
    }

    /** Returns true if field needsMoreInput is set (has been assigned a value) and false otherwise */
    public boolean isSetNeedsMoreInput() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEEDSMOREINPUT_ISSET_ID);
    }

    public void setNeedsMoreInputIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEEDSMOREINPUT_ISSET_ID, value);
    }

    public boolean isExceptionOccurred() {
      return this.exceptionOccurred;
    }

    public notifyFinished_args setExceptionOccurred(boolean exceptionOccurred) {
      this.exceptionOccurred = exceptionOccurred;
      setExceptionOccurredIsSet(true);
      return this;
    }

    public void unsetExceptionOccurred() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONOCCURRED_ISSET_ID);
    }

    /** Returns true if field exceptionOccurred is set (has been assigned a value) and false otherwise */
    public boolean isSetExceptionOccurred() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONOCCURRED_ISSET_ID);
    }

    public void setExceptionOccurredIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONOCCURRED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NEEDS_MORE_INPUT:
        if (value == null) {
          unsetNeedsMoreInput();
        } else {
          setNeedsMoreInput((java.lang.Boolean)value);
        }
        break;

      case EXCEPTION_OCCURRED:
        if (value == null) {
          unsetExceptionOccurred();
        } else {
          setExceptionOccurred((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NEEDS_MORE_INPUT:
        return isNeedsMoreInput();

      case EXCEPTION_OCCURRED:
        return isExceptionOccurred();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NEEDS_MORE_INPUT:
        return isSetNeedsMoreInput();
      case EXCEPTION_OCCURRED:
        return isSetExceptionOccurred();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof notifyFinished_args)
        return this.equals((notifyFinished_args)that);
      return false;
    }

    public boolean equals(notifyFinished_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_needsMoreInput = true;
      boolean that_present_needsMoreInput = true;
      if (this_present_needsMoreInput || that_present_needsMoreInput) {
        if (!(this_present_needsMoreInput && that_present_needsMoreInput))
          return false;
        if (this.needsMoreInput != that.needsMoreInput)
          return false;
      }

      boolean this_present_exceptionOccurred = true;
      boolean that_present_exceptionOccurred = true;
      if (this_present_exceptionOccurred || that_present_exceptionOccurred) {
        if (!(this_present_exceptionOccurred && that_present_exceptionOccurred))
          return false;
        if (this.exceptionOccurred != that.exceptionOccurred)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((needsMoreInput) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((exceptionOccurred) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(notifyFinished_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetNeedsMoreInput(), other.isSetNeedsMoreInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeedsMoreInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needsMoreInput, other.needsMoreInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetExceptionOccurred(), other.isSetExceptionOccurred());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExceptionOccurred()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionOccurred, other.exceptionOccurred);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyFinished_args(");
      boolean first = true;

      sb.append("needsMoreInput:");
      sb.append(this.needsMoreInput);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exceptionOccurred:");
      sb.append(this.exceptionOccurred);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyFinished_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyFinished_argsStandardScheme getScheme() {
        return new notifyFinished_argsStandardScheme();
      }
    }

    private static class notifyFinished_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyFinished_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEEDS_MORE_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.needsMoreInput = iprot.readBool();
                struct.setNeedsMoreInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXCEPTION_OCCURRED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.exceptionOccurred = iprot.readBool();
                struct.setExceptionOccurredIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyFinished_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEEDS_MORE_INPUT_FIELD_DESC);
        oprot.writeBool(struct.needsMoreInput);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EXCEPTION_OCCURRED_FIELD_DESC);
        oprot.writeBool(struct.exceptionOccurred);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyFinished_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyFinished_argsTupleScheme getScheme() {
        return new notifyFinished_argsTupleScheme();
      }
    }

    private static class notifyFinished_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyFinished_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNeedsMoreInput()) {
          optionals.set(0);
        }
        if (struct.isSetExceptionOccurred()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNeedsMoreInput()) {
          oprot.writeBool(struct.needsMoreInput);
        }
        if (struct.isSetExceptionOccurred()) {
          oprot.writeBool(struct.exceptionOccurred);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.needsMoreInput = iprot.readBool();
          struct.setNeedsMoreInputIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exceptionOccurred = iprot.readBool();
          struct.setExceptionOccurredIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyFinished_result implements org.apache.thrift.TBase<notifyFinished_result, notifyFinished_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyFinished_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyFinished_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyFinished_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyFinished_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyFinished_result.class, metaDataMap);
    }

    public notifyFinished_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyFinished_result(notifyFinished_result other) {
    }

    public notifyFinished_result deepCopy() {
      return new notifyFinished_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof notifyFinished_result)
        return this.equals((notifyFinished_result)that);
      return false;
    }

    public boolean equals(notifyFinished_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(notifyFinished_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyFinished_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyFinished_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyFinished_resultStandardScheme getScheme() {
        return new notifyFinished_resultStandardScheme();
      }
    }

    private static class notifyFinished_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyFinished_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyFinished_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyFinished_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyFinished_resultTupleScheme getScheme() {
        return new notifyFinished_resultTupleScheme();
      }
    }

    private static class notifyFinished_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyFinished_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestInput_args implements org.apache.thrift.TBase<requestInput_args, requestInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestInput_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestInput_args.class, metaDataMap);
    }

    public requestInput_args() {
    }

    public requestInput_args(
      java.lang.String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestInput_args(requestInput_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public requestInput_args deepCopy() {
      return new requestInput_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPath() {
      return this.path;
    }

    public requestInput_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof requestInput_args)
        return this.equals((requestInput_args)that);
      return false;
    }

    public boolean equals(requestInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestInput_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestInput_argsStandardScheme getScheme() {
        return new requestInput_argsStandardScheme();
      }
    }

    private static class requestInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestInput_argsTupleScheme getScheme() {
        return new requestInput_argsTupleScheme();
      }
    }

    private static class requestInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestInput_result implements org.apache.thrift.TBase<requestInput_result, requestInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField INTERRUPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("interrupted", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable KeyboardInterruptException interrupted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERRUPTED((short)1, "interrupted");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERRUPTED
            return INTERRUPTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERRUPTED, new org.apache.thrift.meta_data.FieldMetaData("interrupted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyboardInterruptException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestInput_result.class, metaDataMap);
    }

    public requestInput_result() {
    }

    public requestInput_result(
      java.lang.String success,
      KeyboardInterruptException interrupted)
    {
      this();
      this.success = success;
      this.interrupted = interrupted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestInput_result(requestInput_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetInterrupted()) {
        this.interrupted = new KeyboardInterruptException(other.interrupted);
      }
    }

    public requestInput_result deepCopy() {
      return new requestInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.interrupted = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public requestInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public KeyboardInterruptException getInterrupted() {
      return this.interrupted;
    }

    public requestInput_result setInterrupted(@org.apache.thrift.annotation.Nullable KeyboardInterruptException interrupted) {
      this.interrupted = interrupted;
      return this;
    }

    public void unsetInterrupted() {
      this.interrupted = null;
    }

    /** Returns true if field interrupted is set (has been assigned a value) and false otherwise */
    public boolean isSetInterrupted() {
      return this.interrupted != null;
    }

    public void setInterruptedIsSet(boolean value) {
      if (!value) {
        this.interrupted = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case INTERRUPTED:
        if (value == null) {
          unsetInterrupted();
        } else {
          setInterrupted((KeyboardInterruptException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERRUPTED:
        return getInterrupted();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERRUPTED:
        return isSetInterrupted();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof requestInput_result)
        return this.equals((requestInput_result)that);
      return false;
    }

    public boolean equals(requestInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_interrupted = true && this.isSetInterrupted();
      boolean that_present_interrupted = true && that.isSetInterrupted();
      if (this_present_interrupted || that_present_interrupted) {
        if (!(this_present_interrupted && that_present_interrupted))
          return false;
        if (!this.interrupted.equals(that.interrupted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInterrupted()) ? 131071 : 524287);
      if (isSetInterrupted())
        hashCode = hashCode * 8191 + interrupted.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetInterrupted(), other.isSetInterrupted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterrupted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interrupted, other.interrupted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("interrupted:");
      if (this.interrupted == null) {
        sb.append("null");
      } else {
        sb.append(this.interrupted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestInput_resultStandardScheme getScheme() {
        return new requestInput_resultStandardScheme();
      }
    }

    private static class requestInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERRUPTED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.interrupted = new KeyboardInterruptException();
                struct.interrupted.read(iprot);
                struct.setInterruptedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.interrupted != null) {
          oprot.writeFieldBegin(INTERRUPTED_FIELD_DESC);
          struct.interrupted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestInput_resultTupleScheme getScheme() {
        return new requestInput_resultTupleScheme();
      }
    }

    private static class requestInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInterrupted()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetInterrupted()) {
          struct.interrupted.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.interrupted = new KeyboardInterruptException();
          struct.interrupted.read(iprot);
          struct.setInterruptedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyAboutMagic_args implements org.apache.thrift.TBase<notifyAboutMagic_args, notifyAboutMagic_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyAboutMagic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyAboutMagic_args");

    private static final org.apache.thrift.protocol.TField COMMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commands", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField IS_AUTO_MAGIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoMagic", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyAboutMagic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyAboutMagic_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> commands; // required
    public boolean isAutoMagic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMANDS((short)1, "commands"),
      IS_AUTO_MAGIC((short)2, "isAutoMagic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMANDS
            return COMMANDS;
          case 2: // IS_AUTO_MAGIC
            return IS_AUTO_MAGIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISAUTOMAGIC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMANDS, new org.apache.thrift.meta_data.FieldMetaData("commands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IS_AUTO_MAGIC, new org.apache.thrift.meta_data.FieldMetaData("isAutoMagic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyAboutMagic_args.class, metaDataMap);
    }

    public notifyAboutMagic_args() {
    }

    public notifyAboutMagic_args(
      java.util.List<java.lang.String> commands,
      boolean isAutoMagic)
    {
      this();
      this.commands = commands;
      this.isAutoMagic = isAutoMagic;
      setIsAutoMagicIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyAboutMagic_args(notifyAboutMagic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCommands()) {
        java.util.List<java.lang.String> __this__commands = new java.util.ArrayList<java.lang.String>(other.commands);
        this.commands = __this__commands;
      }
      this.isAutoMagic = other.isAutoMagic;
    }

    public notifyAboutMagic_args deepCopy() {
      return new notifyAboutMagic_args(this);
    }

    @Override
    public void clear() {
      this.commands = null;
      setIsAutoMagicIsSet(false);
      this.isAutoMagic = false;
    }

    public int getCommandsSize() {
      return (this.commands == null) ? 0 : this.commands.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCommandsIterator() {
      return (this.commands == null) ? null : this.commands.iterator();
    }

    public void addToCommands(java.lang.String elem) {
      if (this.commands == null) {
        this.commands = new java.util.ArrayList<java.lang.String>();
      }
      this.commands.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCommands() {
      return this.commands;
    }

    public notifyAboutMagic_args setCommands(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> commands) {
      this.commands = commands;
      return this;
    }

    public void unsetCommands() {
      this.commands = null;
    }

    /** Returns true if field commands is set (has been assigned a value) and false otherwise */
    public boolean isSetCommands() {
      return this.commands != null;
    }

    public void setCommandsIsSet(boolean value) {
      if (!value) {
        this.commands = null;
      }
    }

    public boolean isIsAutoMagic() {
      return this.isAutoMagic;
    }

    public notifyAboutMagic_args setIsAutoMagic(boolean isAutoMagic) {
      this.isAutoMagic = isAutoMagic;
      setIsAutoMagicIsSet(true);
      return this;
    }

    public void unsetIsAutoMagic() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISAUTOMAGIC_ISSET_ID);
    }

    /** Returns true if field isAutoMagic is set (has been assigned a value) and false otherwise */
    public boolean isSetIsAutoMagic() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISAUTOMAGIC_ISSET_ID);
    }

    public void setIsAutoMagicIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISAUTOMAGIC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMMANDS:
        if (value == null) {
          unsetCommands();
        } else {
          setCommands((java.util.List<java.lang.String>)value);
        }
        break;

      case IS_AUTO_MAGIC:
        if (value == null) {
          unsetIsAutoMagic();
        } else {
          setIsAutoMagic((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMANDS:
        return getCommands();

      case IS_AUTO_MAGIC:
        return isIsAutoMagic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMMANDS:
        return isSetCommands();
      case IS_AUTO_MAGIC:
        return isSetIsAutoMagic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof notifyAboutMagic_args)
        return this.equals((notifyAboutMagic_args)that);
      return false;
    }

    public boolean equals(notifyAboutMagic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_commands = true && this.isSetCommands();
      boolean that_present_commands = true && that.isSetCommands();
      if (this_present_commands || that_present_commands) {
        if (!(this_present_commands && that_present_commands))
          return false;
        if (!this.commands.equals(that.commands))
          return false;
      }

      boolean this_present_isAutoMagic = true;
      boolean that_present_isAutoMagic = true;
      if (this_present_isAutoMagic || that_present_isAutoMagic) {
        if (!(this_present_isAutoMagic && that_present_isAutoMagic))
          return false;
        if (this.isAutoMagic != that.isAutoMagic)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCommands()) ? 131071 : 524287);
      if (isSetCommands())
        hashCode = hashCode * 8191 + commands.hashCode();

      hashCode = hashCode * 8191 + ((isAutoMagic) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(notifyAboutMagic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCommands(), other.isSetCommands());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommands()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commands, other.commands);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsAutoMagic(), other.isSetIsAutoMagic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsAutoMagic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoMagic, other.isAutoMagic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyAboutMagic_args(");
      boolean first = true;

      sb.append("commands:");
      if (this.commands == null) {
        sb.append("null");
      } else {
        sb.append(this.commands);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isAutoMagic:");
      sb.append(this.isAutoMagic);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyAboutMagic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyAboutMagic_argsStandardScheme getScheme() {
        return new notifyAboutMagic_argsStandardScheme();
      }
    }

    private static class notifyAboutMagic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyAboutMagic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyAboutMagic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMANDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                  struct.commands = new java.util.ArrayList<java.lang.String>(_list100.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem101;
                  for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                  {
                    _elem101 = iprot.readString();
                    struct.commands.add(_elem101);
                  }
                  iprot.readListEnd();
                }
                struct.setCommandsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_AUTO_MAGIC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isAutoMagic = iprot.readBool();
                struct.setIsAutoMagicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyAboutMagic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commands != null) {
          oprot.writeFieldBegin(COMMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.commands.size()));
            for (java.lang.String _iter103 : struct.commands)
            {
              oprot.writeString(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_AUTO_MAGIC_FIELD_DESC);
        oprot.writeBool(struct.isAutoMagic);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyAboutMagic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyAboutMagic_argsTupleScheme getScheme() {
        return new notifyAboutMagic_argsTupleScheme();
      }
    }

    private static class notifyAboutMagic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyAboutMagic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyAboutMagic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCommands()) {
          optionals.set(0);
        }
        if (struct.isSetIsAutoMagic()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCommands()) {
          {
            oprot.writeI32(struct.commands.size());
            for (java.lang.String _iter104 : struct.commands)
            {
              oprot.writeString(_iter104);
            }
          }
        }
        if (struct.isSetIsAutoMagic()) {
          oprot.writeBool(struct.isAutoMagic);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyAboutMagic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.commands = new java.util.ArrayList<java.lang.String>(_list105.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem106;
            for (int _i107 = 0; _i107 < _list105.size; ++_i107)
            {
              _elem106 = iprot.readString();
              struct.commands.add(_elem106);
            }
          }
          struct.setCommandsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isAutoMagic = iprot.readBool();
          struct.setIsAutoMagicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyAboutMagic_result implements org.apache.thrift.TBase<notifyAboutMagic_result, notifyAboutMagic_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyAboutMagic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyAboutMagic_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyAboutMagic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyAboutMagic_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyAboutMagic_result.class, metaDataMap);
    }

    public notifyAboutMagic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyAboutMagic_result(notifyAboutMagic_result other) {
    }

    public notifyAboutMagic_result deepCopy() {
      return new notifyAboutMagic_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof notifyAboutMagic_result)
        return this.equals((notifyAboutMagic_result)that);
      return false;
    }

    public boolean equals(notifyAboutMagic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(notifyAboutMagic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyAboutMagic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyAboutMagic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyAboutMagic_resultStandardScheme getScheme() {
        return new notifyAboutMagic_resultStandardScheme();
      }
    }

    private static class notifyAboutMagic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyAboutMagic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyAboutMagic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyAboutMagic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyAboutMagic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyAboutMagic_resultTupleScheme getScheme() {
        return new notifyAboutMagic_resultTupleScheme();
      }
    }

    private static class notifyAboutMagic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyAboutMagic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyAboutMagic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyAboutMagic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class showConsole_args implements org.apache.thrift.TBase<showConsole_args, showConsole_args._Fields>, java.io.Serializable, Cloneable, Comparable<showConsole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("showConsole_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new showConsole_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new showConsole_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(showConsole_args.class, metaDataMap);
    }

    public showConsole_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public showConsole_args(showConsole_args other) {
    }

    public showConsole_args deepCopy() {
      return new showConsole_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof showConsole_args)
        return this.equals((showConsole_args)that);
      return false;
    }

    public boolean equals(showConsole_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(showConsole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("showConsole_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showConsole_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public showConsole_argsStandardScheme getScheme() {
        return new showConsole_argsStandardScheme();
      }
    }

    private static class showConsole_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<showConsole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, showConsole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, showConsole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showConsole_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public showConsole_argsTupleScheme getScheme() {
        return new showConsole_argsTupleScheme();
      }
    }

    private static class showConsole_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<showConsole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, showConsole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, showConsole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class showConsole_result implements org.apache.thrift.TBase<showConsole_result, showConsole_result._Fields>, java.io.Serializable, Cloneable, Comparable<showConsole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("showConsole_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new showConsole_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new showConsole_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(showConsole_result.class, metaDataMap);
    }

    public showConsole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public showConsole_result(showConsole_result other) {
    }

    public showConsole_result deepCopy() {
      return new showConsole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof showConsole_result)
        return this.equals((showConsole_result)that);
      return false;
    }

    public boolean equals(showConsole_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(showConsole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("showConsole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showConsole_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public showConsole_resultStandardScheme getScheme() {
        return new showConsole_resultStandardScheme();
      }
    }

    private static class showConsole_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<showConsole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, showConsole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, showConsole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showConsole_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public showConsole_resultTupleScheme getScheme() {
        return new showConsole_resultTupleScheme();
      }
    }

    private static class showConsole_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<showConsole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, showConsole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, showConsole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class returnFullValue_args implements org.apache.thrift.TBase<returnFullValue_args, returnFullValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnFullValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnFullValue_args");

    private static final org.apache.thrift.protocol.TField REQUEST_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSeq", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnFullValue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnFullValue_argsTupleSchemeFactory();

    public int requestSeq; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<DebugValue> response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_SEQ((short)1, "requestSeq"),
      RESPONSE((short)2, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_SEQ
            return REQUEST_SEQ;
          case 2: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTSEQ_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_SEQ, new org.apache.thrift.meta_data.FieldMetaData("requestSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "LoadFullValueRequestSeq")));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugValue.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnFullValue_args.class, metaDataMap);
    }

    public returnFullValue_args() {
    }

    public returnFullValue_args(
      int requestSeq,
      java.util.List<DebugValue> response)
    {
      this();
      this.requestSeq = requestSeq;
      setRequestSeqIsSet(true);
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnFullValue_args(returnFullValue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestSeq = other.requestSeq;
      if (other.isSetResponse()) {
        java.util.List<DebugValue> __this__response = new java.util.ArrayList<DebugValue>(other.response.size());
        for (DebugValue other_element : other.response) {
          __this__response.add(new DebugValue(other_element));
        }
        this.response = __this__response;
      }
    }

    public returnFullValue_args deepCopy() {
      return new returnFullValue_args(this);
    }

    @Override
    public void clear() {
      setRequestSeqIsSet(false);
      this.requestSeq = 0;
      this.response = null;
    }

    public int getRequestSeq() {
      return this.requestSeq;
    }

    public returnFullValue_args setRequestSeq(int requestSeq) {
      this.requestSeq = requestSeq;
      setRequestSeqIsSet(true);
      return this;
    }

    public void unsetRequestSeq() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSEQ_ISSET_ID);
    }

    /** Returns true if field requestSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestSeq() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSEQ_ISSET_ID);
    }

    public void setRequestSeqIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSEQ_ISSET_ID, value);
    }

    public int getResponseSize() {
      return (this.response == null) ? 0 : this.response.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DebugValue> getResponseIterator() {
      return (this.response == null) ? null : this.response.iterator();
    }

    public void addToResponse(DebugValue elem) {
      if (this.response == null) {
        this.response = new java.util.ArrayList<DebugValue>();
      }
      this.response.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DebugValue> getResponse() {
      return this.response;
    }

    public returnFullValue_args setResponse(@org.apache.thrift.annotation.Nullable java.util.List<DebugValue> response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST_SEQ:
        if (value == null) {
          unsetRequestSeq();
        } else {
          setRequestSeq((java.lang.Integer)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((java.util.List<DebugValue>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_SEQ:
        return getRequestSeq();

      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_SEQ:
        return isSetRequestSeq();
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof returnFullValue_args)
        return this.equals((returnFullValue_args)that);
      return false;
    }

    public boolean equals(returnFullValue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestSeq = true;
      boolean that_present_requestSeq = true;
      if (this_present_requestSeq || that_present_requestSeq) {
        if (!(this_present_requestSeq && that_present_requestSeq))
          return false;
        if (this.requestSeq != that.requestSeq)
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + requestSeq;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(returnFullValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequestSeq(), other.isSetRequestSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSeq, other.requestSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("returnFullValue_args(");
      boolean first = true;

      sb.append("requestSeq:");
      sb.append(this.requestSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnFullValue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnFullValue_argsStandardScheme getScheme() {
        return new returnFullValue_argsStandardScheme();
      }
    }

    private static class returnFullValue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnFullValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnFullValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestSeq = iprot.readI32();
                struct.setRequestSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                  struct.response = new java.util.ArrayList<DebugValue>(_list108.size);
                  @org.apache.thrift.annotation.Nullable DebugValue _elem109;
                  for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                  {
                    _elem109 = new DebugValue();
                    _elem109.read(iprot);
                    struct.response.add(_elem109);
                  }
                  iprot.readListEnd();
                }
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnFullValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_SEQ_FIELD_DESC);
        oprot.writeI32(struct.requestSeq);
        oprot.writeFieldEnd();
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.response.size()));
            for (DebugValue _iter111 : struct.response)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnFullValue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnFullValue_argsTupleScheme getScheme() {
        return new returnFullValue_argsTupleScheme();
      }
    }

    private static class returnFullValue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnFullValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnFullValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestSeq()) {
          optionals.set(0);
        }
        if (struct.isSetResponse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestSeq()) {
          oprot.writeI32(struct.requestSeq);
        }
        if (struct.isSetResponse()) {
          {
            oprot.writeI32(struct.response.size());
            for (DebugValue _iter112 : struct.response)
            {
              _iter112.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnFullValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestSeq = iprot.readI32();
          struct.setRequestSeqIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.response = new java.util.ArrayList<DebugValue>(_list113.size);
            @org.apache.thrift.annotation.Nullable DebugValue _elem114;
            for (int _i115 = 0; _i115 < _list113.size; ++_i115)
            {
              _elem114 = new DebugValue();
              _elem114.read(iprot);
              struct.response.add(_elem114);
            }
          }
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class returnFullValue_result implements org.apache.thrift.TBase<returnFullValue_result, returnFullValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnFullValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnFullValue_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnFullValue_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnFullValue_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnFullValue_result.class, metaDataMap);
    }

    public returnFullValue_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnFullValue_result(returnFullValue_result other) {
    }

    public returnFullValue_result deepCopy() {
      return new returnFullValue_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof returnFullValue_result)
        return this.equals((returnFullValue_result)that);
      return false;
    }

    public boolean equals(returnFullValue_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(returnFullValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("returnFullValue_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnFullValue_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnFullValue_resultStandardScheme getScheme() {
        return new returnFullValue_resultStandardScheme();
      }
    }

    private static class returnFullValue_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnFullValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnFullValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnFullValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnFullValue_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnFullValue_resultTupleScheme getScheme() {
        return new returnFullValue_resultTupleScheme();
      }
    }

    private static class returnFullValue_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnFullValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnFullValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnFullValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class IPythonEditor_args implements org.apache.thrift.TBase<IPythonEditor_args, IPythonEditor_args._Fields>, java.io.Serializable, Cloneable, Comparable<IPythonEditor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IPythonEditor_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IPythonEditor_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IPythonEditor_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String path; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String line; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      LINE((short)2, "line");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // LINE
            return LINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IPythonEditor_args.class, metaDataMap);
    }

    public IPythonEditor_args() {
    }

    public IPythonEditor_args(
      java.lang.String path,
      java.lang.String line)
    {
      this();
      this.path = path;
      this.line = line;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IPythonEditor_args(IPythonEditor_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
      if (other.isSetLine()) {
        this.line = other.line;
      }
    }

    public IPythonEditor_args deepCopy() {
      return new IPythonEditor_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      this.line = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPath() {
      return this.path;
    }

    public IPythonEditor_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLine() {
      return this.line;
    }

    public IPythonEditor_args setLine(@org.apache.thrift.annotation.Nullable java.lang.String line) {
      this.line = line;
      return this;
    }

    public void unsetLine() {
      this.line = null;
    }

    /** Returns true if field line is set (has been assigned a value) and false otherwise */
    public boolean isSetLine() {
      return this.line != null;
    }

    public void setLineIsSet(boolean value) {
      if (!value) {
        this.line = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      case LINE:
        if (value == null) {
          unsetLine();
        } else {
          setLine((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case LINE:
        return getLine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case LINE:
        return isSetLine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof IPythonEditor_args)
        return this.equals((IPythonEditor_args)that);
      return false;
    }

    public boolean equals(IPythonEditor_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_line = true && this.isSetLine();
      boolean that_present_line = true && that.isSetLine();
      if (this_present_line || that_present_line) {
        if (!(this_present_line && that_present_line))
          return false;
        if (!this.line.equals(that.line))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      hashCode = hashCode * 8191 + ((isSetLine()) ? 131071 : 524287);
      if (isSetLine())
        hashCode = hashCode * 8191 + line.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(IPythonEditor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLine(), other.isSetLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, other.line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("IPythonEditor_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("line:");
      if (this.line == null) {
        sb.append("null");
      } else {
        sb.append(this.line);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IPythonEditor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IPythonEditor_argsStandardScheme getScheme() {
        return new IPythonEditor_argsStandardScheme();
      }
    }

    private static class IPythonEditor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<IPythonEditor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IPythonEditor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.line = iprot.readString();
                struct.setLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IPythonEditor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        if (struct.line != null) {
          oprot.writeFieldBegin(LINE_FIELD_DESC);
          oprot.writeString(struct.line);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IPythonEditor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IPythonEditor_argsTupleScheme getScheme() {
        return new IPythonEditor_argsTupleScheme();
      }
    }

    private static class IPythonEditor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<IPythonEditor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IPythonEditor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetLine()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetLine()) {
          oprot.writeString(struct.line);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IPythonEditor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.line = iprot.readString();
          struct.setLineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class IPythonEditor_result implements org.apache.thrift.TBase<IPythonEditor_result, IPythonEditor_result._Fields>, java.io.Serializable, Cloneable, Comparable<IPythonEditor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IPythonEditor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IPythonEditor_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IPythonEditor_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IPythonEditor_result.class, metaDataMap);
    }

    public IPythonEditor_result() {
    }

    public IPythonEditor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IPythonEditor_result(IPythonEditor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public IPythonEditor_result deepCopy() {
      return new IPythonEditor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IPythonEditor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof IPythonEditor_result)
        return this.equals((IPythonEditor_result)that);
      return false;
    }

    public boolean equals(IPythonEditor_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(IPythonEditor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("IPythonEditor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IPythonEditor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IPythonEditor_resultStandardScheme getScheme() {
        return new IPythonEditor_resultStandardScheme();
      }
    }

    private static class IPythonEditor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<IPythonEditor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IPythonEditor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IPythonEditor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IPythonEditor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IPythonEditor_resultTupleScheme getScheme() {
        return new IPythonEditor_resultTupleScheme();
      }
    }

    private static class IPythonEditor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<IPythonEditor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IPythonEditor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IPythonEditor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendRichOutput_args implements org.apache.thrift.TBase<sendRichOutput_args, sendRichOutput_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendRichOutput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRichOutput_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendRichOutput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendRichOutput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRichOutput_args.class, metaDataMap);
    }

    public sendRichOutput_args() {
    }

    public sendRichOutput_args(
      java.util.Map<java.lang.String,java.lang.String> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRichOutput_args(sendRichOutput_args other) {
      if (other.isSetData()) {
        java.util.Map<java.lang.String,java.lang.String> __this__data = new java.util.HashMap<java.lang.String,java.lang.String>(other.data);
        this.data = __this__data;
      }
    }

    public sendRichOutput_args deepCopy() {
      return new sendRichOutput_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public void putToData(java.lang.String key, java.lang.String val) {
      if (this.data == null) {
        this.data = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.data.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getData() {
      return this.data;
    }

    public sendRichOutput_args setData(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendRichOutput_args)
        return this.equals((sendRichOutput_args)that);
      return false;
    }

    public boolean equals(sendRichOutput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendRichOutput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendRichOutput_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRichOutput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRichOutput_argsStandardScheme getScheme() {
        return new sendRichOutput_argsStandardScheme();
      }
    }

    private static class sendRichOutput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendRichOutput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRichOutput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.data = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map116.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key117;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val118;
                  for (int _i119 = 0; _i119 < _map116.size; ++_i119)
                  {
                    _key117 = iprot.readString();
                    _val118 = iprot.readString();
                    struct.data.put(_key117, _val118);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRichOutput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.data.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter120 : struct.data.entrySet())
            {
              oprot.writeString(_iter120.getKey());
              oprot.writeString(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRichOutput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRichOutput_argsTupleScheme getScheme() {
        return new sendRichOutput_argsTupleScheme();
      }
    }

    private static class sendRichOutput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendRichOutput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRichOutput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter121 : struct.data.entrySet())
            {
              oprot.writeString(_iter121.getKey());
              oprot.writeString(_iter121.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRichOutput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.data = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map122.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key123;
            @org.apache.thrift.annotation.Nullable java.lang.String _val124;
            for (int _i125 = 0; _i125 < _map122.size; ++_i125)
            {
              _key123 = iprot.readString();
              _val124 = iprot.readString();
              struct.data.put(_key123, _val124);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendRichOutput_result implements org.apache.thrift.TBase<sendRichOutput_result, sendRichOutput_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendRichOutput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRichOutput_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendRichOutput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendRichOutput_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRichOutput_result.class, metaDataMap);
    }

    public sendRichOutput_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRichOutput_result(sendRichOutput_result other) {
    }

    public sendRichOutput_result deepCopy() {
      return new sendRichOutput_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendRichOutput_result)
        return this.equals((sendRichOutput_result)that);
      return false;
    }

    public boolean equals(sendRichOutput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(sendRichOutput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendRichOutput_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRichOutput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRichOutput_resultStandardScheme getScheme() {
        return new sendRichOutput_resultStandardScheme();
      }
    }

    private static class sendRichOutput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendRichOutput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRichOutput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRichOutput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRichOutput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRichOutput_resultTupleScheme getScheme() {
        return new sendRichOutput_resultTupleScheme();
      }
    }

    private static class sendRichOutput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendRichOutput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRichOutput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRichOutput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
