/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jetbrains.python.console.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Corresponds to `PyDebugValue`.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-02-22")
public class DebugValue implements org.apache.thrift.TBase<DebugValue, DebugValue._Fields>, java.io.Serializable, Cloneable, Comparable<DebugValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DebugValue");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUALIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("qualifier", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_CONTAINER_FIELD_DESC = new org.apache.thrift.protocol.TField("isContainer", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField SHAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("shape", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_RETURNED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("isReturnedValue", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_IPYTHON_HIDDEN_FIELD_DESC = new org.apache.thrift.protocol.TField("isIPythonHidden", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ERROR_ON_EVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isErrorOnEval", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_RENDERER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeRendererId", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DebugValueStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DebugValueTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String qualifier; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String value; // required
  public boolean isContainer; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String shape; // required
  public boolean isReturnedValue; // required
  public boolean isIPythonHidden; // required
  public boolean isErrorOnEval; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String typeRendererId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    QUALIFIER((short)3, "qualifier"),
    VALUE((short)4, "value"),
    IS_CONTAINER((short)5, "isContainer"),
    SHAPE((short)6, "shape"),
    IS_RETURNED_VALUE((short)7, "isReturnedValue"),
    IS_IPYTHON_HIDDEN((short)8, "isIPythonHidden"),
    IS_ERROR_ON_EVAL((short)9, "isErrorOnEval"),
    TYPE_RENDERER_ID((short)10, "typeRendererId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // QUALIFIER
          return QUALIFIER;
        case 4: // VALUE
          return VALUE;
        case 5: // IS_CONTAINER
          return IS_CONTAINER;
        case 6: // SHAPE
          return SHAPE;
        case 7: // IS_RETURNED_VALUE
          return IS_RETURNED_VALUE;
        case 8: // IS_IPYTHON_HIDDEN
          return IS_IPYTHON_HIDDEN;
        case 9: // IS_ERROR_ON_EVAL
          return IS_ERROR_ON_EVAL;
        case 10: // TYPE_RENDERER_ID
          return TYPE_RENDERER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCONTAINER_ISSET_ID = 0;
  private static final int __ISRETURNEDVALUE_ISSET_ID = 1;
  private static final int __ISIPYTHONHIDDEN_ISSET_ID = 2;
  private static final int __ISERRORONEVAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALIFIER, new org.apache.thrift.meta_data.FieldMetaData("qualifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CONTAINER, new org.apache.thrift.meta_data.FieldMetaData("isContainer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHAPE, new org.apache.thrift.meta_data.FieldMetaData("shape", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RETURNED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("isReturnedValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IPYTHON_HIDDEN, new org.apache.thrift.meta_data.FieldMetaData("isIPythonHidden", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ERROR_ON_EVAL, new org.apache.thrift.meta_data.FieldMetaData("isErrorOnEval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE_RENDERER_ID, new org.apache.thrift.meta_data.FieldMetaData("typeRendererId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DebugValue.class, metaDataMap);
  }

  public DebugValue() {
  }

  public DebugValue(
    java.lang.String name,
    java.lang.String type,
    java.lang.String qualifier,
    java.lang.String value,
    boolean isContainer,
    java.lang.String shape,
    boolean isReturnedValue,
    boolean isIPythonHidden,
    boolean isErrorOnEval,
    java.lang.String typeRendererId)
  {
    this();
    this.name = name;
    this.type = type;
    this.qualifier = qualifier;
    this.value = value;
    this.isContainer = isContainer;
    setIsContainerIsSet(true);
    this.shape = shape;
    this.isReturnedValue = isReturnedValue;
    setIsReturnedValueIsSet(true);
    this.isIPythonHidden = isIPythonHidden;
    setIsIPythonHiddenIsSet(true);
    this.isErrorOnEval = isErrorOnEval;
    setIsErrorOnEvalIsSet(true);
    this.typeRendererId = typeRendererId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DebugValue(DebugValue other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetQualifier()) {
      this.qualifier = other.qualifier;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    this.isContainer = other.isContainer;
    if (other.isSetShape()) {
      this.shape = other.shape;
    }
    this.isReturnedValue = other.isReturnedValue;
    this.isIPythonHidden = other.isIPythonHidden;
    this.isErrorOnEval = other.isErrorOnEval;
    if (other.isSetTypeRendererId()) {
      this.typeRendererId = other.typeRendererId;
    }
  }

  public DebugValue deepCopy() {
    return new DebugValue(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.type = null;
    this.qualifier = null;
    this.value = null;
    setIsContainerIsSet(false);
    this.isContainer = false;
    this.shape = null;
    setIsReturnedValueIsSet(false);
    this.isReturnedValue = false;
    setIsIPythonHiddenIsSet(false);
    this.isIPythonHidden = false;
    setIsErrorOnEvalIsSet(false);
    this.isErrorOnEval = false;
    this.typeRendererId = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public DebugValue setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public DebugValue setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQualifier() {
    return this.qualifier;
  }

  public DebugValue setQualifier(@org.apache.thrift.annotation.Nullable java.lang.String qualifier) {
    this.qualifier = qualifier;
    return this;
  }

  public void unsetQualifier() {
    this.qualifier = null;
  }

  /** Returns true if field qualifier is set (has been assigned a value) and false otherwise */
  public boolean isSetQualifier() {
    return this.qualifier != null;
  }

  public void setQualifierIsSet(boolean value) {
    if (!value) {
      this.qualifier = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getValue() {
    return this.value;
  }

  public DebugValue setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public boolean isIsContainer() {
    return this.isContainer;
  }

  public DebugValue setIsContainer(boolean isContainer) {
    this.isContainer = isContainer;
    setIsContainerIsSet(true);
    return this;
  }

  public void unsetIsContainer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCONTAINER_ISSET_ID);
  }

  /** Returns true if field isContainer is set (has been assigned a value) and false otherwise */
  public boolean isSetIsContainer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCONTAINER_ISSET_ID);
  }

  public void setIsContainerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCONTAINER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getShape() {
    return this.shape;
  }

  public DebugValue setShape(@org.apache.thrift.annotation.Nullable java.lang.String shape) {
    this.shape = shape;
    return this;
  }

  public void unsetShape() {
    this.shape = null;
  }

  /** Returns true if field shape is set (has been assigned a value) and false otherwise */
  public boolean isSetShape() {
    return this.shape != null;
  }

  public void setShapeIsSet(boolean value) {
    if (!value) {
      this.shape = null;
    }
  }

  public boolean isIsReturnedValue() {
    return this.isReturnedValue;
  }

  public DebugValue setIsReturnedValue(boolean isReturnedValue) {
    this.isReturnedValue = isReturnedValue;
    setIsReturnedValueIsSet(true);
    return this;
  }

  public void unsetIsReturnedValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRETURNEDVALUE_ISSET_ID);
  }

  /** Returns true if field isReturnedValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReturnedValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRETURNEDVALUE_ISSET_ID);
  }

  public void setIsReturnedValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRETURNEDVALUE_ISSET_ID, value);
  }

  public boolean isIsIPythonHidden() {
    return this.isIPythonHidden;
  }

  public DebugValue setIsIPythonHidden(boolean isIPythonHidden) {
    this.isIPythonHidden = isIPythonHidden;
    setIsIPythonHiddenIsSet(true);
    return this;
  }

  public void unsetIsIPythonHidden() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISIPYTHONHIDDEN_ISSET_ID);
  }

  /** Returns true if field isIPythonHidden is set (has been assigned a value) and false otherwise */
  public boolean isSetIsIPythonHidden() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISIPYTHONHIDDEN_ISSET_ID);
  }

  public void setIsIPythonHiddenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISIPYTHONHIDDEN_ISSET_ID, value);
  }

  public boolean isIsErrorOnEval() {
    return this.isErrorOnEval;
  }

  public DebugValue setIsErrorOnEval(boolean isErrorOnEval) {
    this.isErrorOnEval = isErrorOnEval;
    setIsErrorOnEvalIsSet(true);
    return this;
  }

  public void unsetIsErrorOnEval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISERRORONEVAL_ISSET_ID);
  }

  /** Returns true if field isErrorOnEval is set (has been assigned a value) and false otherwise */
  public boolean isSetIsErrorOnEval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISERRORONEVAL_ISSET_ID);
  }

  public void setIsErrorOnEvalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISERRORONEVAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTypeRendererId() {
    return this.typeRendererId;
  }

  public DebugValue setTypeRendererId(@org.apache.thrift.annotation.Nullable java.lang.String typeRendererId) {
    this.typeRendererId = typeRendererId;
    return this;
  }

  public void unsetTypeRendererId() {
    this.typeRendererId = null;
  }

  /** Returns true if field typeRendererId is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeRendererId() {
    return this.typeRendererId != null;
  }

  public void setTypeRendererIdIsSet(boolean value) {
    if (!value) {
      this.typeRendererId = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case QUALIFIER:
      if (value == null) {
        unsetQualifier();
      } else {
        setQualifier((java.lang.String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.String)value);
      }
      break;

    case IS_CONTAINER:
      if (value == null) {
        unsetIsContainer();
      } else {
        setIsContainer((java.lang.Boolean)value);
      }
      break;

    case SHAPE:
      if (value == null) {
        unsetShape();
      } else {
        setShape((java.lang.String)value);
      }
      break;

    case IS_RETURNED_VALUE:
      if (value == null) {
        unsetIsReturnedValue();
      } else {
        setIsReturnedValue((java.lang.Boolean)value);
      }
      break;

    case IS_IPYTHON_HIDDEN:
      if (value == null) {
        unsetIsIPythonHidden();
      } else {
        setIsIPythonHidden((java.lang.Boolean)value);
      }
      break;

    case IS_ERROR_ON_EVAL:
      if (value == null) {
        unsetIsErrorOnEval();
      } else {
        setIsErrorOnEval((java.lang.Boolean)value);
      }
      break;

    case TYPE_RENDERER_ID:
      if (value == null) {
        unsetTypeRendererId();
      } else {
        setTypeRendererId((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case QUALIFIER:
      return getQualifier();

    case VALUE:
      return getValue();

    case IS_CONTAINER:
      return isIsContainer();

    case SHAPE:
      return getShape();

    case IS_RETURNED_VALUE:
      return isIsReturnedValue();

    case IS_IPYTHON_HIDDEN:
      return isIsIPythonHidden();

    case IS_ERROR_ON_EVAL:
      return isIsErrorOnEval();

    case TYPE_RENDERER_ID:
      return getTypeRendererId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case QUALIFIER:
      return isSetQualifier();
    case VALUE:
      return isSetValue();
    case IS_CONTAINER:
      return isSetIsContainer();
    case SHAPE:
      return isSetShape();
    case IS_RETURNED_VALUE:
      return isSetIsReturnedValue();
    case IS_IPYTHON_HIDDEN:
      return isSetIsIPythonHidden();
    case IS_ERROR_ON_EVAL:
      return isSetIsErrorOnEval();
    case TYPE_RENDERER_ID:
      return isSetTypeRendererId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof DebugValue)
      return this.equals((DebugValue)that);
    return false;
  }

  public boolean equals(DebugValue that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_qualifier = true && this.isSetQualifier();
    boolean that_present_qualifier = true && that.isSetQualifier();
    if (this_present_qualifier || that_present_qualifier) {
      if (!(this_present_qualifier && that_present_qualifier))
        return false;
      if (!this.qualifier.equals(that.qualifier))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_isContainer = true;
    boolean that_present_isContainer = true;
    if (this_present_isContainer || that_present_isContainer) {
      if (!(this_present_isContainer && that_present_isContainer))
        return false;
      if (this.isContainer != that.isContainer)
        return false;
    }

    boolean this_present_shape = true && this.isSetShape();
    boolean that_present_shape = true && that.isSetShape();
    if (this_present_shape || that_present_shape) {
      if (!(this_present_shape && that_present_shape))
        return false;
      if (!this.shape.equals(that.shape))
        return false;
    }

    boolean this_present_isReturnedValue = true;
    boolean that_present_isReturnedValue = true;
    if (this_present_isReturnedValue || that_present_isReturnedValue) {
      if (!(this_present_isReturnedValue && that_present_isReturnedValue))
        return false;
      if (this.isReturnedValue != that.isReturnedValue)
        return false;
    }

    boolean this_present_isIPythonHidden = true;
    boolean that_present_isIPythonHidden = true;
    if (this_present_isIPythonHidden || that_present_isIPythonHidden) {
      if (!(this_present_isIPythonHidden && that_present_isIPythonHidden))
        return false;
      if (this.isIPythonHidden != that.isIPythonHidden)
        return false;
    }

    boolean this_present_isErrorOnEval = true;
    boolean that_present_isErrorOnEval = true;
    if (this_present_isErrorOnEval || that_present_isErrorOnEval) {
      if (!(this_present_isErrorOnEval && that_present_isErrorOnEval))
        return false;
      if (this.isErrorOnEval != that.isErrorOnEval)
        return false;
    }

    boolean this_present_typeRendererId = true && this.isSetTypeRendererId();
    boolean that_present_typeRendererId = true && that.isSetTypeRendererId();
    if (this_present_typeRendererId || that_present_typeRendererId) {
      if (!(this_present_typeRendererId && that_present_typeRendererId))
        return false;
      if (!this.typeRendererId.equals(that.typeRendererId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetQualifier()) ? 131071 : 524287);
    if (isSetQualifier())
      hashCode = hashCode * 8191 + qualifier.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isContainer) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetShape()) ? 131071 : 524287);
    if (isSetShape())
      hashCode = hashCode * 8191 + shape.hashCode();

    hashCode = hashCode * 8191 + ((isReturnedValue) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isIPythonHidden) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isErrorOnEval) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTypeRendererId()) ? 131071 : 524287);
    if (isSetTypeRendererId())
      hashCode = hashCode * 8191 + typeRendererId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DebugValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQualifier(), other.isSetQualifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQualifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, other.qualifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsContainer(), other.isSetIsContainer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsContainer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isContainer, other.isContainer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShape(), other.isSetShape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shape, other.shape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsReturnedValue(), other.isSetIsReturnedValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReturnedValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReturnedValue, other.isReturnedValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsIPythonHidden(), other.isSetIsIPythonHidden());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsIPythonHidden()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isIPythonHidden, other.isIPythonHidden);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsErrorOnEval(), other.isSetIsErrorOnEval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsErrorOnEval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isErrorOnEval, other.isErrorOnEval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTypeRendererId()).compareTo(other.isSetTypeRendererId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeRendererId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeRendererId, other.typeRendererId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DebugValue(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qualifier:");
    if (this.qualifier == null) {
      sb.append("null");
    } else {
      sb.append(this.qualifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isContainer:");
    sb.append(this.isContainer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shape:");
    if (this.shape == null) {
      sb.append("null");
    } else {
      sb.append(this.shape);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReturnedValue:");
    sb.append(this.isReturnedValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isIPythonHidden:");
    sb.append(this.isIPythonHidden);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isErrorOnEval:");
    sb.append(this.isErrorOnEval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeRendererId:");
    if (this.typeRendererId == null) {
      sb.append("null");
    } else {
      sb.append(this.typeRendererId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DebugValueStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DebugValueStandardScheme getScheme() {
      return new DebugValueStandardScheme();
    }
  }

  private static class DebugValueStandardScheme extends org.apache.thrift.scheme.StandardScheme<DebugValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DebugValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUALIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qualifier = iprot.readString();
              struct.setQualifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_CONTAINER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isContainer = iprot.readBool();
              struct.setIsContainerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shape = iprot.readString();
              struct.setShapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_RETURNED_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReturnedValue = iprot.readBool();
              struct.setIsReturnedValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_IPYTHON_HIDDEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isIPythonHidden = iprot.readBool();
              struct.setIsIPythonHiddenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ERROR_ON_EVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isErrorOnEval = iprot.readBool();
              struct.setIsErrorOnEvalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE_RENDERER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeRendererId = iprot.readString();
              struct.setTypeRendererIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DebugValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.qualifier != null) {
        oprot.writeFieldBegin(QUALIFIER_FIELD_DESC);
        oprot.writeString(struct.qualifier);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CONTAINER_FIELD_DESC);
      oprot.writeBool(struct.isContainer);
      oprot.writeFieldEnd();
      if (struct.shape != null) {
        oprot.writeFieldBegin(SHAPE_FIELD_DESC);
        oprot.writeString(struct.shape);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RETURNED_VALUE_FIELD_DESC);
      oprot.writeBool(struct.isReturnedValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IPYTHON_HIDDEN_FIELD_DESC);
      oprot.writeBool(struct.isIPythonHidden);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ERROR_ON_EVAL_FIELD_DESC);
      oprot.writeBool(struct.isErrorOnEval);
      oprot.writeFieldEnd();
      if (struct.typeRendererId != null) {
        oprot.writeFieldBegin(TYPE_RENDERER_ID_FIELD_DESC);
        oprot.writeString(struct.typeRendererId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DebugValueTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DebugValueTupleScheme getScheme() {
      return new DebugValueTupleScheme();
    }
  }

  private static class DebugValueTupleScheme extends org.apache.thrift.scheme.TupleScheme<DebugValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DebugValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetQualifier()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      if (struct.isSetIsContainer()) {
        optionals.set(4);
      }
      if (struct.isSetShape()) {
        optionals.set(5);
      }
      if (struct.isSetIsReturnedValue()) {
        optionals.set(6);
      }
      if (struct.isSetIsIPythonHidden()) {
        optionals.set(7);
      }
      if (struct.isSetIsErrorOnEval()) {
        optionals.set(8);
      }
      if (struct.isSetTypeRendererId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetQualifier()) {
        oprot.writeString(struct.qualifier);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetIsContainer()) {
        oprot.writeBool(struct.isContainer);
      }
      if (struct.isSetShape()) {
        oprot.writeString(struct.shape);
      }
      if (struct.isSetIsReturnedValue()) {
        oprot.writeBool(struct.isReturnedValue);
      }
      if (struct.isSetIsIPythonHidden()) {
        oprot.writeBool(struct.isIPythonHidden);
      }
      if (struct.isSetIsErrorOnEval()) {
        oprot.writeBool(struct.isErrorOnEval);
      }
      if (struct.isSetTypeRendererId()) {
        oprot.writeString(struct.typeRendererId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DebugValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.qualifier = iprot.readString();
        struct.setQualifierIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isContainer = iprot.readBool();
        struct.setIsContainerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shape = iprot.readString();
        struct.setShapeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isReturnedValue = iprot.readBool();
        struct.setIsReturnedValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isIPythonHidden = iprot.readBool();
        struct.setIsIPythonHiddenIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isErrorOnEval = iprot.readBool();
        struct.setIsErrorOnEvalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.typeRendererId = iprot.readString();
        struct.setTypeRendererIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

