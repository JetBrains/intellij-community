/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Python.flex</tt>
 */
class _PythonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\12\1\34\1\35\2\12\1\15\1\36\3\12\1\37\10\12\1\40\1\41\20\12\1\42"+
    "\2\12\1\43\4\12\1\44\1\45\1\46\3\12\1\47\1\50\1\51\3\12\51\15\1\52\3\15\1"+
    "\53\1\54\4\15\1\55\12\12\1\56\u02c1\12\1\57\277\12");

  /* The ZZ_CMAP_Y table has 3072 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\2\1\1\45\7\13\1\46\1\24\1\34\1\47\1\35\1"+
    "\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61\1\22"+
    "\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104\1\46"+
    "\1\1\1\105\1\101\1\35\1\106\1\103\1\107\1\46\1\110\1\105\1\101\1\13\1\37\1"+
    "\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1\24\2"+
    "\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64\1\132"+
    "\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1\4\13\1"+
    "\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143\2\13\1"+
    "\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45\13\1"+
    "\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\44\1\13\1\44\1\13\1\154\1\153"+
    "\1\155\5\13\1\156\1\123\1\1\1\157\1\123\5\13\1\26\2\13\1\31\4\13\1\60\1\13"+
    "\1\122\2\43\1\57\1\13\1\42\1\44\2\13\1\43\1\13\1\160\1\123\2\1\1\13\1\43\3"+
    "\13\1\122\1\13\1\150\2\123\1\161\1\122\4\1\4\13\1\43\1\123\1\162\1\154\3\13"+
    "\1\40\3\13\1\154\3\13\1\26\1\163\1\40\1\13\1\42\5\1\1\164\1\13\1\165\17\13"+
    "\1\166\21\13\1\147\2\13\1\147\1\167\1\13\1\42\3\13\1\170\1\171\1\172\1\135"+
    "\1\171\2\1\1\173\1\174\1\64\1\175\1\1\1\176\1\1\1\135\3\1\2\13\1\64\1\177"+
    "\1\200\1\201\1\202\1\203\1\1\2\13\1\152\62\1\1\204\2\13\1\160\161\1\2\13\1"+
    "\122\2\13\1\122\10\13\1\205\1\154\2\13\1\141\3\13\1\206\1\174\1\13\1\207\4"+
    "\210\2\13\2\1\1\174\35\1\1\211\1\1\1\24\1\212\1\24\4\13\1\213\1\24\4\13\1"+
    "\142\1\214\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1"+
    "\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135\1\13\1\215\1"+
    "\1\3\13\1\216\7\13\1\16\1\1\1\217\1\220\5\13\1\221\1\13\1\42\1\26\3\1\1\217"+
    "\2\13\1\26\1\1\3\13\1\154\4\13\1\44\1\123\1\13\1\222\1\40\1\13\1\42\2\13\1"+
    "\154\1\13\1\135\4\13\1\223\1\123\1\13\1\224\3\13\1\207\1\42\1\123\1\13\1\115"+
    "\4\13\1\32\1\157\1\13\1\225\1\226\1\227\1\210\2\13\1\142\1\60\7\13\1\230\1"+
    "\123\72\13\1\154\1\13\1\231\2\13\1\43\20\1\26\13\1\42\6\13\1\160\2\1\1\207"+
    "\1\232\1\35\1\233\1\234\6\13\1\16\1\1\1\45\25\13\1\42\1\1\4\13\1\220\2\13"+
    "\1\26\2\1\1\43\1\13\1\1\1\13\1\235\1\236\2\1\1\136\7\13\1\135\1\1\1\123\1"+
    "\24\1\237\1\24\1\31\1\204\4\13\1\122\1\240\1\241\2\1\1\242\1\13\1\14\1\243"+
    "\2\42\2\1\7\13\1\31\4\1\3\13\1\44\7\1\1\244\10\1\1\13\1\135\3\13\2\64\1\1"+
    "\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\245\1\246\2\1\11\13\1\42\1"+
    "\123\5\1\2\13\1\26\3\13\1\154\11\1\23\13\1\207\1\13\1\60\1\26\11\1\1\247\2"+
    "\13\1\250\1\13\1\60\1\13\1\207\1\13\1\122\4\1\1\13\1\251\1\13\1\60\1\13\1"+
    "\160\4\1\3\13\1\252\4\1\1\253\1\254\1\13\1\255\2\1\1\13\1\135\1\13\1\135\2"+
    "\1\1\134\1\13\1\207\1\1\3\13\1\60\1\13\1\60\1\13\1\32\1\13\1\16\6\1\4\13\1"+
    "\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\207\1\1\1\57\1\174\3\13\1\31\1\1"+
    "\1\13\1\152\1\123\3\13\1\256\1\1\2\13\1\257\4\13\1\260\1\261\2\1\1\13\1\22"+
    "\1\13\1\26\4\1\1\262\1\27\1\152\3\13\1\31\1\123\1\34\1\47\1\35\1\62\1\67\1"+
    "\263\1\264\1\44\20\1\4\13\1\265\1\123\12\1\3\13\1\266\1\64\1\267\2\1\4\13"+
    "\1\270\1\123\2\1\3\13\1\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123"+
    "\1\174\34\1\3\13\1\152\20\1\71\13\1\160\6\1\6\13\1\122\1\1\14\13\1\154\53"+
    "\1\2\13\1\122\75\1\44\13\1\207\33\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13"+
    "\1\42\1\44\3\13\1\207\1\154\1\123\1\45\1\271\1\13\67\1\4\13\1\44\2\13\1\122"+
    "\1\174\1\13\6\1\1\16\77\1\6\13\1\31\1\135\1\152\1\272\114\1\1\273\1\274\1"+
    "\275\1\1\1\276\11\1\1\277\33\1\5\13\1\136\3\13\1\153\1\300\1\301\1\302\3\13"+
    "\1\303\1\304\1\13\1\305\1\306\1\101\24\13\1\266\1\13\1\101\1\142\1\13\1\142"+
    "\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13\1\307\3\310"+
    "\40\1\3\13\1\231\2\13\1\135\1\311\1\175\1\162\1\24\25\1\14\13\1\44\1\207\122"+
    "\1\1\302\1\13\1\312\1\313\1\314\1\315\1\316\1\317\1\320\1\43\1\321\1\43\47"+
    "\1\1\13\1\160\1\13\1\160\1\13\1\160\47\1\55\13\1\207\2\1\103\13\1\44\15\13"+
    "\1\42\150\13\1\16\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3360 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\30\1\32\1\110\1\31\1\13\22\0\1\27\1\75\1\26\1\12\1\0\1\67\1\70\1\24"+
    "\1\77\1\100\1\64\1\62\1\105\1\20\1\16\1\66\1\1\1\5\6\3\2\2\1\106\1\33\1\74"+
    "\1\63\1\73\1\0\1\65\1\4\1\10\1\22\1\4\1\17\1\4\3\14\1\21\1\14\1\11\2\14\1"+
    "\7\2\14\1\23\2\14\1\23\2\14\1\6\2\14\1\101\1\25\1\102\1\72\1\14\1\107\1\34"+
    "\1\43\1\45\1\36\1\40\1\52\1\57\1\61\1\50\1\21\1\44\1\46\1\56\1\35\1\47\1\54"+
    "\1\14\1\41\1\37\1\42\1\51\1\14\1\60\1\53\1\55\1\14\1\103\1\71\1\104\1\76\6"+
    "\0\1\110\24\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\0\12\14\4\0\14\14\16\0\5"+
    "\14\7\0\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6\0\1\14\1\0\3\14"+
    "\1\0\1\14\1\0\4\14\1\0\23\14\1\0\11\14\1\0\26\14\2\0\1\14\6\0\10\14\10\0\16"+
    "\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\1\14\10\0\13\14\5\0\3\14\15\0\12\15\4\0"+
    "\6\14\1\0\10\14\2\0\12\14\1\0\6\14\12\15\3\14\2\0\14\14\2\0\3\14\12\15\14"+
    "\14\4\0\1\14\5\0\16\14\2\0\14\14\4\0\5\14\16\0\21\14\2\0\12\15\1\14\2\0\16"+
    "\14\1\0\1\14\3\0\4\14\2\0\11\14\2\0\2\14\2\0\4\14\10\0\1\14\4\0\2\14\1\0\1"+
    "\14\1\0\3\14\1\0\6\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\14\1\0\5\14"+
    "\4\0\2\14\2\0\3\14\3\0\1\14\7\0\4\14\1\0\1\14\7\0\12\15\6\14\13\0\3\14\1\0"+
    "\11\14\1\0\2\14\1\0\2\14\1\0\5\14\2\0\12\14\1\0\3\14\1\0\3\14\2\0\1\14\30"+
    "\0\1\14\7\0\3\14\1\0\10\14\2\0\6\14\2\0\2\14\2\0\3\14\10\0\2\14\4\0\2\14\1"+
    "\0\1\14\1\0\1\14\20\0\2\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1"+
    "\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\4\0\5\14\3\0\3\14\1\0\4\14\2\0\1\14\6"+
    "\0\1\14\10\0\4\14\1\0\10\14\1\0\3\14\1\0\30\14\3\0\10\14\1\0\3\14\1\0\4\14"+
    "\7\0\2\14\1\0\3\14\6\0\3\14\1\0\10\14\1\0\6\14\1\0\5\14\2\0\4\14\5\0\2\14"+
    "\7\0\1\14\2\0\2\14\15\0\5\14\1\0\3\14\1\0\5\14\10\0\1\14\7\0\1\14\12\0\6\14"+
    "\2\0\2\14\1\0\22\14\3\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14\3\0\1\14\4\0\6\14"+
    "\1\0\1\14\1\0\10\14\2\0\2\14\14\0\17\14\1\0\12\15\7\0\2\14\1\0\1\14\2\0\2"+
    "\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14"+
    "\1\0\15\14\1\0\3\14\2\0\5\14\1\0\1\14\1\0\6\14\2\0\12\15\2\0\4\14\10\0\2\14"+
    "\13\0\1\14\1\0\1\14\1\0\1\14\4\0\12\14\1\0\24\14\3\0\5\14\1\0\12\14\6\0\1"+
    "\14\11\0\12\15\4\14\2\0\6\14\1\0\1\14\5\0\1\14\2\0\13\14\1\0\15\14\1\0\4\14"+
    "\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2"+
    "\0\16\14\2\0\6\14\2\0\15\14\2\0\14\14\3\0\13\14\7\0\15\14\1\0\6\14\14\0\1"+
    "\14\1\0\2\14\14\0\4\14\3\0\1\14\4\0\2\14\15\0\3\14\2\0\12\14\15\0\1\14\23"+
    "\0\5\14\12\15\3\0\6\14\1\0\23\14\1\0\2\14\6\0\6\14\6\0\14\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\6\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6"+
    "\14\14\0\2\110\25\0\1\14\4\0\1\14\14\0\1\14\15\0\1\14\2\0\1\14\4\0\1\14\2"+
    "\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0\13\14\2"+
    "\0\4\14\5\0\5\14\4\0\1\14\7\0\17\14\6\0\15\14\7\0\10\14\11\0\7\14\1\0\7\14"+
    "\6\0\3\14\11\0\5\14\2\0\5\14\3\0\7\14\2\0\2\14\2\0\3\14\5\0\13\14\12\15\2"+
    "\14\4\0\3\14\1\0\12\14\1\0\1\14\7\0\11\14\2\0\27\14\2\0\15\14\3\0\1\14\1\0"+
    "\1\14\2\0\1\14\16\0\1\14\12\15\5\14\3\0\5\14\12\0\6\14\2\0\6\14\2\0\6\14\11"+
    "\0\13\14\1\0\2\14\2\0\7\14\4\0\5\14\3\0\5\14\5\0\12\14\1\0\5\14\1\0\1\14\1"+
    "\0\2\14\1\0\2\14\1\0\12\14\3\0\2\14\30\0\16\14\4\0\1\14\2\0\6\14\2\0\6\14"+
    "\2\0\6\14\2\0\3\14\3\0\14\14\1\0\16\14\1\0\2\14\1\0\1\14\15\0\1\14\2\0\4\14"+
    "\4\0\10\14\1\0\5\14\12\0\6\14\2\0\1\14\1\0\14\14\1\0\2\14\3\0\1\14\2\0\4\14"+
    "\1\0\2\14\12\0\10\14\6\0\6\14\1\0\2\14\5\0\10\14\1\0\3\14\1\0\13\14\4\0\3"+
    "\14\4\0\6\14\1\0\12\15\4\14\2\0\1\14\11\0\5\14\5\0\3\14\3\0\12\15\1\14\1\0"+
    "\1\14\3\0\7\14\1\0\1\14\1\0\4\14\1\0\2\14\6\0\1\14\5\0\7\14\2\0\7\14\3\0\6"+
    "\14\1\0\1\14\10\0\6\14\2\0\10\14\10\0\6\14\2\0\1\14\3\0\1\14\13\0\10\14\5"+
    "\0\15\14\3\0\2\14\6\0\5\14\3\0\6\14\10\0\10\14\2\0\7\14\16\0\4\14\4\0\3\14"+
    "\15\0\1\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0\21\14\1\0\4\14"+
    "\2\0\10\14\1\0\7\14\1\0\14\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\11\14\1\0\10"+
    "\14\2\0\22\15\5\0\1\14\13\0\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0"+
    "\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0\1"+
    "\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14"+
    "\1\0\7\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\5\14\1\0\3\14\1\0\5\14"+
    "\1\0\5\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\11\1\12\1\13\1\14\1\15\20\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\43\1\44"+
    "\2\45\1\46\1\3\2\47\3\3\1\41\1\2\4\0"+
    "\1\2\1\50\1\0\1\51\1\3\1\52\1\53\3\7"+
    "\1\54\3\7\15\3\1\55\1\56\1\57\1\60\10\3"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\0\3\45\1\102\3\45\1\3\6\47\1\3"+
    "\2\0\1\103\3\2\1\50\1\0\1\3\1\7\1\104"+
    "\1\105\1\0\1\104\1\106\1\3\1\107\1\110\1\111"+
    "\5\3\1\112\6\3\1\113\5\3\1\114\1\115\1\116"+
    "\1\117\1\0\1\45\1\120\1\121\1\0\1\120\1\3"+
    "\1\47\2\122\3\0\2\123\1\0\1\3\1\124\1\125"+
    "\10\3\1\126\1\3\1\127\3\3\3\0\2\121\12\0"+
    "\2\104\1\0\2\3\1\130\1\3\1\131\1\132\4\3"+
    "\1\133\1\3\1\134\3\0\2\120\4\0\2\122\1\0"+
    "\3\104\1\135\1\136\1\137\1\3\1\140\1\141\1\3"+
    "\1\142\3\120\3\122\1\123\1\0\1\143\2\0\1\3"+
    "\1\144\4\0\2\104\1\145\2\120\2\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\333\0\u036c\0\333\0\333"+
    "\0\333\0\333\0\333\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9"+
    "\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\333\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\333\0\u0cd5"+
    "\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\u0faf\0\u0ff8\0\333\0\u1041\0\u108a\0\333\0\u10d3"+
    "\0\333\0\333\0\u111c\0\u1165\0\u11ae\0\333\0\u11f7\0\u1240"+
    "\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488"+
    "\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4"+
    "\0\u183d\0\u1886\0\333\0\333\0\333\0\u18cf\0\333\0\333"+
    "\0\u1918\0\333\0\333\0\333\0\333\0\333\0\u1961\0\333"+
    "\0\333\0\u19aa\0\333\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\333"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u0e8b\0\333\0\u1e83\0\u1ecc"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\333\0\u2039"+
    "\0\u20cb\0\u01b6\0\u2114\0\u01b6\0\u01b6\0\u01b6\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\u2281\0\u01b6\0\u22ca\0\u2313\0\u235c\0\u23a5"+
    "\0\u23ee\0\u2437\0\u01b6\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\333\0\333\0\333\0\333\0\u25ed\0\u2636\0\u267f\0\333"+
    "\0\u2636\0\u26c8\0\u2711\0\333\0\u275a\0\u27a3\0\u27ec\0\u2835"+
    "\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u01b6\0\u01b6\0\u29eb"+
    "\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u01b6"+
    "\0\u2c33\0\u01b6\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9"+
    "\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031"+
    "\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279"+
    "\0\u32c2\0\u01b6\0\u330b\0\u01b6\0\u01b6\0\u3354\0\u339d\0\u33e6"+
    "\0\u342f\0\u01b6\0\u3478\0\u01b6\0\u34c1\0\u350a\0\u3553\0\u359c"+
    "\0\u35e5\0\u362e\0\u1c84\0\u1da8\0\u3677\0\u36c0\0\u3709\0\u3752"+
    "\0\u379b\0\u37e4\0\u382d\0\u01b6\0\u01b6\0\u01b6\0\u3876\0\u01b6"+
    "\0\u01b6\0\u38bf\0\u01b6\0\u2636\0\u3908\0\u3951\0\333\0\u399a"+
    "\0\u39e3\0\333\0\u379b\0\333\0\u3a2c\0\u3a75\0\u3abe\0\u01b6"+
    "\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3155\0\u3230\0\u01b6\0\u3553"+
    "\0\u362e\0\u3677\0\u3752";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\6\2\7\1\10\1\7"+
    "\1\11\1\4\1\7\1\4\1\12\1\7\1\13\1\7"+
    "\2\10\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\7\1\27\1\30\1\31"+
    "\1\32\1\7\1\33\1\34\1\35\1\36\1\10\1\37"+
    "\1\7\1\40\1\41\1\7\1\42\1\43\1\7\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\4\10\72\1\73"+
    "\1\72\1\74\1\0\6\72\2\73\1\75\1\15\1\76"+
    "\1\17\1\20\1\21\1\77\6\72\1\73\1\72\1\73"+
    "\1\72\1\73\3\72\1\73\36\72\1\0\1\4\1\5"+
    "\2\6\1\7\1\6\2\7\1\100\1\7\1\74\1\4"+
    "\1\7\1\4\1\12\1\7\1\13\1\7\2\100\1\101"+
    "\1\15\1\102\1\17\1\20\1\21\1\77\1\23\1\24"+
    "\1\25\1\26\1\7\1\27\1\103\1\31\1\104\1\7"+
    "\1\105\1\34\1\35\1\36\1\100\1\37\1\7\1\40"+
    "\1\41\1\7\1\42\1\43\1\7\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\106\1\71\1\4\112\0\1\107\1\110\1\107"+
    "\1\0\1\107\1\111\1\112\1\113\1\114\4\0\1\115"+
    "\1\116\1\0\1\117\16\0\1\116\2\0\1\113\2\0"+
    "\1\114\1\112\3\0\1\111\36\0\3\6\1\0\1\6"+
    "\3\0\1\114\4\0\1\115\1\116\1\0\1\117\16\0"+
    "\1\116\5\0\1\114\43\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\26\7\30\0\7\7\1\120"+
    "\1\7\2\0\2\7\1\0\1\7\1\0\1\7\2\120"+
    "\1\14\1\0\1\16\5\0\5\7\1\120\1\7\1\120"+
    "\1\7\1\120\3\7\1\120\10\7\27\0\13\11\1\0"+
    "\16\11\1\0\56\11\1\0\3\115\1\0\1\115\166\0"+
    "\1\121\7\0\1\122\15\0\13\123\1\0\10\123\1\124"+
    "\1\125\4\123\1\126\56\123\13\127\1\0\11\127\1\130"+
    "\1\131\3\127\1\126\56\127\1\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\1\7\1\132\1\7"+
    "\1\133\22\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\13\7\1\134\12\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\4\7"+
    "\1\135\21\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\12\7\1\136\4\7\1\137\6\7"+
    "\30\0\7\7\1\120\1\7\2\0\2\7\1\0\1\7"+
    "\1\0\1\7\2\120\1\14\1\0\1\16\5\0\1\140"+
    "\3\7\1\141\1\120\1\7\1\120\1\7\1\120\3\7"+
    "\1\120\10\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\5\7\1\142\20\7\30\0\7\7"+
    "\1\120\1\7\2\0\2\7\1\0\1\7\1\0\1\7"+
    "\2\120\1\14\1\0\1\16\5\0\5\7\1\143\1\7"+
    "\1\120\1\7\1\120\3\7\1\120\10\7\30\0\7\7"+
    "\1\120\1\7\2\0\2\7\1\0\1\7\1\0\1\7"+
    "\2\120\1\14\1\0\1\16\5\0\5\7\1\120\1\7"+
    "\1\120\1\7\1\120\1\144\1\145\1\7\1\120\10\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\1\146\25\7\30\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\5\7\1\147\20\7\30\0"+
    "\11\7\2\0\2\7\1\0\1\7\1\0\3\7\10\0"+
    "\1\7\1\150\1\7\1\151\12\7\1\152\3\7\1\153"+
    "\3\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\5\7\1\154\5\7\1\155\1\156\11\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\1\157\25\7\30\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\14\7\1\160\11\7\30\0"+
    "\11\7\2\0\2\7\1\0\1\7\1\0\3\7\10\0"+
    "\12\7\1\161\13\7\30\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\25\7\1\162\112\0\1\163"+
    "\110\0\1\164\110\0\1\165\1\166\107\0\1\167\110\0"+
    "\1\170\2\0\1\171\105\0\1\172\110\0\1\173\110\0"+
    "\1\174\110\0\1\175\110\0\1\176\7\0\1\177\100\0"+
    "\1\200\7\0\1\201\1\202\77\0\1\203\35\0\1\204"+
    "\11\0\2\204\1\75\1\0\1\76\12\0\1\204\1\0"+
    "\1\204\1\0\1\204\3\0\1\204\37\0\13\74\1\0"+
    "\16\74\1\0\56\74\13\205\1\0\10\205\1\206\1\207"+
    "\4\205\1\210\56\205\13\211\1\0\11\211\1\212\1\213"+
    "\3\211\1\210\56\211\1\0\7\7\1\214\1\7\2\0"+
    "\2\7\1\0\1\7\1\0\1\7\2\214\1\101\1\0"+
    "\1\102\5\0\5\7\1\214\1\7\1\214\1\7\1\214"+
    "\3\7\1\214\10\7\27\0\13\215\1\0\10\215\1\216"+
    "\1\217\4\215\1\0\56\215\13\220\1\0\11\220\1\221"+
    "\1\222\3\220\1\0\56\220\1\0\7\7\1\214\1\7"+
    "\2\0\2\7\1\0\1\7\1\0\1\7\2\214\1\101"+
    "\1\0\1\102\5\0\1\140\3\7\1\141\1\214\1\7"+
    "\1\214\1\7\1\214\3\7\1\214\10\7\30\0\7\7"+
    "\1\214\1\7\2\0\2\7\1\0\1\7\1\0\1\7"+
    "\2\214\1\101\1\0\1\102\5\0\5\7\1\223\1\7"+
    "\1\214\1\7\1\214\3\7\1\214\10\7\30\0\7\7"+
    "\1\214\1\7\2\0\2\7\1\0\1\7\1\0\1\7"+
    "\2\214\1\101\1\0\1\102\5\0\5\7\1\214\1\7"+
    "\1\214\1\7\1\214\1\144\1\145\1\7\1\214\10\7"+
    "\41\0\1\224\14\0\1\225\2\0\1\226\57\0\1\107"+
    "\1\110\1\107\1\0\1\107\3\0\1\114\4\0\1\115"+
    "\1\116\1\0\1\117\16\0\1\116\5\0\1\114\43\0"+
    "\3\110\1\0\1\110\10\0\1\115\1\116\1\0\1\117"+
    "\16\0\1\116\51\0\5\227\2\0\1\227\6\0\1\227"+
    "\2\0\1\227\11\0\1\227\1\0\1\227\1\0\1\227"+
    "\2\0\1\227\1\0\1\227\4\0\1\227\37\0\1\230"+
    "\1\0\1\230\1\0\1\230\104\0\1\231\3\0\1\231"+
    "\104\0\3\115\1\0\1\115\11\0\1\116\1\0\1\117"+
    "\16\0\1\116\51\0\3\232\1\0\1\232\12\0\1\233"+
    "\41\0\1\233\27\0\7\7\1\234\1\7\2\0\2\7"+
    "\1\0\1\7\1\0\1\7\2\234\1\14\1\0\1\16"+
    "\5\0\5\7\1\234\1\7\1\234\1\7\1\234\3\7"+
    "\1\234\10\7\27\0\13\123\1\0\10\123\1\235\1\125"+
    "\4\123\1\126\56\123\24\0\1\236\1\237\1\0\2\240"+
    "\1\0\2\126\55\0\111\123\13\127\1\0\11\127\1\130"+
    "\1\235\3\127\1\126\167\127\25\0\1\237\1\241\2\240"+
    "\1\0\2\126\56\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\2\7\1\242\23\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\3\7"+
    "\1\243\22\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\6\7\1\244\17\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\12\7"+
    "\1\245\3\7\1\246\7\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\3\7\1\247\10\7"+
    "\1\250\11\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\11\7\1\251\14\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\14\7"+
    "\1\252\11\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\6\7\1\253\17\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\21\7"+
    "\1\254\4\7\30\0\7\7\1\234\1\7\2\0\2\7"+
    "\1\0\1\7\1\0\1\7\2\234\1\14\1\0\1\16"+
    "\5\0\4\7\1\255\1\234\1\7\1\234\1\7\1\234"+
    "\3\7\1\234\10\7\30\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\1\256\25\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\1\7"+
    "\1\257\24\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\22\7\1\260\3\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\20\7"+
    "\1\261\5\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\13\7\1\262\12\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\5\7"+
    "\1\263\20\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\1\7\1\264\24\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\3\7"+
    "\1\265\22\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\4\7\1\266\21\7\30\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\10\0\13\7"+
    "\1\267\12\7\30\0\11\7\2\0\2\7\1\0\1\7"+
    "\1\0\3\7\10\0\14\7\1\270\11\7\112\0\1\271"+
    "\110\0\1\272\110\0\1\273\110\0\1\274\35\0\1\275"+
    "\11\0\2\275\1\75\1\0\1\76\12\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\1\275\37\0\13\205\1\0"+
    "\10\205\1\276\1\207\4\205\1\210\56\205\24\0\1\277"+
    "\1\300\1\0\2\301\1\0\2\210\55\0\111\205\13\211"+
    "\1\0\11\211\1\212\1\276\3\211\1\210\167\211\25\0"+
    "\1\300\1\302\2\301\1\0\2\210\56\0\7\7\1\303"+
    "\1\7\2\0\2\7\1\0\1\7\1\0\1\7\2\303"+
    "\1\101\1\0\1\102\5\0\5\7\1\303\1\7\1\303"+
    "\1\7\1\303\3\7\1\303\10\7\27\0\13\215\1\0"+
    "\10\215\1\304\1\217\4\215\1\0\56\215\24\0\1\305"+
    "\64\0\111\215\13\220\1\0\11\220\1\221\1\304\3\220"+
    "\1\0\167\220\26\0\1\306\63\0\7\7\1\303\1\7"+
    "\2\0\2\7\1\0\1\7\1\0\1\7\2\303\1\101"+
    "\1\0\1\102\5\0\4\7\1\255\1\303\1\7\1\303"+
    "\1\7\1\303\3\7\1\303\10\7\27\0\13\224\1\0"+
    "\16\224\1\226\56\224\1\0\5\227\2\0\1\227\1\114"+
    "\5\0\1\227\2\0\1\227\11\0\1\227\1\0\1\227"+
    "\1\0\1\227\2\0\1\227\1\0\1\227\1\114\3\0"+
    "\1\227\37\0\1\230\1\0\1\230\1\0\1\230\3\0"+
    "\1\114\34\0\1\114\43\0\1\231\3\0\1\231\3\0"+
    "\1\114\34\0\1\114\43\0\3\232\1\0\1\232\13\0"+
    "\1\117\70\0\3\232\1\0\1\232\104\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\1\307\1\0\1\310"+
    "\5\0\26\7\54\0\1\237\1\0\2\240\1\0\2\126"+
    "\55\0\24\236\1\311\1\312\63\236\25\241\1\313\1\314"+
    "\62\241\1\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\4\7\1\315\21\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\4\7\1\316"+
    "\21\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\16\7\1\317\7\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\4\7\1\320"+
    "\21\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\3\7\1\321\22\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\15\7\1\322"+
    "\10\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\1\323\25\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\3\7\1\324\22\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\6\7\1\325\17\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\7\7\1\326\16\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\13\7\1\327\12\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\22\7\1\330\3\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\1\331\25\7\30\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\3\7\1\332\22\7\30\0"+
    "\11\7\2\0\2\7\1\0\1\7\1\0\3\7\10\0"+
    "\12\7\1\333\13\7\30\0\11\7\2\0\2\7\1\0"+
    "\1\7\1\0\3\7\10\0\7\7\1\334\16\7\30\0"+
    "\11\7\2\0\2\7\1\0\1\7\1\0\3\7\10\0"+
    "\12\7\1\335\13\7\53\0\1\336\1\0\1\337\107\0"+
    "\1\300\1\0\2\301\1\0\2\210\55\0\24\277\1\340"+
    "\1\341\63\277\25\302\1\342\1\343\62\302\1\0\11\7"+
    "\2\0\2\7\1\0\1\7\1\0\3\7\1\344\1\0"+
    "\1\345\5\0\26\7\27\0\24\305\1\346\1\347\63\305"+
    "\25\306\1\350\1\351\62\306\24\0\1\352\112\0\1\353"+
    "\62\0\24\236\1\354\1\355\174\236\136\241\1\356\1\357"+
    "\62\241\1\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\5\7\1\360\20\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\20\7\1\361"+
    "\5\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\4\7\1\362\21\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\5\7\1\363"+
    "\20\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\10\7\1\364\15\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\3\7\1\365"+
    "\22\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\14\7\1\366\11\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\2\7\1\367"+
    "\23\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\5\7\1\370\20\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\12\7\1\371"+
    "\13\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\2\7\1\372\23\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\1\373\25\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\4\7\1\374\21\7\53\0\1\375\112\0\1\376"+
    "\62\0\24\277\1\377\1\u0100\174\277\136\302\1\u0101\1\u0102"+
    "\62\302\24\0\1\u0103\112\0\1\u0104\62\0\24\305\1\u0105"+
    "\1\u0106\174\305\136\306\1\u0107\1\u0108\62\306\24\0\1\236"+
    "\112\0\1\241\62\0\24\236\1\u0109\1\355\107\236\1\u010a"+
    "\1\355\63\236\25\241\1\356\1\u010b\107\241\1\356\1\u0109"+
    "\62\241\1\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\6\7\1\u010c\17\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\6\7\1\u010d"+
    "\17\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\1\7\1\u010e\24\7\30\0\11\7\2\0"+
    "\2\7\1\0\1\7\1\0\3\7\10\0\1\7\1\u010f"+
    "\24\7\30\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\1\u0110\25\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\6\7\1\u0111\17\7"+
    "\30\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\12\7\1\u0112\13\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\12\7\1\u0113\13\7"+
    "\53\0\1\277\112\0\1\302\62\0\24\277\1\u0114\1\u0100"+
    "\107\277\1\u0115\1\u0100\63\277\25\302\1\u0101\1\u0116\107\302"+
    "\1\u0101\1\u0114\62\302\24\305\1\u0117\1\u0106\107\305\1\u0118"+
    "\1\u0106\63\305\25\306\1\u0107\1\u0119\107\306\1\u0107\1\u0117"+
    "\62\306\25\0\1\u011a\1\0\2\u011b\1\0\2\u011c\55\0"+
    "\24\236\1\u011d\1\355\63\236\25\241\1\356\1\u011e\62\241"+
    "\1\0\11\7\2\0\2\7\1\0\1\7\1\0\3\7"+
    "\10\0\15\7\1\u011f\10\7\30\0\11\7\2\0\2\7"+
    "\1\0\1\7\1\0\3\7\10\0\21\7\1\u0120\4\7"+
    "\27\0\24\277\1\u0121\1\u0100\63\277\25\302\1\u0101\1\u0122"+
    "\62\302\24\305\1\u0123\1\u0106\63\305\25\306\1\u0107\1\u0124"+
    "\62\306\24\236\1\u0125\1\355\63\236\25\241\1\356\1\u0126"+
    "\62\241\1\0\11\7\2\0\2\7\1\0\1\7\1\0"+
    "\3\7\10\0\4\7\1\u0127\21\7\27\0\24\277\1\u0128"+
    "\1\u0100\63\277\25\302\1\u0101\1\u0129\62\302\24\305\1\u012a"+
    "\1\u0106\63\305\25\306\1\u0107\1\u012b\62\306";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15403];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\1\11\1\1\5\11\34\1\13\11"+
    "\4\1\1\11\10\1\4\0\1\11\1\1\1\0\1\11"+
    "\1\1\2\11\3\1\1\11\34\1\3\11\1\1\2\11"+
    "\1\1\5\11\1\1\2\11\1\1\1\11\1\0\3\1"+
    "\1\11\13\1\2\0\1\11\4\1\1\0\3\1\1\11"+
    "\1\0\30\1\4\11\1\0\2\1\1\11\1\0\2\1"+
    "\1\11\2\1\3\0\2\1\1\0\21\1\3\0\2\1"+
    "\12\0\2\1\1\0\15\1\3\0\2\1\4\0\2\1"+
    "\1\0\16\1\1\11\2\1\1\11\1\0\1\11\2\0"+
    "\2\1\4\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return PyTokenTypes.BAD_CHARACTER;
            }
          case 102: break;
          case 2: 
            { return PyTokenTypes.INTEGER_LITERAL;
            }
          case 103: break;
          case 3: 
            { return PyTokenTypes.IDENTIFIER;
            }
          case 104: break;
          case 4: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
            }
          case 105: break;
          case 5: 
            { return PyTokenTypes.DOT;
            }
          case 106: break;
          case 6: 
            { return PyTokenTypes.MINUS;
            }
          case 107: break;
          case 7: 
            { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          case 108: break;
          case 8: 
            { return PyTokenTypes.BACKSLASH;
            }
          case 109: break;
          case 9: 
            { return PyTokenTypes.SPACE;
            }
          case 110: break;
          case 10: 
            { return PyTokenTypes.TAB;
            }
          case 111: break;
          case 11: 
            { return PyTokenTypes.FORMFEED;
            }
          case 112: break;
          case 12: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
            }
          case 113: break;
          case 13: 
            { return PyTokenTypes.SEMICOLON;
            }
          case 114: break;
          case 14: 
            { return PyTokenTypes.PLUS;
            }
          case 115: break;
          case 15: 
            { return PyTokenTypes.EQ;
            }
          case 116: break;
          case 16: 
            { return PyTokenTypes.MULT;
            }
          case 117: break;
          case 17: 
            { return PyTokenTypes.AT;
            }
          case 118: break;
          case 18: 
            { return PyTokenTypes.DIV;
            }
          case 119: break;
          case 19: 
            { return PyTokenTypes.PERC;
            }
          case 120: break;
          case 20: 
            { return PyTokenTypes.AND;
            }
          case 121: break;
          case 21: 
            { return PyTokenTypes.OR;
            }
          case 122: break;
          case 22: 
            { return PyTokenTypes.XOR;
            }
          case 123: break;
          case 23: 
            { return PyTokenTypes.GT;
            }
          case 124: break;
          case 24: 
            { return PyTokenTypes.LT;
            }
          case 125: break;
          case 25: 
            { return PyTokenTypes.TILDE;
            }
          case 126: break;
          case 26: 
            { return PyTokenTypes.LPAR;
            }
          case 127: break;
          case 27: 
            { return PyTokenTypes.RPAR;
            }
          case 128: break;
          case 28: 
            { return PyTokenTypes.LBRACKET;
            }
          case 129: break;
          case 29: 
            { return PyTokenTypes.RBRACKET;
            }
          case 130: break;
          case 30: 
            { return PyTokenTypes.LBRACE;
            }
          case 131: break;
          case 31: 
            { return PyTokenTypes.RBRACE;
            }
          case 132: break;
          case 32: 
            { return PyTokenTypes.COMMA;
            }
          case 133: break;
          case 33: 
            { return PyTokenTypes.COLON;
            }
          case 134: break;
          case 34: 
            { return PyTokenTypes.TICK;
            }
          case 135: break;
          case 35: 
            { yypushback(1); yybegin(YYINITIAL);
            }
          case 136: break;
          case 36: 
            { return PyTokenTypes.END_OF_LINE_COMMENT;
            }
          case 137: break;
          case 37: 
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          case 138: break;
          case 38: 
            { return PyTokenTypes.LINE_BREAK;
            }
          case 139: break;
          case 39: 
            { return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          case 140: break;
          case 40: 
            { return PyTokenTypes.FLOAT_LITERAL;
            }
          case 141: break;
          case 41: 
            { return PyTokenTypes.IMAGINARY_LITERAL;
            }
          case 142: break;
          case 42: 
            { return PyTokenTypes.MINUSEQ;
            }
          case 143: break;
          case 43: 
            { return PyTokenTypes.RARROW;
            }
          case 144: break;
          case 44: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            }
          case 145: break;
          case 45: 
            { return PyTokenTypes.OR_KEYWORD;
            }
          case 146: break;
          case 46: 
            { return PyTokenTypes.IN_KEYWORD;
            }
          case 147: break;
          case 47: 
            { return PyTokenTypes.IS_KEYWORD;
            }
          case 148: break;
          case 48: 
            { return PyTokenTypes.IF_KEYWORD;
            }
          case 149: break;
          case 49: 
            { return PyTokenTypes.PLUSEQ;
            }
          case 150: break;
          case 50: 
            { return PyTokenTypes.EQEQ;
            }
          case 151: break;
          case 51: 
            { return PyTokenTypes.MULTEQ;
            }
          case 152: break;
          case 52: 
            { return PyTokenTypes.EXP;
            }
          case 153: break;
          case 53: 
            { return PyTokenTypes.ATEQ;
            }
          case 154: break;
          case 54: 
            { return PyTokenTypes.DIVEQ;
            }
          case 155: break;
          case 55: 
            { return PyTokenTypes.FLOORDIV;
            }
          case 156: break;
          case 56: 
            { return PyTokenTypes.PERCEQ;
            }
          case 157: break;
          case 57: 
            { return PyTokenTypes.ANDEQ;
            }
          case 158: break;
          case 58: 
            { return PyTokenTypes.OREQ;
            }
          case 159: break;
          case 59: 
            { return PyTokenTypes.XOREQ;
            }
          case 160: break;
          case 60: 
            { return PyTokenTypes.GE;
            }
          case 161: break;
          case 61: 
            { return PyTokenTypes.GTGT;
            }
          case 162: break;
          case 62: 
            { return PyTokenTypes.LE;
            }
          case 163: break;
          case 63: 
            { return PyTokenTypes.NE_OLD;
            }
          case 164: break;
          case 64: 
            { return PyTokenTypes.LTLT;
            }
          case 165: break;
          case 65: 
            { return PyTokenTypes.NE;
            }
          case 166: break;
          case 66: 
            { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
            }
          case 167: break;
          case 67: 
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
            }
          case 168: break;
          case 68: 
            { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          case 169: break;
          case 69: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            }
          case 170: break;
          case 70: 
            { return PyTokenTypes.AND_KEYWORD;
            }
          case 171: break;
          case 71: 
            { return PyTokenTypes.NOT_KEYWORD;
            }
          case 172: break;
          case 72: 
            { return PyTokenTypes.DEL_KEYWORD;
            }
          case 173: break;
          case 73: 
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
            }
          case 174: break;
          case 74: 
            { return PyTokenTypes.TRY_KEYWORD;
            }
          case 175: break;
          case 75: 
            { return PyTokenTypes.FOR_KEYWORD;
            }
          case 176: break;
          case 76: 
            { return PyTokenTypes.EXPEQ;
            }
          case 177: break;
          case 77: 
            { return PyTokenTypes.FLOORDIVEQ;
            }
          case 178: break;
          case 78: 
            { return PyTokenTypes.GTGTEQ;
            }
          case 179: break;
          case 79: 
            { return PyTokenTypes.LTLTEQ;
            }
          case 180: break;
          case 80: 
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          case 181: break;
          case 81: 
            { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
            }
          case 182: break;
          case 82: 
            { return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          case 183: break;
          case 83: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            }
          case 184: break;
          case 84: 
            { return PyTokenTypes.ELSE_KEYWORD;
            }
          case 185: break;
          case 85: 
            { return PyTokenTypes.ELIF_KEYWORD;
            }
          case 186: break;
          case 86: 
            { return PyTokenTypes.FROM_KEYWORD;
            }
          case 187: break;
          case 87: 
            { return PyTokenTypes.PASS_KEYWORD;
            }
          case 188: break;
          case 88: 
            { return PyTokenTypes.RAISE_KEYWORD;
            }
          case 189: break;
          case 89: 
            { return PyTokenTypes.BREAK_KEYWORD;
            }
          case 190: break;
          case 90: 
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
            }
          case 191: break;
          case 91: 
            { return PyTokenTypes.YIELD_KEYWORD;
            }
          case 192: break;
          case 92: 
            { return PyTokenTypes.WHILE_KEYWORD;
            }
          case 193: break;
          case 93: 
            { return PyTokenTypes.ASSERT_KEYWORD;
            }
          case 194: break;
          case 94: 
            { return PyTokenTypes.EXCEPT_KEYWORD;
            }
          case 195: break;
          case 95: 
            { return PyTokenTypes.RETURN_KEYWORD;
            }
          case 196: break;
          case 96: 
            { return PyTokenTypes.LAMBDA_KEYWORD;
            }
          case 197: break;
          case 97: 
            { return PyTokenTypes.IMPORT_KEYWORD;
            }
          case 198: break;
          case 98: 
            { return PyTokenTypes.GLOBAL_KEYWORD;
            }
          case 199: break;
          case 99: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            }
          case 200: break;
          case 100: 
            { return PyTokenTypes.FINALLY_KEYWORD;
            }
          case 201: break;
          case 101: 
            { return PyTokenTypes.CONTINUE_KEYWORD;
            }
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
