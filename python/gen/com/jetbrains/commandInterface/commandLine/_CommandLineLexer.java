/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.jetbrains.commandInterface.commandLine;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.jetbrains.commandInterface.commandLine.CommandLineElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CommandLineLexer.flex</tt>
 */
public class _CommandLineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14400 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\12\1\13\34"+
    "\12\1\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24"+
    "\1\12\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5"+
    "\12\1\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1"+
    "\42\1\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51"+
    "\1\52\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1"+
    "\1\63\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67"+
    "\1\1\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1"+
    "\50\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35"+
    "\1\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1"+
    "\1\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1"+
    "\1\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1"+
    "\127\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12"+
    "\1\135\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141"+
    "\1\24\45\12\1\142\1\12\1\143\1\27\4\12\1\27\1\144\1\145\1\15\1\12\1\15\1\12"+
    "\1\15\1\145\1\70\3\12\1\146\1\1\1\147\1\114\2\1\1\114\5\12\1\26\1\150\1\12"+
    "\1\151\4\12\1\37\1\12\1\152\2\1\1\64\1\12\1\153\1\154\2\12\1\155\1\12\1\76"+
    "\1\114\2\1\1\12\1\112\3\12\1\154\2\1\2\114\1\156\5\1\1\107\2\12\1\146\1\157"+
    "\1\114\2\1\1\160\1\12\1\161\1\41\2\12\1\37\1\1\2\12\1\146\1\1\1\162\1\41\1"+
    "\12\1\153\1\45\5\1\1\163\1\164\14\12\4\1\21\12\1\141\2\12\1\141\1\165\1\12"+
    "\1\153\3\12\1\166\1\167\1\170\1\124\1\167\1\171\1\1\1\172\2\1\1\173\1\1\1"+
    "\174\1\1\1\124\6\1\1\175\1\176\1\177\1\200\1\201\3\1\1\202\147\1\2\12\1\152"+
    "\2\12\1\152\10\12\1\203\1\204\2\12\1\133\3\12\1\205\1\1\1\12\1\112\4\206\4"+
    "\1\1\126\35\1\1\207\2\1\1\210\1\24\4\12\1\211\1\24\4\12\1\134\1\107\1\12\1"+
    "\153\1\24\4\12\1\152\1\1\1\12\1\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1"+
    "\37\2\1\10\12\1\124\4\1\2\12\1\153\20\12\1\124\1\12\1\212\1\1\2\12\1\152\1"+
    "\126\1\12\1\153\4\12\1\37\2\1\1\213\1\214\5\12\1\215\1\12\1\152\1\26\3\1\1"+
    "\213\1\216\1\12\1\30\1\1\3\12\1\146\1\214\2\12\1\146\1\1\1\114\1\1\1\217\1"+
    "\41\1\12\1\37\1\12\1\112\1\1\1\12\1\124\1\47\2\12\1\30\1\126\1\114\1\220\1"+
    "\221\2\12\1\45\1\1\1\222\1\114\1\12\1\223\3\12\1\224\1\225\1\226\1\27\1\65"+
    "\1\227\1\230\1\206\2\12\1\134\1\37\7\12\1\30\1\114\72\12\1\146\1\12\1\231"+
    "\2\12\1\155\20\1\26\12\1\153\6\12\1\76\2\1\1\112\1\232\1\55\1\233\1\234\6"+
    "\12\1\15\1\1\1\160\25\12\1\153\1\1\4\12\1\214\2\12\1\26\2\1\1\155\7\1\1\220"+
    "\7\12\1\124\1\1\1\114\1\24\1\27\1\24\1\27\1\235\4\12\1\152\1\236\1\237\2\1"+
    "\1\240\1\12\1\13\1\241\2\153\2\1\7\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2"+
    "\12\1\1\1\12\1\242\2\12\1\37\1\12\1\153\2\12\1\243\3\1\11\12\1\153\1\114\2"+
    "\12\1\243\1\12\1\155\2\12\1\26\3\12\1\146\11\1\23\12\1\112\1\12\1\37\1\26"+
    "\11\1\1\244\2\12\1\245\1\12\1\37\1\12\1\112\1\12\1\152\4\1\1\12\1\246\1\12"+
    "\1\37\1\12\1\76\4\1\3\12\1\247\4\1\1\70\1\250\1\12\1\146\2\1\1\12\1\124\1"+
    "\12\1\124\2\1\1\123\1\12\1\154\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\160\2\12\1\26\2\1\1\64\1\1\1"+
    "\160\2\12\2\1\1\12\1\45\1\114\1\160\1\12\1\112\1\64\1\1\2\12\1\251\1\160\2"+
    "\12\1\30\1\252\1\253\2\1\1\12\1\21\1\155\5\1\1\254\1\255\1\45\2\12\1\152\1"+
    "\1\1\114\1\72\1\54\1\55\1\67\1\1\1\256\1\15\11\1\3\12\1\154\1\257\1\114\2"+
    "\1\3\12\1\1\1\260\1\114\12\1\2\12\1\152\2\1\1\261\2\1\3\12\1\1\1\262\1\114"+
    "\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1\76\1\1\1\114\26\1\4\12\1\114\1\126\34"+
    "\1\3\12\1\45\20\1\1\55\1\12\1\152\1\1\1\70\1\114\1\1\1\214\1\12\67\1\71\12"+
    "\1\76\16\1\14\12\1\146\53\1\2\12\1\152\75\1\44\12\1\112\33\1\43\12\1\45\1"+
    "\12\1\152\1\114\6\1\1\12\1\153\1\1\3\12\1\1\1\146\1\114\1\160\1\263\1\12\67"+
    "\1\4\12\1\154\1\70\3\1\1\160\4\1\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1"+
    "\1\15\77\1\6\12\1\27\1\124\1\45\1\76\66\1\5\12\1\220\3\12\1\145\1\264\1\265"+
    "\1\266\3\12\1\267\1\270\1\12\1\271\1\272\1\35\24\12\1\273\1\12\1\35\1\134"+
    "\1\12\1\134\1\12\1\220\1\12\1\220\1\152\1\12\1\152\1\12\1\55\1\12\1\55\1\12"+
    "\1\274\3\275\14\12\1\154\3\1\4\12\1\146\1\114\112\1\1\266\1\12\1\276\1\277"+
    "\1\300\1\301\1\302\1\303\1\304\1\155\1\305\1\155\24\1\55\12\1\112\2\1\103"+
    "\12\1\154\15\12\1\153\150\12\1\15\25\1\41\12\1\153\36\1");

  /* The ZZ_CMAP_A table has 3168 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\2\22\0\1\2\1\7\1\14\4\0\1\15\2\0\1\7\2\0\1\10\2\7\12\12\1\6\2\0\1"+
    "\16\3\0\32\5\1\0\1\6\2\0\1\4\13\5\3\0\1\13\6\0\1\1\12\0\1\1\11\0\1\3\12\0"+
    "\1\3\4\0\1\3\5\0\27\3\1\0\12\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3\1"+
    "\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\23\3\1\0\13\3\10"+
    "\0\6\3\1\0\26\3\2\0\1\3\6\0\10\3\10\0\13\3\5\0\3\3\15\0\12\11\4\0\6\3\1\0"+
    "\1\3\17\0\2\3\7\0\2\3\12\11\3\3\2\0\2\3\1\0\16\3\15\0\11\3\13\0\1\3\16\0\12"+
    "\11\6\3\4\0\2\3\4\0\1\3\5\0\6\3\4\0\1\3\11\0\1\3\3\0\1\3\7\0\11\3\7\0\5\3"+
    "\1\0\10\3\6\0\26\3\3\0\1\3\2\0\1\3\7\0\12\3\4\0\12\11\1\3\4\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3\3\0\1\3\20\0\1\3\15\0\2\3\1\0\1\3\5\0\6"+
    "\3\4\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3\17\0\4\3\1\0\1\3\7\0\12\11\2\0\3\3\20\0"+
    "\11\3\1\0\2\3\1\0\2\3\1\0\5\3\3\0\1\3\2\0\1\3\30\0\1\3\13\0\10\3\2\0\1\3\3"+
    "\0\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0"+
    "\14\3\13\0\10\3\1\0\2\3\10\0\3\3\5\0\1\3\4\0\10\3\1\0\6\3\1\0\5\3\3\0\1\3"+
    "\3\0\2\3\15\0\13\3\2\0\1\3\6\0\3\3\10\0\1\3\12\0\6\3\5\0\22\3\3\0\10\3\1\0"+
    "\11\3\1\0\1\3\2\0\7\3\11\0\1\3\1\0\2\3\14\0\12\11\7\0\2\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1"+
    "\0\2\3\11\0\1\3\2\0\5\3\1\0\1\3\11\0\12\11\2\0\14\3\1\0\24\3\13\0\5\3\22\0"+
    "\7\3\4\0\4\3\3\0\1\3\3\0\2\3\7\0\3\3\4\0\15\3\14\0\1\3\1\0\6\3\1\0\1\3\5\0"+
    "\1\3\2\0\13\3\1\0\15\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\1\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\16\3\2\0\6\3\2\0\15\3\2\0\1\3\1\1\17\3\1\0\10\3\7"+
    "\0\15\3\1\0\6\3\23\0\1\3\4\0\1\3\3\0\5\3\2\0\22\3\1\0\1\3\5\0\17\3\1\0\16"+
    "\3\2\0\5\3\13\0\14\3\13\0\1\3\15\0\7\3\7\0\16\3\15\0\2\3\12\11\3\0\3\3\11"+
    "\0\4\3\1\0\4\3\3\0\2\3\11\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\6\3\1\0\7\3\1"+
    "\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\13\1\15\0\2\1\5\0\1\1\17\0\1\1"+
    "\1\0\1\3\15\0\1\3\2\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0\1\3\4\0\2\3\13\0\5\3\6\0\4\3"+
    "\3\0\2\3\14\0\10\3\7\0\10\3\1\0\7\3\1\0\1\1\4\0\2\3\12\0\5\3\5\0\2\3\3\0\7"+
    "\3\6\0\3\3\12\11\2\3\13\0\11\3\2\0\27\3\2\0\7\3\1\0\3\3\1\0\4\3\1\0\4\3\2"+
    "\0\6\3\3\0\1\3\1\0\1\3\2\0\5\3\1\0\12\3\12\11\5\3\1\0\3\3\1\0\10\3\4\0\7\3"+
    "\3\0\1\3\3\0\2\3\1\0\1\3\3\0\2\3\2\0\5\3\2\0\1\3\1\0\1\3\30\0\3\3\3\0\6\3"+
    "\2\0\6\3\2\0\6\3\11\0\7\3\4\0\5\3\3\0\5\3\5\0\1\3\1\0\10\3\1\0\5\3\1\0\1\3"+
    "\1\0\2\3\1\0\2\3\1\0\12\3\6\0\12\3\2\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\14"+
    "\3\1\0\16\3\1\0\2\3\1\0\2\3\1\0\10\3\6\0\4\3\4\0\16\3\2\0\1\3\1\0\14\3\1\0"+
    "\2\3\3\0\1\3\2\0\4\3\1\0\2\3\12\0\10\3\6\0\6\3\1\0\3\3\1\0\12\3\3\0\1\3\12"+
    "\0\4\3\13\0\12\11\1\3\1\0\1\3\3\0\7\3\1\0\1\3\1\0\4\3\1\0\17\3\1\0\2\3\14"+
    "\0\3\3\7\0\4\3\11\0\2\3\1\0\1\3\20\0\4\3\10\0\1\3\13\0\10\3\5\0\3\3\2\0\1"+
    "\3\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3\1\0\21\3\1\0\4\3\2\0\10\3\1\0"+
    "\7\3\1\0\14\3\1\0\4\3\1\0\5\3\1\0\1\3\3\0\14\3\2\0\13\3\1\0\10\3\2\0\22\11"+
    "\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1"+
    "\0\1\3\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3\1\0\4\3\1\0\1\3\1\0\12\3\1"+
    "\0\5\3\1\0\3\3\1\0\5\3\1\0\5\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\2\1"+
    "\1\6\1\7\7\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[25];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\17\0\36\0\55\0\74\0\113\0\132\0\151"+
    "\0\170\0\17\0\17\0\207\0\226\0\245\0\264\0\303"+
    "\0\322\0\341\0\360\0\17\0\17\0\17\0\17\0\17"+
    "\0\17";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[25];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\4\1\2\1\5\1\6"+
    "\2\7\1\5\1\10\1\11\1\12\20\0\2\3\20\0"+
    "\5\4\1\0\1\4\10\0\5\5\1\0\1\5\7\0"+
    "\1\13\1\0\1\13\2\0\1\14\12\0\5\7\1\0"+
    "\1\7\7\0\1\15\1\0\1\15\1\0\1\16\1\0"+
    "\2\17\1\16\6\0\1\20\1\0\1\20\1\0\1\21"+
    "\1\0\2\22\1\21\6\0\1\23\1\0\1\23\13\0"+
    "\1\15\1\0\5\15\1\0\1\15\1\0\1\24\4\0"+
    "\1\16\1\0\5\16\1\0\1\16\1\0\1\25\4\0"+
    "\1\17\1\0\5\17\1\0\1\17\1\0\1\26\4\0"+
    "\1\20\1\0\5\20\1\0\1\20\2\0\1\27\3\0"+
    "\1\21\1\0\5\21\1\0\1\21\2\0\1\30\3\0"+
    "\1\22\1\0\5\22\1\0\1\22\2\0\1\31\5\0"+
    "\2\23\2\0\1\23\1\0\1\23\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\7\0\1\1\6\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[25];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CommandLineLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CommandLineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 15: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 16: break;
          case 3: 
            { return LITERAL_STARTS_FROM_LETTER;
            } 
            // fall through
          case 17: break;
          case 4: 
            { return LITERAL_STARTS_FROM_SYMBOL;
            } 
            // fall through
          case 18: break;
          case 5: 
            { return LITERAL_STARTS_FROM_DIGIT;
            } 
            // fall through
          case 19: break;
          case 6: 
            { return EQ;
            } 
            // fall through
          case 20: break;
          case 7: 
            { return SHORT_OPTION_NAME_TOKEN;
            } 
            // fall through
          case 21: break;
          case 8: 
            { return LONG_OPTION_NAME_TOKEN;
            } 
            // fall through
          case 22: break;
          case 9: 
            { return SPACED_LITERAL_STARTS_FROM_LETTER;
            } 
            // fall through
          case 23: break;
          case 10: 
            { return SPACED_LITERAL_STARTS_FROM_SYMBOL;
            } 
            // fall through
          case 24: break;
          case 11: 
            { return SPACED_LITERAL_STARTS_FROM_DIGIT;
            } 
            // fall through
          case 25: break;
          case 12: 
            { return SINGLE_Q_SPACED_LITERAL_STARTS_FROM_LETTER;
            } 
            // fall through
          case 26: break;
          case 13: 
            { return SINGLE_Q_SPACED_LITERAL_STARTS_FROM_SYMBOL;
            } 
            // fall through
          case 27: break;
          case 14: 
            { return SINGLE_Q_SPACED_LITERAL_STARTS_FROM_DIGIT;
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
