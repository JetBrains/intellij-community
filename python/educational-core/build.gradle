import org.apache.tools.ant.filters.ReplaceTokens
buildscript {
  ext.kotlin_version = '1.0.6'
  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
      url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
    }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.2.0-SNAPSHOT"
  }
}



apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "org.jetbrains.intellij"

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
  main {
    java.srcDir 'src'
    kotlin.srcDirs 'src'
    resources.srcDir 'resources'
  }
  test {
    java.srcDir 'testSrc'
  }
}

buildDir = new File(rootProject.projectDir, "gradleBuild/" + project.name)

intellij {
  pluginName 'educational-core'
  if (project.hasProperty('ideaPath')) {
    localPath ideaPath
  } else {
    if (project.hasProperty('ideaVersion')) {
      version ideaVersion
    }
  }
  updateSinceUntilBuild Boolean.valueOf(updateBuildNumber)
  downloadSources Boolean.valueOf(downloadIdeaSources)
  sandboxDirectory = new File(rootProject.projectDir, "gradleBuild/idea-sandbox")
}

dependencies {
  compile fileTree(dir: 'lib', include: ['*.jar'])
}

processResources {
  filesNotMatching("**/*.png") {
    it.filter(ReplaceTokens, tokens: [
      'VERSION'     : version.toString(),
      'BUILD-NUMBER': buildNumber,
    ])
  }
}

afterEvaluate {
  tasks.getByName('buildPlugin') {
    archiveName = "$intellij.pluginName-$version-${buildNumber}.zip"
  }
}