// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Python.flex

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;



import java.util.BitSet;

public class _PythonLexer implements FlexLexerEx {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int FSTRING = 6;
  public static final int FSTRING_FRAGMENT = 8;
  public static final int FSTRING_FRAGMENT_FORMAT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\1\37\1\42\1\43"+
    "\3\44\1\45\1\44\1\46\1\44\1\47\1\50\2\44"+
    "\1\51\1\44\1\52\1\53\2\44\1\54\2\44\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\45\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\44\1\102\1\103"+
    "\1\104\1\105\1\44\1\106\1\107\1\110\1\44\1\111"+
    "\1\112\1\113\1\114\6\0\1\115\44\0\1\44\12\0"+
    "\1\44\4\0\1\44\5\0\27\44\1\0\37\44\1\0"+
    "\u01ca\44\4\0\14\44\16\0\5\44\7\0\1\44\1\0"+
    "\1\44\21\0\165\44\1\0\2\44\2\0\4\44\1\0"+
    "\1\44\6\0\1\44\1\0\3\44\1\0\1\44\1\0"+
    "\24\44\1\0\123\44\1\0\213\44\1\0\255\44\1\0"+
    "\46\44\2\0\1\44\6\0\51\44\10\0\55\44\1\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\0\1\44\10\0"+
    "\33\44\4\0\4\44\35\0\13\44\5\0\100\44\12\116"+
    "\4\0\146\44\1\0\10\44\2\0\12\44\1\0\6\44"+
    "\12\116\3\44\2\0\1\44\20\0\73\44\2\0\145\44"+
    "\16\0\12\116\54\44\4\0\1\44\2\0\1\44\2\0"+
    "\56\44\22\0\34\44\4\0\13\44\65\0\25\44\1\0"+
    "\10\44\25\0\17\44\1\0\201\44\2\0\12\116\1\0"+
    "\23\44\1\0\10\44\2\0\2\44\2\0\26\44\1\0"+
    "\7\44\1\0\1\44\3\0\4\44\2\0\11\44\2\0"+
    "\2\44\2\0\4\44\10\0\1\44\4\0\2\44\1\0"+
    "\5\44\2\0\12\116\2\44\12\0\1\44\1\0\1\44"+
    "\2\0\3\44\1\0\6\44\4\0\2\44\2\0\26\44"+
    "\1\0\7\44\1\0\2\44\1\0\2\44\1\0\2\44"+
    "\2\0\1\44\1\0\5\44\4\0\2\44\2\0\3\44"+
    "\3\0\1\44\7\0\4\44\1\0\1\44\7\0\12\116"+
    "\6\44\13\0\3\44\1\0\11\44\1\0\3\44\1\0"+
    "\26\44\1\0\7\44\1\0\2\44\1\0\5\44\2\0"+
    "\12\44\1\0\3\44\1\0\3\44\2\0\1\44\17\0"+
    "\4\44\2\0\12\116\11\0\7\44\1\0\3\44\1\0"+
    "\10\44\2\0\2\44\2\0\26\44\1\0\7\44\1\0"+
    "\2\44\1\0\5\44\2\0\11\44\2\0\2\44\2\0"+
    "\3\44\10\0\2\44\4\0\2\44\1\0\5\44\2\0"+
    "\12\116\1\0\1\44\20\0\2\44\1\0\6\44\3\0"+
    "\3\44\1\0\4\44\3\0\2\44\1\0\1\44\1\0"+
    "\2\44\3\0\2\44\3\0\3\44\3\0\14\44\4\0"+
    "\5\44\3\0\3\44\1\0\4\44\2\0\1\44\6\0"+
    "\1\44\16\0\12\116\20\0\15\44\1\0\3\44\1\0"+
    "\27\44\1\0\20\44\3\0\10\44\1\0\3\44\1\0"+
    "\4\44\7\0\2\44\1\0\3\44\5\0\4\44\2\0"+
    "\12\116\20\0\4\44\1\0\10\44\1\0\3\44\1\0"+
    "\27\44\1\0\12\44\1\0\5\44\2\0\11\44\1\0"+
    "\3\44\1\0\4\44\7\0\2\44\7\0\1\44\1\0"+
    "\4\44\2\0\12\116\1\0\2\44\15\0\4\44\1\0"+
    "\10\44\1\0\3\44\1\0\63\44\1\0\3\44\1\0"+
    "\5\44\5\0\4\44\7\0\5\44\2\0\12\116\12\0"+
    "\6\44\2\0\2\44\1\0\22\44\3\0\30\44\1\0"+
    "\11\44\1\0\1\44\2\0\7\44\3\0\1\44\4\0"+
    "\6\44\1\0\1\44\1\0\10\44\6\0\12\116\2\0"+
    "\2\44\15\0\72\44\5\0\17\44\1\0\12\116\47\0"+
    "\2\44\1\0\1\44\1\0\5\44\1\0\30\44\1\0"+
    "\1\44\1\0\27\44\2\0\5\44\1\0\1\44\1\0"+
    "\6\44\2\0\12\116\2\0\4\44\40\0\1\44\27\0"+
    "\2\44\6\0\12\116\13\0\1\44\1\0\1\44\1\0"+
    "\1\44\4\0\12\44\1\0\44\44\4\0\24\44\1\0"+
    "\22\44\1\0\44\44\11\0\1\44\71\0\100\44\12\116"+
    "\6\0\100\44\12\116\4\44\2\0\46\44\1\0\1\44"+
    "\5\0\1\44\2\0\53\44\1\0\115\44\1\0\4\44"+
    "\2\0\7\44\1\0\1\44\1\0\4\44\2\0\51\44"+
    "\1\0\4\44\2\0\41\44\1\0\4\44\2\0\7\44"+
    "\1\0\1\44\1\0\4\44\2\0\17\44\1\0\71\44"+
    "\1\0\4\44\2\0\103\44\2\0\3\44\40\0\20\44"+
    "\20\0\126\44\2\0\6\44\3\0\u016c\44\2\0\21\44"+
    "\1\0\32\44\5\0\113\44\3\0\13\44\7\0\15\44"+
    "\1\0\7\44\13\0\25\44\13\0\24\44\14\0\15\44"+
    "\1\0\3\44\1\0\2\44\14\0\124\44\3\0\1\44"+
    "\4\0\2\44\2\0\12\116\41\0\3\44\2\0\12\116"+
    "\6\0\131\44\7\0\53\44\5\0\106\44\12\0\37\44"+
    "\1\0\14\44\4\0\14\44\12\0\12\116\36\44\2\0"+
    "\5\44\13\0\54\44\4\0\32\44\6\0\12\116\46\0"+
    "\34\44\4\0\77\44\1\0\35\44\2\0\1\44\12\116"+
    "\6\0\12\116\15\0\1\44\10\0\17\44\101\0\114\44"+
    "\4\0\12\116\21\0\11\44\14\0\60\44\12\116\72\44"+
    "\14\0\70\44\10\0\12\116\3\0\3\44\12\116\44\44"+
    "\2\0\11\44\7\0\53\44\2\0\3\44\20\0\3\44"+
    "\1\0\47\44\5\0\372\44\1\0\33\44\2\0\6\44"+
    "\2\0\46\44\2\0\6\44\2\0\10\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\37\44\2\0\65\44"+
    "\1\0\7\44\1\0\1\44\3\0\3\44\1\0\7\44"+
    "\3\0\4\44\2\0\6\44\4\0\15\44\5\0\3\44"+
    "\1\0\7\44\53\0\2\115\25\0\2\44\23\0\1\44"+
    "\34\0\1\44\15\0\1\44\20\0\15\44\63\0\41\44"+
    "\21\0\1\44\4\0\1\44\2\0\12\44\1\0\1\44"+
    "\3\0\5\44\6\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\4\44\1\0\13\44\2\0\4\44\5\0\5\44"+
    "\4\0\1\44\21\0\51\44\u022d\0\64\44\26\0\57\44"+
    "\1\0\57\44\1\0\205\44\6\0\11\44\14\0\46\44"+
    "\1\0\1\44\5\0\1\44\2\0\70\44\7\0\1\44"+
    "\17\0\30\44\11\0\7\44\1\0\7\44\1\0\7\44"+
    "\1\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44"+
    "\1\0\7\44\1\0\40\44\57\0\1\44\325\0\3\44"+
    "\31\0\17\44\1\0\5\44\2\0\5\44\4\0\126\44"+
    "\2\0\2\44\2\0\3\44\1\0\132\44\1\0\4\44"+
    "\5\0\53\44\1\0\136\44\21\0\33\44\65\0\306\44"+
    "\112\0\360\44\20\0\215\44\103\0\56\44\2\0\15\44"+
    "\3\0\20\44\12\116\2\44\24\0\63\44\1\0\12\44"+
    "\1\0\163\44\45\0\11\44\2\0\147\44\2\0\65\44"+
    "\2\0\5\44\60\0\61\44\30\0\64\44\14\0\106\44"+
    "\12\0\12\116\6\0\30\44\3\0\1\44\1\0\3\44"+
    "\12\116\44\44\2\0\44\44\14\0\35\44\3\0\101\44"+
    "\16\0\1\44\12\116\6\0\20\44\12\116\5\44\1\0"+
    "\67\44\11\0\16\44\2\0\12\116\6\0\27\44\3\0"+
    "\111\44\30\0\3\44\2\0\20\44\2\0\5\44\12\0"+
    "\6\44\2\0\6\44\2\0\6\44\11\0\7\44\1\0"+
    "\7\44\1\0\53\44\1\0\14\44\10\0\173\44\1\0"+
    "\2\44\2\0\12\116\6\0\244\44\14\0\27\44\4\0"+
    "\61\44\4\0\u0100\115\156\44\2\0\152\44\46\0\7\44"+
    "\14\0\5\44\5\0\14\44\1\0\15\44\1\0\5\44"+
    "\1\0\1\44\1\0\2\44\1\0\2\44\1\0\154\44"+
    "\41\0\153\44\22\0\100\44\2\0\66\44\50\0\14\44"+
    "\4\0\20\44\20\0\20\44\3\0\2\44\30\0\3\44"+
    "\40\0\5\44\1\0\207\44\23\0\12\116\7\0\32\44"+
    "\4\0\1\44\1\0\32\44\13\0\131\44\3\0\6\44"+
    "\2\0\6\44\2\0\6\44\2\0\3\44\43\0\14\44"+
    "\1\0\32\44\1\0\23\44\1\0\2\44\1\0\17\44"+
    "\2\0\16\44\42\0\173\44\105\0\65\44\210\0\1\44"+
    "\202\0\35\44\3\0\61\44\17\0\1\44\37\0\40\44"+
    "\15\0\36\44\5\0\53\44\5\0\36\44\2\0\44\44"+
    "\4\0\10\44\1\0\5\44\52\0\236\44\2\0\12\116"+
    "\6\0\44\44\4\0\44\44\4\0\50\44\10\0\64\44"+
    "\234\0\67\44\11\0\26\44\12\0\10\44\230\0\6\44"+
    "\2\0\1\44\1\0\54\44\1\0\2\44\3\0\1\44"+
    "\2\0\27\44\12\0\27\44\11\0\37\44\101\0\23\44"+
    "\1\0\2\44\12\0\26\44\12\0\32\44\106\0\70\44"+
    "\6\0\2\44\100\0\4\44\1\0\2\44\5\0\10\44"+
    "\1\0\3\44\1\0\35\44\2\0\3\44\4\0\1\44"+
    "\40\0\35\44\3\0\35\44\43\0\10\44\1\0\36\44"+
    "\31\0\66\44\12\0\26\44\12\0\23\44\15\0\22\44"+
    "\156\0\111\44\67\0\63\44\15\0\63\44\15\0\50\44"+
    "\10\0\12\116\306\0\35\44\12\0\1\44\10\0\41\44"+
    "\217\0\27\44\11\0\107\44\37\0\12\116\17\0\74\44"+
    "\25\0\31\44\7\0\12\116\6\0\65\44\1\0\12\116"+
    "\4\0\3\44\11\0\44\44\2\0\1\44\11\0\105\44"+
    "\4\0\4\44\3\0\12\116\1\44\1\0\1\44\43\0"+
    "\22\44\1\0\45\44\6\0\1\44\101\0\7\44\1\0"+
    "\1\44\1\0\4\44\1\0\17\44\1\0\12\44\7\0"+
    "\73\44\5\0\12\116\6\0\4\44\1\0\10\44\2\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\5\44\1\0\12\44\2\0\2\44\2\0\3\44\2\0"+
    "\1\44\6\0\1\44\5\0\7\44\2\0\7\44\3\0"+
    "\5\44\213\0\113\44\5\0\12\116\4\0\2\44\40\0"+
    "\106\44\1\0\1\44\10\0\12\116\246\0\66\44\2\0"+
    "\11\44\27\0\6\44\42\0\101\44\3\0\1\44\13\0"+
    "\12\116\46\0\71\44\7\0\12\116\66\0\33\44\2\0"+
    "\17\44\4\0\12\116\306\0\73\44\145\0\100\44\12\116"+
    "\25\0\1\44\240\0\10\44\2\0\56\44\2\0\10\44"+
    "\1\0\2\44\33\0\77\44\10\0\1\44\10\0\112\44"+
    "\3\0\1\44\42\0\71\44\7\0\11\44\1\0\55\44"+
    "\1\0\11\44\17\0\12\116\30\0\36\44\2\0\26\44"+
    "\1\0\16\44\111\0\7\44\1\0\2\44\1\0\54\44"+
    "\3\0\1\44\1\0\2\44\1\0\11\44\10\0\12\116"+
    "\6\0\6\44\1\0\2\44\1\0\45\44\1\0\2\44"+
    "\1\0\6\44\7\0\12\116\u0136\0\27\44\11\0\232\44"+
    "\146\0\157\44\21\0\304\44\274\0\57\44\321\0\107\44"+
    "\271\0\71\44\7\0\37\44\1\0\12\116\146\0\36\44"+
    "\2\0\5\44\13\0\67\44\11\0\4\44\14\0\12\116"+
    "\11\0\25\44\5\0\23\44\260\0\100\44\200\0\113\44"+
    "\4\0\71\44\7\0\21\44\100\0\2\44\1\0\1\44"+
    "\34\0\370\44\10\0\363\44\15\0\37\44\61\0\3\44"+
    "\21\0\4\44\10\0\u018c\44\4\0\153\44\5\0\15\44"+
    "\3\0\11\44\7\0\12\44\3\0\2\44\306\0\5\44"+
    "\3\0\6\44\10\0\10\44\2\0\7\44\36\0\4\44"+
    "\224\0\3\44\273\0\125\44\1\0\107\44\1\0\2\44"+
    "\2\0\1\44\2\0\2\44\2\0\4\44\1\0\14\44"+
    "\1\0\1\44\1\0\7\44\1\0\101\44\1\0\4\44"+
    "\2\0\10\44\1\0\7\44\1\0\34\44\1\0\4\44"+
    "\1\0\5\44\1\0\1\44\3\0\7\44\1\0\u0154\44"+
    "\2\0\31\44\1\0\31\44\1\0\37\44\1\0\31\44"+
    "\1\0\37\44\1\0\31\44\1\0\37\44\1\0\31\44"+
    "\1\0\37\44\1\0\31\44\1\0\10\44\2\0\62\116"+
    "\67\44\4\0\62\44\10\0\1\44\16\0\1\44\26\0"+
    "\5\44\1\0\17\44\120\0\7\44\1\0\21\44\2\0"+
    "\7\44\1\0\2\44\1\0\5\44\325\0\55\44\3\0"+
    "\16\44\2\0\12\116\4\0\1\44\u0171\0\60\44\12\116"+
    "\6\0\305\44\13\0\7\44\51\0\114\44\4\0\12\116"+
    "\246\0\4\44\1\0\33\44\1\0\2\44\1\0\1\44"+
    "\2\0\1\44\1\0\12\44\1\0\4\44\1\0\1\44"+
    "\1\0\1\44\6\0\1\44\4\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\3\44\1\0\2\44\1\0\1\44"+
    "\2\0\1\44\1\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\2\44\1\0\1\44\2\0\4\44"+
    "\1\0\7\44\1\0\4\44\1\0\4\44\1\0\1\44"+
    "\1\0\12\44\1\0\21\44\5\0\3\44\1\0\5\44"+
    "\1\0\21\44\164\0\32\44\6\0\32\44\6\0\32\44"+
    "\166\0\327\44\51\0\65\44\13\0\336\44\2\0\u0182\44"+
    "\16\0\u0131\44\37\0\36\44\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\3\31\1\32\1\33\1\34\1\35"+
    "\1\36\20\31\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\45\1\43\2\47\1\23\4\31\1\50"+
    "\1\51\2\52\1\50\1\53\1\54\1\55\2\56\1\57"+
    "\1\60\1\61\2\31\1\62\1\63\10\31\1\64\1\65"+
    "\2\50\1\53\1\66\12\0\1\67\1\6\1\70\2\6"+
    "\1\71\1\72\3\6\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\100\1\22\3\0\1\103\1\22"+
    "\1\0\1\22\2\0\1\22\1\0\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\31\2\114\1\31"+
    "\1\115\14\31\1\116\1\31\1\117\1\120\2\31\1\121"+
    "\6\31\1\122\1\45\1\123\5\45\1\0\6\47\1\124"+
    "\2\0\2\31\2\0\2\52\1\50\1\55\6\56\1\125"+
    "\1\31\2\126\15\31\1\0\1\50\12\0\1\6\1\0"+
    "\1\127\1\130\1\127\1\131\1\0\1\132\1\0\1\22"+
    "\2\0\1\100\3\22\1\0\3\22\1\0\1\133\1\134"+
    "\1\31\2\0\1\31\1\135\4\31\1\136\1\137\4\31"+
    "\1\140\4\31\1\141\3\31\1\142\2\31\1\45\1\0"+
    "\1\143\1\144\1\143\1\0\1\47\2\145\1\31\1\52"+
    "\1\56\2\146\1\31\2\0\4\31\1\147\4\31\1\150"+
    "\2\31\1\50\6\0\1\151\1\0\1\151\1\114\5\31"+
    "\1\152\1\153\2\31\1\154\3\31\1\155\4\31\1\0"+
    "\1\144\1\0\1\144\10\0\1\126\11\31\1\156\10\0"+
    "\1\31\1\157\1\160\6\31\1\161\1\31\1\162\1\163"+
    "\10\0\1\164\1\165\3\31\1\166\1\31\1\167\2\0"+
    "\1\127\1\170\1\31\1\171\1\31\1\172\1\173\1\174"+
    "\1\175\1\143\1\145\1\146\1\31\1\176\1\31\1\177"+
    "\1\0\1\200\1\151\1\31\1\201\1\31\1\202\1\203"+
    "\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u0365\0\u0365\0\u0365\0\u0365"+
    "\0\u03b4\0\u0403\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u0365\0\u0365"+
    "\0\u058e\0\u05dd\0\u0365\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768"+
    "\0\u07b7\0\u0365\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u0942\0\u0991"+
    "\0\u09e0\0\u0365\0\u0365\0\u0365\0\u0a2f\0\u0365\0\u0a7e\0\u0acd"+
    "\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45"+
    "\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u0365\0\u0f6e"+
    "\0\u0365\0\u0365\0\u0365\0\u0365\0\u0fbd\0\u100c\0\u105b\0\u10aa"+
    "\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322"+
    "\0\u0365\0\u1371\0\u13c0\0\u140f\0\u145e\0\u0365\0\u14ad\0\u14fc"+
    "\0\u154b\0\u0365\0\u0365\0\u159a\0\u15e9\0\u1638\0\u0365\0\u0365"+
    "\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0"+
    "\0\u0365\0\u0365\0\u18ff\0\u194e\0\u0365\0\u0365\0\u199d\0\u19ec"+
    "\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64"+
    "\0\u0365\0\u1cb3\0\u0365\0\u1d02\0\u1d51\0\u0365\0\u0365\0\u1da0"+
    "\0\u1def\0\u1e3e\0\u1e8d\0\u0365\0\u0365\0\u0365\0\u0365\0\u1edc"+
    "\0\u1f2b\0\u0365\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u0365"+
    "\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u0365"+
    "\0\u232e\0\u0365\0\u0365\0\u0365\0\u0365\0\u237d\0\u0365\0\u23cc"+
    "\0\u241b\0\u246a\0\u24b9\0\u0365\0\u2508\0\u2557\0\u25a6\0\u25f5"+
    "\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d"+
    "\0\u0942\0\u28bc\0\u0942\0\u0942\0\u290b\0\u295a\0\u0942\0\u29a9"+
    "\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u0365\0\u2b83\0\u0365"+
    "\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb"+
    "\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u0365\0\u2f86\0\u2fd5\0\u3024"+
    "\0\u3073\0\u140f\0\u145e\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe"+
    "\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389\0\u0365\0\u33d8\0\u3427"+
    "\0\u3476\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f"+
    "\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879\0\u194e\0\u38c8"+
    "\0\u0365\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u3a04"+
    "\0\u3a53\0\u3af1\0\u3b40\0\u3b40\0\u3b8f\0\u0365\0\u3bde\0\u0365"+
    "\0\u067b\0\u0365\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8"+
    "\0\u0365\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u0365"+
    "\0\u0365\0\u3fe1\0\u4030\0\u407f\0\u40ce\0\u0942\0\u411d\0\u416c"+
    "\0\u41bb\0\u420a\0\u0942\0\u0942\0\u4259\0\u42a8\0\u42f7\0\u4346"+
    "\0\u0942\0\u4395\0\u43e4\0\u4433\0\u4482\0\u0942\0\u44d1\0\u4520"+
    "\0\u456f\0\u0942\0\u45be\0\u460d\0\u465c\0\u465c\0\u46ab\0\u0365"+
    "\0\u46fa\0\u4749\0\u0365\0\u4798\0\u47e7\0\u4836\0\u0365\0\u0365"+
    "\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae"+
    "\0\u4afd\0\u0942\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u0942\0\u4c88"+
    "\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00"+
    "\0\u4f4f\0\u4f9e\0\u4fed\0\u0365\0\u503c\0\u508b\0\u50da\0\u5129"+
    "\0\u5178\0\u0942\0\u0942\0\u51c7\0\u5216\0\u0942\0\u5265\0\u52b4"+
    "\0\u5303\0\u0942\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd"+
    "\0\u552c\0\u557b\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706\0\u5755"+
    "\0\u57a4\0\u57f3\0\u0365\0\u5842\0\u5891\0\u58e0\0\u592f\0\u597e"+
    "\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u0942\0\u5b09\0\u5b58\0\u5ba7"+
    "\0\u5bf6\0\u5c45\0\u4f4f\0\u5c94\0\u4fed\0\u5ce3\0\u0942\0\u0942"+
    "\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f\0\u5e6e\0\u5ebd\0\u0942\0\u5f0c"+
    "\0\u0942\0\u0942\0\u5f5b\0\u54dd\0\u5faa\0\u557b\0\u5ff9\0\u6048"+
    "\0\u6097\0\u60e6\0\u0942\0\u0942\0\u6135\0\u6184\0\u61d3\0\u0942"+
    "\0\u6222\0\u0942\0\u6271\0\u62c0\0\u630f\0\u0942\0\u635e\0\u0942"+
    "\0\u63ad\0\u0942\0\u0942\0\u0942\0\u0942\0\u465c\0\u0365\0\u0365"+
    "\0\u63fc\0\u0942\0\u644b\0\u0942\0\u630f\0\u0365\0\u0365\0\u649a"+
    "\0\u0942\0\u64e9\0\u0942\0\u0942\0\u0942";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\14\1\17\1\14\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\50\1\47"+
    "\1\51\5\47\1\50\1\51\1\50\1\47\1\52\1\53"+
    "\1\54\1\55\1\47\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\47\1\66\1\47\1\67\1\47"+
    "\1\70\1\71\1\72\1\73\1\47\1\74\1\50\1\75"+
    "\1\47\1\76\1\77\1\100\1\101\1\102\2\14\1\103"+
    "\1\15\1\104\1\14\1\17\1\0\1\20\1\103\1\105"+
    "\1\106\2\103\1\107\23\103\2\110\7\103\1\110\1\103"+
    "\1\110\2\103\1\53\5\103\2\110\14\103\1\110\2\103"+
    "\1\110\7\103\1\0\1\103\1\14\1\15\1\104\1\14"+
    "\1\17\1\14\1\20\1\21\1\111\1\106\1\24\1\25"+
    "\1\112\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\3\40\1\113\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\114\1\47\1\51\5\47\1\114\1\51"+
    "\1\114\1\47\1\52\1\53\1\54\1\55\1\47\1\56"+
    "\1\57\1\115\1\116\1\62\1\63\1\64\1\65\1\47"+
    "\1\66\1\47\1\67\1\47\1\70\1\71\1\72\1\117"+
    "\1\47\1\74\1\114\1\75\1\47\1\76\1\77\1\100"+
    "\1\101\1\102\2\14\2\120\1\121\2\120\1\14\2\120"+
    "\1\122\3\120\1\123\41\120\1\124\32\120\1\125\5\120"+
    "\1\14\1\15\1\126\1\14\1\17\1\14\1\20\1\127"+
    "\1\130\1\106\1\24\1\25\1\131\1\132\1\133\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\40\1\134"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\135\1\47"+
    "\1\136\5\47\1\135\1\136\1\135\1\47\1\137\1\53"+
    "\1\140\1\55\1\47\1\56\1\57\1\141\1\142\1\143"+
    "\1\144\1\145\1\65\1\47\1\66\1\47\1\67\1\47"+
    "\1\70\1\71\1\72\1\146\1\47\1\147\1\135\1\150"+
    "\1\47\1\76\1\151\1\100\1\152\1\102\2\14\2\153"+
    "\1\121\2\153\1\14\2\153\1\122\3\153\1\123\41\153"+
    "\1\154\32\153\1\155\1\153\1\156\3\153\10\0\1\157"+
    "\3\0\1\160\23\0\2\161\7\0\1\161\1\0\1\161"+
    "\10\0\2\161\14\0\1\161\2\0\1\161\13\0\1\162"+
    "\6\0\1\162\20\0\1\162\74\0\1\163\3\0\1\164"+
    "\23\0\2\165\7\0\1\165\1\0\1\165\10\0\2\165"+
    "\14\0\1\165\2\0\1\165\67\0\1\162\50\0\1\166"+
    "\3\0\1\167\23\0\2\170\7\0\1\170\1\0\1\170"+
    "\10\0\2\170\14\0\1\170\2\0\1\170\164\0\1\171"+
    "\62\0\2\172\1\173\2\172\1\0\2\172\1\174\45\172"+
    "\1\175\40\172\2\23\1\0\2\23\1\0\111\23\34\0"+
    "\1\176\116\0\1\177\62\0\2\200\1\173\2\200\1\0"+
    "\6\200\1\201\41\200\1\202\40\200\17\0\1\203\14\0"+
    "\1\204\116\0\1\205\116\0\1\206\1\207\106\0\4\210"+
    "\112\0\1\211\7\0\1\212\105\0\1\213\1\0\3\214"+
    "\1\215\7\0\1\216\1\0\1\217\2\0\1\220\1\221"+
    "\1\0\1\222\2\0\1\223\1\224\4\0\1\225\2\0"+
    "\1\216\2\0\1\217\5\0\1\226\2\0\1\222\4\0"+
    "\1\223\1\0\1\224\32\0\1\213\1\0\4\40\11\0"+
    "\1\217\2\0\1\220\1\221\4\0\1\223\5\0\1\227"+
    "\5\0\1\217\5\0\1\226\7\0\1\223\45\0\1\230"+
    "\115\0\1\231\1\232\1\233\115\0\1\234\116\0\1\235"+
    "\1\236\115\0\1\237\107\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\26\47\5\0\1\47\10\0\1\22\3\0"+
    "\1\26\10\0\4\47\6\0\1\47\2\240\1\47\1\51"+
    "\5\47\1\240\1\51\1\240\1\47\4\0\1\47\1\0"+
    "\1\47\2\240\2\47\1\51\11\47\1\240\1\47\1\51"+
    "\1\240\3\47\5\0\1\47\10\0\1\241\3\0\1\242"+
    "\10\0\4\47\6\0\1\47\2\243\7\47\1\243\1\47"+
    "\1\243\1\47\4\0\1\47\1\0\1\47\2\243\14\47"+
    "\1\243\2\47\1\243\3\47\5\0\1\47\34\0\1\244"+
    "\107\0\4\47\6\0\16\47\4\0\1\47\1\0\14\47"+
    "\1\245\3\47\1\246\5\47\5\0\1\47\10\0\1\22"+
    "\3\0\1\26\10\0\4\47\6\0\1\47\2\240\1\47"+
    "\1\51\5\47\1\240\1\51\1\240\1\47\4\0\1\47"+
    "\1\0\1\47\2\240\2\47\1\51\11\47\1\247\1\47"+
    "\1\51\1\240\3\47\5\0\1\47\10\0\1\22\3\0"+
    "\1\26\10\0\4\47\6\0\1\47\2\240\1\47\1\51"+
    "\5\47\1\240\1\51\1\240\1\47\4\0\1\47\1\0"+
    "\1\47\2\240\2\47\1\51\4\47\1\250\2\47\1\251"+
    "\1\47\1\240\1\47\1\51\1\240\3\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\4\47"+
    "\1\252\21\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\12\47\1\253\11\47\1\254\1\47"+
    "\5\0\1\47\10\0\1\241\3\0\1\242\10\0\4\47"+
    "\6\0\1\47\2\243\7\47\1\243\1\47\1\243\1\47"+
    "\4\0\1\47\1\0\1\47\2\243\5\47\1\255\4\47"+
    "\1\256\1\47\1\257\2\47\1\243\3\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\12\47"+
    "\1\260\13\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\5\47\1\261\5\47\1\262\1\263"+
    "\3\47\1\264\5\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\1\265\25\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\15\47"+
    "\1\266\10\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\17\47\1\267\6\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\1\270"+
    "\25\47\5\0\1\47\10\0\1\22\3\0\1\26\10\0"+
    "\4\47\6\0\1\47\2\240\1\47\1\51\5\47\1\240"+
    "\1\51\1\240\1\47\4\0\1\47\1\0\1\271\2\240"+
    "\1\47\1\272\1\51\11\47\1\240\1\47\1\51\1\240"+
    "\3\47\5\0\1\47\10\0\1\241\3\0\1\242\10\0"+
    "\4\47\6\0\1\47\2\243\7\47\1\243\1\47\1\243"+
    "\1\47\4\0\1\47\1\0\1\47\2\243\14\47\1\273"+
    "\2\47\1\243\3\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\7\47\1\274\16\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\10\47\1\275\15\47\5\0\1\47\34\0\1\276\62\0"+
    "\2\277\1\300\2\277\1\0\2\277\1\301\45\277\1\302"+
    "\40\277\2\106\1\0\2\106\1\0\111\106\2\303\1\300"+
    "\2\303\1\0\6\303\1\304\41\303\1\305\40\303\10\0"+
    "\1\105\3\0\1\107\23\0\2\306\7\0\1\306\1\0"+
    "\1\306\10\0\2\306\14\0\1\306\2\0\1\306\11\0"+
    "\2\307\1\0\2\307\1\0\2\307\1\310\45\307\1\311"+
    "\40\307\2\312\1\0\2\312\1\0\6\312\1\313\41\312"+
    "\1\314\40\312\2\0\1\315\3\0\1\316\2\0\1\317"+
    "\22\0\1\230\72\0\1\111\3\0\1\112\10\0\4\47"+
    "\6\0\1\47\2\320\1\47\1\51\5\47\1\320\1\51"+
    "\1\320\1\47\4\0\1\47\1\0\1\47\2\320\2\47"+
    "\1\51\11\47\1\320\1\47\1\51\1\320\3\47\5\0"+
    "\1\47\10\0\1\111\3\0\1\112\10\0\4\47\6\0"+
    "\1\47\2\320\1\47\1\51\5\47\1\320\1\51\1\320"+
    "\1\47\4\0\1\47\1\0\1\47\2\320\2\47\1\51"+
    "\11\47\1\321\1\47\1\51\1\320\3\47\5\0\1\47"+
    "\10\0\1\111\3\0\1\112\10\0\4\47\6\0\1\47"+
    "\2\320\1\47\1\51\5\47\1\320\1\51\1\320\1\47"+
    "\4\0\1\47\1\0\1\47\2\320\2\47\1\51\4\47"+
    "\1\250\2\47\1\251\1\47\1\320\1\47\1\51\1\320"+
    "\3\47\5\0\1\47\10\0\1\111\3\0\1\112\10\0"+
    "\4\47\6\0\1\47\2\320\1\47\1\51\5\47\1\320"+
    "\1\51\1\320\1\47\4\0\1\47\1\0\1\271\2\320"+
    "\1\47\1\272\1\51\11\47\1\320\1\47\1\51\1\320"+
    "\3\47\5\0\1\47\2\120\1\0\2\120\1\0\2\120"+
    "\1\0\3\120\1\0\41\120\1\322\32\120\1\323\5\120"+
    "\10\0\1\324\122\0\1\325\102\0\47\120\1\326\41\120"+
    "\1\0\1\120\1\0\3\120\111\0\1\120\5\0\1\327"+
    "\2\0\2\327\2\0\1\327\1\0\3\327\1\0\14\327"+
    "\1\0\2\327\1\171\56\327\1\0\3\327\2\330\1\0"+
    "\2\330\1\0\2\330\1\331\45\330\1\332\40\330\2\333"+
    "\1\0\2\333\1\0\6\333\1\334\41\333\1\335\40\333"+
    "\34\0\1\336\72\0\1\130\3\0\1\131\10\0\4\47"+
    "\6\0\1\47\2\337\1\47\1\136\5\47\1\337\1\136"+
    "\1\337\1\47\4\0\1\47\1\0\1\47\2\337\2\47"+
    "\1\136\11\47\1\337\1\47\1\136\1\337\3\47\5\0"+
    "\1\47\10\0\1\340\3\0\1\341\10\0\4\47\6\0"+
    "\1\47\2\342\7\47\1\342\1\47\1\342\1\47\4\0"+
    "\1\47\1\0\1\47\2\342\14\47\1\342\2\47\1\342"+
    "\3\47\5\0\1\47\10\0\1\130\3\0\1\131\10\0"+
    "\4\47\6\0\1\47\2\337\1\47\1\136\5\47\1\337"+
    "\1\136\1\337\1\47\4\0\1\47\1\0\1\47\2\337"+
    "\2\47\1\136\11\47\1\343\1\47\1\136\1\337\3\47"+
    "\5\0\1\47\10\0\1\130\3\0\1\131\10\0\4\47"+
    "\6\0\1\47\2\337\1\47\1\136\5\47\1\337\1\136"+
    "\1\337\1\47\4\0\1\47\1\0\1\47\2\337\2\47"+
    "\1\136\4\47\1\344\2\47\1\345\1\47\1\337\1\47"+
    "\1\136\1\337\3\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\4\47\1\346\21\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\12\47\1\253\11\47\1\347\1\47\5\0\1\47\10\0"+
    "\1\340\3\0\1\341\10\0\4\47\6\0\1\47\2\342"+
    "\7\47\1\342\1\47\1\342\1\47\4\0\1\47\1\0"+
    "\1\47\2\342\5\47\1\350\4\47\1\256\1\47\1\351"+
    "\2\47\1\342\3\47\5\0\1\47\10\0\1\130\3\0"+
    "\1\131\10\0\4\47\6\0\1\47\2\337\1\47\1\136"+
    "\5\47\1\337\1\136\1\337\1\47\4\0\1\47\1\0"+
    "\1\352\2\337\1\47\1\353\1\136\11\47\1\337\1\47"+
    "\1\136\1\337\3\47\5\0\1\47\10\0\1\340\3\0"+
    "\1\341\10\0\4\47\6\0\1\47\2\342\7\47\1\342"+
    "\1\47\1\342\1\47\4\0\1\47\1\0\1\47\2\342"+
    "\14\47\1\354\2\47\1\342\3\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\7\47\1\355"+
    "\1\356\15\47\5\0\1\47\2\153\1\0\2\153\1\0"+
    "\2\153\1\0\3\153\1\0\41\153\1\357\32\153\1\0"+
    "\1\153\1\0\52\153\1\360\41\153\1\0\1\153\1\0"+
    "\3\153\2\157\1\0\2\157\1\0\2\157\1\361\45\157"+
    "\1\362\40\157\2\160\1\0\2\160\1\0\6\160\1\361"+
    "\41\160\1\363\40\160\10\0\1\157\3\0\1\160\23\0"+
    "\2\364\7\0\1\364\1\0\1\364\10\0\2\364\14\0"+
    "\1\364\2\0\1\364\12\0\1\162\4\0\1\162\120\0"+
    "\1\365\122\0\1\366\112\0\1\163\3\0\1\164\23\0"+
    "\2\367\7\0\1\367\1\0\1\367\10\0\2\367\14\0"+
    "\1\367\2\0\1\367\11\0\2\157\1\0\2\157\1\0"+
    "\2\157\1\370\45\157\1\362\40\157\2\160\1\0\2\160"+
    "\1\0\6\160\1\371\41\160\1\363\40\160\10\0\1\166"+
    "\3\0\1\167\23\0\2\372\7\0\1\372\1\0\1\372"+
    "\10\0\2\372\14\0\1\372\2\0\1\372\11\0\2\172"+
    "\1\173\2\172\1\0\2\172\1\373\45\172\1\175\40\172"+
    "\1\0\1\374\1\173\3\0\1\374\1\0\1\375\1\173"+
    "\20\0\1\173\23\0\1\376\40\0\117\172\2\200\1\173"+
    "\2\200\1\0\6\200\1\373\41\200\1\202\40\200\1\0"+
    "\1\374\1\173\3\0\1\374\2\0\1\173\2\0\1\377"+
    "\15\0\1\173\23\0\1\376\40\0\117\200\34\0\1\u0100"+
    "\107\0\4\210\11\0\1\217\2\0\1\220\13\0\1\u0101"+
    "\5\0\1\217\63\0\1\u0102\107\0\4\210\11\0\1\217"+
    "\2\0\1\220\21\0\1\217\52\0\1\213\1\0\3\214"+
    "\1\215\11\0\1\217\2\0\1\220\1\221\4\0\1\223"+
    "\5\0\1\225\5\0\1\217\5\0\1\226\7\0\1\223"+
    "\34\0\1\213\1\0\4\215\11\0\1\217\2\0\1\220"+
    "\13\0\1\u0103\5\0\1\217\54\0\2\u0104\32\0\1\u0105"+
    "\55\0\1\u0106\1\0\1\u0106\2\0\4\u0107\134\0\1\u0108"+
    "\4\0\1\u0109\31\0\1\u0109\36\0\3\u010a\31\0\1\u010b"+
    "\103\0\1\u010c\26\0\1\u010d\46\0\4\u010e\6\0\5\u010e"+
    "\15\0\1\u010f\1\0\6\u010e\53\0\3\214\1\215\141\0"+
    "\1\u0109\21\0\1\u0108\7\0\1\u0109\36\0\4\40\122\0"+
    "\1\u0110\116\0\1\u0111\72\0\1\22\3\0\1\26\10\0"+
    "\4\47\6\0\1\47\2\u0112\1\47\1\51\5\47\1\u0112"+
    "\1\51\1\u0112\1\47\4\0\1\47\1\0\1\47\2\u0112"+
    "\2\47\1\51\11\47\1\u0112\1\47\1\51\1\u0112\3\47"+
    "\5\0\1\47\10\0\1\u0113\122\0\1\u0114\112\0\1\241"+
    "\3\0\1\242\10\0\4\47\6\0\1\47\2\u0115\7\47"+
    "\1\u0115\1\47\1\u0115\1\47\4\0\1\47\1\0\1\47"+
    "\2\u0115\14\47\1\u0115\2\47\1\u0115\3\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\3\47"+
    "\1\u0116\22\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\20\47\1\u0117\5\47\5\0\1\47"+
    "\10\0\1\22\3\0\1\26\10\0\4\47\6\0\1\47"+
    "\2\u0112\1\47\1\51\5\47\1\u0112\1\51\1\u0112\1\47"+
    "\4\0\1\47\1\0\1\47\2\u0112\1\47\1\u0118\1\51"+
    "\11\47\1\u0112\1\47\1\51\1\u0112\3\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\1\u0119"+
    "\25\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\14\47\1\u011a\11\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\5\47\1\u011b"+
    "\4\47\1\u011c\13\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\10\47\1\u011d\7\47\1\u011e"+
    "\5\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\2\47\1\u011f\23\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\14\47\1\u0120"+
    "\11\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\17\47\1\u0121\6\47\5\0\1\47\10\0"+
    "\1\241\3\0\1\242\10\0\4\47\6\0\1\47\2\u0115"+
    "\7\47\1\u0115\1\47\1\u0115\1\47\4\0\1\47\1\0"+
    "\1\47\2\u0115\12\47\1\u0122\1\47\1\u0115\2\47\1\u0115"+
    "\3\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\15\47\1\u0123\10\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\16\47\1\u0124"+
    "\7\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\13\47\1\u0125\12\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\21\47\1\u0126"+
    "\4\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\20\47\1\u0127\5\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\10\47\1\u0128"+
    "\15\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\21\47\1\u0129\4\47\5\0\1\47\10\0"+
    "\1\241\3\0\1\242\10\0\4\47\6\0\1\47\2\u0115"+
    "\7\47\1\u0115\1\47\1\u0115\1\47\4\0\1\47\1\0"+
    "\1\47\2\u0115\14\47\1\u0115\2\47\1\u0115\2\47\1\u012a"+
    "\5\0\1\47\25\0\4\47\6\0\16\47\4\0\1\47"+
    "\1\0\10\47\1\u012b\15\47\5\0\1\47\25\0\4\47"+
    "\6\0\16\47\4\0\1\47\1\0\4\47\1\u012c\21\47"+
    "\5\0\1\47\2\277\1\300\2\277\1\0\2\277\1\u012d"+
    "\45\277\1\302\40\277\1\0\1\u012e\1\300\3\0\1\u012e"+
    "\1\0\1\u012f\1\300\20\0\1\300\23\0\1\u0130\40\0"+
    "\117\277\2\303\1\300\2\303\1\0\6\303\1\u012d\41\303"+
    "\1\305\40\303\1\0\1\u012e\1\300\3\0\1\u012e\2\0"+
    "\1\300\2\0\1\u0131\15\0\1\300\23\0\1\u0130\40\0"+
    "\117\303\10\0\1\105\3\0\1\107\23\0\2\u0132\7\0"+
    "\1\u0132\1\0\1\u0132\10\0\2\u0132\14\0\1\u0132\2\0"+
    "\1\u0132\11\0\2\307\1\0\2\307\1\0\2\307\1\u0133"+
    "\45\307\1\311\40\307\10\0\1\u0134\106\0\117\307\2\312"+
    "\1\0\2\312\1\0\6\312\1\u0133\41\312\1\314\40\312"+
    "\14\0\1\u0135\102\0\117\312\2\0\1\315\3\0\1\316"+
    "\2\0\1\317\105\0\2\317\1\315\2\317\1\0\111\317"+
    "\10\0\1\111\3\0\1\112\10\0\4\47\6\0\1\47"+
    "\2\u0136\1\47\1\51\5\47\1\u0136\1\51\1\u0136\1\47"+
    "\4\0\1\47\1\0\1\47\2\u0136\2\47\1\51\11\47"+
    "\1\u0136\1\47\1\51\1\u0136\3\47\5\0\1\47\10\0"+
    "\1\111\3\0\1\112\10\0\4\47\6\0\1\47\2\u0136"+
    "\1\47\1\51\5\47\1\u0136\1\51\1\u0136\1\47\4\0"+
    "\1\47\1\0\1\47\2\u0136\1\47\1\u0118\1\51\11\47"+
    "\1\u0136\1\47\1\51\1\u0136\3\47\5\0\1\47\10\0"+
    "\1\u0137\122\0\1\u0137\102\0\2\120\1\0\2\120\1\0"+
    "\2\120\1\0\3\120\1\0\41\120\1\322\32\120\1\326"+
    "\5\120\1\327\2\0\2\327\2\0\1\327\1\0\3\327"+
    "\1\0\14\327\1\0\2\327\1\0\56\327\1\0\3\327"+
    "\2\330\1\0\2\330\1\0\2\330\1\u0138\45\330\1\332"+
    "\40\330\10\0\1\u0139\106\0\117\330\2\333\1\0\2\333"+
    "\1\0\6\333\1\u0138\41\333\1\335\40\333\14\0\1\u013a"+
    "\102\0\117\333\10\0\1\130\3\0\1\131\10\0\4\47"+
    "\6\0\1\47\2\u013b\1\47\1\136\5\47\1\u013b\1\136"+
    "\1\u013b\1\47\4\0\1\47\1\0\1\47\2\u013b\2\47"+
    "\1\136\11\47\1\u013b\1\47\1\136\1\u013b\3\47\5\0"+
    "\1\47\10\0\1\u013c\122\0\1\u013d\112\0\1\340\3\0"+
    "\1\341\10\0\4\47\6\0\1\47\2\u013e\7\47\1\u013e"+
    "\1\47\1\u013e\1\47\4\0\1\47\1\0\1\47\2\u013e"+
    "\14\47\1\u013e\2\47\1\u013e\3\47\5\0\1\47\10\0"+
    "\1\130\3\0\1\131\10\0\4\47\6\0\1\47\2\u013b"+
    "\1\47\1\136\5\47\1\u013b\1\136\1\u013b\1\47\4\0"+
    "\1\47\1\0\1\47\2\u013b\1\47\1\u013f\1\136\11\47"+
    "\1\u013b\1\47\1\136\1\u013b\3\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\1\u0140\25\47"+
    "\5\0\1\47\25\0\4\47\6\0\16\47\4\0\1\47"+
    "\1\0\14\47\1\u0141\11\47\5\0\1\47\25\0\4\47"+
    "\6\0\16\47\4\0\1\47\1\0\5\47\1\u0142\4\47"+
    "\1\u011c\13\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\2\47\1\u0143\23\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\14\47"+
    "\1\u0144\11\47\5\0\1\47\10\0\1\340\3\0\1\341"+
    "\10\0\4\47\6\0\1\47\2\u013e\7\47\1\u013e\1\47"+
    "\1\u013e\1\47\4\0\1\47\1\0\1\47\2\u013e\12\47"+
    "\1\u0122\1\47\1\u013e\2\47\1\u013e\3\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\10\47"+
    "\1\u0145\15\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\21\47\1\u0146\4\47\5\0\1\47"+
    "\10\0\1\340\3\0\1\341\10\0\4\47\6\0\1\47"+
    "\2\u013e\7\47\1\u013e\1\47\1\u013e\1\47\4\0\1\47"+
    "\1\0\1\47\2\u013e\14\47\1\u013e\2\47\1\u013e\2\47"+
    "\1\u0147\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\10\47\1\u0148\15\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\21\47\1\u0149"+
    "\4\47\5\0\1\47\2\153\1\0\2\153\1\0\2\153"+
    "\1\0\3\153\1\0\41\153\1\357\32\153\1\u014a\1\153"+
    "\1\0\3\153\117\157\117\160\10\0\1\157\3\0\1\160"+
    "\23\0\2\u014b\7\0\1\u014b\1\0\1\u014b\10\0\2\u014b"+
    "\14\0\1\u014b\2\0\1\u014b\21\0\1\u014c\122\0\1\u014d"+
    "\112\0\1\163\3\0\1\164\23\0\2\u014e\7\0\1\u014e"+
    "\1\0\1\u014e\10\0\2\u014e\14\0\1\u014e\2\0\1\u014e"+
    "\21\0\1\166\3\0\1\167\23\0\2\u014f\7\0\1\u014f"+
    "\1\0\1\u014f\10\0\2\u014f\14\0\1\u014f\2\0\1\u014f"+
    "\12\0\1\374\1\173\3\0\1\374\2\0\1\173\20\0"+
    "\1\173\23\0\1\376\40\0\10\375\1\u0150\45\375\1\u0151"+
    "\40\375\14\377\1\u0152\41\377\1\u0153\40\377\25\0\4\215"+
    "\113\0\2\u0104\17\0\1\221\4\0\1\223\5\0\1\u0105"+
    "\13\0\1\226\7\0\1\223\36\0\2\u0104\115\0\4\u0107"+
    "\113\0\4\u0107\14\0\1\220\13\0\1\u0106\110\0\1\u0109"+
    "\31\0\1\u0109\36\0\3\u010a\16\0\1\221\4\0\1\223"+
    "\5\0\1\u010b\13\0\1\226\7\0\1\223\36\0\3\u010a"+
    "\135\0\1\u0109\145\0\1\u0109\46\0\4\u010e\6\0\5\u010e"+
    "\2\0\1\221\4\0\1\223\5\0\1\u010f\1\0\6\u010e"+
    "\4\0\1\226\7\0\1\223\36\0\4\u010e\6\0\5\u010e"+
    "\17\0\6\u010e\36\0\1\22\3\0\1\26\10\0\4\47"+
    "\6\0\4\47\1\51\6\47\1\51\2\47\4\0\1\47"+
    "\1\0\5\47\1\51\13\47\1\51\4\47\5\0\1\47"+
    "\10\0\1\u0154\122\0\1\u0154\112\0\1\241\3\0\1\242"+
    "\10\0\4\47\6\0\1\47\2\u0155\7\47\1\u0155\1\47"+
    "\1\u0155\1\47\4\0\1\47\1\0\1\47\2\u0155\14\47"+
    "\1\u0155\2\47\1\u0155\3\47\5\0\1\47\25\0\4\47"+
    "\6\0\16\47\4\0\1\47\1\0\4\47\1\u0156\21\47"+
    "\5\0\1\47\25\0\4\47\6\0\16\47\4\0\1\47"+
    "\1\0\1\u0157\25\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\20\47\1\u0158\5\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\21\47\1\u0159\4\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\5\47\1\u015a\20\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\4\47\1\u015b\21\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\4\47\1\u015c\21\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\1\u015d\25\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\13\47\1\u015e\12\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\1\47"+
    "\1\u015f\24\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\15\47\1\u0160\10\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\1\47"+
    "\1\u0161\24\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\20\47\1\u0162\5\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\20\47"+
    "\1\u0163\5\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\22\47\1\u0164\3\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\12\47"+
    "\1\u0165\13\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\12\47\1\u0166\13\47\5\0\1\47"+
    "\1\0\1\u012e\1\300\3\0\1\u012e\2\0\1\300\20\0"+
    "\1\300\23\0\1\u0130\40\0\10\u012f\1\u0167\45\u012f\1\u0168"+
    "\40\u012f\14\u0131\1\u0169\41\u0131\1\u016a\40\u0131\10\0\1\105"+
    "\3\0\1\107\102\0\10\u0134\1\u016b\45\u0134\1\u016c\40\u0134"+
    "\14\u0135\1\u016d\41\u0135\1\u016e\40\u0135\10\0\1\111\3\0"+
    "\1\112\10\0\4\47\6\0\4\47\1\51\6\47\1\51"+
    "\2\47\4\0\1\47\1\0\5\47\1\51\13\47\1\51"+
    "\4\47\5\0\1\47\10\u0139\1\u016f\45\u0139\1\u0170\40\u0139"+
    "\14\u013a\1\u0171\41\u013a\1\u0172\40\u013a\10\0\1\130\3\0"+
    "\1\131\10\0\4\47\6\0\4\47\1\136\6\47\1\136"+
    "\2\47\4\0\1\47\1\0\5\47\1\136\13\47\1\136"+
    "\4\47\5\0\1\47\10\0\1\u0173\122\0\1\u0173\112\0"+
    "\1\340\3\0\1\341\10\0\4\47\6\0\1\47\2\u0174"+
    "\7\47\1\u0174\1\47\1\u0174\1\47\4\0\1\47\1\0"+
    "\1\47\2\u0174\14\47\1\u0174\2\47\1\u0174\3\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\1\u0175\25\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\20\47\1\u0176\5\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\21\47"+
    "\1\u0177\4\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\4\47\1\u0178\21\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\1\u0179"+
    "\25\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\20\47\1\u017a\5\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\22\47\1\u017b"+
    "\3\47\5\0\1\47\25\0\4\47\6\0\16\47\4\0"+
    "\1\47\1\0\12\47\1\u017c\13\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\7\47\1\u017d"+
    "\16\47\5\0\1\47\2\153\1\0\2\153\1\0\1\u014a"+
    "\1\153\1\0\3\153\1\0\10\153\4\u014a\6\153\16\u014a"+
    "\1\153\1\357\2\153\1\u014a\1\153\26\u014a\1\0\4\153"+
    "\1\u014a\10\0\1\157\3\0\1\160\102\0\10\u014c\1\u017e"+
    "\45\u014c\1\u017f\40\u014c\14\u014d\1\u0180\41\u014d\1\u0181\40\u014d"+
    "\10\0\1\163\3\0\1\164\112\0\1\166\3\0\1\167"+
    "\102\0\10\375\1\u0182\45\375\1\u0183\157\375\14\377\1\u0184"+
    "\41\377\1\u0185\157\377\10\0\1\241\3\0\1\242\10\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\26\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\17\47\1\u0186\6\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\11\47\1\u0187\14\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\20\47\1\u0188\5\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\10\47\1\u0189\15\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\16\47\1\u018a\7\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\12\47\1\u018b\13\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\1\u018c\25\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\17\47\1\u018d\6\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\3\47"+
    "\1\u018e\22\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\4\47\1\u018f\21\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\17\47"+
    "\1\u0190\6\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\4\47\1\u0191\21\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\3\47"+
    "\1\u0192\22\47\5\0\1\47\10\u012f\1\u0193\45\u012f\1\u0194"+
    "\157\u012f\14\u0131\1\u0195\41\u0131\1\u0196\157\u0131\10\u0134\1\u0197"+
    "\45\u0134\1\u016c\157\u0134\14\u0135\1\u0198\41\u0135\1\u016e\157\u0135"+
    "\10\u0139\1\u0199\45\u0139\1\u0170\157\u0139\14\u013a\1\u019a\41\u013a"+
    "\1\u0172\157\u013a\10\0\1\340\3\0\1\341\10\0\4\47"+
    "\6\0\16\47\4\0\1\47\1\0\26\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\11\47"+
    "\1\u019b\14\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\20\47\1\u019c\5\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\10\47"+
    "\1\u019d\15\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\16\47\1\u019e\7\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\12\47"+
    "\1\u019f\13\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\4\47\1\u01a0\21\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\17\47"+
    "\1\u01a1\6\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\4\47\1\u01a2\21\47\5\0\1\47"+
    "\10\u014c\1\u01a3\45\u014c\1\u017f\157\u014c\14\u014d\1\u01a4\41\u014d"+
    "\1\u0181\157\u014d\10\375\1\u01a5\45\375\1\u0183\40\375\14\377"+
    "\1\u01a5\41\377\1\u0185\40\377\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\21\47\1\u01a6\4\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\14\47"+
    "\1\u01a7\11\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\21\47\1\u01a8\4\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\12\47"+
    "\1\u01a9\13\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\12\47\1\u01aa\13\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\21\47"+
    "\1\u01ab\4\47\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\1\u01ac\25\47\5\0\1\47\25\0"+
    "\4\47\6\0\16\47\4\0\1\47\1\0\14\47\1\u01ad"+
    "\11\47\5\0\1\47\10\u012f\1\u01ae\45\u012f\1\u0194\40\u012f"+
    "\14\u0131\1\u01ae\41\u0131\1\u0196\40\u0131\10\u0134\1\u01af\45\u0134"+
    "\1\u016c\40\u0134\14\u0135\1\u01af\41\u0135\1\u016e\40\u0135\10\u0139"+
    "\1\u01b0\45\u0139\1\u0170\40\u0139\14\u013a\1\u01b0\41\u013a\1\u0172"+
    "\40\u013a\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\14\47\1\u01b1\11\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\21\47\1\u01b2\4\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\12\47\1\u01b3\13\47\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\14\47\1\u01b4\11\47\5\0"+
    "\1\47\10\u014c\1\361\45\u014c\1\u017f\40\u014c\14\u014d\1\361"+
    "\41\u014d\1\u0181\40\u014d\1\0\1\u01b5\1\u01b6\3\0\1\u01b5"+
    "\2\0\1\u01b6\20\0\1\u01b6\23\0\1\u01b7\65\0\4\47"+
    "\6\0\16\47\4\0\1\47\1\0\22\47\1\u01b8\3\47"+
    "\5\0\1\47\25\0\4\47\6\0\16\47\4\0\1\47"+
    "\1\0\25\47\1\u01b9\5\0\1\47\25\0\4\47\6\0"+
    "\16\47\4\0\1\47\1\0\22\47\1\u01ba\3\47\5\0"+
    "\1\47\25\0\4\47\6\0\16\47\4\0\1\47\1\0"+
    "\25\47\1\u01bb\5\0\1\47\25\0\4\47\6\0\16\47"+
    "\4\0\1\47\1\0\4\47\1\u01bc\21\47\5\0\1\47"+
    "\25\0\4\47\6\0\16\47\4\0\1\47\1\0\4\47"+
    "\1\u01bd\21\47\5\0\1\47";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25912];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\5\11\6\1\2\11\2\1\1\11\6\1\1\11"+
    "\7\1\3\11\1\1\1\11\20\1\1\11\1\1\4\11"+
    "\14\1\1\11\4\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\2\11\2\1\2\11\2\1\1\0\1\1\3\0"+
    "\2\1\1\0\1\11\1\1\1\11\2\1\2\11\4\1"+
    "\4\11\2\1\1\11\2\1\3\0\1\11\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\11\1\1\4\11\1\1"+
    "\1\11\4\1\1\11\31\1\1\11\1\1\1\11\5\1"+
    "\1\0\6\1\1\11\2\0\2\1\2\0\12\1\1\11"+
    "\20\1\1\0\1\1\1\11\2\1\4\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\1\2\0\2\1\1\11\1\1\1\0\3\1"+
    "\1\0\2\11\1\1\2\0\31\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\3\1\2\11\3\1\2\0\15\1"+
    "\1\0\2\1\3\0\1\1\1\0\1\1\1\11\22\1"+
    "\1\0\1\1\1\0\1\1\10\0\1\11\12\1\10\0"+
    "\15\1\10\0\10\1\2\0\12\1\2\11\4\1\1\0"+
    "\2\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private final PythonLexerKind myKind;
private boolean isConsole() {
  return myKind == PythonLexerKind.CONSOLE;
}
private final PyLexerFStringHelper fStringHelper = new PyLexerFStringHelper(this);


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PythonLexer(java.io.Reader in, PythonLexerKind kind) {
    this.myKind = kind;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    fStringHelper.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PyTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 133: break;
          case 2:
            { return PyTokenTypes.TAB;
            }
          // fall through
          case 134: break;
          case 3:
            { if (zzCurrentPos == 0 && !isConsole()) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
            }
          // fall through
          case 135: break;
          case 4:
            { return PyTokenTypes.FORMFEED;
            }
          // fall through
          case 136: break;
          case 5:
            { return PyTokenTypes.SPACE;
            }
          // fall through
          case 137: break;
          case 6:
            { if (zzInput == YYEOF && zzStartRead == 0 && !isConsole()) return PyTokenTypes.DOCSTRING;
                                  else return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 138: break;
          case 7:
            { if (zzCurrentPos == 0 && !isConsole()) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
            }
          // fall through
          case 139: break;
          case 8:
            { return PyTokenTypes.PERC;
            }
          // fall through
          case 140: break;
          case 9:
            { return PyTokenTypes.AND;
            }
          // fall through
          case 141: break;
          case 10:
            { return PyTokenTypes.LPAR;
            }
          // fall through
          case 142: break;
          case 11:
            { return PyTokenTypes.RPAR;
            }
          // fall through
          case 143: break;
          case 12:
            { return PyTokenTypes.MULT;
            }
          // fall through
          case 144: break;
          case 13:
            { return PyTokenTypes.PLUS;
            }
          // fall through
          case 145: break;
          case 14:
            { return PyTokenTypes.COMMA;
            }
          // fall through
          case 146: break;
          case 15:
            { return PyTokenTypes.MINUS;
            }
          // fall through
          case 147: break;
          case 16:
            { return PyTokenTypes.DOT;
            }
          // fall through
          case 148: break;
          case 17:
            { return PyTokenTypes.DIV;
            }
          // fall through
          case 149: break;
          case 18:
            { return PyTokenTypes.INTEGER_LITERAL;
            }
          // fall through
          case 150: break;
          case 19:
            { return PyTokenTypes.COLON;
            }
          // fall through
          case 151: break;
          case 20:
            { return PyTokenTypes.SEMICOLON;
            }
          // fall through
          case 152: break;
          case 21:
            { return PyTokenTypes.LT;
            }
          // fall through
          case 153: break;
          case 22:
            { return PyTokenTypes.EQ;
            }
          // fall through
          case 154: break;
          case 23:
            { return PyTokenTypes.GT;
            }
          // fall through
          case 155: break;
          case 24:
            { return PyTokenTypes.AT;
            }
          // fall through
          case 156: break;
          case 25:
            { return PyTokenTypes.IDENTIFIER;
            }
          // fall through
          case 157: break;
          case 26:
            { return PyTokenTypes.LBRACKET;
            }
          // fall through
          case 158: break;
          case 27:
            { return PyTokenTypes.BACKSLASH;
            }
          // fall through
          case 159: break;
          case 28:
            { return PyTokenTypes.RBRACKET;
            }
          // fall through
          case 160: break;
          case 29:
            { return PyTokenTypes.XOR;
            }
          // fall through
          case 161: break;
          case 30:
            { return PyTokenTypes.TICK;
            }
          // fall through
          case 162: break;
          case 31:
            { return PyTokenTypes.LBRACE;
            }
          // fall through
          case 163: break;
          case 32:
            { return PyTokenTypes.OR;
            }
          // fall through
          case 164: break;
          case 33:
            { return PyTokenTypes.RBRACE;
            }
          // fall through
          case 165: break;
          case 34:
            { return PyTokenTypes.TILDE;
            }
          // fall through
          case 166: break;
          case 35:
            { yypushback(1); yybegin(YYINITIAL);
            }
          // fall through
          case 167: break;
          case 36:
            { return PyTokenTypes.LINE_BREAK;
            }
          // fall through
          case 168: break;
          case 37:
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                      else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 169: break;
          case 38:
            { return PyTokenTypes.END_OF_LINE_COMMENT;
            }
          // fall through
          case 170: break;
          case 39:
            { return PyTokenTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 171: break;
          case 40:
            { return fStringHelper.getTextTokenType();
            }
          // fall through
          case 172: break;
          case 41:
            { return fStringHelper.handleLineBreakInLiteralText();
            }
          // fall through
          case 173: break;
          case 42:
            { return fStringHelper.handleFStringEnd();
            }
          // fall through
          case 174: break;
          case 43:
            { return fStringHelper.handleFragmentStart();
            }
          // fall through
          case 175: break;
          case 44:
            { return fStringHelper.handleLineBreakInFragment();
            }
          // fall through
          case 176: break;
          case 45:
            { return PyTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION;
            }
          // fall through
          case 177: break;
          case 46:
            { return fStringHelper.handleStringLiteral(PyTokenTypes.SINGLE_QUOTED_STRING);
            }
          // fall through
          case 178: break;
          case 47:
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LPAR);
            }
          // fall through
          case 179: break;
          case 48:
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RPAR);
            }
          // fall through
          case 180: break;
          case 49:
            { return fStringHelper.handleColonInFragment();
            }
          // fall through
          case 181: break;
          case 50:
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LBRACKET);
            }
          // fall through
          case 182: break;
          case 51:
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RBRACKET);
            }
          // fall through
          case 183: break;
          case 52:
            { return fStringHelper.handleLeftBracketInFragment(PyTokenTypes.LBRACE);
            }
          // fall through
          case 184: break;
          case 53:
            { return fStringHelper.handleRightBracketInFragment(PyTokenTypes.RBRACE);
            }
          // fall through
          case 185: break;
          case 54:
            { return fStringHelper.handleFragmentEnd();
            }
          // fall through
          case 186: break;
          case 55:
            { return PyTokenTypes.NE;
            }
          // fall through
          case 187: break;
          case 56:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.SINGLE_QUOTED_STRING;
                                           return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 188: break;
          case 57:
            { return PyTokenTypes.PERCEQ;
            }
          // fall through
          case 189: break;
          case 58:
            { return PyTokenTypes.ANDEQ;
            }
          // fall through
          case 190: break;
          case 59:
            { return PyTokenTypes.EXP;
            }
          // fall through
          case 191: break;
          case 60:
            { return PyTokenTypes.MULTEQ;
            }
          // fall through
          case 192: break;
          case 61:
            { return PyTokenTypes.PLUSEQ;
            }
          // fall through
          case 193: break;
          case 62:
            { return PyTokenTypes.MINUSEQ;
            }
          // fall through
          case 194: break;
          case 63:
            { return PyTokenTypes.RARROW;
            }
          // fall through
          case 195: break;
          case 64:
            { return PyTokenTypes.FLOAT_LITERAL;
            }
          // fall through
          case 196: break;
          case 65:
            { return PyTokenTypes.FLOORDIV;
            }
          // fall through
          case 197: break;
          case 66:
            { return PyTokenTypes.DIVEQ;
            }
          // fall through
          case 198: break;
          case 67:
            { return PyTokenTypes.IMAGINARY_LITERAL;
            }
          // fall through
          case 199: break;
          case 68:
            { return PyTokenTypes.COLONEQ;
            }
          // fall through
          case 200: break;
          case 69:
            { return PyTokenTypes.LTLT;
            }
          // fall through
          case 201: break;
          case 70:
            { return PyTokenTypes.LE;
            }
          // fall through
          case 202: break;
          case 71:
            { return PyTokenTypes.NE_OLD;
            }
          // fall through
          case 203: break;
          case 72:
            { return PyTokenTypes.EQEQ;
            }
          // fall through
          case 204: break;
          case 73:
            { return PyTokenTypes.GE;
            }
          // fall through
          case 205: break;
          case 74:
            { return PyTokenTypes.GTGT;
            }
          // fall through
          case 206: break;
          case 75:
            { return PyTokenTypes.ATEQ;
            }
          // fall through
          case 207: break;
          case 76:
            { return fStringHelper.handleFStringStart();
            }
          // fall through
          case 208: break;
          case 77:
            { return PyTokenTypes.XOREQ;
            }
          // fall through
          case 209: break;
          case 78:
            { return PyTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 210: break;
          case 79:
            { return PyTokenTypes.IN_KEYWORD;
            }
          // fall through
          case 211: break;
          case 80:
            { return PyTokenTypes.IS_KEYWORD;
            }
          // fall through
          case 212: break;
          case 81:
            { return PyTokenTypes.OR_KEYWORD;
            }
          // fall through
          case 213: break;
          case 82:
            { return PyTokenTypes.OREQ;
            }
          // fall through
          case 214: break;
          case 83:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 215: break;
          case 84:
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
            }
          // fall through
          case 216: break;
          case 85:
            { return fStringHelper.handleColonEqInFragment();
            }
          // fall through
          case 217: break;
          case 86:
            { return fStringHelper.handleFStringStartInFragment();
            }
          // fall through
          case 218: break;
          case 87:
            { if (zzInput == YYEOF && zzStartRead == 0 && !isConsole()) return PyTokenTypes.DOCSTRING;
                                  else return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 219: break;
          case 88:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.SINGLE_QUOTED_STRING;
                                           yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 220: break;
          case 89:
            { return PyTokenTypes.EXPEQ;
            }
          // fall through
          case 221: break;
          case 90:
            { return PyTokenTypes.FLOORDIVEQ;
            }
          // fall through
          case 222: break;
          case 91:
            { return PyTokenTypes.LTLTEQ;
            }
          // fall through
          case 223: break;
          case 92:
            { return PyTokenTypes.GTGTEQ;
            }
          // fall through
          case 224: break;
          case 93:
            { return PyTokenTypes.AND_KEYWORD;
            }
          // fall through
          case 225: break;
          case 94:
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
            }
          // fall through
          case 226: break;
          case 95:
            { return PyTokenTypes.DEL_KEYWORD;
            }
          // fall through
          case 227: break;
          case 96:
            { return PyTokenTypes.FOR_KEYWORD;
            }
          // fall through
          case 228: break;
          case 97:
            { return PyTokenTypes.NOT_KEYWORD;
            }
          // fall through
          case 229: break;
          case 98:
            { return PyTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 230: break;
          case 99:
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                      else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 231: break;
          case 100:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 232: break;
          case 101:
            { return PyTokenTypes.TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 233: break;
          case 102:
            { return fStringHelper.handleStringLiteral(PyTokenTypes.TRIPLE_QUOTED_STRING);
            }
          // fall through
          case 234: break;
          case 103:
            { fStringHelper.reset(); return PyTokenTypes.DEF_KEYWORD;
            }
          // fall through
          case 235: break;
          case 104:
            { fStringHelper.reset(); return PyTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 236: break;
          case 105:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.TRIPLE_QUOTED_STRING;
                                           yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 237: break;
          case 106:
            { return PyTokenTypes.ELIF_KEYWORD;
            }
          // fall through
          case 238: break;
          case 107:
            { return PyTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 239: break;
          case 108:
            { return PyTokenTypes.FROM_KEYWORD;
            }
          // fall through
          case 240: break;
          case 109:
            { return PyTokenTypes.PASS_KEYWORD;
            }
          // fall through
          case 241: break;
          case 110:
            { fStringHelper.reset(); return PyTokenTypes.WITH_KEYWORD;
            }
          // fall through
          case 242: break;
          case 111:
            { return PyTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 243: break;
          case 112:
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
            }
          // fall through
          case 244: break;
          case 113:
            { return PyTokenTypes.RAISE_KEYWORD;
            }
          // fall through
          case 245: break;
          case 114:
            { return PyTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 246: break;
          case 115:
            { return PyTokenTypes.YIELD_KEYWORD;
            }
          // fall through
          case 247: break;
          case 116:
            { fStringHelper.reset(); return PyTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 248: break;
          case 117:
            { fStringHelper.reset(); return PyTokenTypes.CLASS_KEYWORD;
            }
          // fall through
          case 249: break;
          case 118:
            { fStringHelper.reset(); return PyTokenTypes.RAISE_KEYWORD;
            }
          // fall through
          case 250: break;
          case 119:
            { fStringHelper.reset(); return PyTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 251: break;
          case 120:
            { return PyTokenTypes.ASSERT_KEYWORD;
            }
          // fall through
          case 252: break;
          case 121:
            { return PyTokenTypes.EXCEPT_KEYWORD;
            }
          // fall through
          case 253: break;
          case 122:
            { return PyTokenTypes.GLOBAL_KEYWORD;
            }
          // fall through
          case 254: break;
          case 123:
            { return PyTokenTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 255: break;
          case 124:
            { return PyTokenTypes.LAMBDA_KEYWORD;
            }
          // fall through
          case 256: break;
          case 125:
            { return PyTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 257: break;
          case 126:
            { fStringHelper.reset(); return PyTokenTypes.EXCEPT_KEYWORD;
            }
          // fall through
          case 258: break;
          case 127:
            { fStringHelper.reset(); return PyTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 259: break;
          case 128:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (zzCurrentPos != 0 || isConsole()) return PyTokenTypes.TRIPLE_QUOTED_STRING;
                                           return PyTokenTypes.DOCSTRING;
            }
          // fall through
          case 260: break;
          case 129:
            { return PyTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 261: break;
          case 130:
            { fStringHelper.reset(); return PyTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 262: break;
          case 131:
            { return PyTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 263: break;
          case 132:
            { fStringHelper.reset(); return PyTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
