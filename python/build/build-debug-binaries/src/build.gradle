import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id "java"
  id "com.jetbrains.python.envs" version "0.0.33"
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

ext {
  pydevDir = new File(projectDir, '/../../../helpers/pydev/')
}

boolean isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
boolean isMac = Os.isFamily(Os.FAMILY_MAC)

envs {
  String python38version = "3.8.10"
  String python39version = "3.9.13"
  String python310version = "3.10.8"
  String python311version = "3.11.6"
  String python312version = "3.12.0"
  String python313version = "3.13.0"

  def customBuildDir = System.getenv().get("PYCHARM_BUILD_DIR")
  project.buildDir = customBuildDir? new File(customBuildDir): buildDir
  bootstrapDirectory = new File(buildDir, 'pythons')
  envsDirectory = new File(buildDir, 'envs')

  zipRepository = new URL("https://packages.jetbrains.team/files/p/py/python-archives-windows/")
  shouldUseZipsFromRepository = isWindows

  python "python38_64", python38version, "64"
  virtualenv "py38_64", "python38_64", ["cython"]

  python "python39_64", python39version, "64"
  virtualenv "py39_64", "python39_64", ["cython"]

  python "python310_64", python310version, "64"
  virtualenv "py310_64", "python310_64", ["cython"]

  python "python311_64", python311version, "64"
  virtualenv "py311_64", "python311_64", ["cython"]

  python "python312_64", python312version, "64"
  virtualenv "py312_64", "python312_64", ["cython", "setuptools"]

  python "python313_64", python313version, "64"
  virtualenv "py313_64", "python313_64", ["cython", "setuptools"]

  if (isWindows) {
    python "python38_32", python38version, "32"
    virtualenv "py38_32", "python38_32", ["cython"]

    python "python39_32", python39version, "32"
    virtualenv "py39_32", "python39_32", ["cython"]

    python "python310_32", python310version, "32"
    virtualenv "py310_32", "python310_32", ["cython"]

    python "python311_32", python311version, "32"
    virtualenv "py311_32", "python311_32", ["cython"]

    python "python312_32", python312version, "32"
    virtualenv "py312_32", "python312_32", ["cython", "setuptools"]

    python "python313_32", python313version, "32"
    virtualenv "py313_32", "python313_32", ["cython", "setuptools"]
  }
}

task buildBinariesOnWindows(dependsOn: 'build_envs') doLast {
  exec {
    workingDir pydevDir

    environment PYTHONPATH: pydevDir,
                MINICONDA32_ENVS: envs.envsDirectory,
                MINICONDA64_ENVS: envs.envsDirectory

    commandLine "${envs.envsDirectory}/py38_32/Scripts/python.exe", "build_tools/build_binaries_windows.py"
  }
}

task buildBinariesOnMac(dependsOn: 'build_envs') doLast {
  exec {
    workingDir pydevDir

    environment PYTHONPATH: pydevDir,
                MINICONDA64_ENVS: envs.envsDirectory

    commandLine "${envs.envsDirectory}/py38_64/bin/python", "build_tools/build_binaries_osx.py"
  }
}

task buildBinaries() {
  if (isWindows) {
    dependsOn buildBinariesOnWindows
  }
  else if (isMac) {
    dependsOn buildBinariesOnMac
  }
}

task generateImportErrorsMap(dependsOn: 'build_envs') {
  doLast {
    exec {
      workingDir pydevDir

      environment PYTHONPATH: pydevDir,
                  ENVS_DIRECTORY: envs.envsDirectory

      if (isWindows) {
        commandLine "${envs.envsDirectory}/py38_64/Scripts/python.exe", "build_tools/generate_debugger_import_errors/start_generation.py"
      }
      else if (isMac) {
        commandLine "${envs.envsDirectory}/py38_64/bin/python", "build_tools/generate_debugger_import_errors/start_generation.py"
      }
    }
  }
}

tasks.named('wrapper') {
  gradleVersion = '6.7.1'
}
