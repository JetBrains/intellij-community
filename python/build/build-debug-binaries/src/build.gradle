import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id "com.jetbrains.python.envs" version "0.0.19"
}

ext {
  pydevDir = new File(projectDir, '/../../../helpers/pydev/')
}

envs {
  def customBuildDir = System.getenv().get("PYCHARM_BUILD_DIR")
  project.buildDir = customBuildDir? new File(customBuildDir): buildDir
  bootstrapDirectory = new File(buildDir, 'pythons')
  envsDirectory = new File(buildDir, 'envs')

  conda "Miniconda3_64", "Miniconda3-latest", "64"

  condaenv "py26_64", "2.6", "Miniconda3_64", ["cython"]
  condaenv "py27_64", "2.7", "Miniconda3_64", ["cython"]
  condaenv "py34_64", "3.4", "Miniconda3_64", ["cython"]
  condaenv "py35_64", "3.5", "Miniconda3_64", ["cython"]
  condaenv "py36_64", "3.6", "Miniconda3_64", ["cython"]

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    conda "Miniconda3_32", "Miniconda3-latest", "32"

    condaenv "py26_32", "2.6", "Miniconda3_32", ["cython"]
    condaenv "py27_32", "2.7", "Miniconda3_32", ["cython"]
    condaenv "py34_32", "3.4", "Miniconda3_32", ["cython"]
    condaenv "py35_32", "3.5", "Miniconda3_32", ["cython"]
    condaenv "py36_32", "3.6", "Miniconda3_32", ["cython"]
  }
}

task buildBinariesOnWindows(dependsOn: 'build_envs') << {
  exec {
    workingDir pydevDir

    environment PYTHONPATH: pydevDir,
                MINICONDA32_ENVS: envs.envsDirectory,
                MINICONDA64_ENVS: envs.envsDirectory

    commandLine "${envs.envsDirectory}/py27_32/python.exe", "build_tools/build_binaries_windows.py"
  }
}

task buildBinariesOnMac(dependsOn: 'build_envs') << {
  exec {
    workingDir pydevDir

    environment PYTHONPATH: pydevDir,
                MINICONDA64_ENVS: envs.envsDirectory

    commandLine "${envs.envsDirectory}/py36_64/bin/python", "build_tools/build_binaries_osx.py"
  }
}

task buildBinaries() {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    dependsOn buildBinariesOnWindows
  }
  else if (Os.isFamily(Os.FAMILY_MAC)) {
    dependsOn buildBinariesOnMac
  }
}

task wrapper(type: Wrapper) << {
  gradleVersion = '4.2'
}