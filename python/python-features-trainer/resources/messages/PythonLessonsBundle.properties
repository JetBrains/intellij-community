#Need to translate in pair with action.EditorToggleCase.text key!
toggle.case.part=case

python.onboarding.module.name=Onboarding Tour
python.onboarding.module.description=A brief overview of the main features in {0}.

python.onboarding.lesson.name=Get Acquainted with PyCharm
python.onboarding.project.view.description=The <strong>Project view</strong> is one of the main tool windows. It contains the project directory, SDK-specific external libraries, and scratch files. Use the striped button to open it, and you will see a simple demo project. You can also open it by pressing {0}.
python.onboarding.balloon.project.view=Click to open the <strong>Project view</strong>
python.onboarding.balloon.project.directory=Expand the project directory to view the project files
python.onboarding.balloon.open.file=Double-click to open {0}
python.onboarding.balloon.open.learn.toolbar=Switch to the {0} tool window to continue this lesson
python.onboarding.context.menu=You have opened the demo, now let's run it. Right-click the editor to invoke the context menu.
python.onboarding.run.sample=Choose {0} or try the {1}.
python.onboarding.temporary.configuration.description=<ide/> has just created a temporary run configuration. You can find it in the Run toolbar. With this toolbar, you can execute popular running actions for the selected configuration, such as running {0}, debugging {1}, profiling code {2}, and running your code with coverage {3}.
python.onboarding.balloon.click.here=Click here to set a breakpoint
python.onboarding.toggle.breakpoint.1=You may notice that instead of the expected value of {0}, the {1} method returns {2}. \
  Let's stop at the return statement to debug the problematic code.
python.onboarding.toggle.breakpoint.2=Click the gutter in the highlighted area to set a breakpoint.
python.onboarding.balloon.start.debugging=\u0421lick the icon to start debugging
python.onboarding.start.debugging=Click the {0} icon to start the debugging process.
python.onboarding.balloon.about.debug.panel=The {0} tool window provides toolbars with various debugging actions. You can take the {1} lesson later to try them.
python.onboarding.balloon.stop.debugging=Click the icon to stop debugging
python.onboarding.stop.debugging=Let''s stop debugging. Click the {0} icon.
python.onboarding.type.division=Once you discovered the problem in the code, let''s fix it. Divide the resulting sum by the length of the values. Type {0}.
python.onboarding.choose.len.item=<ide/> shows completion options automatically as you type. Select the {0} item using the keyboard arrows and press {1}.
python.onboarding.invoke.completion=Now let''s invoke code completion to insert {0} inside parentheses {1}. Press {2} to open the completion list.
python.onboarding.choose.values.item=You may type {0} to reduce the number of suggested items. Select {1} and press {2}.
python.onboarding.invoke.intention.for.warning.1=You have just fixed a bug but you can make this code look even better. PyCharm highlights and adds a yellow bulb to the code lines that can be improved.
python.onboarding.invoke.intention.for.warning.2=Press {0} to preview the warnings and apply a quick fix.
python.onboarding.select.fix=Apply the first item: {0}. With this fix, your code looks neat.
python.onboarding.invoke.intention.for.code=Intentions also save your time and make coding easier. Let''s use an intention to quickly add a return type for {0}. Press {1}.
python.onboarding.apply.intention=Select {0} and press {1}.
python.onboarding.complete.template=Type {0} and then press {1}.
python.onboarding.invoke.search.everywhere.1=While working in <ide/> you might want to search for files in your project, symbols, classes, or even IDE actions. In this lesson, let''s search for the {0} action to make the {1} string low-case.
python.onboarding.invoke.search.everywhere.2=Press {0} two times to open the {1} dialog.
python.onboarding.search.everywhere.description=As you can see, the selected text, {0}, has been automatically copied into the input string. Let''s type {1} instead of {0}.
python.onboarding.apply.action=Select the {0} action and press {1}.
python.onboarding.case.changed=The case has changed.
python.onboarding.epilog=Congratulations! You have completed the onboarding tour. At this point you can:\
  \n  - <callback id="{0}">Close</callback> the learning project{1}\
  \n  - <callback id="{2}">Show</callback> more lessons
python.onboarding.return.to.welcome=\ and return to the Welcome screen

python.onboarding.finish.title=Congratulations
python.onboarding.finish.text=You have just completed the PyCharm Onboarding tour.\n\
  Now you can close the Learning project{0}.\n\
  You can also continue your study and try other lessons.
python.onboarding.finish.exit=Close demo project
python.onboarding.finish.modules=Show more lessons

python.3.required.warning.message=To complete this lesson, <callback id="{0}">configure an interpreter</callback> based on Python 3.

python.f.string.completion.lesson.name=F-string completion
python.f.string.completion.type.prefix=<ide/> supports automatic f-string conversion. Just start typing {0}.
python.f.string.completion.invoke.manually=You can invoke completion manually with {0}.
python.f.string.completion.complete.it=Complete the statement with {0}. Just press {1} to apply the first item.
python.f.string.completion.result.message=You may see that a simple Python string was replaced by f-string after the completion.

python.postfix.completion.type=Type {0} after the parenthesis to see the list of suggestions.
python.postfix.completion.complete=Select {0} from the list and press {1} to complete the statement.

python.smart.completion.try.basic.completion=Try using Basic Completion by pressing {0}.
python.smart.completion.use.smart.completion=Unfortunately, <ide/> has no direct information on the {0} type. \
 But sometimes, it can suggest completion by the context! Use {1} to invoke Smart Completion.
python.smart.completion.finish.completion=Now just choose the {0} item to finish this lesson.

python.tab.completion.lesson.name=Tab completion
python.tab.completion.start.completion=Suppose that you want to replace {0} with {1}. Invoke completion by pressing {2}.
python.tab.completion.select.item=Select the {0} item using the keyboard arrows or just start typing it.
python.tab.completion.use.tab.completion=If you press {0}, you will insert {1} before {2}. Instead, press {3} to replace {2} with {1}.

python.in.place.refactoring.lesson.name=In-place refactoring
python.in.place.refactoring.start.type.new.name=Let''s consider an alternative approach to performing refactorings. \
  Suppose that we want to rename the local variable {0} to {1}. Just start typing the new name.
python.in.place.refactoring.invoke.intentions=<ide/> is guessing that you are going to rename the variable. \
  You can notice it by the {0} icon in the gutter. Invoke intentions by {1} when you finish typing the new name.
python.in.place.refactoring.finish.rename=Press {0} to finish rename.
python.in.place.refactoring.add.parameter=Let''s add an argument to this method. We place the editor caret just after the first parameter. \
  Now type a comma and parameter''s name: {0}.
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> expects that you are going to change the method''s signature. \
  You can notice it by seeing the same icon {0} in the gutter. When you finish typing the new parameter\u2019s name, invoke intentions by pressing {1}.
python.in.place.refactoring.update.callers=Press {0} to update the callers.
python.in.place.refactoring.signature.preview=<ide/> is showing you the short signature preview. Press {0} to continue.
python.in.place.refactoring.set.default.value=Now you need to type the value that will be inserted as an argument into each call. \
  You can choose {0} for this sample. Then press {1} to continue.
python.in.place.refactoring.remark.about.application.scope=Note: In-place refactoring may be applied only in the \
  definition point whiles direct invocation of rename or change-signature refactorings may be called from both definition and usage.

python.quick.fix.refactoring.lesson.name=Quick-fix refactoring
python.quick.fix.refactoring.type.new.argument=Some refactorings can be performed as quick-fixes. \
  Suppose we want to add a parameter to the method {0} and pass the variable {1} to it. Let''s type {2} after the first argument.
python.quick.fix.refactoring.close.completion.list=For now, we don''t want to apply any completion. Close the list ({0}).
python.quick.fix.refactoring.invoke.intentions=As you might have noticed, <ide/> is showing you a warning here. Let''s invoke intentions by pressing {0}.
python.quick.fix.refactoring.choose.change.signature=Choose the {0} quick fix.
python.quick.fix.refactoring.select.new.parameter=Let''s set the default value for the new parameter. Click the new parameter line. \
  Alternatively, you can switch focus to the parameter by pressing {0} and then {1}.
python.quick.fix.refactoring.set.default.value=You may navigate through the fields and the checkbox by using {0}. \
  With the checkbox selected, <ide/> either inlines the default value to the other callers or sets it as the default value for the new parameter. \
  The Signature Preview will help you understand the difference. Now set the default value to 0.
python.quick.fix.refactoring.finish.refactoring=Press {0} (or click {1}) to finish the refactoring.

python.rename.press.rename=Press {0} and rename the {1} field(e.g., to {2}).
python.rename.expand.dynamic.references=In simple cases, {0} will just perform the rename refactoring without confirmation. \
  However, in this sample, <ide/> detects two calls of the {0} method for objects with unknown types. Expand the {1} item.
python.rename.find.window.closed.warning=Press {0} to open the find tool window again.
python.rename.exclude.item=It seems that {0} should be excluded from the rename refactoring. Select it and press {1}.
python.rename.finish.refactoring=Complete the rename refactoring with the {0} button.

python.editor.coding.assistance.fix.error=Let''s fix this error. Press {0} and select {1} or {2} <strong>\u2192 math</strong>
python.editor.coding.assistance.press.to.fix=Press {0} to remove the unexpected argument.

python.run.configuration.lets.run=Let''s run our simple example with {0}.

python.debug.workflow.rerun=Let''s rerun our program. Just click {0} again or use {1}.
