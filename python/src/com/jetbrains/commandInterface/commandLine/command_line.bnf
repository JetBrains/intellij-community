/*TODO:Add generation to ant*/

// This file is used to auto-generate lexer and parser for gnu command line language
// Please make sure .flex, and .java generated files are all in "gen" folder under this module.
// Generate flex first, then generate lexer by flex, and then generate PSI and parser

{
   // All 3 elements should extend this class
   mixin("option|argument|command")="com.jetbrains.commandInterface.commandLine.CommandLineElement"
   // And implement this interface
   implements("option|argument|command")="com.jetbrains.commandInterface.commandLine.CommandLinePart"

   parserClass = 'com.jetbrains.commandInterface.commandLine.CommandLineParser'
   parserUtilClass="com.jetbrains.commandInterface.commandLine.CommandLineParserUtil"
   psiImplUtilClass="com.jetbrains.commandInterface.commandLine.psi.impl.CommandLinePsiImplUtils"
   psiPackage = 'com.jetbrains.commandInterface.commandLine.psi'
   psiImplPackage = 'com.jetbrains.commandInterface.commandLine.psi.impl'

   elementTypeHolderClass = 'com.jetbrains.commandInterface.commandLine.CommandLineElementTypes'
   psiClassPrefix = "CommandLine"
   psiVisitorName = "CommandLineVisitor"
   elementTypeClass = 'com.jetbrains.commandInterface.commandLine.CommandLineElementType'


 //TODO: I would suggest making this pattern negative rather than positive in order to support all the characters like ? and others
 //TODO: This lexer doesn't support multi-line arguments and options. LabelsReplyCreate issue
 //TODO: This lexer doesn't support escaping.
 //TODO: This parser doesn't support - --no-option - -nonoption.
  tokens=[
    space='regexp:\s+' // WARNING: Comment out or remove this (space) before generating Flex file! It is here only for live preview.
    EQ = '='
    LITERAL_STARTS_FROM_LETTER='regexp:\p{Alpha}(\w|:|\\|/|\.|-|\!|\*)*'
    LITERAL_STARTS_FROM_DIGIT='regexp:\p{Digit}(\w|:|\\|/|\.|-|\!|\*)*'
    LITERAL_STARTS_FROM_SYMBOL='regexp:([/\~\.!*](\w|:|\\|/|\.|-|\!|\*)*)'

    SPACED_LITERAL_STARTS_FROM_LETTER='regexp:"\p{Alpha}(\w|:|\\|/|\.|-|\s|\!|\*)*"'
    SPACED_LITERAL_STARTS_FROM_DIGIT='regexp:"\p{Digit}(\w|:|\\|/|\.|-|\s|\!|\*)*"'
    SPACED_LITERAL_STARTS_FROM_SYMBOL='regexp:"([/\~\.!*](\w|:|\\|/|\.|-|\s|\!|\*)*)"'


    SINGLE_Q_SPACED_LITERAL_STARTS_FROM_LETTER="regexp:'\p{Alpha}(\w|:|\\|/|\.|-|\s|\!|\*)*'"
    SINGLE_Q_SPACED_LITERAL_STARTS_FROM_DIGIT="regexp:'\p{Digit}(\w|:|\\|/|\.|-|\s|\!|\*)*'"
    SINGLE_Q_SPACED_LITERAL_STARTS_FROM_SYMBOL="regexp:'([/\~\.!*](\w|:|\\|/|\.|-|\s|\!|\*)*)'"



    SHORT_OPTION_NAME_TOKEN='regexp:-\p{Alpha}'
    LONG_OPTION_NAME_TOKEN='regexp:--\p{Alpha}(-|\w)*'
  ]

}

root ::= command (argument | option ) *  <<eof>>
command ::= LITERAL_STARTS_FROM_LETTER
option ::= (short_option_name <<bound_argument>> ? | long_option_name <<bound_argument>> ?)  {
methods=[ getOptionName isLong findRealOption findArgument ]
}
private short_option_name ::= SHORT_OPTION_NAME_TOKEN
private long_option_name ::= LONG_OPTION_NAME_TOKEN
argument ::= LITERAL_STARTS_FROM_LETTER | LITERAL_STARTS_FROM_DIGIT | LITERAL_STARTS_FROM_SYMBOL |
SPACED_LITERAL_STARTS_FROM_LETTER | SPACED_LITERAL_STARTS_FROM_DIGIT | SPACED_LITERAL_STARTS_FROM_SYMBOL |
SINGLE_Q_SPACED_LITERAL_STARTS_FROM_LETTER | SINGLE_Q_SPACED_LITERAL_STARTS_FROM_DIGIT | SINGLE_Q_SPACED_LITERAL_STARTS_FROM_SYMBOL
{
methods=[ findOptionForOptionArgument findRealArgument findBestHelp getValueNoQuotes ]
}
