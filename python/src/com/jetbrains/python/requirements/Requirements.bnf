{
  parserClass="com.jetbrains.python.requirements.psi.parser.RequirementsParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix=""
  psiImplClassSuffix="Impl"
  psiPackage="com.jetbrains.python.requirements.psi"
  psiImplPackage="com.jetbrains.python.requirements.psi.impl"

  elementTypeHolderClass="com.jetbrains.python.requirements.psi.RequirementsTypes"
  elementTypeClass="com.jetbrains.python.requirements.psi.RequirementsElementType"
  tokenTypeClass="com.jetbrains.python.requirements.psi.RequirementsTokenType"

  psiImplUtilClass="com.jetbrains.python.requirements.psi.PsiImplUtil"
}

requirementsFile ::= line_*

private line_ ::= (specification COMMENT? (EOL | <<eof>>)) | EOL
private specification ::= (name_req
                          | option
                          | path_req
                          | url_req)

version_one   ::= version_cmp_stmt version_stmt
version_cmp_stmt ::= VERSION_CMP
version_stmt  ::= VERSION
private version_many  ::= version_one (COMMA version_one)*
versionspec   ::= LPARENTHESIS version_many RPARENTHESIS | version_many

marker_op     ::= VERSION_CMP | IN | NOT IN
private python_dquote_str::= DQUOTE (PYTHON_STR_C)? DQUOTE {pin=1}
private python_squote_str::= SQUOTE (PYTHON_STR_C)? SQUOTE {pin=1}
python_str    ::= python_dquote_str | python_squote_str
marker_var    ::= ENV_VAR | python_str
marker_expr   ::= (marker_var marker_op marker_var
                  | LPARENTHESIS marker RPARENTHESIS)
marker_and    ::= marker_expr (AND marker_expr)* {pin(".*")=1}
marker_or     ::= marker_and (OR marker_and)* {pin(".*")=1}
private marker::= marker_or
quoted_marker ::= SEMICOLON marker {pin=1}

simple_name          ::= IDENTIFIER
extras_list   ::= IDENTIFIER (COMMA IDENTIFIER)* {pin(".*")=1}
extras        ::= LSBRACE extras_list? RSBRACE {pin=1}

name_req      ::= (simple_name extras? !AT versionspec?
                   (LONG_OPTION hash_option)* quoted_marker?) {pin=5}

option        ::= (SHORT_OPTION | LONG_OPTION) (
                   refer_req
                   | constraint_req
                   | editable_req
                   | index_url_req
                   | extra_index_url_req
                   | no_index_req
                   | find_links_req
                   | no_binary_req
                   | only_binary_req
                   | prefer_binary_req
                   | require_hashes_req
                   | pre_req
                   | trusted_host_req
                   | use_feature_req) {pin=1}

refer_req ::= REFER uri_reference {pin=1}
constraint_req ::= CONSTRAINT  uri_reference {pin=1}
editable_req ::= EDITABLE uri_reference {pin=1}
index_url_req ::= INDEX_URL uri_reference {pin=1}
extra_index_url_req ::= EXTRA_INDEX_URL uri_reference {pin=1}
no_index_req ::= NO_INDEX
find_links_req ::= FIND_LINKS uri_reference {pin=1}
binary_list ::= extras_list | BINARY_ALL | BINARY_NONE
no_binary_req ::= NO_BINARY binary_list {pin=1}
only_binary_req ::= ONLY_BINARY binary_list {pin=1}
prefer_binary_req ::= PREFER_BINARY
require_hashes_req ::= REQUIRE_HASHES
pre_req ::= PRE
trusted_host_req ::= TRUSTED_HOST host (COLON port)? {pin=1}
use_feature_req ::= USE_FEATURE IDENTIFIER {pin=1}
hash_option ::= HASH EQUAL IDENTIFIER COLON HEX {pin=1}

path_req      ::= uri_reference quoted_marker? {pin=1 }
url_req       ::= simple_name extras? urlspec quoted_marker?

urlspec       ::= AT uri_reference {pin=1 }
scheme        ::= LETTER (LETTER | DIGIT | PLUS | MINUS | DOT)*
uri_reference ::= uri | relative_ref
uri           ::= scheme (AT | COLON) hier_part (QUESTION_MARK query)? (SHARP fragment)? {pin=2}
hier_part     ::= SLASH SLASH authority path_abempty | path_absolute | path_rootless | path_empty
relative_ref  ::= relative_part (QUESTION_MARK query)? (SHARP fragment)?
relative_part ::= SLASH SLASH authority path_abempty | path_absolute | path_noscheme | path_empty
authority     ::= (userinfo AT)? host (COLON port)?
userinfo      ::= (unreserved | pct_encoded | env_variable | SUB_DELIMS | DOLLAR_SIGN | COLON)*
env_variable  ::= DOLLAR_SIGN LBRACE variable_name RBRACE
variable_name ::= LETTER (LETTER | DIGIT | UNDERSCORE)*
host          ::= IP_literal | IPv4address | reg_name
port          ::= DIGIT*
IP_literal    ::= LSBRACE (IPv6address | IPvFuture) RSBRACE
IPvFuture     ::= 'v' hexdig+ DOT (unreserved | SUB_DELIMS | DOLLAR_SIGN | COLON)+
h16_colon     ::= h16 COLON
IPv6address   ::= (
                  h16_colon h16_colon h16_colon h16_colon h16_colon h16_colon ls32
                  | COLON COLON h16_colon h16_colon h16_colon h16_colon h16_colon ls32
                  | h16?  COLON COLON h16_colon h16_colon h16_colon h16_colon ls32
                  | (h16_colon? h16)? COLON COLON h16_colon h16_colon h16_colon ls32
                  | (h16_colon? h16_colon? h16 )? COLON COLON h16_colon h16_colon ls32
                  | (h16_colon? h16_colon? h16_colon? h16 )? COLON COLON h16_colon ls32
                  | (h16_colon? h16_colon? h16_colon? h16_colon? h16 )? COLON COLON ls32
                  | (h16_colon? h16_colon? h16_colon? h16_colon? h16_colon? h16 )? COLON COLON h16
                  | (h16_colon? h16_colon? h16_colon? h16_colon? h16_colon? h16_colon? h16 )? COLON COLON
                  )
h16           ::= hexdig hexdig? hexdig? hexdig?
ls32          ::= h16_colon h16 | IPv4address
IPv4address   ::= dec_octet DOT dec_octet DOT dec_octet DOT dec_octet
nz            ::= !"0" DIGIT
dec_octet     ::= (
                  DIGIT // 0-9
                  | nz DIGIT // 10-99
                  | "1" DIGIT DIGIT // 100-199
                  | "2" ("0" | "1" | "2" | "3" | "4") DIGIT // 200-249
                  | "2" "5" ("0" | "1" | "2" | "3" | "4" | "5") )// %250-255
reg_name      ::= (unreserved | pct_encoded | SUB_DELIMS | DOLLAR_SIGN)*

path_abempty  ::= (SLASH segment)*
path_absolute ::= SLASH (segment_nz (SLASH segment)*)?
path_noscheme ::= segment_nz_nc (SLASH segment)*
path_rootless ::= segment_nz (SLASH segment)*
path_empty    ::= pchar{0}
segment       ::= pchar*
segment_nz    ::= pchar+
segment_nz_nc ::= (unreserved | pct_encoded | SUB_DELIMS | DOLLAR_SIGN | AT)+
                // non-zero-length segment without any colon ':'
pchar         ::= unreserved | pct_encoded | SUB_DELIMS | DOLLAR_SIGN | COLON | AT | PLUS
query         ::= (pchar | SLASH | QUESTION_MARK)*
fragment      ::= (pchar | SLASH | QUESTION_MARK)*
pct_encoded   ::= PERCENT_SIGN hexdig
unreserved    ::= LETTER | DIGIT | MINUS | DOT | UNDERSCORE | TILDA
hexdig        ::= DIGIT | 'a' | 'A' | 'b' | 'B' | 'c' | 'C' | 'd' | 'D' | 'e' | 'E' | 'f' | 'F'
