<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <!-- Components and extensions declared in this file work both in PyCharm and Python plugin.
       Both Community and Professional editions. -->

  <resource-bundle>messages.PyBundle</resource-bundle>

  <module value="com.intellij.modules.python"/>

  <xi:include href="/META-INF/PythonPsi.xml" xpointer="xpointer(/idea-plugin/*)"/>
  <xi:include href="/META-INF/PythonPsiImpl.xml" xpointer="xpointer(/idea-plugin/*)"/>
  <xi:include href="/META-INF/PythonSdk.xml" xpointer="xpointer(/idea-plugin/*)"/>

  <!-- Enable command-line language -->
  <xi:include href="/META-INF/command-line.xml" xpointer="xpointer(/idea-plugin/*)"/>

  <extensions defaultExtensionNs="com.intellij">
    <applicationInitializedListener implementation="com.jetbrains.python.testing.PyTestLegacyInteropInitializer"/>
    <library.type implementation="com.jetbrains.python.library.PythonLibraryType"/>
    <renameHandler implementation="com.jetbrains.python.magicLiteral.PyMagicLiteralRenameHandler"/>
    <nameSuggestionProvider implementation="com.jetbrains.python.refactoring.PyNameSuggestionProvider"/>
    <methodNavigationOffsetProvider implementation="com.jetbrains.python.codeInsight.PyMethodNavigationOffsetProvider"/>
    <copyPastePreProcessor implementation="com.jetbrains.python.editor.PythonCopyPasteProcessor"/>
    <fileType name="PythonStub"
              language="PythonStub"
              extensions="pyi"
              implementationClass="com.jetbrains.python.pyi.PyiFileType"
              fieldName="INSTANCE"/>
    <fileType name="Qt UI file" extensions="ui" implementationClass="com.jetbrains.pyqt.QtUIFileType" fieldName="INSTANCE"/>
    <fileType name="XML" language="XML" extensions="qrc"/>
    <editorHighlighterProvider filetype="Python" implementationClass="com.jetbrains.python.PyEditorHighlighterProvider"/>
    <lang.syntaxHighlighterFactory language="Python" implementationClass="com.jetbrains.python.highlighting.PySyntaxHighlighterFactory"/>
    <lang.braceMatcher language="Python" implementationClass="com.jetbrains.python.PyBraceMatcher"/>
    <lang.commenter language="Python" implementationClass="com.jetbrains.python.PythonCommenter"/>
    <lang.foldingBuilder language="Python" implementationClass="com.jetbrains.python.PythonFoldingBuilder"/>
    <lang.findUsagesProvider language="Python" implementationClass="com.jetbrains.python.findUsages.PythonFindUsagesProvider"/>
    <lang.formatter language="Python" implementationClass="com.jetbrains.python.formatter.PythonFormattingModelBuilder"/>
    <preFormatProcessor implementation="com.jetbrains.python.formatter.PyPreFormatProcessor"/>
    <postFormatProcessor implementation="com.jetbrains.python.formatter.PyTrailingBlankLinesPostFormatProcessor"/>
    <postFormatProcessor implementation="com.jetbrains.python.formatter.PyFromImportPostFormatProcessor"/>
    <lang.whiteSpaceFormattingStrategy language="Python"
                                       implementationClass="com.jetbrains.python.formatter.PyWhiteSpaceFormattingStrategy"/>
    <lang.lineWrapStrategy language="Python" implementationClass="com.jetbrains.python.formatter.PyLineWrapPositionStrategy"/>
    <lang.namesValidator language="Python" implementationClass="com.jetbrains.python.refactoring.rename.PythonNamesValidator"/>
    <lang.surroundDescriptor language="Python"
                             implementationClass="com.jetbrains.python.refactoring.surround.PyStatementSurroundDescriptor"/>
    <lang.surroundDescriptor language="Python"
                             implementationClass="com.jetbrains.python.refactoring.surround.PyExpressionSurroundDescriptor"/>
    <lang.unwrapDescriptor language="Python" implementationClass="com.jetbrains.python.refactoring.unwrap.PyUnwrapDescriptor"/>
    <lang.psiStructureViewFactory language="Python" implementationClass="com.jetbrains.python.structureView.PyStructureViewFactory"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.console.PydevDocumentationProvider"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.documentation.PythonExternalDocumentationProvider" order="before pythonDocumentationProvider"/>
    <lang.emacs language="Python" implementationClass="com.jetbrains.python.editor.PyEmacsHandler"/>
    <highlightRangeExtension implementation="com.jetbrains.python.validation.PyHighlightingAnnotator"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.validation.PyAnnotatingVisitor"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.validation.PyCompositeAnnotator"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.inspections.PyCompatibilityInspectionAdvertiser"/>

    <quoteHandler fileType="Python" className="com.jetbrains.python.editor.PythonQuoteHandler"/>
    <enterHandlerDelegate implementation="com.jetbrains.python.editor.PythonEnterHandler"/>
    <enterHandlerDelegate implementation="com.jetbrains.python.editor.PyEnterAtIndentHandler" order="first"/>
    <enterBetweenBracesDelegate language="Python"  implementationClass="com.intellij.codeInsight.editorActions.enter.EnterBetweenBracesAndBracketsDelegate"/>
    <!--suppress PluginXmlValidity -->
    <editorActionHandler action="EditorCopy" implementationClass="com.intellij.execution.console.ConsoleHistoryCopyHandler"/>

    <editor.backspaceModeOverride language="Python" implementationClass="com.intellij.codeInsight.editorActions.SmartBackspaceDisabler"/>
    <sdkType implementation="com.jetbrains.python.sdk.PythonSdkType"/>
    <gotoClassContributor implementation="com.jetbrains.python.PyGotoClassContributor"/>
    <gotoSymbolContributor implementation="com.jetbrains.python.PyGotoSymbolContributor"/>
    <codeInsight.parameterInfo language="Python" implementationClass="com.jetbrains.python.PyParameterInfoHandler"/>
    <codeInsight.fillParagraph language="Python" implementationClass="com.jetbrains.python.actions.PyFillParagraphHandler"/>
    <colorSettingsPage implementation="com.jetbrains.python.highlighting.PythonColorsPage"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyWordSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyLiteralSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyStatementSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyListSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyCommaSelectionHandler"/>
    <basicWordSelectionFilter implementation="com.jetbrains.python.editor.selectWord.PyBasicWordSelectionFilter"/>
    <stripTrailingSpacesFilterFactory implementation="com.jetbrains.python.editor.PyStripTrailingSpacesFilterFactory"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.testing.PyTestParameterCompletionContributor"/>

    <projectService serviceImplementation="com.jetbrains.python.configuration.PyConfigurableInterpreterList"/>

    <projectService serviceImplementation="com.jetbrains.python.inspections.PyCompatibilityInspectionAdvertiserSettings"/>
    <projectService serviceImplementation="com.jetbrains.python.packaging.PyPackagingSettings"/>
    <projectService serviceImplementation="com.jetbrains.python.findUsages.PyFindUsagesOptions"/>

    <applicationService serviceImplementation="com.jetbrains.python.sdk.PySdkSettings"/>
    <applicationService serviceImplementation="com.jetbrains.python.packaging.PyPackageService"/>
    <applicationService serviceImplementation="com.jetbrains.python.packaging.PyCondaPackageService"/>
    <applicationService serviceInterface="com.jetbrains.python.module.PyModuleService"
                        serviceImplementation="com.jetbrains.python.module.PyModuleServiceImpl"/>
    <applicationService serviceInterface="com.jetbrains.python.sdk.flavors.WinRegistryService"
                        serviceImplementation="com.jetbrains.python.sdk.flavors.WinRegistryServiceImpl"/>
    <typedHandler implementation="com.jetbrains.python.codeInsight.PyKeywordTypedHandler" id="pyCommaAfterKwd"/>
    <typedHandler implementation="com.jetbrains.python.codeInsight.PyMethodNameTypedHandler" id="pyMethodNameTypedHandler"/>
    <typedHandler implementation="com.jetbrains.python.editor.PythonSpaceHandler"/>


    <idIndexer filetype="Python" implementationClass="com.jetbrains.python.PyIdIndexer"/>
    <todoIndexer filetype="Python" implementationClass="com.jetbrains.python.PyTodoIndexer" />
    <indexPatternBuilder implementation="com.jetbrains.python.PyIndexPatternBuilder" />

    <declarationRangeHandler key="com.jetbrains.python.psi.PyClass"
                             implementationClass="com.jetbrains.python.codeInsight.PyDeclarationRangeHandler"/>

    <declarationRangeHandler key="com.jetbrains.python.psi.PyFunction"
                             implementationClass="com.jetbrains.python.codeInsight.PyDeclarationRangeHandler"/>

    <moduleService serviceImplementation="com.jetbrains.python.ReSTService$ModuleService"/>
    <applicationService serviceImplementation="com.jetbrains.python.ReSTService$AppService"/>

    <!-- Run/Debug -->
    <applicationService serviceInterface="com.jetbrains.python.run.PyRunConfigurationFactory"
                        serviceImplementation="com.jetbrains.python.run.PyRunConfigurationFactoryImpl"/>
    <applicationService serviceImplementation="com.jetbrains.python.run.PythonRunConfigurationExtensionsManager"/>
    <projectService serviceImplementation="com.jetbrains.python.debugger.PyDebugValueExecutionService"/>
    <configurationType implementation="com.jetbrains.python.run.PythonConfigurationType"/>
    <programRunner implementation="com.jetbrains.python.run.PythonRunner" order="first"/>
    <programRunner implementation="com.jetbrains.python.debugger.PyDebugRunner"/>
    <runConfigurationProducer implementation="com.jetbrains.python.run.PythonRunConfigurationProducer"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyLineBreakpointType"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyExceptionBreakpointType"/>
    <xdebugger.settings implementation="com.jetbrains.python.debugger.settings.PyDebuggerSettings"/>
    <xdebugger.localAttachDebuggerProvider implementation="com.jetbrains.python.debugger.attach.PyLocalAttachDebuggerProvider"/>

    <configurationType implementation="com.jetbrains.python.testing.PythonTestConfigurationType"/>
    <configurationType implementation="com.jetbrains.python.testing.tox.PyToxConfigurationType"/>

    <runConfigurationProducer implementation="com.jetbrains.python.testing.unittestLegacy.PythonUnitTestConfigurationProducer"/>
    <runConfigurationProducer implementation="com.jetbrains.python.testing.pytestLegacy.PyTestConfigurationProducer"/>
    <runConfigurationProducer implementation="com.jetbrains.python.testing.doctest.PythonDocTestConfigurationProducer"/>
    <runConfigurationProducer implementation="com.jetbrains.python.testing.tox.PyToxConfigurationProducer"/>
    <runConfigurationProducer implementation="com.jetbrains.python.testing.nosetestLegacy.PythonNoseTestConfigurationProducer"/>
    <runConfigurationProducer implementation="com.jetbrains.python.testing.PyTestsConfigurationProducer"/>
    <runLineMarkerContributor language="Python"
                              implementationClass="com.jetbrains.python.testing.PyTestLineMarkerContributor"/>

    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.python.codeInsight.PyLineMarkerProvider"/>
    <codeInsight.typeInfo language="Python" implementationClass="com.jetbrains.python.actions.PythonExpressionTypeProvider"/>
    <runLineMarkerContributor language="Python" implementationClass="com.jetbrains.python.codeInsight.PyRunLineMarkerContributor"/>
    <gotoTargetRendererProvider implementation="com.jetbrains.python.codeInsight.PyGotoTargetRendererProvider"/>

    <typeHierarchyProvider language="Python" implementationClass="com.jetbrains.python.hierarchy.PyTypeHierachyProvider"/>
    <callHierarchyProvider language="Python" implementationClass="com.jetbrains.python.hierarchy.call.PyCallHierarchyProvider"/>
    <highlightUsagesHandlerFactory implementation="com.jetbrains.python.codeInsight.highlighting.PyHighlightExitPointsHandlerFactory"/>

    <joinLinesHandler implementation="com.jetbrains.python.editor.PyJoinLinesHandler"/>

    <testFinder implementation="com.jetbrains.python.codeInsight.testIntegration.PyTestFinder"/>
    <testCreator language="Python" implementationClass="com.jetbrains.python.codeInsight.testIntegration.PyTestCreator"/>

    <localInspection language="Python" shortName="PyUnresolvedReferencesInspection" suppressId="PyUnresolvedReferences" bundle="messages.PyPsiBundle" key="INSP.NAME.unresolved.refs" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.unresolvedReference.PyUnresolvedReferencesInspection"/>
    <localInspection language="Python" shortName="PyTestParametrizedInspection" suppressId="PyTestParametrized"
                     bundle="messages.PyPsiBundle" key="INSP.NAME.pytest-parametrized" groupKey="INSP.GROUP.python"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.python.testing.pyTestParametrized.PyTestParametrizedInspection"/>
    <localInspection shortName="PyPackageRequirementsInspection" suppressId="PyPackageRequirements" bundle="messages.PyPsiBundle" key="INSP.NAME.requirements" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyPackageRequirementsInspection"/>
    <localInspection language="Python" shortName="PyPep8Inspection" suppressId="PyPep8" bundle="messages.PyPsiBundle" key="INSP.pep8.coding.style.violation" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyPep8Inspection" unfair="true"/>
    <localInspection language="Python" shortName="PyInterpreterInspection" suppressId="PyInterpreter" bundle="messages.PyPsiBundle" key="INSP.NAME.invalid.interpreter" groupKey="INSP.GROUP.python" enabledByDefault="true" level="WARNING" implementationClass="com.jetbrains.python.inspections.PyInterpreterInspection"/>
    <localInspection language="Python" shortName="PyStubPackagesCompatibilityInspection" suppressId="PyStubPackagesCompatibility" bundle="messages.PyPsiBundle" key="INSP.stub.packages.compatibility" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.codeInsight.typing.PyStubPackagesCompatibilityInspection"/>
    <localInspection language="Python" shortName="PyStubPackagesAdvertiser" suppressId="PyStubPackagesAdvertiser" bundle="messages.PyPsiBundle" key="INSP.stub.packages" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.codeInsight.typing.PyStubPackagesAdvertiser"/>

    <defaultLiveTemplates file="liveTemplates/Python.xml"/>
    <liveTemplateContext implementation="com.jetbrains.python.codeInsight.liveTemplates.PythonTemplateContextType$General"/>
    <liveTemplateContext implementation="com.jetbrains.python.codeInsight.liveTemplates.PythonTemplateContextType$Class"/>
    <liveTemplateMacro implementation="com.jetbrains.python.codeInsight.liveTemplates.CollectionElementNameMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.python.codeInsight.liveTemplates.PyClassNameMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.python.codeInsight.liveTemplates.PyFunctionNameMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.python.codeInsight.liveTemplates.PyIterableVariableMacro"/>

    <codeInsight.overrideMethod language="Python" implementationClass="com.jetbrains.python.codeInsight.override.PyOverrideMethodsHandler"/>
    <codeInsight.implementMethod language="Python" implementationClass="com.jetbrains.python.codeInsight.implement.PyImplementMethodsHandler"/>
    <lang.refactoringSupport language="Python" implementationClass="com.jetbrains.python.refactoring.PyRefactoringProvider"/>
    <lang.refactoringSupport.classMembersRefactoringSupport language="Python"
                                                            implementationClass="com.jetbrains.python.refactoring.classes.PyMembersRefactoringSupport"/>
    <inlineActionHandler implementation="com.jetbrains.python.refactoring.inline.PyInlineLocalHandler"/>
    <inlineActionHandler implementation="com.jetbrains.python.refactoring.inline.PyInlineFunctionHandler"/>
    <codeInsight.gotoSuper language="Python" implementationClass="com.jetbrains.python.codeInsight.PyGotoSuperHandler"/>
    <lang.smartEnterProcessor language="Python"
                              implementationClass="com.jetbrains.python.codeInsight.editorActions.smartEnter.PySmartEnterProcessor"/>
    <statementUpDownMover implementation="com.jetbrains.python.codeInsight.editorActions.moveUpDown.PyStatementMover" id="pyStatementMover"
                          order="before line"/>

    <elementDescriptionProvider implementation="com.jetbrains.python.findUsages.PyElementDescriptionProvider"/>
    <elementDescriptionProvider implementation="com.jetbrains.python.magicLiteral.PyMagicLiteralElementDescriptionProvider"/>
    <fileStructureGroupRuleProvider implementation="com.jetbrains.python.findUsages.PyFunctionGroupingRuleProvider" id="py-function"/>
    <usageTypeProvider implementation="com.jetbrains.python.findUsages.PyUsageTypeProvider"/>
    <usageTargetProvider implementation="com.jetbrains.python.magicLiteral.PyMagicLiteralUsageTargetProvider"/>
    <importFilteringRule implementation="com.jetbrains.python.findUsages.PyImportFilteringRule"/>

    <multiHostInjector implementation="com.jetbrains.python.codeInsight.regexp.PythonRegexpInjector"/>
    <lang.parserDefinition language="PythonRegExp"
                           implementationClass="com.jetbrains.python.codeInsight.regexp.PythonRegexpParserDefinition"/>
    <lang.syntaxHighlighterFactory language="PythonRegExp"
                                   implementationClass="com.jetbrains.python.codeInsight.regexp.PythonRegexpSyntaxHighlighterFactory"/>
    <lang.parserDefinition language="PythonVerboseRegExp"
                           implementationClass="com.jetbrains.python.codeInsight.regexp.PythonVerboseRegexpParserDefinition"/>
    <lang.syntaxHighlighterFactory language="PythonVerboseRegExp"
                                   implementationClass="com.jetbrains.python.codeInsight.regexp.PythonVerboseRegexpSyntaxHighlighterFactory"/>
    <regExpLanguageHost forClass="com.jetbrains.python.psi.impl.PyStringLiteralExpressionImpl" implementationClass="com.jetbrains.python.codeInsight.PythonRegExpHost"/>

    <applicationService serviceImplementation="com.jetbrains.python.testing.PyTestFrameworkService"/>
    <autoImportOptionsProvider instance="com.jetbrains.python.codeInsight.imports.PyAutoImportOptions"/>

    <completion.ml.contextFeatures language="Python" implementationClass="com.jetbrains.python.codeInsight.mlcompletion.PyContextFeatureProvider"/>
    <completion.ml.elementFeatures language="Python" implementationClass="com.jetbrains.python.codeInsight.mlcompletion.PyElementFeatureProvider"/>
    <completion.confidence language="Python" implementationClass="com.jetbrains.python.codeInsight.completion.PyCompletionConfidence"/>
    <completion.ml.model implementation="com.jetbrains.python.codeInsight.mlcompletion.PythonMLRankingProvider"/>
    <typedHandler implementation="com.jetbrains.python.console.completion.PythonConsoleAutopopupBlockingHandler" id="pydevBlockAutoPopup"
                  order="first, before completionAutoPopup"/>

    <referencesSearch implementation="com.jetbrains.python.magicLiteral.PyMagicLiteralReferenceSearcher"/>

    <findUsagesHandlerFactory implementation="com.jetbrains.python.findUsages.PyFindUsagesHandlerFactory" id="Python"
                              order="last, before default"/>
    <readWriteAccessDetector implementation="com.jetbrains.python.findUsages.PyReadWriteAccessDetector"/>
    <findUsagesHandlerFactory implementation="com.jetbrains.python.magicLiteral.PyMagicLiteralFindUsagesHandlerFactory"/>

    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyVariableProcessor" order="last" id="pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyFunctionProcessor" order="before pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.magicLiteral.PyMagicLiteralRenameProcessor" order="before pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyFileProcessor" order="first"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenameUnsupportedExpressionProcessor"/>

    <automaticRenamerFactory implementation="com.jetbrains.python.refactoring.rename.PyContainingFileRenamerFactory"/>
    <automaticRenamerFactory implementation="com.jetbrains.python.refactoring.rename.PyInheritorRenameFactory"/>
    <automaticRenamerFactory implementation="com.jetbrains.python.refactoring.rename.PyParametersRenameFactory"/>

    <moveFileHandler implementation="com.jetbrains.python.refactoring.move.PyMoveFileHandler"/>
    <refactoring.moveHandler implementation="com.jetbrains.python.refactoring.move.PyMoveSymbolDelegate"/>

    <refactoring.changeSignatureUsageProcessor implementation="com.jetbrains.python.refactoring.changeSignature.PyChangeSignatureUsageProcessor" id="Python"/>

    <lang.importOptimizer language="Python" implementationClass="com.jetbrains.python.codeInsight.imports.PyImportOptimizer"/>

    <langCodeStyleSettingsProvider implementation="com.jetbrains.python.formatter.PyLanguageCodeStyleSettingsProvider"/>

    <analyzeStacktraceFilter implementation="com.jetbrains.python.run.PythonTracebackFilter"/>
    <analyzeStacktraceFilter implementation="com.jetbrains.python.run.PyRemoteAnalyzeStacktraceFilter"/>

    <internalFileTemplate name="Python Script"/>
    <internalFileTemplate name="Python Unit Test"/>
    <internalFileTemplate name="Setup Script"/>

    <problemFileHighlightFilter implementation="com.jetbrains.python.codeInsight.PyProblemFileHighlightFilter"/>

    <editorSmartKeysConfigurable instance="com.jetbrains.python.codeInsight.PySmartKeysOptions" id="editor.preferences.pyOptions"
                                 bundle="messages.PyBundle"
                                 key="configurable.PySmartKeysOptions.display.name"/>

    <!-- We run it before FilePathCompletionContributor (id="filePath") to get help text about full path results in the extended completion -->
    <psi.referenceContributor implementation="com.jetbrains.python.codeInsight.PySoftFileReferenceContributor" language="Python" order="before filePath"/>
    <psi.referenceContributor implementation="com.jetbrains.python.codeInsight.PyConsoleFileReferenceContributor" language="Python" order="before filePath"/>
    <psi.referenceContributor implementation="com.jetbrains.python.testing.pyTestFixtures.PyTestFixtureReferenceContributor" language="Python"/>

    <applicationConfigurable groupId="tools" instance="com.jetbrains.python.documentation.PythonDocumentationConfigurable"
                             id="com.jetbrains.python.documentation.PythonDocumentationConfigurable"/>
    <projectConfigurable groupId="tools" instance="com.jetbrains.python.configuration.PyIntegratedToolsModulesConfigurable"
                         id="com.jetbrains.python.configuration.PyIntegratedToolsModulesConfigurable"
                         bundle="messages.PyBundle"
                         key="configurable.PyIntegratedToolsModulesConfigurable.display.name"/>
    <search.optionContributor implementation="com.jetbrains.python.PySearchableOptionContributor"/>

    <treeStructureProvider implementation="com.jetbrains.python.projectView.PyTreeStructureProvider"/>

    <projectConfigurable groupId="build" dynamic="true" id="pyconsole" instance="com.jetbrains.python.console.PyConsoleOptionsConfigurable"
                         bundle="messages.PyBundle"
                         key="configurable.PyConsoleOptionsConfigurable.display.name"/>

    <projectService serviceImplementation="com.jetbrains.python.console.PyConsoleOptions"/>
    <projectService serviceImplementation="com.jetbrains.python.console.PythonConsoleToolWindow"/>

    <projectConfigurable groupId="build" groupWeight="119" id="reference.idesettings.debugger.python"
                         instance="com.jetbrains.python.debugger.PyDebuggerConfigurable"
                         bundle="messages.PyBundle"
                         key="configurable.PyDebuggerConfigurable.display.name"/>

    <projectService serviceImplementation="com.jetbrains.python.debugger.PyDebuggerOptionsProvider"/>

    <codeBlockProvider language="Python" implementationClass="com.jetbrains.python.codeInsight.PyCodeBlockProvider"/>

    <iconProvider implementation="com.jetbrains.python.PyDirectoryIconProvider" id="pyDirectoryDefault"/>

    <projectService serviceInterface="com.jetbrains.python.debugger.PySignatureCacheManager"
                    serviceImplementation="com.jetbrains.python.debugger.PySignatureCacheManagerImpl"/>

    <applicationService serviceInterface="com.jetbrains.python.packaging.PyPackageManagers"
                        serviceImplementation="com.jetbrains.python.packaging.PyPackageManagersImpl"/>
    <applicationService serviceImplementation="com.jetbrains.python.codeInsight.typing.PyStubPackagesAdvertiserCache"/>
    <projectService serviceImplementation="com.jetbrains.python.codeInsight.typing.PyStubPackagesInstallingStatus"/>

    <qualifiedNameProvider implementation="com.jetbrains.python.actions.PyQualifiedNameProvider"/>

    <externalAnnotator language="Python" implementationClass="com.jetbrains.python.validation.Pep8ExternalAnnotator"/>

    <additionalTextAttributes scheme="Default" file="colorSchemes/PythonDefault.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorSchemes/PythonDarcula.xml"/>

    <backgroundPostStartupActivity implementation="com.jetbrains.python.sdk.PythonSdkUpdater"/>
    <backgroundPostStartupActivity implementation="com.jetbrains.python.packaging.PyPackagesUpdater"/>
    <directoryProjectConfigurator implementation="com.jetbrains.python.configuration.PyDefaultProjectAwareServiceConfigurator" id="integratedTools" order="after sdk"/>


    <macro implementation="com.jetbrains.python.sdk.InterpreterDirectoryMacro"/>

    <!-- User skeletons -->
    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.python.codeInsight.userSkeletons.PyUserSkeletonsLineMarkerProvider"/>

    <!-- TestRunnerService -->
    <moduleService serviceImplementation="com.jetbrains.python.testing.TestRunnerService$ModuleService"/>
    <applicationService serviceImplementation="com.jetbrains.python.testing.TestRunnerService$AppService"/>

    <!-- PyFunctionTypeAnnotation -->
    <lang.parserDefinition language="PyFunctionTypeComment"
                           implementationClass="com.jetbrains.python.codeInsight.functionTypeComments.PyFunctionTypeAnnotationParserDefinition"/>

    <!-- Packaging -->
    <moduleService serviceImplementation="com.jetbrains.python.packaging.PyPackageRequirementsSettings$ModuleService"/>
    <applicationService serviceImplementation="com.jetbrains.python.packaging.PyPackageRequirementsSettings$AppService"/>

    <!-- typing -->
    <multiHostInjector implementation="com.jetbrains.python.codeInsight.typing.PyTypingAnnotationInjector"/>

    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.python.pyi.PyiRelatedItemLineMarkerProvider"/>

    <refactoring.invertBoolean implementation="com.jetbrains.python.refactoring.invertBoolean.PyInvertBooleanDelegate"/>

    <backspaceHandlerDelegate implementation="com.jetbrains.python.codeInsight.editorActions.PyTripleQuoteBackspaceDelegate"/>

    <!--folding-->
    <codeFoldingOptionsProvider instance="com.jetbrains.python.PythonFoldingOptionsProvider"/>
    <applicationService serviceImplementation="com.jetbrains.python.PythonFoldingSettings"/>

    <!-- postfix templates!-->
    <codeInsight.template.postfixTemplateProvider language="Python"
                                                  implementationClass="com.jetbrains.python.codeInsight.postfix.PyPostfixTemplateProvider"/>

    <breadcrumbsInfoProvider implementation="com.jetbrains.python.breadcrumbs.PyBreadcrumbsInfoProvider"/>
    <highlightVisitor implementation="com.jetbrains.python.highlighting.PyRainbowVisitor"/>

    <projectService serviceImplementation="com.jetbrains.python.debugger.containerview.PyDataView"/>
    <createFromTemplateHandler implementation="com.jetbrains.python.packaging.setupPy.PyCreateSetupPyFromTemplateHandler"/>

    <consoleHistoryModelProvider implementation="com.jetbrains.python.console.PyConsoleHistoryModelProvider"/>
    <scratch.rootType implementation="com.jetbrains.python.console.PyConsoleRootType" />

    <!-- Run Anything -->
    <runAnything.executionProvider order="after RunAnythingRunConfigurationProvider" implementation="com.jetbrains.python.run.runAnything.PyRunAnythingProvider"/>
    <runAnything.executionProvider order="after RunAnythingRunConfigurationProvider" implementation="com.jetbrains.python.run.runAnything.PyConsoleRunAnythingProvider"/>
    <runAnything.commandCustomizer implementation="com.jetbrains.python.run.runAnything.PyRunAnythingCommandCustomizer"/>

    <!-- Statistics -->
    <statistics.projectUsagesCollector implementation="com.jetbrains.python.statistics.PyInterpreterUsagesCollector"/>
    <statistics.projectUsagesCollector implementation="com.jetbrains.python.statistics.PyPackageVersionUsagesCollector"/>
    <statistics.validation.customWhiteListRule implementation="com.jetbrains.python.statistics.PyPackageUsagesWhiteListRule"/>

    <!-- Code-insight IDE bridge -->
    <applicationService serviceInterface="com.jetbrains.python.PythonRuntimeService" serviceImplementation="com.jetbrains.python.PythonRuntimeServiceImpl"/>
    <applicationService serviceInterface="com.jetbrains.python.PythonCodeStyleService" serviceImplementation="com.jetbrains.python.PythonCodeStyleServiceImpl"/>
    <applicationService serviceInterface="com.jetbrains.python.PythonUiService" serviceImplementation="com.jetbrains.python.PythonUiServiceImpl"/>
    <applicationService serviceInterface="com.jetbrains.python.codeInsight.imports.PyImportCollectorFactory" serviceImplementation="com.jetbrains.python.codeInsight.imports.CodeStylePyImportCollectorFactory"/>
    <applicationService serviceInterface="com.jetbrains.python.codeInsight.imports.ImportChooser" serviceImplementation="com.jetbrains.python.codeInsight.imports.PyImportChooser"/>

    <registryKey key="python.relative.import.depth" defaultValue="3" description="Specifies default acceptable number of dots in a relative import statement"/>

    <!-- flake8 -->
    <lang.inspectionSuppressor language="Python" implementationClass="com.jetbrains.python.inspections.flake8.Flake8InspectionSuppressor"/>
    <daemon.changeLocalityDetector implementation="com.jetbrains.python.inspections.flake8.Flake8SuppressingCommentLocalityDetector"/>

    <!-- Pipenv -->
    <editorFactoryListener implementation="com.jetbrains.python.sdk.pipenv.PipEnvPipFileWatcher"/>
  </extensions>

  <extensionPoints>
    <extensionPoint qualifiedName="Pythonid.remoteSdkValidator" interface="com.jetbrains.python.sdk.PyRemoteSdkValidator" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyTestFixtureExtension" interface="com.jetbrains.python.testing.pyTestFixtures.PyTestFixtureExtension" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyTestConfigurationSelector"  interface="com.jetbrains.python.testing.PyTestConfigurationSelector" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pythonDocumentationQuickInfoProvider" interface="com.jetbrains.python.documentation.PythonDocumentationQuickInfoProvider" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pythonCommandLineEnvironmentProvider" interface="com.jetbrains.python.run.PythonCommandLineEnvironmentProvider" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.magicLiteral"
                    interface="com.jetbrains.python.magicLiteral.PyMagicLiteralExtensionPoint"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.runnableScriptFilter" interface="com.jetbrains.python.run.RunnableScriptFilter" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.unresolvedReferenceQuickFixProvider"
                    interface="com.jetbrains.python.inspections.PyUnresolvedReferenceQuickFixProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyAnnotator" interface="com.jetbrains.python.validation.PyAnnotator" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.documentationLinkProvider"
                    interface="com.jetbrains.python.documentation.PythonDocumentationLinkProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.runConfigurationExtension" interface="com.jetbrains.python.run.PythonRunConfigurationExtension" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.remoteInterpreterManager"
                    interface="com.jetbrains.python.remote.PythonRemoteInterpreterManager"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.remoteSkeletonGeneratorFactory" interface="com.jetbrains.python.remote.PyRemoteSkeletonGeneratorFactory" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.remoteProcessStarterManager" interface="com.jetbrains.python.run.PyRemoteProcessStarterManager" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.remoteConsoleProcessCreator" interface="com.jetbrains.python.console.PythonConsoleRemoteProcessCreator" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.breakpointHandler"
                    interface="com.jetbrains.python.debugger.PyBreakpointHandlerFactory"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.consoleOptionsProvider"
                    interface="com.jetbrains.python.console.PyConsoleOptionsProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyRootTypeProvider" interface="com.jetbrains.python.module.PyRootTypeProvider" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.runConfigurationEditorExtension" interface="com.jetbrains.python.run.PyRunConfigurationEditorExtension" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyCustomSdkUiProvider"
                    interface="com.jetbrains.python.sdk.PyCustomSdkUiProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pep8ProblemSuppressor"
                    interface="com.jetbrains.python.validation.Pep8ProblemSuppressor"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.debugSessionFactory" interface="com.jetbrains.python.debugger.PyDebugSessionFactory" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pythonSdkComparator" interface="com.jetbrains.python.sdk.PySdkComparator" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyPregeneratedSkeletonsProvider"
                    interface="com.jetbrains.python.sdk.skeletons.PyPregeneratedSkeletonsProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.pyAddSdkProvider" interface="com.jetbrains.python.sdk.add.PyAddSdkProvider" dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.packageManagerProvider" interface="com.jetbrains.python.packaging.PyPackageManagerProvider"/>
    <extensionPoint qualifiedName="Pythonid.projectSynchronizerProvider"
                    interface="com.jetbrains.python.remote.PyProjectSynchronizerProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="Pythonid.sshInterpreterManager" interface="com.jetbrains.python.remote.PythonSshInterpreterManager" dynamic="true"/>

    <extensionPoint qualifiedName="Pythonid.condaSdkCustomizer"
                    interface="com.jetbrains.python.sdk.conda.PyCondaSdkCustomizer"
                    dynamic="true"/>
  </extensionPoints>

  <extensions defaultExtensionNs="Pythonid">
    <pyReferenceCustomTargetChecker implementation="com.jetbrains.python.testing.pyTestFixtures.PyTestFixtureTargetChecker"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.DocStringAnnotator"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.PyDefinitionsAnnotator"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.GeneratorInArgumentListAnnotator"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.StarAnnotator"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.StringLiteralQuotesAnnotator"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.FStringsAnnotator"/>
    <pyAnnotator implementation="com.jetbrains.python.validation.PyHighlightingAnnotator"/>

    <!--stdlib-->
    <documentationLinkProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibDocumentationLinkProvider"/>


    <!--pytest fixture -->
    <inspectionExtension implementation="com.jetbrains.python.testing.pyTestFixtures.PyTestFixtureInspectionExtension"/>
    <inspectionExtension implementation="com.jetbrains.python.testing.pyTestParametrized.PyTestParametrizedInspectionExtension"/>
    <typeProvider implementation="com.jetbrains.python.testing.pyTestParametrized.PyTestParametrizedTypeProvider"/>
    <typeProvider implementation="com.jetbrains.python.testing.pyTestFixtures.PyTextFixtureTypeProvider"/>

    <!-- typing -->
    <visitorFilter language="PythonStub" implementationClass="com.jetbrains.python.pyi.PyiVisitorFilter"/>

    <typeProvider implementation="com.jetbrains.python.debugger.PyCallSignatureTypeProvider"/>

    <!-- NumPy -->
    <documentationLinkProvider implementation="com.jetbrains.numpy.codeInsight.SciPyDocumentationLinkProvider"/>

    <!-- PyDocstring -->
    <visitorFilter language="PyDocstring" implementationClass="com.jetbrains.python.documentation.PyDocstringVisitorFilter"/>

    <!-- Console -->
    <visitorFilter language="Python" implementationClass="com.jetbrains.python.console.ConsoleVisitorFilter"/>

    <!-- Packaging -->
    <keywordArgumentProvider implementation="com.jetbrains.python.packaging.setupPy.SetupKeywordArgumentProvider"/>

    <!-- PyQt -->
    <typeProvider implementation="com.jetbrains.pyqt.PyQtTypeProvider"/>

    <!-- TensorFlow -->
    <importResolver implementation="com.jetbrains.tensorFlow.PyTensorFlowImportResolver"/>
    <pyModuleMembersProvider implementation="com.jetbrains.tensorFlow.PyTensorFlowModuleMembersProvider"/>

    <!-- PyFunctionTypeAnnotation -->
    <visitorFilter language="PyFunctionTypeComment"
                   implementationClass="com.jetbrains.python.inspections.PyFunctionTypeAnnotationVisitorFilter"/>

    <!-- PyExpressionCodeFragment -->
    <visitorFilter language="Python"
                   implementationClass="com.jetbrains.python.inspections.PyExpressionCodeFragmentVisitorFilter"/>

    <!-- Pipenv -->
    <pyAddSdkProvider implementation="com.jetbrains.python.sdk.pipenv.PyAddPipEnvSdkProvider"/>
    <pythonFlavorProvider implementation="com.jetbrains.python.sdk.pipenv.PyPipEnvSdkFlavorProvider"/>

    <!-- SDK Flavors -->
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.CondaEnvSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.IronPythonSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.JythonSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.MacPythonSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.PyPySdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.PyRemoteSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.UnixPythonSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.VirtualEnvSdkFlavor"/>
    <pythonSdkFlavor implementation="com.jetbrains.python.sdk.flavors.WinPythonSdkFlavor"/>

    <!-- Other -->
    <pythonFlavorProvider implementation="com.jetbrains.python.sdk.flavors.MayaFlavorProvider"/>
    <pyPregeneratedSkeletonsProvider id="default" implementation="com.jetbrains.python.sdk.skeletons.DefaultPregeneratedSkeletonsProvider"/>
    <inspectionExtension implementation="com.jetbrains.python.inspections.PyThirdPartyInspectionExtension"/>

    <condaSdkCustomizer implementation="com.jetbrains.python.sdk.conda.PyCondaSdkDefaultCustomizer"/>
  </extensions>

  <actions>
    <action overrides="true" id="ForceStepInto" class="com.jetbrains.python.debugger.PyForceStepIntoAction"
            icon="PlatformDebuggerImplIcons.Actions.Force_step_into"/>

    <!-- Console -->
    <action id="com.jetbrains.python.console.RunPythonOrDebugConsoleAction"
            class="com.jetbrains.python.console.RunPythonOrDebugConsoleAction"
    >
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <action id="ExecuteInPyConsoleAction"
            class="com.jetbrains.python.actions.PyExecuteSelectionAction">
      <add-to-group group-id="EditorPopupMenu" anchor="before" relative-to-action="CompareClipboardWithSelection"/>

      <keyboard-shortcut keymap="$default" first-keystroke="alt shift E"/>
      <keyboard-shortcut keymap="Mac OS X" first-keystroke="control shift E" />
      <keyboard-shortcut keymap="Mac OS X 10.5+" first-keystroke="control shift E" />
      <keyboard-shortcut keymap="Eclipse" first-keystroke="ctrl alt E" replace-all="true"/>
      <keyboard-shortcut keymap="NetBeans 6.5" first-keystroke="ctrl alt E" replace-all="true"/>
    </action>

    <action id="PyRunFileInConsole" class="com.jetbrains.python.actions.PyRunFileInConsoleAction">
      <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="ExecuteInPyConsoleAction"/>
    </action>

    <action id="PyConsoleRenameAction" class="com.jetbrains.python.console.actions.PyConsoleRenameAction">
      <add-to-group group-id="ToolWindowContextMenu" anchor="last"/>
    </action>

    <action id="NewPythonFile" class="com.jetbrains.python.actions.CreatePythonFileAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml"/>
    </action>

    <action id="NewPythonPackage" class="com.jetbrains.python.actions.CreatePackageAction"
            icon="AllIcons.Nodes.Package">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewDir"/>
    </action>

    <action id="CompuleQrc" class="com.jetbrains.pyqt.CompileQrcAction">
      <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="first"/>
    </action>

    <action id="CleanPyc" class="com.jetbrains.python.actions.CleanPycAction">
      <add-to-group group-id="ProjectViewPopupMenu" anchor="after" relative-to-action="ProjectViewPopupMenuRefactoringGroup"/>
    </action>

    <group id="PyPackagingMenu">
      <action id="PySyncPythonRequirements" class="com.jetbrains.python.packaging.PySyncPythonRequirementsAction"/>
      <action id="CreateSetupPy" class="com.jetbrains.python.packaging.setupPy.CreateSetupPyAction"/>
      <action id="RunSetupPyTask" class="com.jetbrains.python.packaging.setupPy.SetupTaskChooserAction"/>
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="PythonGenerateDictionaries" class="com.jetbrains.python.spellchecker.PythonSpellcheckerGenerateDictionariesAction"
            internal="true">
      <add-to-group group-id="Internal"/>
    </action>

    <action id="PyDebugger.ViewArray" class="com.jetbrains.python.debugger.containerview.PyViewNumericContainerAction">
      <add-to-group group-id="XDebugger.ValueGroup" anchor="after" relative-to-action="Debugger.AddToWatch"/>
    </action>

    <action id="PyDebugger.ViewAsGroup" class="com.jetbrains.python.debugger.actions.ViewAsGroup">
      <add-to-group group-id="XDebugger.ValueGroup" anchor="last" />
    </action>

    <action id="PyConvertModuleToPackage" class="com.jetbrains.python.refactoring.convertModulePackage.PyConvertModuleToPackageAction"
    >
      <add-to-group group-id="RefactoringMenu" anchor="last" />
    </action>

    <action id="PyConvertPackageToModuleAction" class="com.jetbrains.python.refactoring.convertModulePackage.PyConvertPackageToModuleAction"
    >
      <add-to-group group-id="RefactoringMenu" anchor="last" />
    </action>

    <action id="StepIntoMyCode" class="com.jetbrains.python.debugger.PyStepIntoMyCodeAction" icon="PythonIcons.Python.Debug.StepIntoMyCode"
            use-shortcut-of="ForceStepInto">
      <add-to-group group-id="DebugMainMenu" relative-to-action="StepInto" anchor="after"/>
      <add-to-group group-id="XDebugger.ToolWindow.TopToolbar" relative-to-action="StepInto" anchor="after"/>
    </action>

    <action id="SetNextStatement" class="com.jetbrains.python.debugger.PySetNextStatementAction">
      <add-to-group group-id="DebugMainMenu" relative-to-action="ForceRunToCursor" anchor="after"/>
      <add-to-group group-id="EditorPopupMenuDebug" relative-to-action="ForceRunToCursor" anchor="after"/>
    </action>
  </actions>

  <extensions defaultExtensionNs="com.intellij.spellchecker">
    <support language="Python" implementationClass="com.jetbrains.python.spellchecker.PythonSpellcheckerStrategy"/>
    <bundledDictionaryProvider implementation="com.jetbrains.python.spellchecker.PythonBundledDictionaryProvider"/>
  </extensions>

  <applicationListeners>
    <listener class="com.jetbrains.python.testing.VFSTestFrameworkListener$Listener" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
  </applicationListeners>
</idea-plugin>
