e:com.intellij.execution.ShortenCommandLine
- java.lang.Enum
- sf:ARGS_FILE:com.intellij.execution.ShortenCommandLine
- sf:CLASSPATH_FILE:com.intellij.execution.ShortenCommandLine
- sf:MANIFEST:com.intellij.execution.ShortenCommandLine
- sf:NONE:com.intellij.execution.ShortenCommandLine
- s:getDefaultMethod(com.intellij.openapi.project.Project,java.lang.String):com.intellij.execution.ShortenCommandLine
- s:getDefaultMethodForJdkLevel(java.lang.String):com.intellij.execution.ShortenCommandLine
- getDescription():java.lang.String
- getPresentableName():java.lang.String
- isApplicable(java.lang.String):Z
- s:valueOf(java.lang.String):com.intellij.execution.ShortenCommandLine
- s:values():com.intellij.execution.ShortenCommandLine[]
c:com.intellij.execution.configurations.SimpleJavaParameters
- com.intellij.execution.configurations.SimpleProgramParameters
- <init>():V
- createOSProcessHandler():com.intellij.execution.process.OSProcessHandler
- getCharset():java.nio.charset.Charset
- getClassPath():com.intellij.util.PathsList
- getJarPath():java.lang.String
- getJdk():com.intellij.openapi.projectRoots.Sdk
- getMainClass():java.lang.String
- getModuleName():java.lang.String
- getModulePath():com.intellij.util.PathsList
- getVMParametersList():com.intellij.execution.configurations.ParametersList
- isArgFile():Z
- isClasspathFile():Z
- isDynamicClasspath():Z
- isDynamicParameters():Z
- isDynamicVMOptions():Z
- isUseClasspathJar():Z
- setArgFile(Z):V
- setCharset(java.nio.charset.Charset):V
- setClasspathFile(Z):V
- setJarPath(java.lang.String):V
- setJdk(com.intellij.openapi.projectRoots.Sdk):V
- setMainClass(java.lang.String):V
- setModuleName(java.lang.String):V
- setShortenCommandLine(com.intellij.execution.ShortenCommandLine):V
- setShortenCommandLine(com.intellij.execution.ShortenCommandLine,com.intellij.openapi.project.Project):V
- setUseClasspathJar(Z):V
- setUseDynamicClasspath(com.intellij.openapi.project.Project):V
- setUseDynamicClasspath(Z):V
- setUseDynamicParameters(Z):V
- setUseDynamicVMOptions(Z):V
- toCommandLine():com.intellij.execution.configurations.GeneralCommandLine
- toCommandLine(com.intellij.execution.target.TargetEnvironmentRequest):com.intellij.execution.target.TargetedCommandLineBuilder
- useDynamicClasspathDefinedByJdkLevel():V
c:com.intellij.facet.Facet
- com.intellij.openapi.util.UserDataHolderBase
- com.intellij.openapi.Disposable
- com.intellij.openapi.roots.ProjectModelElement
- com.intellij.openapi.util.UserDataHolder
- sf:EMPTY_ARRAY:com.intellij.facet.Facet[]
- <init>(com.intellij.facet.FacetType,com.intellij.openapi.module.Module,java.lang.String,com.intellij.facet.FacetConfiguration,com.intellij.facet.Facet):V
- f:dispose():V
- disposeFacet():V
- f:equals(java.lang.Object):Z
- f:getConfiguration():com.intellij.facet.FacetConfiguration
- getExternalSource():com.intellij.openapi.roots.ProjectModelExternalSource
- f:getModule():com.intellij.openapi.module.Module
- f:getName():java.lang.String
- f:getType():com.intellij.facet.FacetType
- f:getTypeId():com.intellij.facet.FacetTypeId
- f:getUnderlyingFacet():com.intellij.facet.Facet
- f:hashCode():I
- initFacet():V
- isDisposed():Z
com.intellij.facet.FacetConfiguration
- a:createEditorTabs(com.intellij.facet.ui.FacetEditorContext,com.intellij.facet.ui.FacetValidatorsManager):com.intellij.facet.ui.FacetEditorTab[]
- readExternal(org.jdom.Element):V
- writeExternal(org.jdom.Element):V
Fa:com.intellij.facet.FacetManager
- com.intellij.facet.FacetModel
- sf:FACETS_TOPIC:com.intellij.util.messages.Topic
- <init>():V
- a:addFacet(com.intellij.facet.FacetType,java.lang.String,com.intellij.facet.Facet):com.intellij.facet.Facet
- a:createFacet(com.intellij.facet.FacetType,java.lang.String,com.intellij.facet.Facet):com.intellij.facet.Facet
- a:createFacet(com.intellij.facet.FacetType,java.lang.String,com.intellij.facet.FacetConfiguration,com.intellij.facet.Facet):com.intellij.facet.Facet
- a:createModifiableModel():com.intellij.facet.ModifiableFacetModel
- a:facetConfigurationChanged(com.intellij.facet.Facet):V
- s:getInstance(com.intellij.openapi.module.Module):com.intellij.facet.FacetManager
com.intellij.facet.FacetManagerListener
- java.util.EventListener
- beforeFacetAdded(com.intellij.facet.Facet):V
- beforeFacetRemoved(com.intellij.facet.Facet):V
- beforeFacetRenamed(com.intellij.facet.Facet):V
- facetAdded(com.intellij.facet.Facet):V
- facetConfigurationChanged(com.intellij.facet.Facet):V
- facetRemoved(com.intellij.facet.Facet):V
- facetRenamed(com.intellij.facet.Facet,java.lang.String):V
com.intellij.facet.FacetModel
- a:findFacet(com.intellij.facet.FacetTypeId,java.lang.String):com.intellij.facet.Facet
- a:getAllFacets():com.intellij.facet.Facet[]
- a:getFacetByType(com.intellij.facet.Facet,com.intellij.facet.FacetTypeId):com.intellij.facet.Facet
- a:getFacetByType(com.intellij.facet.FacetTypeId):com.intellij.facet.Facet
- a:getFacetName(com.intellij.facet.Facet):java.lang.String
- a:getFacetsByType(com.intellij.facet.Facet,com.intellij.facet.FacetTypeId):java.util.Collection
- a:getFacetsByType(com.intellij.facet.FacetTypeId):java.util.Collection
- a:getSortedFacets():com.intellij.facet.Facet[]
a:com.intellij.facet.FacetType
- com.intellij.openapi.extensions.PluginAware
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- <init>(com.intellij.facet.FacetTypeId,java.lang.String,java.lang.String):V
- <init>(com.intellij.facet.FacetTypeId,java.lang.String,java.lang.String,com.intellij.facet.FacetTypeId):V
- a:createDefaultConfiguration():com.intellij.facet.FacetConfiguration
- createDefaultConfigurationEditor(com.intellij.openapi.project.Project,com.intellij.facet.FacetConfiguration):com.intellij.facet.ui.DefaultFacetSettingsEditor
- a:createFacet(com.intellij.openapi.module.Module,java.lang.String,com.intellij.facet.FacetConfiguration,com.intellij.facet.Facet):com.intellij.facet.Facet
- createMultipleConfigurationsEditor(com.intellij.openapi.project.Project,com.intellij.facet.ui.FacetEditor[]):com.intellij.facet.ui.MultipleFacetSettingsEditor
- s:findInstance(java.lang.Class):com.intellij.facet.FacetType
- getDefaultFacetName():java.lang.String
- getHelpTopic():java.lang.String
- getIcon():javax.swing.Icon
- f:getId():com.intellij.facet.FacetTypeId
- f:getPluginDescriptor():com.intellij.openapi.extensions.PluginDescriptor
- getPresentableName():java.lang.String
- f:getStringId():java.lang.String
- F:getUnderlyingFacetType():com.intellij.facet.FacetTypeId
- isOnlyOneFacetAllowed():Z
- a:isSuitableModuleType(com.intellij.openapi.module.ModuleType):Z
- setPluginDescriptor(com.intellij.openapi.extensions.PluginDescriptor):V
f:com.intellij.facet.FacetTypeId
- <init>(java.lang.String):V
com.intellij.facet.ModifiableFacetModel
- com.intellij.facet.FacetModel
- a:addFacet(com.intellij.facet.Facet):V
- a:addFacet(com.intellij.facet.Facet,com.intellij.openapi.roots.ProjectModelExternalSource):V
- a:addListener(com.intellij.facet.ModifiableFacetModel$Listener,com.intellij.openapi.Disposable):V
- a:commit():V
- a:getNewName(com.intellij.facet.Facet):java.lang.String
- a:isModified():Z
- a:isNewFacet(com.intellij.facet.Facet):Z
- a:removeFacet(com.intellij.facet.Facet):V
- a:rename(com.intellij.facet.Facet,java.lang.String):V
com.intellij.facet.ModifiableFacetModel$Listener
- a:onChanged():V
a:com.intellij.facet.ui.DefaultFacetSettingsEditor
- com.intellij.openapi.options.UnnamedConfigurable
- <init>():V
- getHelpTopic():java.lang.String
a:com.intellij.facet.ui.FacetConfigurationQuickFix
- p:<init>():V
- p:<init>(java.lang.String):V
- f:getFixButtonText():java.lang.String
- a:run(javax.swing.JComponent):V
com.intellij.facet.ui.FacetEditor
- a:getEditorTab(java.lang.Class):com.intellij.facet.ui.FacetEditorTab
- a:getEditorTabs():com.intellij.facet.ui.FacetEditorTab[]
com.intellij.facet.ui.FacetEditorContext
- com.intellij.openapi.util.UserDataHolder
- a:createProjectLibrary(java.lang.String,com.intellij.openapi.vfs.VirtualFile[],com.intellij.openapi.vfs.VirtualFile[]):com.intellij.openapi.roots.libraries.Library
- a:findLibrary(java.lang.String):com.intellij.openapi.roots.libraries.Library
- a:getFacet():com.intellij.facet.Facet
- a:getFacetName():java.lang.String
- a:getFacetsProvider():com.intellij.openapi.roots.ui.configuration.FacetsProvider
- a:getLibraries():com.intellij.openapi.roots.libraries.Library[]
- a:getLibraryFiles(com.intellij.openapi.roots.libraries.Library,com.intellij.openapi.roots.OrderRootType):com.intellij.openapi.vfs.VirtualFile[]
- a:getModifiableRootModel():com.intellij.openapi.roots.ModifiableRootModel
- a:getModule():com.intellij.openapi.module.Module
- a:getModulesProvider():com.intellij.openapi.roots.ui.configuration.ModulesProvider
- a:getParentFacet():com.intellij.facet.Facet
- a:getProject():com.intellij.openapi.project.Project
- a:getRootModel():com.intellij.openapi.roots.ModuleRootModel
- a:isNewFacet():Z
a:com.intellij.facet.ui.FacetEditorTab
- com.intellij.openapi.options.Configurable
- <init>():V
- apply():V
- a:createComponent():javax.swing.JComponent
- onFacetInitialized(com.intellij.facet.Facet):V
- onTabEntering():V
- onTabLeaving():V
a:com.intellij.facet.ui.FacetEditorValidator
- <init>():V
- a:check():com.intellij.facet.ui.ValidationResult
com.intellij.facet.ui.FacetValidatorsManager
- a:registerValidator(com.intellij.facet.ui.FacetEditorValidator,javax.swing.JComponent[]):V
- a:validate():V
a:com.intellij.facet.ui.MultipleFacetSettingsEditor
- <init>():V
- a:createComponent():javax.swing.JComponent
- disposeUIResources():V
- getHelpTopic():java.lang.String
com.intellij.facet.ui.SlowFacetEditorValidator
- checkAsync():java.util.concurrent.CompletableFuture
c:com.intellij.facet.ui.ValidationResult
- sf:OK:com.intellij.facet.ui.ValidationResult
- <init>(java.lang.String):V
- <init>(java.lang.String,com.intellij.facet.ui.FacetConfigurationQuickFix):V
- getErrorMessage():java.lang.String
- getQuickFix():com.intellij.facet.ui.FacetConfigurationQuickFix
- isOk():Z
com.intellij.ide.IdeView
- a:getDirectories():com.intellij.psi.PsiDirectory[]
- a:getOrChooseDirectory():com.intellij.psi.PsiDirectory
- selectElement(com.intellij.psi.PsiElement):V
c:com.intellij.ide.util.frameworkSupport.FrameworkRole
- sf:UNKNOWN:com.intellij.ide.util.frameworkSupport.FrameworkRole[]
- <init>(java.lang.String):V
- equals(java.lang.Object):Z
a:com.intellij.ide.util.projectWizard.AbstractModuleBuilder
- com.intellij.ide.util.projectWizard.ProjectBuilder
- <init>():V
- createFinishingSteps(com.intellij.ide.util.projectWizard.WizardContext,com.intellij.openapi.roots.ui.configuration.ModulesProvider):com.intellij.ide.util.projectWizard.ModuleWizardStep[]
- a:createWizardSteps(com.intellij.ide.util.projectWizard.WizardContext,com.intellij.openapi.roots.ui.configuration.ModulesProvider):com.intellij.ide.util.projectWizard.ModuleWizardStep[]
- equals(java.lang.Object):Z
- a:getBuilderId():java.lang.String
- getCustomOptionsStep(com.intellij.ide.util.projectWizard.WizardContext,com.intellij.openapi.Disposable):com.intellij.ide.util.projectWizard.ModuleWizardStep
- a:getNodeIcon():javax.swing.Icon
- modifyProjectTypeStep(com.intellij.ide.util.projectWizard.SettingsStep):com.intellij.ide.util.projectWizard.ModuleWizardStep
- modifySettingsStep(com.intellij.ide.util.projectWizard.SettingsStep):com.intellij.ide.util.projectWizard.ModuleWizardStep
- a:setContentEntryPath(java.lang.String):V
- a:setModuleFilePath(java.lang.String):V
- a:setName(java.lang.String):V
- validateModuleName(java.lang.String):Z
a:com.intellij.ide.util.projectWizard.ModuleBuilder
- com.intellij.ide.util.projectWizard.AbstractModuleBuilder
- sf:GO_WEIGHT:I
- sf:GROOVY_WEIGHT:I
- sf:IJ_PLUGIN_WEIGHT:I
- sf:JVM_WEIGHT:I
- sf:KOTLIN_WEIGHT:I
- sf:OTHER_WEIGHT:I
- sf:PHP_WEIGHT:I
- sf:PYTHON_WEIGHT:I
- sf:RUBY_WEIGHT:I
- sf:RUST_WEIGHT:I
- sf:SCALA_WEIGHT:I
- sf:WEB_WEIGHT:I
- p:myJdk:com.intellij.openapi.projectRoots.Sdk
- <init>():V
- ps:acceptParameter(java.lang.String):java.lang.String
- addListener(com.intellij.ide.util.projectWizard.ModuleBuilderListener):V
- addModuleConfigurationUpdater(com.intellij.ide.util.projectWizard.ModuleBuilder$ModuleConfigurationUpdater):V
- canCreateModule():Z
- commit(com.intellij.openapi.project.Project,com.intellij.openapi.module.ModifiableModuleModel,com.intellij.openapi.roots.ui.configuration.ModulesProvider):java.util.List
- commitModule(com.intellij.openapi.project.Project,com.intellij.openapi.module.ModifiableModuleModel):com.intellij.openapi.module.Module
- createAndCommitIfNeeded(com.intellij.openapi.project.Project,com.intellij.openapi.module.ModifiableModuleModel,Z):com.intellij.openapi.module.Module
- createModule(com.intellij.openapi.module.ModifiableModuleModel):com.intellij.openapi.module.Module
- createWizardSteps(com.intellij.ide.util.projectWizard.WizardContext,com.intellij.openapi.roots.ui.configuration.ModulesProvider):com.intellij.ide.util.projectWizard.ModuleWizardStep[]
- s:deleteModuleFile(java.lang.String):V
- p:doAddContentEntry(com.intellij.openapi.roots.ModifiableRootModel):com.intellij.openapi.roots.ContentEntry
- p:getAdditionalFields():java.util.List
- s:getAllBuilders():java.util.List
- getBuilderId():java.lang.String
- getContentEntryPath():java.lang.String
- getDefaultAcceptableRole():com.intellij.ide.util.frameworkSupport.FrameworkRole
- getDescription():java.lang.String
- getGroupName():java.lang.String
- getIgnoredSteps():java.util.List
- getModuleFileDirectory():java.lang.String
- getModuleFilePath():java.lang.String
- getModuleJdk():com.intellij.openapi.projectRoots.Sdk
- a:getModuleType():com.intellij.openapi.module.ModuleType
- p:getModuleTypeName():java.lang.String
- getName():java.lang.String
- getNodeIcon():javax.swing.Icon
- getParentGroup():java.lang.String
- getPresentableName():java.lang.String
- p:getProjectType():com.intellij.openapi.project.ProjectType
- getWeight():I
- isAvailable():Z
- isTemplate():Z
- isTemplateBased():Z
- modifyProjectTypeStep(com.intellij.ide.util.projectWizard.SettingsStep):com.intellij.ide.util.projectWizard.ModuleWizardStep
- modifySettingsStep(com.intellij.ide.util.projectWizard.SettingsStep):com.intellij.ide.util.projectWizard.ModuleWizardStep
- modifyStep(com.intellij.ide.util.projectWizard.SettingsStep):com.intellij.ide.util.projectWizard.ModuleWizardStep
- removeListener(com.intellij.ide.util.projectWizard.ModuleBuilderListener):V
- setContentEntryPath(java.lang.String):V
- setModuleFilePath(java.lang.String):V
- setModuleJdk(com.intellij.openapi.projectRoots.Sdk):V
- setName(java.lang.String):V
- p:setProjectType(com.intellij.openapi.module.Module):V
- p:setupModule(com.intellij.openapi.module.Module):V
- setupRootModel(com.intellij.openapi.roots.ModifiableRootModel):V
- updateFrom(com.intellij.ide.util.projectWizard.ModuleBuilder):V
a:com.intellij.ide.util.projectWizard.ModuleBuilder$ModuleConfigurationUpdater
- <init>():V
- a:update(com.intellij.openapi.module.Module,com.intellij.openapi.roots.ModifiableRootModel):V
f:com.intellij.ide.util.projectWizard.ModuleBuilderFactory
- builderClass:java.lang.String
- <init>():V
com.intellij.ide.util.projectWizard.ModuleBuilderListener
- java.util.EventListener
- a:moduleCreated(com.intellij.openapi.module.Module):V
com.intellij.ide.util.projectWizard.ModuleNameLocationSettings
- a:getModuleContentRoot():java.lang.String
- a:getModuleName():java.lang.String
- a:setModuleContentRoot(java.lang.String):V
- a:setModuleName(java.lang.String):V
a:com.intellij.ide.util.projectWizard.ModuleWizardStep
- com.intellij.ide.wizard.StepAdapter
- sf:EMPTY_ARRAY:com.intellij.ide.util.projectWizard.ModuleWizardStep[]
- <init>():V
- disposeUIResources():V
- a:getComponent():javax.swing.JComponent
- getHelpId():java.lang.String
- getName():java.lang.String
- isStepVisible():Z
- onStepLeaving():V
- onWizardFinished():V
- a:updateDataModel():V
- updateStep():V
- validate():Z
a:com.intellij.ide.util.projectWizard.ProjectBuilder
- <init>():V
- cleanup():V
- commit(com.intellij.openapi.project.Project):java.util.List
- commit(com.intellij.openapi.project.Project,com.intellij.openapi.module.ModifiableModuleModel):java.util.List
- a:commit(com.intellij.openapi.project.Project,com.intellij.openapi.module.ModifiableModuleModel,com.intellij.openapi.roots.ui.configuration.ModulesProvider):java.util.List
- createProject(java.lang.String,java.lang.String):com.intellij.openapi.project.Project
- isOpenProjectSettingsAfter():Z
- isSuitableSdkType(com.intellij.openapi.projectRoots.SdkTypeId):Z
- isUpdate():Z
- validate(com.intellij.openapi.project.Project,com.intellij.openapi.project.Project):Z
a:com.intellij.ide.util.projectWizard.ProjectTemplateParameterFactory
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- sf:IJ_APPLICATION_SERVER:java.lang.String
- sf:IJ_BASE_PACKAGE:java.lang.String
- sf:IJ_LANGUAGE_LEVEL:java.lang.String
- sf:IJ_PROJECT_NAME:java.lang.String
- <init>():V
- applyResult(java.lang.String,com.intellij.openapi.roots.ModifiableRootModel):V
- a:createField(java.lang.String):com.intellij.ide.util.projectWizard.WizardInputField
- a:detectParameterValue(com.intellij.openapi.project.Project):java.lang.String
- getImmediateValue():java.lang.String
- a:getParameterId():java.lang.String
com.intellij.ide.util.projectWizard.PromoModuleBuilder
f:com.intellij.ide.util.projectWizard.Session
- sf:Companion:com.intellij.ide.util.projectWizard.Session$Companion
- sf:createRandomId():com.intellij.ide.util.projectWizard.Session
- f:getId():I
f:com.intellij.ide.util.projectWizard.Session$Companion
- f:createRandomId():com.intellij.ide.util.projectWizard.Session
com.intellij.ide.util.projectWizard.SettingsStep
- a:addExpertField(java.lang.String,javax.swing.JComponent):V
- a:addExpertPanel(javax.swing.JComponent):V
- a:addSettingsComponent(javax.swing.JComponent):V
- a:addSettingsField(java.lang.String,javax.swing.JComponent):V
- a:getContext():com.intellij.ide.util.projectWizard.WizardContext
- getModuleNameField():javax.swing.JTextField
- getModuleNameLocationSettings():com.intellij.ide.util.projectWizard.ModuleNameLocationSettings
c:com.intellij.ide.util.projectWizard.WizardContext
- com.intellij.openapi.util.UserDataHolderBase
- <init>(com.intellij.openapi.project.Project,com.intellij.openapi.Disposable):V
- addContextListener(com.intellij.ide.util.projectWizard.WizardContext$Listener):V
- getCompilerOutputDirectory():java.lang.String
- getDefaultModuleName():java.lang.String
- getDisposable():com.intellij.openapi.Disposable
- getModulesProvider():com.intellij.openapi.roots.ui.configuration.ModulesProvider
- getPresentationName():java.lang.String
- getProject():com.intellij.openapi.project.Project
- getProjectBuilder():com.intellij.ide.util.projectWizard.ProjectBuilder
- getProjectDirectory():java.nio.file.Path
- getProjectFileDirectory():java.lang.String
- getProjectJdk():com.intellij.openapi.projectRoots.Sdk
- getProjectName():java.lang.String
- getProjectStorageFormat():com.intellij.openapi.components.StorageScheme
- getScreen():I
- getSessionId():com.intellij.ide.util.projectWizard.Session
- getStepIcon():javax.swing.Icon
- isCreatingNewProject():Z
- isCreatingNewProjectInt():I
- isNewWizard():Z
- isProjectFileDirectorySet():Z
- isProjectFileDirectorySetExplicitly():Z
- requestNextStep():V
- requestSwitchTo(java.lang.String):V
- requestSwitchTo(java.lang.String,java.util.function.Consumer):V
- requestWizardButtonsUpdate():V
- setCompilerOutputDirectory(java.lang.String):V
- setDefaultModuleName(java.lang.String):V
- setModulesProvider(com.intellij.openapi.roots.ui.configuration.ModulesProvider):V
- setProjectBuilder(com.intellij.ide.util.projectWizard.ProjectBuilder):V
- setProjectFileDirectory(java.lang.String):V
- setProjectFileDirectory(java.nio.file.Path,Z):V
- setProjectJdk(com.intellij.openapi.projectRoots.Sdk):V
- setProjectName(java.lang.String):V
- setProjectStorageFormat(com.intellij.openapi.components.StorageScheme):V
- setProjectTemplate(com.intellij.platform.ProjectTemplate):V
- setScreen(I):V
com.intellij.ide.util.projectWizard.WizardContext$Listener
- buttonsUpdateRequested():V
- nextStepRequested():V
- switchToRequested(java.lang.String):V
- switchToRequested(java.lang.String,java.util.function.Consumer):V
a:com.intellij.ide.util.projectWizard.WizardInputField
- p:<init>(java.lang.String,java.lang.String):V
- acceptFile(java.io.File):Z
- addToSettings(com.intellij.ide.util.projectWizard.SettingsStep):V
- a:getComponent():javax.swing.JComponent
- getDefaultValue():java.lang.String
- s:getFactoryById(java.lang.String):com.intellij.ide.util.projectWizard.ProjectTemplateParameterFactory
- getId():java.lang.String
- a:getLabel():java.lang.String
- a:getValue():java.lang.String
- getValues():java.util.Map
- setValue(java.lang.String):V
- validate():Z
c:com.intellij.lang.IdeLanguageCustomization
- <init>():V
- s:getInstance():com.intellij.lang.IdeLanguageCustomization
- getPrimaryIdeLanguages():java.util.List
f:com.intellij.lang.LangCoreBundle
- sf:BUNDLE:java.lang.String
- s:message(java.lang.String,java.lang.Object[]):java.lang.String
- s:messagePointer(java.lang.String,java.lang.Object[]):java.util.function.Supplier
c:com.intellij.openapi.actionSystem.LangDataKeys
- com.intellij.openapi.actionSystem.PlatformCoreDataKeys
- sf:CONSOLE_VIEW:com.intellij.openapi.actionSystem.DataKey
- sf:CONTEXT_LANGUAGES:com.intellij.openapi.actionSystem.DataKey
- sf:EXECUTION_ENVIRONMENT:com.intellij.openapi.actionSystem.DataKey
- sf:IDE_VIEW:com.intellij.openapi.actionSystem.DataKey
- sf:LIBRARY:com.intellij.openapi.actionSystem.DataKey
- sf:MODIFIABLE_MODULE_MODEL:com.intellij.openapi.actionSystem.DataKey
- sf:MODULE_CONTEXT:com.intellij.openapi.actionSystem.DataKey
- sf:MODULE_CONTEXT_ARRAY:com.intellij.openapi.actionSystem.DataKey
- sf:NO_NEW_ACTION:com.intellij.openapi.actionSystem.DataKey
- sf:PARENT_POPUP:com.intellij.openapi.actionSystem.DataKey
- sf:PASTE_TARGET_PSI_ELEMENT:com.intellij.openapi.actionSystem.DataKey
- sf:POSITION_ADJUSTER_POPUP:com.intellij.openapi.actionSystem.DataKey
- sf:PRESELECT_NEW_ACTION_CONDITION:com.intellij.openapi.actionSystem.DataKey
- sf:RUN_CONTENT_DESCRIPTOR:com.intellij.openapi.actionSystem.DataKey
- sf:RUN_PROFILE:com.intellij.openapi.actionSystem.DataKey
- sf:TARGET_MODULE:com.intellij.openapi.actionSystem.DataKey
- sf:TARGET_PSI_ELEMENT:com.intellij.openapi.actionSystem.DataKey
- <init>():V
com.intellij.openapi.module.ModuleConfigurationEditor
- com.intellij.openapi.options.Configurable
- sf:EMPTY:com.intellij.openapi.module.ModuleConfigurationEditor[]
- moduleStateChanged():V
- saveData():V
a:com.intellij.openapi.module.ModuleType
- sf:EMPTY:com.intellij.openapi.module.ModuleType
- p:<init>(java.lang.String):V
- a:createModuleBuilder():com.intellij.ide.util.projectWizard.ModuleBuilder
- createWizardSteps(com.intellij.ide.util.projectWizard.WizardContext,com.intellij.ide.util.projectWizard.ModuleBuilder,com.intellij.openapi.roots.ui.configuration.ModulesProvider):com.intellij.ide.util.projectWizard.ModuleWizardStep[]
- f:equals(java.lang.Object):Z
- s:get(com.intellij.openapi.module.Module):com.intellij.openapi.module.ModuleType
- getDefaultAcceptableRole():com.intellij.ide.util.frameworkSupport.FrameworkRole
- a:getDescription():java.lang.String
- getIcon():javax.swing.Icon
- f:getId():java.lang.String
- a:getName():java.lang.String
- a:getNodeIcon(Z):javax.swing.Icon
- f:hashCode():I
- s:is(com.intellij.openapi.module.Module,com.intellij.openapi.module.ModuleType):Z
- s:isInternal(com.intellij.openapi.module.Module):Z
- isMarkInnerSupportedFor(org.jetbrains.jps.model.module.JpsModuleSourceRootType):Z
- isSupportedRootType(org.jetbrains.jps.model.module.JpsModuleSourceRootType):Z
- isValidSdk(com.intellij.openapi.module.Module,com.intellij.openapi.projectRoots.Sdk):Z
- modifyProjectTypeStep(com.intellij.ide.util.projectWizard.SettingsStep,com.intellij.ide.util.projectWizard.ModuleBuilder):com.intellij.ide.util.projectWizard.ModuleWizardStep
- modifySettingsStep(com.intellij.ide.util.projectWizard.SettingsStep,com.intellij.ide.util.projectWizard.ModuleBuilder):com.intellij.ide.util.projectWizard.ModuleWizardStep
a:com.intellij.openapi.module.ModuleTypeManager
- <init>():V
- a:findByID(java.lang.String):com.intellij.openapi.module.ModuleType
- a:getDefaultModuleType():com.intellij.openapi.module.ModuleType
- s:getInstance():com.intellij.openapi.module.ModuleTypeManager
- a:getRegisteredTypes():java.util.List
- a:isClasspathProvider(com.intellij.openapi.module.ModuleType):Z
- a:registerModuleType(com.intellij.openapi.module.ModuleType,Z):V
com.intellij.openapi.projectRoots.AdditionalDataConfigurable
- com.intellij.openapi.options.UnnamedConfigurable
- getTabName():java.lang.String
- a:setSdk(com.intellij.openapi.projectRoots.Sdk):V
f:com.intellij.openapi.projectRoots.JdkCommandLineSetup
- sf:Companion:com.intellij.openapi.projectRoots.JdkCommandLineSetup$Companion
- <init>(com.intellij.execution.target.TargetEnvironmentRequest):V
- f:getCommandLine():com.intellij.execution.target.TargetedCommandLineBuilder
- f:getPlatform():com.intellij.execution.Platform
- f:requestLocalPortBinding(java.lang.String,I):com.intellij.execution.target.value.TargetValue
- f:setupCommandLine(com.intellij.execution.configurations.SimpleJavaParameters):V
- f:setupJavaExePath(com.intellij.execution.configurations.SimpleJavaParameters):V
f:com.intellij.openapi.projectRoots.JdkCommandLineSetup$Companion
com.intellij.openapi.projectRoots.JdkFinder
- a:defaultJavaLocation():java.lang.String
- s:getInstance():com.intellij.openapi.projectRoots.JdkFinder
- suggestHomePaths():java.util.List
- a:suggestHomePaths(com.intellij.openapi.project.Project):java.util.List
f:com.intellij.openapi.projectRoots.JdkUtil
- sf:AGENT_RUNTIME_CLASSPATH:com.intellij.openapi.util.Key
- sf:COMMAND_LINE_CONTENT:com.intellij.openapi.util.Key
- sf:PROPERTY_DO_NOT_ESCAPE_CLASSPATH_URL:java.lang.String
- s:checkForJdk(java.lang.String):Z
- s:checkForJdk(java.nio.file.Path):Z
- s:checkForJre(java.lang.String):Z
- s:checkForJre(java.nio.file.Path):Z
- s:getJdkMainAttribute(com.intellij.openapi.projectRoots.Sdk,java.util.jar.Attributes$Name):java.lang.String
- s:isExplodedModularRuntime(java.nio.file.Path):Z
- s:isModularRuntime(java.lang.String):Z
- s:isModularRuntime(java.nio.file.Path):Z
- s:setupJVMCommandLine(com.intellij.execution.configurations.SimpleJavaParameters):com.intellij.execution.configurations.GeneralCommandLine
- s:suggestJdkName(com.intellij.util.lang.JavaVersion,java.lang.String):java.lang.String
- s:suggestJdkName(java.lang.String):java.lang.String
- s:useClasspathJar():Z
- s:useDynamicClasspath(com.intellij.openapi.project.Project):Z
- s:useDynamicParameters():Z
- s:useDynamicVMOptions():Z
com.intellij.openapi.projectRoots.SdkModel
- a:addListener(com.intellij.openapi.projectRoots.SdkModel$Listener):V
- addListener(com.intellij.openapi.projectRoots.SdkModel$Listener,com.intellij.openapi.Disposable):V
- a:addSdk(com.intellij.openapi.projectRoots.Sdk):V
- a:findSdk(java.lang.String):com.intellij.openapi.projectRoots.Sdk
- a:getMulticaster():com.intellij.openapi.projectRoots.SdkModel$Listener
- a:getSdks():com.intellij.openapi.projectRoots.Sdk[]
- a:removeListener(com.intellij.openapi.projectRoots.SdkModel$Listener):V
com.intellij.openapi.projectRoots.SdkModel$Listener
- java.util.EventListener
- beforeSdkRemove(com.intellij.openapi.projectRoots.Sdk):V
- sdkAdded(com.intellij.openapi.projectRoots.Sdk):V
- sdkChanged(com.intellij.openapi.projectRoots.Sdk,java.lang.String):V
- sdkHomeSelected(com.intellij.openapi.projectRoots.Sdk,java.lang.String):V
a:com.intellij.openapi.projectRoots.SdkType
- com.intellij.openapi.projectRoots.SdkTypeId
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- <init>(java.lang.String):V
- adjustSelectedSdkHome(java.lang.String):java.lang.String
- allowCreationByUser():Z
- a:createAdditionalDataConfigurable(com.intellij.openapi.projectRoots.SdkModel,com.intellij.openapi.projectRoots.SdkModificator):com.intellij.openapi.projectRoots.AdditionalDataConfigurable
- equals(java.lang.Object):Z
- s:findByName(java.lang.String):com.intellij.openapi.projectRoots.SdkType
- s:findInstance(java.lang.Class):com.intellij.openapi.projectRoots.SdkType
- s:getAllTypeList():java.util.List
- s:getAllTypes():com.intellij.openapi.projectRoots.SdkType[]
- getComparator():java.util.Comparator
- getDefaultDocumentationUrl(com.intellij.openapi.projectRoots.Sdk):java.lang.String
- getDependencyType():com.intellij.openapi.projectRoots.SdkType
- getDownloadSdkUrl():java.lang.String
- getHelpTopic():java.lang.String
- getHomeChooserDescriptor():com.intellij.openapi.fileChooser.FileChooserDescriptor
- getHomeFieldLabel():java.lang.String
- getIcon():javax.swing.Icon
- getIconForAddAction():javax.swing.Icon
- getInvalidHomeMessage(java.lang.String):java.lang.String
- getName():java.lang.String
- a:getPresentableName():java.lang.String
- getVersionString(com.intellij.openapi.projectRoots.Sdk):java.lang.String
- getVersionString(java.lang.String):java.lang.String
- hashCode():I
- isRelevantForFile(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile):Z
- isRootTypeApplicable(com.intellij.openapi.roots.OrderRootType):Z
- a:isValidSdkHome(java.lang.String):Z
- loadAdditionalData(com.intellij.openapi.projectRoots.Sdk,org.jdom.Element):com.intellij.openapi.projectRoots.SdkAdditionalData
- loadAdditionalData(org.jdom.Element):com.intellij.openapi.projectRoots.SdkAdditionalData
- sdkHasValidPath(com.intellij.openapi.projectRoots.Sdk):Z
- sdkPath(com.intellij.openapi.vfs.VirtualFile):java.lang.String
- setupSdkPaths(com.intellij.openapi.projectRoots.Sdk):V
- setupSdkPaths(com.intellij.openapi.projectRoots.Sdk,com.intellij.openapi.projectRoots.SdkModel):Z
- showCustomCreateUI(com.intellij.openapi.projectRoots.SdkModel,javax.swing.JComponent,com.intellij.openapi.projectRoots.Sdk,com.intellij.util.Consumer):V
- a:suggestHomePath():java.lang.String
- suggestHomePath(java.nio.file.Path):java.lang.String
- suggestHomePaths():java.util.Collection
- suggestHomePaths(com.intellij.openapi.project.Project):java.util.Collection
- a:suggestSdkName(java.lang.String,java.lang.String):java.lang.String
- supportsCustomCreateUI():Z
c:com.intellij.openapi.projectRoots.SimpleJavaSdkType
- com.intellij.openapi.projectRoots.SdkType
- com.intellij.openapi.projectRoots.JavaSdkType
- <init>():V
- createAdditionalDataConfigurable(com.intellij.openapi.projectRoots.SdkModel,com.intellij.openapi.projectRoots.SdkModificator):com.intellij.openapi.projectRoots.AdditionalDataConfigurable
- createJdk(java.lang.String,java.lang.String):com.intellij.openapi.projectRoots.Sdk
- getBinPath(com.intellij.openapi.projectRoots.Sdk):java.lang.String
- s:getInstance():com.intellij.openapi.projectRoots.SimpleJavaSdkType
- getPresentableName():java.lang.String
- getToolsPath(com.intellij.openapi.projectRoots.Sdk):java.lang.String
- getVMExecutablePath(com.intellij.openapi.projectRoots.Sdk):java.lang.String
- f:getVersionString(java.lang.String):java.lang.String
- isValidSdkHome(java.lang.String):Z
- s:notSimpleJavaSdkType():java.util.function.Predicate
- s:notSimpleJavaSdkType(java.util.function.Predicate):java.util.function.Predicate
- s:notSimpleJavaSdkTypeIfAlternativeExists():java.util.function.Predicate
- s:notSimpleJavaSdkTypeIfAlternativeExistsAndNotDependentSdkType():com.intellij.openapi.util.Condition
- saveAdditionalData(com.intellij.openapi.projectRoots.SdkAdditionalData,org.jdom.Element):V
- suggestHomePath():java.lang.String
- suggestHomePaths():java.util.Collection
- suggestHomePaths(com.intellij.openapi.project.Project):java.util.Collection
- suggestSdkName(java.lang.String,java.lang.String):java.lang.String
- versionStringComparator():java.util.Comparator
f:com.intellij.openapi.projectRoots.impl.SdkVersionUtil
- s:getJdkVersionInfo(java.lang.String):org.jetbrains.jps.model.java.JdkVersionDetector$JdkVersionInfo
c:com.intellij.openapi.roots.ui.configuration.DefaultModulesProvider
- com.intellij.openapi.roots.ui.configuration.ModulesProvider
- <init>(com.intellij.openapi.project.Project):V
- s:createForProject(com.intellij.openapi.project.Project):com.intellij.openapi.roots.ui.configuration.ModulesProvider
- getFacetModel(com.intellij.openapi.module.Module):com.intellij.facet.FacetModel
- getModule(java.lang.String):com.intellij.openapi.module.Module
- getModules():com.intellij.openapi.module.Module[]
- getRootModel(com.intellij.openapi.module.Module):com.intellij.openapi.roots.ModuleRootModel
com.intellij.openapi.roots.ui.configuration.FacetsProvider
- a:findFacet(com.intellij.openapi.module.Module,com.intellij.facet.FacetTypeId,java.lang.String):com.intellij.facet.Facet
- a:getAllFacets(com.intellij.openapi.module.Module):com.intellij.facet.Facet[]
- a:getFacetsByType(com.intellij.openapi.module.Module,com.intellij.facet.FacetTypeId):java.util.Collection
com.intellij.openapi.roots.ui.configuration.ModuleConfigurationEditorProvider
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- a:createEditors(com.intellij.openapi.roots.ui.configuration.ModuleConfigurationState):com.intellij.openapi.module.ModuleConfigurationEditor[]
com.intellij.openapi.roots.ui.configuration.ModuleConfigurationEditorProviderEx
- com.intellij.openapi.roots.ui.configuration.ModuleConfigurationEditorProvider
- a:isCompleteEditorSet():Z
com.intellij.openapi.roots.ui.configuration.ModuleConfigurationState
- com.intellij.openapi.util.UserDataHolder
- a:getCurrentRootModel():com.intellij.openapi.roots.ModuleRootModel
- a:getFacetsProvider():com.intellij.openapi.roots.ui.configuration.FacetsProvider
- a:getModifiableRootModel():com.intellij.openapi.roots.ModifiableRootModel
- a:getModulesProvider():com.intellij.openapi.roots.ui.configuration.ModulesProvider
- a:getProject():com.intellij.openapi.project.Project
- getRootModel():com.intellij.openapi.roots.ModifiableRootModel
com.intellij.openapi.roots.ui.configuration.ModulesProvider
- com.intellij.openapi.roots.RootModelProvider
- sf:EMPTY_MODULES_PROVIDER:com.intellij.openapi.roots.ui.configuration.ModulesProvider
- a:getFacetModel(com.intellij.openapi.module.Module):com.intellij.facet.FacetModel
- a:getModule(java.lang.String):com.intellij.openapi.module.Module
com.intellij.platform.ProjectTemplate
- sf:EMPTY_ARRAY:com.intellij.platform.ProjectTemplate[]
- a:createModuleBuilder():com.intellij.ide.util.projectWizard.AbstractModuleBuilder
- a:getDescription():java.lang.String
- a:getIcon():javax.swing.Icon
- getId():java.lang.String
- a:getName():java.lang.String
- a:validateSettings():com.intellij.openapi.ui.ValidationInfo
