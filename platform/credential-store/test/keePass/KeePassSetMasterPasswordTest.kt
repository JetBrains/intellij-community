// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.credentialStore.keePass

import com.intellij.credentialStore.EncryptionSpec
import com.intellij.credentialStore.EncryptionType
import com.intellij.credentialStore.getDefaultEncryptionType
import com.intellij.testFramework.UsefulTestCase
import com.intellij.testFramework.assertions.Assertions.assertThat
import com.intellij.util.io.delete
import org.junit.Assume
import org.junit.Test
import kotlin.io.path.readText

internal class KeePassSetMasterPasswordTest : BaseKeePassFileManagerTest() {
  @Test
  fun `new database`() {
    TestKeePassFileManager(createStore(), masterPasswordRequestAnswer = "boo")
      .askAndSetMainKey(event = null)

    val store = createStore()
    assertThat(store.dbFile).exists()
    assertThat(store.mainKeyFile.readText()).startsWith("""
       encryption: ${getDefaultEncryptionType().name}
       isAutoGenerated: false
       value: !!binary
     """.trimIndent())
    assertThat(MainKeyFileStorage(store.mainKeyFile).load()!!.toString(Charsets.UTF_8)).isEqualTo("boo")
  }

  @Test
  fun `protect using PGP - new database`() {
    Assume.assumeTrue("not for Teamcity", !UsefulTestCase.IS_UNDER_TEAMCITY)

    TestKeePassFileManager(createStore(), masterPasswordRequestAnswer = "boo", masterKeyEncryptionSpec = EncryptionSpec(EncryptionType.PGP_KEY, "A769DF87"))
      .askAndSetMainKey(event = null)

    val store = createStore()
    assertThat(store.dbFile).exists()
    assertThat(store.mainKeyFile.readText()).startsWith("""
       encryption: PGP_KEY
       isAutoGenerated: false
       value: !!binary
     """.trimIndent())
    assertThat(MainKeyFileStorage(store.mainKeyFile).load()!!.toString(Charsets.UTF_8)).isEqualTo("boo")

    TestKeePassFileManager(createStore(), masterPasswordRequestAnswer = "boo", masterKeyEncryptionSpec = EncryptionSpec(EncryptionType.BUILT_IN, pgpKeyId = null))
      .saveMainKeyToApplyNewEncryptionSpec()

    assertThat(store.mainKeyFile.readText()).startsWith("""
       encryption: BUILT_IN
       isAutoGenerated: false
       value: !!binary
     """.trimIndent())
  }

  @Test
  fun `existing database with the same master password but incorrect master key file`() {
    TestKeePassFileManager(createTestStoreWithCustomMasterKey(), masterPasswordRequestAnswer = "foo")
      .askAndSetMainKey(event = null)

    val store = createStore()
    assertThat(store.dbFile).exists()
    assertThat(MainKeyFileStorage(store.mainKeyFile).load()!!.toString(Charsets.UTF_8)).isEqualTo("foo")
  }

  @Test
  fun `existing database with the different master password and incorrect master key file`() {
    val existingStore = createTestStoreWithCustomMasterKey()
    fsRule.fs.getPath("/$MAIN_KEY_FILE_NAME").delete()
    TestKeePassFileManager(existingStore, oldMasterPasswordRequestAnswer = "foo", masterPasswordRequestAnswer = "new")
      .askAndSetMainKey(event = null)

    val store = createStore()
    assertThat(store.dbFile).exists()
    assertThat(store.mainKeyFile).exists()
  }
}
