psi.scanning.files.progress=Scanning files...
psi.error.incorrect.class.template.message=Cannot create {0} - incorrect {1} template.
psi.search.inheritors.of.class.progress=Searching for inheritors of {0}...
psi.search.inheritors.progress=Searching for inheritors...
psi.search.for.word.progress=Searching for {0}...
psi.search.in.non.java.files.progress=Analyzing non-code usages...

psi.search.scope.project.and.libraries=Project and Libraries
psi.search.scope.libraries=Libraries
psi.search.scope.project=Project Files
psi.search.scope.production.files=Project Production Files
psi.search.scope.test.files=Project Test Files
psi.search.scope.intersection=Intersection of {0} and {1}
psi.search.scope.union=Union of {0} and {1}

# {0} - file path, {1} - localized IOException message.
codestyle.cannot.save.scheme.file=Can''t save code style scheme {0}. {1}
codestyle.cannot.save.settings.directory.cant.be.created.message=Cannot save code style schemes. Directory {0} cannot be created.
codestyle.cannot.save.settings.directory.cant.be.created.title=Cannot Save Settings

el.identifier.expected=Identifier expected
el.expression.expected=expression expected
el.rbracket.expected=] expected
el.unexpected.end.of.file=Unexpected end of file
el.lparen.expected=( expected
el.rparen.expected=) expected
el.colon.expected=: expected
el.value.expected=Value expected
el.cannot.resolve.function=Cannot resolve function ''{0}'' #loc
el.cannot.resolve.namespace=Cannot resolve namespace ''{0}'' #loc
el.cannot.resolve.property=Cannot resolve property or method ''{0}'' (dynamic property?) #loc
el.cannot.resolve.method=Cannot resolve method ''{0}''() #loc
el.mismatched.parameters.count=Different number of formal and actual parameters
el.declare.variable.intention.family=Declare Variable As External Data
el.declare.variable.via.usebean.intention.name=Declare external variable as <jsp:useBean />
el.declare.variable.via.comment.annotation.intention.name=Declare external variable in comment annotation
el.cannot.resolve.variable=Cannot resolve variable ''{0}'' #loc
jsf.el.out.of.attribute=JSF EL out of attribute #loc
jsf.method.call.is.nonstd.extension=Method call is nonstandard extension #loc

search.scope.unknown=<unknown scope>
search.scope.module=Module ''{0}''
search.scope.module.runtime=Module ''{0}'' runtime scope

anonymous.class.derived.display=Anonymous class derived from {0}
local.class.preposition=local
anonymous.class.context.display=Anonymous in {0}
enum.constant.context=Enum constant ''{0}'' in ''{1}''
class.context.display={0} in {1}
method.context.display={0}() in {1}
aux.context.display=(in {0})
jsp.taglib.method.reference.error.class.is.not.valid=Class is not valid
jsp.taglib.method.reference.error.class.is.not.public=Class is not public
jsp.taglib.method.reference.error.no.such.method=No such method
jsp.taglib.method.reference.error.method.should.be.public.or.static=Method should be public or static
jsp.taglib.method.reference.error.signature.is.different=Signature is different
jsp.taglib.method.reference.error.different.return.type=Different return type
jsp.documentation.message.required=Required:\\&nbsp;{0}
jsp.documentation.message.can.have.runtime.value=Can have runtime value:\\&nbsp;{0}
jsp.documentation.message.type=Type:\\&nbsp;{0}
jsp.documentation.message.fragment=Fragment:\\&nbsp;{0}
jsp.documentation.message.custom.tag.name=Custom tag name
jsp.documentation.message.custom.function.name=Custom function name
jsp.documentation.message.custom.attribute.name=Custom attribute name
jsp.documentation.message.description=Description:\\&nbsp;{0}
jsp.documentation.message.example.of.use=Example\\&nbsp;of\\&nbsp;use:<br><pre>{0}</pre>

#access levels
default.package.presentation=<default>
anonymous.class.display=Anonymous class
code.from.context.display=Code from {0}
code.display=Code
invalid.regular.expression.message=Invalid regular expression {0}
#psi reference provider options
qualified.resolve.class.reference.provider.option=Tells reference provider to process only qualified class references (e.g. not resolve String as java.lang.String)
default.path.evaluator.option=Tells reference provider how evaluate default path for given file
el.declare.variable.find.acceptable.class=Find acceptable class
0.is.not.an.identifier=''{0}'' is not an identifier.
cannot.modify.a.read.only.directory=Cannot modify a read-only directory ''{0}''.
cannot.modify.a.read.only.file=Cannot modify a read-only file ''{0}''.
cannot.delete.a.read.only.file=Cannot delete a read-only file ''{0}''.
0.expected={0} expected
cannot.resolve.symbol=Cannot resolve symbol ''{0}''

# suppress inspection "UnusedProperty"
packageLocal.visibility.presentation=package-private
# suppress inspection "UnusedProperty"
protected.visibility.presentation=protected
# suppress inspection "UnusedProperty"
private.visibility.presentation=private
# suppress inspection "UnusedProperty"
public.visibility.presentation=public
# suppress inspection "UnusedProperty"
abstract.visibility.presentation=abstract
# suppress inspection "UnusedProperty"
static.visibility.presentation=static
# suppress inspection "UnusedProperty"
final.visibility.presentation=final
# suppress inspection "UnusedProperty"
native.visibility.presentation=native
# suppress inspection "UnusedProperty"
synchronized.visibility.presentation=synchronized
# suppress inspection "UnusedProperty"
strictfp.visibility.presentation=strictfp
# suppress inspection "UnusedProperty"
transient.visibility.presentation=transient
# suppress inspection "UnusedProperty"
volatile.visibility.presentation=volatile
# suppress inspection "UnusedProperty"
default.visibility.presentation=default
# suppress inspection "UnusedProperty"
open.visibility.presentation=open
# suppress inspection "UnusedProperty"
transitive.visibility.presentation=transitive