c:com.intellij.AbstractBundle
- sf:Companion:com.intellij.AbstractBundle$Companion
- <init>(java.lang.Class,java.lang.String):V
- p:<init>(java.lang.String):V
- f:clearLocaleCache():V
- f:containsKey(java.lang.String):Z
- p:findBundle(java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle$Control):java.util.ResourceBundle
- getLazyMessage(java.lang.String,java.lang.Object[]):java.util.function.Supplier
- getMessage(java.lang.String,java.lang.Object[]):java.lang.String
- f:getPartialMessage(java.lang.String,I,java.lang.Object[]):java.lang.String
- sf:message(java.util.ResourceBundle,java.lang.String,java.lang.Object[]):java.lang.String
- messageOrDefault(java.lang.String,java.lang.String,java.lang.Object[]):java.lang.String
- sf:messageOrDefault(java.util.ResourceBundle,java.lang.String,java.lang.String,java.lang.Object[]):java.lang.String
- messageOrNull(java.lang.String,java.lang.Object[]):java.lang.String
- sf:messageOrNull(java.util.ResourceBundle,java.lang.String,java.lang.Object[]):java.lang.String
f:com.intellij.AbstractBundle$Companion
- f:message(java.util.ResourceBundle,java.lang.String,java.lang.Object[]):java.lang.String
- f:messageOrDefault(java.util.ResourceBundle,java.lang.String,java.lang.String,java.lang.Object[]):java.lang.String
- f:messageOrNull(java.util.ResourceBundle,java.lang.String,java.lang.Object[]):java.lang.String
f:com.intellij.BundleBase
- sf:INSTANCE:com.intellij.BundleBase
- sf:L10N_MARKER:java.lang.String
- sf:MNEMONIC:C
- sf:MNEMONIC_STRING:java.lang.String
- sf:format(java.lang.String,java.lang.Object[]):java.lang.String
- sf:getDefaultMessage(java.util.ResourceBundle,java.lang.String):java.lang.String
- sf:message(java.util.ResourceBundle,java.lang.String,java.lang.Object[]):java.lang.String
- sf:messageOrDefault(java.util.ResourceBundle,java.lang.String,java.lang.String,java.lang.Object[]):java.lang.String
- sf:partialMessage(java.util.ResourceBundle,java.lang.String,I,java.lang.Object[]):java.lang.String
- sf:replaceMnemonicAmpersand(java.lang.String):java.lang.String
- sf:setTranslationConsumer(java.util.function.BiConsumer):V
f:com.intellij.Patches
- sf:IBM_JDK_DISABLE_COLLECTION_BUG:Z
- sf:JDK_BUG_ID_21275177:Z
- sf:JDK_BUG_ID_8032832:Z
- sf:JDK_BUG_WITH_TRACE_SEND:Z
- sf:SLOW_GETTING_CLIPBOARD_CONTENTS:Z
- sf:SUN_BUG_ID_6322854:Z
- sf:TEXT_LAYOUT_IS_SLOW:Z
- <init>():V
f:com.intellij.execution.CommandLineUtil
- <init>():V
- s:escapeParameterOnWindows(java.lang.String,Z):java.lang.String
- s:extractPresentableName(java.lang.String):java.lang.String
- s:getWinShellName():java.lang.String
- s:hasWinShellSpecialChars(java.lang.String):Z
- s:posixQuote(java.lang.String):java.lang.String
- s:specialQuote(java.lang.String):java.lang.String
- s:toCommandLine(java.lang.String,java.util.List):java.util.List
- s:toCommandLine(java.lang.String,java.util.List,com.intellij.execution.Platform):java.util.List
- s:toCommandLine(java.util.List):java.util.List
e:com.intellij.execution.Platform
- java.lang.Enum
- sf:UNIX:com.intellij.execution.Platform
- sf:WINDOWS:com.intellij.execution.Platform
- f:fileSeparator:C
- f:lineSeparator:java.lang.String
- f:pathSeparator:C
- s:current():com.intellij.execution.Platform
- s:valueOf(java.lang.String):com.intellij.execution.Platform
- s:values():com.intellij.execution.Platform[]
com.intellij.execution.TaskExecutor
- a:executeTask(java.lang.Runnable):java.util.concurrent.Future
f:com.intellij.execution.configurations.CommandLineTokenizer
- java.util.StringTokenizer
- <init>(java.lang.String):V
- <init>(java.lang.String,Z):V
- countTokens():I
- hasMoreTokens():Z
- nextToken():java.lang.String
- nextToken(java.lang.String):java.lang.String
- peekNextToken():java.lang.String
c:com.intellij.execution.process.BaseOSProcessHandler
- com.intellij.execution.process.BaseProcessHandler
- <init>(java.lang.Process,java.lang.String,java.nio.charset.Charset):V
- p:createErrorDataReader():com.intellij.util.io.BaseDataReader
- p:createOutputDataReader():com.intellij.util.io.BaseDataReader
- p:createProcessErrReader():java.io.Reader
- p:createProcessOutReader():java.io.Reader
- executeTask(java.lang.Runnable):java.util.concurrent.Future
- p:processHasSeparateErrorStream():Z
- p:readerOptions():com.intellij.util.io.BaseOutputReader$Options
- startNotify():V
- waitFor():Z
- waitFor(J):Z
pf:com.intellij.execution.process.BaseOSProcessHandler$SimpleOutputReader
- com.intellij.util.io.BaseOutputReader
- <init>(com.intellij.execution.process.BaseOSProcessHandler,java.io.Reader,com.intellij.openapi.util.Key,com.intellij.util.io.BaseOutputReader$Options,java.lang.String):V
a:com.intellij.execution.process.BaseProcessHandler
- com.intellij.execution.process.ProcessHandler
- com.intellij.execution.TaskExecutor
- pf:myCharset:java.nio.charset.Charset
- pf:myCommandLine:java.lang.String
- pf:myPresentableName:java.lang.String
- pf:myProcess:java.lang.Process
- pf:myWaitFor:com.intellij.execution.process.ProcessWaitFor
- <init>(java.lang.Process,java.lang.String,java.nio.charset.Charset):V
- p:createWaitFor():com.intellij.execution.process.ProcessWaitFor
- p:destroyProcessImpl():V
- detachIsDefault():Z
- p:detachProcessImpl():V
- p:doDestroyProcess():V
- getCharset():java.nio.charset.Charset
- getCommandLine():java.lang.String
- getCommandLineForLog():java.lang.String
- f:getProcess():java.lang.Process
- getProcessInput():java.io.OutputStream
- p:onOSProcessTerminated(I):V
c:com.intellij.execution.process.CompositeProcessHandler
- com.intellij.execution.process.ProcessHandler
- <init>(java.util.List):V
- p:destroyProcessImpl():V
- detachIsDefault():Z
- p:detachProcessImpl():V
- f:getHandlers():java.util.List
- getProcessInput():java.io.OutputStream
- startNotify():V
- p:startNotifyHandler(com.intellij.execution.process.ProcessHandler):V
c:com.intellij.execution.process.NopProcessHandler
- com.intellij.execution.process.ProcessHandler
- <init>():V
- p:destroyProcessImpl():V
- detachIsDefault():Z
- p:detachProcessImpl():V
- getProcessInput():java.io.OutputStream
a:com.intellij.execution.process.ProcessAdapter
- com.intellij.execution.process.ProcessListener
- <init>():V
f:com.intellij.execution.process.ProcessEvent
- java.util.EventObject
- <init>(com.intellij.execution.process.ProcessHandler):V
- <init>(com.intellij.execution.process.ProcessHandler,I):V
- <init>(com.intellij.execution.process.ProcessHandler,java.lang.String):V
- getExitCode():I
- getProcessHandler():com.intellij.execution.process.ProcessHandler
- getText():java.lang.String
a:com.intellij.execution.process.ProcessHandler
- com.intellij.openapi.util.UserDataHolderBase
- sf:SILENTLY_DESTROY_ON_CLOSE:com.intellij.openapi.util.Key
- sf:TERMINATION_REQUESTED:com.intellij.openapi.util.Key
- p:<init>():V
- addProcessListener(com.intellij.execution.process.ProcessListener):V
- addProcessListener(com.intellij.execution.process.ProcessListener,com.intellij.openapi.Disposable):V
- destroyProcess():V
- pa:destroyProcessImpl():V
- a:detachIsDefault():Z
- detachProcess():V
- pa:detachProcessImpl():V
- getExitCode():java.lang.Integer
- a:getProcessInput():java.io.OutputStream
- isProcessTerminated():Z
- isProcessTerminating():Z
- isSilentlyDestroyOnClose():Z
- isStartNotified():Z
- p:notifyProcessDetached():V
- p:notifyProcessTerminated(I):V
- notifyTextAvailable(java.lang.String,com.intellij.openapi.util.Key):V
- removeProcessListener(com.intellij.execution.process.ProcessListener):V
- startNotify():V
- waitFor():Z
- waitFor(J):Z
f:com.intellij.execution.process.ProcessIOExecutorService
- java.util.concurrent.ThreadPoolExecutor
- sf:INSTANCE:java.util.concurrent.ExecutorService
- sf:POOLED_THREAD_PREFIX:java.lang.String
- execute(java.lang.Runnable):V
- getThreadCounter():I
com.intellij.execution.process.ProcessListener
- java.util.EventListener
- onTextAvailable(com.intellij.execution.process.ProcessEvent,com.intellij.openapi.util.Key):V
- processNotStarted():V
- processTerminated(com.intellij.execution.process.ProcessEvent):V
- processWillTerminate(com.intellij.execution.process.ProcessEvent,Z):V
- startNotified(com.intellij.execution.process.ProcessEvent):V
c:com.intellij.execution.process.ProcessOutputType
- com.intellij.openapi.util.Key
- sf:STDERR:com.intellij.execution.process.ProcessOutputType
- sf:STDOUT:com.intellij.execution.process.ProcessOutputType
- sf:SYSTEM:com.intellij.execution.process.ProcessOutputType
- <init>(java.lang.String,com.intellij.execution.process.ProcessOutputType):V
- getBaseOutputType():com.intellij.execution.process.ProcessOutputType
- getEscapeSequence():java.lang.String
- isStderr():Z
- s:isStderr(com.intellij.openapi.util.Key):Z
- isStdout():Z
- s:isStdout(com.intellij.openapi.util.Key):Z
- s:tryCast(com.intellij.openapi.util.Key):com.intellij.execution.process.ProcessOutputType
com.intellij.execution.process.ProcessOutputTypes
- sf:STDERR:com.intellij.openapi.util.Key
- sf:STDOUT:com.intellij.openapi.util.Key
- sf:SYSTEM:com.intellij.openapi.util.Key
f:com.intellij.execution.process.ProcessWaitFor
- <init>(java.lang.Process,com.intellij.execution.TaskExecutor,java.lang.String):V
- detach():V
- setTerminationCallback(com.intellij.util.Consumer):V
- waitFor():V
- waitFor(J,java.util.concurrent.TimeUnit):Z
f:com.intellij.execution.process.UnixProcessManager
- sf:SIGABRT:I
- sf:SIGALRM:I
- sf:SIGHUP:I
- sf:SIGINT:I
- sf:SIGKILL:I
- sf:SIGQUIT:I
- sf:SIGTERM:I
- s:getCurrentProcessId():I
- s:getPSCmd(Z):java.lang.String[]
- s:getPSCmd(Z,Z):java.lang.String[]
- s:getPortableSignalNumber(java.lang.String):I
- s:getProcessId(java.lang.Process):I
- s:getSignalNumber(java.lang.String):I
- s:processCommandOutput(java.lang.String[],com.intellij.util.Processor,Z,Z):V
- s:processPSOutput(java.lang.String[],com.intellij.util.Processor):V
- s:sendSigIntToProcessTree(java.lang.Process):Z
- s:sendSigKillToProcessTree(java.lang.Process):Z
- s:sendSignal(I,I):I
- s:sendSignal(I,java.lang.String):I
- s:sendSignalToProcessTree(I,I):Z
- s:sendSignalToProcessTree(I,I,I):Z
- s:sendSignalToProcessTree(java.lang.Process,I):Z
f:com.intellij.execution.process.WinProcessManager
- s:getCurrentProcessId():I
- s:getProcessId(java.lang.Process):I
- s:kill(I,Z):Z
- s:kill(java.lang.Process,Z):Z
f:com.intellij.jna.JnaLoader
- <init>():V
- s:isLoaded():Z
- s:load(com.intellij.openapi.diagnostic.Logger):V
f:com.intellij.openapi.CompositeDisposable
- com.intellij.openapi.Disposable
- <init>():V
- add(com.intellij.openapi.Disposable):V
- dispose():V
- remove(com.intellij.openapi.Disposable):V
com.intellij.openapi.Disposable
- a:dispose():V
com.intellij.openapi.Disposable$Default
- com.intellij.openapi.Disposable
- dispose():V
com.intellij.openapi.Disposable$Parent
- com.intellij.openapi.Disposable
- a:beforeTreeDispose():V
com.intellij.openapi.Forceable
- a:force():V
- a:isDirty():Z
f:com.intellij.openapi.WeakReferenceDisposableWrapper
- com.intellij.openapi.Disposable
- java.lang.ref.WeakReference
- <init>(com.intellij.openapi.Disposable):V
a:com.intellij.openapi.application.AccessToken
- java.lang.AutoCloseable
- sf:EMPTY_ACCESS_TOKEN:com.intellij.openapi.application.AccessToken
- <init>():V
- f:close():V
- a:finish():V
f:com.intellij.openapi.application.PathManager
- sf:DEFAULT_EXT:java.lang.String
- sf:OPTIONS_DIRECTORY:java.lang.String
- sf:PROPERTIES_FILE:java.lang.String
- sf:PROPERTIES_FILE_NAME:java.lang.String
- sf:PROPERTY_CONFIG_PATH:java.lang.String
- sf:PROPERTY_HOME_PATH:java.lang.String
- sf:PROPERTY_LOG_CONFIG_FILE:java.lang.String
- sf:PROPERTY_LOG_PATH:java.lang.String
- sf:PROPERTY_PATHS_SELECTOR:java.lang.String
- sf:PROPERTY_PLUGINS_PATH:java.lang.String
- sf:PROPERTY_SCRATCH_PATH:java.lang.String
- sf:PROPERTY_SYSTEM_PATH:java.lang.String
- sf:SYSTEM_PATHS_CUSTOMIZER:java.lang.String
- <init>():V
- s:findBinFile(java.lang.String):java.nio.file.Path
- s:findBinFileWithException(java.lang.String):java.nio.file.Path
- s:getAbsolutePath(java.lang.String):java.lang.String
- s:getBinPath():java.lang.String
- s:getBundledRuntimePath():java.lang.String
- s:getCommonDataPath():java.nio.file.Path
- s:getCommunityHomePath():java.lang.String
- s:getConfigDir():java.nio.file.Path
- s:getConfigPath():java.lang.String
- s:getCustomOptionsDirectory():java.lang.String
- s:getDefaultConfigPathFor(java.lang.String):java.lang.String
- s:getDefaultSystemPathFor(java.lang.String):java.lang.String
- s:getHomePath():java.lang.String
- s:getHomePath(Z):java.lang.String
- s:getJarForClass(java.lang.Class):java.nio.file.Path
- s:getJarPathForClass(java.lang.Class):java.lang.String
- s:getLibPath():java.lang.String
- s:getLogDir():java.nio.file.Path
- s:getLogPath():java.lang.String
- s:getOptionsFile(java.lang.String):java.io.File
- s:getOptionsPath():java.lang.String
- s:getPluginTempPath():java.lang.String
- s:getPluginsDir():java.nio.file.Path
- s:getPluginsPath():java.lang.String
- s:getPreInstalledPluginsPath():java.lang.String
- s:getResourceRoot(java.lang.Class,java.lang.String):java.lang.String
- s:getResourceRoot(java.lang.ClassLoader,java.lang.String):java.lang.String
- s:getScratchPath():java.lang.String
- s:getSystemDir():java.nio.file.Path
- s:getSystemPath():java.lang.String
- s:getTempPath():java.lang.String
- s:isUnderHomeDirectory(java.lang.String):Z
- s:isUnderHomeDirectory(java.nio.file.Path):Z
- s:setExplicitConfigPath(java.lang.String):V
f:com.intellij.openapi.diagnostic.Attachment
- sf:EMPTY_ARRAY:com.intellij.openapi.diagnostic.Attachment[]
- <init>(java.lang.String,java.io.File,java.lang.String):V
- <init>(java.lang.String,java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
- <init>(java.lang.String,java.nio.file.Path,java.lang.String):V
- <init>(java.lang.String,B[],java.lang.String):V
- getBytes():B[]
- getDisplayText():java.lang.String
- getEncodedBytes():java.lang.String
- getName():java.lang.String
- getPath():java.lang.String
- isIncluded():Z
- openContentStream():java.io.InputStream
- setIncluded(Z):V
f:com.intellij.openapi.diagnostic.AttachmentFactory
- <init>():V
- s:createAttachment(java.lang.String,java.io.InputStream,J,Z):com.intellij.openapi.diagnostic.Attachment
- s:createAttachment(java.nio.file.Path,Z):com.intellij.openapi.diagnostic.Attachment
- s:createContext(java.lang.String):com.intellij.openapi.diagnostic.Attachment
c:com.intellij.openapi.diagnostic.DefaultLogger
- com.intellij.openapi.diagnostic.Logger
- <init>(java.lang.String):V
- s:attachmentsToString(java.lang.Throwable):java.lang.String
- debug(java.lang.String,java.lang.Throwable):V
- s:detailsToString(java.lang.String[]):java.lang.String
- s:disableStderrDumping(com.intellij.openapi.Disposable):V
- error(java.lang.String,java.lang.Throwable,java.lang.String[]):V
- info(java.lang.String,java.lang.Throwable):V
- isDebugEnabled():Z
- isTraceEnabled():Z
- setLevel(com.intellij.openapi.diagnostic.LogLevel):V
- s:shouldDumpExceptionToStderr():Z
- trace(java.lang.String):V
- trace(java.lang.Throwable):V
- warn(java.lang.String,java.lang.Throwable):V
a:com.intellij.openapi.diagnostic.DelegatingLogger
- com.intellij.openapi.diagnostic.Logger
- pf:myDelegate:com.intellij.openapi.diagnostic.Logger
- p:<init>(com.intellij.openapi.diagnostic.Logger):V
- debug(java.lang.String,java.lang.Throwable):V
- error(java.lang.String,java.lang.Throwable,java.lang.String[]):V
- info(java.lang.String,java.lang.Throwable):V
- isDebugEnabled():Z
- isTraceEnabled():Z
- setLevel(com.intellij.openapi.diagnostic.LogLevel):V
- trace(java.lang.String):V
- trace(java.lang.Throwable):V
- warn(java.lang.String,java.lang.Throwable):V
com.intellij.openapi.diagnostic.ExceptionWithAttachments
- a:getAttachments():com.intellij.openapi.diagnostic.Attachment[]
c:com.intellij.openapi.diagnostic.IdeaLogRecordFormatter
- java.util.logging.Formatter
- <init>():V
- <init>(Z):V
- <init>(Z,com.intellij.openapi.diagnostic.IdeaLogRecordFormatter):V
- format(java.util.logging.LogRecord):java.lang.String
- s:formatThrowable(java.lang.Throwable):java.lang.String
- p:getStartedMillis():J
e:com.intellij.openapi.diagnostic.LogLevel
- java.lang.Enum
- sf:ALL:com.intellij.openapi.diagnostic.LogLevel
- sf:DEBUG:com.intellij.openapi.diagnostic.LogLevel
- sf:ERROR:com.intellij.openapi.diagnostic.LogLevel
- sf:INFO:com.intellij.openapi.diagnostic.LogLevel
- sf:OFF:com.intellij.openapi.diagnostic.LogLevel
- sf:TRACE:com.intellij.openapi.diagnostic.LogLevel
- sf:WARNING:com.intellij.openapi.diagnostic.LogLevel
- getLevelName():java.lang.String
- getPrettyLevelName():java.lang.String
- s:valueOf(java.lang.String):com.intellij.openapi.diagnostic.LogLevel
- s:values():com.intellij.openapi.diagnostic.LogLevel[]
a:com.intellij.openapi.diagnostic.Logger
- <init>():V
- assertTrue(Z):Z
- assertTrue(Z,java.lang.Object):Z
- debug(java.lang.String):V
- a:debug(java.lang.String,java.lang.Throwable):V
- debug(java.lang.String,java.lang.Object[]):V
- debug(java.lang.Throwable):V
- debugValues(java.lang.String,java.util.Collection):V
- ps:ensureNotControlFlow(java.lang.Throwable):java.lang.Throwable
- error(java.lang.Object):V
- error(java.lang.String):V
- error(java.lang.String,java.lang.Throwable):V
- error(java.lang.String,java.lang.Throwable,com.intellij.openapi.diagnostic.Attachment[]):V
- a:error(java.lang.String,java.lang.Throwable,java.lang.String[]):V
- error(java.lang.String,com.intellij.openapi.diagnostic.Attachment[]):V
- error(java.lang.String,java.lang.String[]):V
- error(java.lang.Throwable):V
- s:getFactory():com.intellij.openapi.diagnostic.Logger$Factory
- s:getInstance(java.lang.Class):com.intellij.openapi.diagnostic.Logger
- s:getInstance(java.lang.String):com.intellij.openapi.diagnostic.Logger
- info(java.lang.String):V
- a:info(java.lang.String,java.lang.Throwable):V
- info(java.lang.Throwable):V
- f:infoWithDebug(java.lang.String,java.lang.Throwable):V
- f:infoWithDebug(java.lang.Throwable):V
- a:isDebugEnabled():Z
- s:isInitialized():Z
- isTraceEnabled():Z
- s:setFactory(com.intellij.openapi.diagnostic.Logger$Factory):V
- s:setFactory(java.lang.Class):V
- setLevel(com.intellij.openapi.diagnostic.LogLevel):V
- setLevel(org.apache.log4j.Level):V
- s:setUnitTestMode():V
- s:shouldRethrow(java.lang.Throwable):Z
- trace(java.lang.String):V
- trace(java.lang.Throwable):V
- warn(java.lang.String):V
- a:warn(java.lang.String,java.lang.Throwable):V
- warn(java.lang.Throwable):V
- warnInProduction(java.lang.Throwable):V
- f:warnWithDebug(java.lang.String,java.lang.Throwable):V
- f:warnWithDebug(java.lang.Throwable):V
com.intellij.openapi.diagnostic.Logger$Factory
- a:getLoggerInstance(java.lang.String):com.intellij.openapi.diagnostic.Logger
f:com.intellij.openapi.diagnostic.LoggerKt
- sf:debug(com.intellij.openapi.diagnostic.Logger,java.lang.Exception,kotlin.jvm.functions.Function0):V
- bs:debug$default(com.intellij.openapi.diagnostic.Logger,java.lang.Exception,kotlin.jvm.functions.Function0,I,java.lang.Object):V
- sf:trace(com.intellij.openapi.diagnostic.Logger,kotlin.jvm.functions.Function0):V
- sf:traceThrowable(com.intellij.openapi.diagnostic.Logger,kotlin.jvm.functions.Function0):V
c:com.intellij.openapi.diagnostic.RuntimeExceptionWithAttachments
- java.lang.RuntimeException
- com.intellij.openapi.diagnostic.ExceptionWithAttachments
- <init>(java.lang.String,java.lang.String,com.intellij.openapi.diagnostic.Attachment[]):V
- <init>(java.lang.String,java.lang.Throwable,com.intellij.openapi.diagnostic.Attachment[]):V
- <init>(java.lang.String,com.intellij.openapi.diagnostic.Attachment[]):V
- <init>(java.lang.Throwable,com.intellij.openapi.diagnostic.Attachment[]):V
- getAttachments():com.intellij.openapi.diagnostic.Attachment[]
- getUserMessage():java.lang.String
com.intellij.openapi.diagnostic.UntraceableException
a:com.intellij.openapi.util.AtomicClearableLazyValue
- com.intellij.openapi.util.ClearableLazyValue
- <init>():V
- f:drop():V
- f:getValue():java.lang.Object
- f:isCached():Z
Fa:com.intellij.openapi.util.AtomicNotNullLazyValue
- com.intellij.openapi.util.NotNullLazyValue
- s:createValue(com.intellij.openapi.util.NotNullFactory):com.intellij.openapi.util.AtomicNotNullLazyValue
- f:getValue():java.lang.Object
- isComputed():Z
Fa:com.intellij.openapi.util.AtomicNullableLazyValue
- com.intellij.openapi.util.NullableLazyValue
- f:getValue():java.lang.Object
- isComputed():Z
com.intellij.openapi.util.BooleanGetter
- java.util.function.BooleanSupplier
- sf:FALSE:com.intellij.openapi.util.BooleanGetter
- sf:TRUE:com.intellij.openapi.util.BooleanGetter
- a:get():Z
- getAsBoolean():Z
com.intellij.openapi.util.CheckedDisposable
- com.intellij.openapi.Disposable
- a:isDisposed():Z
f:com.intellij.openapi.util.ClassLoaderUtil
- s:computeWithClassLoader(java.lang.ClassLoader,com.intellij.openapi.util.ThrowableComputable):java.lang.Object
- s:runWithClassLoader(java.lang.ClassLoader,com.intellij.openapi.util.Computable):java.lang.Object
- s:runWithClassLoader(java.lang.ClassLoader,com.intellij.util.ThrowableRunnable):V
a:com.intellij.openapi.util.ClearableLazyValue
- java.util.function.Supplier
- <init>():V
- pa:compute():java.lang.Object
- s:create(java.util.function.Supplier):com.intellij.openapi.util.ClearableLazyValue
- s:createAtomic(java.util.function.Supplier):com.intellij.openapi.util.ClearableLazyValue
- drop():V
- f:get():java.lang.Object
- getValue():java.lang.Object
- isCached():Z
f:com.intellij.openapi.util.Clock
- <init>():V
- s:getTime():J
- s:reset():V
- s:setTime(I,I,I):V
- s:setTime(I,I,I,I,I):V
- s:setTime(I,I,I,I,I,I):V
- s:setTime(J):V
- s:setTime(java.util.Date):V
com.intellij.openapi.util.Cloner
- a:cloneOf(java.lang.Object):java.lang.Object
- a:copyOf(java.lang.Object):java.lang.Object
com.intellij.openapi.util.ColoredItem
- a:getColor():java.awt.Color
com.intellij.openapi.util.Computable
- java.util.function.Supplier
- a:compute():java.lang.Object
- get():java.lang.Object
f:com.intellij.openapi.util.Computable$PredefinedValueComputable
- com.intellij.openapi.util.Computable
- <init>(java.lang.Object):V
- compute():java.lang.Object
com.intellij.openapi.util.Condition
- java.util.function.Predicate
- sf:FALSE:com.intellij.openapi.util.Condition
- sf:NOT_NULL:com.intellij.openapi.util.Condition
- sf:TRUE:com.intellij.openapi.util.Condition
- test(java.lang.Object):Z
- a:value(java.lang.Object):Z
f:com.intellij.openapi.util.Conditions
- s:alwaysFalse():com.intellij.openapi.util.Condition
- s:alwaysTrue():com.intellij.openapi.util.Condition
- s:and(com.intellij.openapi.util.Condition,com.intellij.openapi.util.Condition):com.intellij.openapi.util.Condition
- s:assignableTo(java.lang.Class):com.intellij.openapi.util.Condition
- s:cached(com.intellij.openapi.util.Condition):com.intellij.openapi.util.Condition
- s:compose(com.intellij.util.Function,com.intellij.openapi.util.Condition):com.intellij.openapi.util.Condition
- s:constant(Z):com.intellij.openapi.util.Condition
- s:equalTo(java.lang.Object):com.intellij.openapi.util.Condition
- s:instanceOf(java.lang.Class):com.intellij.openapi.util.Condition
- s:instanceOf(java.lang.Class[]):com.intellij.openapi.util.Condition
- s:is(java.lang.Object):com.intellij.openapi.util.Condition
- s:not(com.intellij.openapi.util.Condition):com.intellij.openapi.util.Condition
- s:notEqualTo(java.lang.Object):com.intellij.openapi.util.Condition
- s:notInstanceOf(java.lang.Class):com.intellij.openapi.util.Condition
- s:notNull():com.intellij.openapi.util.Condition
- s:oneOf(java.util.Collection):com.intellij.openapi.util.Condition
- s:oneOf(java.lang.Object[]):com.intellij.openapi.util.Condition
- s:or(com.intellij.openapi.util.Condition,com.intellij.openapi.util.Condition):com.intellij.openapi.util.Condition
f:com.intellij.openapi.util.DefaultJDOMExternalizer
- s:readExternal(java.lang.Object,org.jdom.Element):V
- s:toColor(java.lang.String):java.awt.Color
- s:toInt(java.lang.String):I
- s:write(java.lang.Object,org.jdom.Element,java.util.function.Predicate):V
- s:writeExternal(java.lang.Object,org.jdom.Element):V
- s:writeExternal(java.lang.Object,org.jdom.Element,com.intellij.openapi.util.DefaultJDOMExternalizer$JDOMFilter):V
com.intellij.openapi.util.DefaultJDOMExternalizer$JDOMFilter
- a:isAccept(java.lang.reflect.Field):Z
c:com.intellij.openapi.util.DifferenceFilter
- com.intellij.openapi.util.DefaultJDOMExternalizer$JDOMFilter
- java.util.function.Predicate
- <init>(java.lang.Object,java.lang.Object):V
- isAccept(java.lang.reflect.Field):Z
- test(java.lang.reflect.Field):Z
f:com.intellij.openapi.util.Disposer
- s:dispose(com.intellij.openapi.Disposable):V
- s:dispose(com.intellij.openapi.Disposable,Z):V
- s:getDisposalTrace(com.intellij.openapi.Disposable):java.lang.Throwable
- s:getRegistrationTrace(com.intellij.openapi.Disposable):java.lang.Throwable
- s:isDebugDisposerOn():Z
- s:isDebugMode():Z
- s:isDisposed(com.intellij.openapi.Disposable):Z
- s:newCheckedDisposable():com.intellij.openapi.util.CheckedDisposable
- s:newCheckedDisposable(com.intellij.openapi.Disposable):com.intellij.openapi.util.CheckedDisposable
- s:newCheckedDisposable(com.intellij.openapi.Disposable,java.lang.String):com.intellij.openapi.util.CheckedDisposable
- s:newCheckedDisposable(java.lang.String):com.intellij.openapi.util.CheckedDisposable
- s:newDisposable():com.intellij.openapi.Disposable
- s:newDisposable(com.intellij.openapi.Disposable):com.intellij.openapi.Disposable
- s:newDisposable(com.intellij.openapi.Disposable,java.lang.String):com.intellij.openapi.Disposable
- s:newDisposable(java.lang.String):com.intellij.openapi.Disposable
- s:register(com.intellij.openapi.Disposable,com.intellij.openapi.Disposable):V
- s:setDebugMode(Z):Z
- s:tryRegister(com.intellij.openapi.Disposable,com.intellij.openapi.Disposable):Z
f:com.intellij.openapi.util.EmptyRunnable
- java.lang.Runnable
- sf:INSTANCE:java.lang.Runnable
- <init>():V
- s:getInstance():java.lang.Runnable
- run():V
com.intellij.openapi.util.Factory
- java.util.function.Supplier
- a:create():java.lang.Object
- get():java.lang.Object
com.intellij.openapi.util.Getter
- java.util.function.Supplier
a:com.intellij.openapi.util.IconPathPatcher
- <init>():V
- getContextClass(java.lang.String):java.lang.Class
- getContextClassLoader(java.lang.String,java.lang.ClassLoader):java.lang.ClassLoader
- patchPath(java.lang.String):java.lang.String
- patchPath(java.lang.String,java.lang.ClassLoader):java.lang.String
com.intellij.openapi.util.Iconable
- sf:ICON_FLAG_READ_STATUS:I
- sf:ICON_FLAG_VISIBILITY:I
- a:getIcon(I):javax.swing.Icon
@:com.intellij.openapi.util.Iconable$IconFlags
- java.lang.annotation.Annotation
f:com.intellij.openapi.util.IntRef
- <init>():V
- <init>(I):V
- get():I
- inc():V
- set(I):V
@:com.intellij.openapi.util.IntellijInternalApi
- java.lang.annotation.Annotation
Ff:com.intellij.openapi.util.InvalidDataException
- java.lang.RuntimeException
- <init>():V
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
- <init>(java.lang.Throwable):V
com.intellij.openapi.util.JDOMExternalizable
- a:readExternal(org.jdom.Element):V
- a:writeExternal(org.jdom.Element):V
c:com.intellij.openapi.util.JDOMExternalizableStringList
- java.util.ArrayList
- com.intellij.openapi.util.JDOMExternalizable
- <init>():V
- <init>(I):V
- <init>(java.util.Collection):V
- readExternal(org.jdom.Element):V
- s:readList(java.util.List,org.jdom.Element):V
- writeExternal(org.jdom.Element):V
f:com.intellij.openapi.util.JDOMExternalizer
- s:loadStringsList(org.jdom.Element,java.lang.String,java.lang.String):java.util.List
- s:readBoolean(org.jdom.Element,java.lang.String):Z
- s:readInteger(org.jdom.Element,java.lang.String,I):I
- s:readMap(org.jdom.Element,java.util.Map,java.lang.String,java.lang.String):V
- s:readString(org.jdom.Element,java.lang.String):java.lang.String
- s:saveStringsList(org.jdom.Element,java.lang.String,java.lang.String,java.lang.String[]):V
- s:write(org.jdom.Element,java.lang.String,I):V
- s:write(org.jdom.Element,java.lang.String,java.lang.String):V
- s:write(org.jdom.Element,java.lang.String,Z):V
- s:writeMap(org.jdom.Element,java.util.Map,java.lang.String,java.lang.String):V
f:com.intellij.openapi.util.JDOMExternalizerUtil
- <init>():V
- s:addChildren(org.jdom.Element,java.lang.String,java.util.Collection):V
- s:addChildrenWithValueAttribute(org.jdom.Element,java.lang.String,java.util.List):V
- s:addElementWithValueAttribute(org.jdom.Element,java.lang.String,java.lang.String):org.jdom.Element
- s:getChildrenValueAttributes(org.jdom.Element,java.lang.String):java.util.List
- s:getFirstChildValueAttribute(org.jdom.Element,java.lang.String):java.lang.String
- s:readCustomField(org.jdom.Element,java.lang.String):java.lang.String
- s:readField(org.jdom.Element,java.lang.String):java.lang.String
- s:readField(org.jdom.Element,java.lang.String,java.lang.String):java.lang.String
- s:readOption(org.jdom.Element,java.lang.String):org.jdom.Element
- s:writeCustomField(org.jdom.Element,java.lang.String,java.lang.String):V
- s:writeField(org.jdom.Element,java.lang.String,java.lang.String):V
- s:writeField(org.jdom.Element,java.lang.String,java.lang.String,java.lang.String):V
- s:writeOption(org.jdom.Element,java.lang.String):org.jdom.Element
f:com.intellij.openapi.util.JDOMUtil
- sf:CHILDREN_PATTERN:java.util.regex.Pattern
- sf:XINCLUDE_NAMESPACE:org.jdom.Namespace
- sf:XPOINTER_PATTERN:java.util.regex.Pattern
- s:areElementsEqual(org.jdom.Element,org.jdom.Element):Z
- s:areElementsEqual(org.jdom.Element,org.jdom.Element,Z):Z
- s:copyMissingContent(org.jdom.Element,org.jdom.Element):V
- s:createFormat(java.lang.String):org.jdom.output.Format
- s:deepMerge(org.jdom.Element,org.jdom.Element):org.jdom.Element
- s:deepMergeWithAttributes(org.jdom.Element,org.jdom.Element,java.util.List):org.jdom.Element
- s:escapeText(java.lang.String):java.lang.String
- s:escapeText(java.lang.String,Z,Z):java.lang.String
- s:escapeText(java.lang.String,Z,Z,Z):java.lang.String
- s:getAttributes(org.jdom.Element):java.util.List
- s:getBounds(org.jdom.Element):java.awt.Rectangle
- s:getBounds(org.jdom.Element,java.lang.String,java.lang.String,java.lang.String,java.lang.String):java.awt.Rectangle
- s:getChildren(org.jdom.Element):java.util.List
- s:getChildren(org.jdom.Element,java.lang.String):java.util.List
- s:getElements(org.jdom.Element):org.jdom.Element[]
- s:getLocation(org.jdom.Element):java.awt.Point
- s:getLocation(org.jdom.Element,java.lang.String,java.lang.String):java.awt.Point
- s:getSize(org.jdom.Element):java.awt.Dimension
- s:getSize(org.jdom.Element,java.lang.String,java.lang.String):java.awt.Dimension
- s:getValue(java.lang.Object):java.lang.String
- s:hashCode(org.jdom.Element,Z):I
- s:internElement(org.jdom.Element):org.jdom.Element
- s:isEmpty(org.jdom.Element):Z
- s:isEmpty(org.jdom.Element,I):Z
- s:legalizeChars(java.lang.CharSequence):java.lang.CharSequence
- s:legalizeText(java.lang.String):java.lang.String
- s:load(java.io.File):org.jdom.Element
- s:load(java.io.InputStream):org.jdom.Element
- s:load(java.io.Reader):org.jdom.Element
- s:load(java.lang.CharSequence):org.jdom.Element
- s:load(java.lang.Class,java.lang.String):org.jdom.Element
- s:load(java.net.URL):org.jdom.Element
- s:load(java.nio.file.Path):org.jdom.Element
- s:load(B[]):org.jdom.Element
- s:loadDocument(java.io.File):org.jdom.Document
- s:loadDocument(java.io.InputStream):org.jdom.Document
- s:loadDocument(java.net.URL):org.jdom.Document
- s:loadResource(java.net.URL):org.jdom.Element
- s:merge(org.jdom.Element,org.jdom.Element):org.jdom.Element
- s:reduceChildren(java.lang.String,org.jdom.Element):org.jdom.Element
- s:removeControlChars(java.lang.String):java.lang.String
- s:setBounds(org.jdom.Element,java.awt.Rectangle):org.jdom.Element
- s:setBounds(org.jdom.Element,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Rectangle):org.jdom.Element
- s:setLocation(org.jdom.Element,java.awt.Point):org.jdom.Element
- s:setLocation(org.jdom.Element,java.lang.String,java.lang.String,java.awt.Point):org.jdom.Element
- s:setSize(org.jdom.Element,java.awt.Dimension):org.jdom.Element
- s:setSize(org.jdom.Element,java.lang.String,java.lang.String,java.awt.Dimension):org.jdom.Element
- s:updateFileSet(java.io.File[],java.lang.String[],org.jdom.Document[],java.lang.String):V
- s:write(org.jdom.Element):java.lang.String
- s:write(org.jdom.Element,java.nio.file.Path):V
- s:write(org.jdom.Element,java.nio.file.Path,java.lang.String):V
- s:write(org.jdom.Parent,java.io.File):V
- s:write(org.jdom.Parent,java.io.File,java.lang.String):V
- s:write(org.jdom.Parent,java.io.OutputStream):V
- s:write(org.jdom.Parent,java.io.OutputStream,java.lang.String):V
- s:write(org.jdom.Parent,java.io.Writer,java.lang.String):V
- s:write(org.jdom.Parent,java.lang.String):java.lang.String
- s:writeChildren(org.jdom.Element,java.lang.String):java.lang.String
- s:writeDocument(org.jdom.Document):java.lang.String
- s:writeDocument(org.jdom.Document,java.io.File,java.lang.String):V
- s:writeDocument(org.jdom.Document,java.io.OutputStream,java.lang.String):V
- s:writeDocument(org.jdom.Document,java.lang.String):java.lang.String
- s:writeDocument(org.jdom.Document,java.lang.String,java.lang.String):V
- s:writeDocument(org.jdom.Document,java.nio.file.Path):V
- s:writeDocument(org.jdom.Document,java.nio.file.Path,java.lang.String):V
- s:writeElement(org.jdom.Element):java.lang.String
- s:writeElement(org.jdom.Element,java.io.Writer,java.lang.String):V
- s:writeElement(org.jdom.Element,java.lang.String):java.lang.String
com.intellij.openapi.util.JDOMUtil$ElementOutputFilter
- a:accept(org.jdom.Element,I):Z
f:com.intellij.openapi.util.JDOMUtil$MergeAttribute
- attributeName:java.lang.String
- elementName:java.lang.String
- <init>(java.lang.String,java.lang.String):V
c:com.intellij.openapi.util.Key
- <init>(java.lang.String):V
- s:create(java.lang.String):com.intellij.openapi.util.Key
- f:equals(java.lang.Object):Z
- s:findKeyByName(java.lang.String):com.intellij.openapi.util.Key
- get(com.intellij.openapi.util.UserDataHolder):java.lang.Object
- get(com.intellij.openapi.util.UserDataHolder,java.lang.Object):java.lang.Object
- s:getKeyByIndex(I):com.intellij.openapi.util.Key
- getRequired(com.intellij.openapi.util.UserDataHolder):java.lang.Object
- f:hashCode():I
- isIn(com.intellij.openapi.util.UserDataHolder):Z
- set(com.intellij.openapi.util.UserDataHolder,java.lang.Object):V
a:com.intellij.openapi.util.KeyWithDefaultValue
- com.intellij.openapi.util.Key
- <init>(java.lang.String):V
- s:create(java.lang.String,java.lang.Object):com.intellij.openapi.util.KeyWithDefaultValue
- s:create(java.lang.String,java.util.function.Supplier):com.intellij.openapi.util.KeyWithDefaultValue
- a:getDefaultValue():java.lang.Object
f:com.intellij.openapi.util.LastComputedIconCache
- <init>():V
- s:clear(com.intellij.openapi.util.UserDataHolder):V
- s:get(com.intellij.openapi.util.UserDataHolder,I):javax.swing.Icon
- s:put(com.intellij.openapi.util.UserDataHolder,javax.swing.Icon,I):V
a:com.intellij.openapi.util.LazyInstance
- com.intellij.openapi.util.NotNullLazyValue
- <init>():V
- pf:compute():java.lang.Object
- pa:getInstanceClass():java.lang.Class
f:com.intellij.openapi.util.LowMemoryWatcher
- s:onLowMemorySignalReceived(Z):V
- s:register(java.lang.Runnable):com.intellij.openapi.util.LowMemoryWatcher
- s:register(java.lang.Runnable,com.intellij.openapi.Disposable):V
- s:register(java.lang.Runnable,com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType):com.intellij.openapi.util.LowMemoryWatcher
- s:register(java.lang.Runnable,com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType,com.intellij.openapi.Disposable):V
- s:runWithNotificationsSuppressed(com.intellij.openapi.util.Computable):java.lang.Object
- stop():V
e:com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType
- java.lang.Enum
- sf:ALWAYS:com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType
- sf:ONLY_AFTER_GC:com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType
- s:valueOf(java.lang.String):com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType
- s:values():com.intellij.openapi.util.LowMemoryWatcher$LowMemoryWatcherType[]
com.intellij.openapi.util.ModificationTracker
- sf:EVER_CHANGED:com.intellij.openapi.util.ModificationTracker
- sf:NEVER_CHANGED:com.intellij.openapi.util.ModificationTracker
- a:getModificationCount():J
f:com.intellij.openapi.util.MutualMap
- <init>():V
- <init>(Z):V
- clear():V
- containsKey(java.lang.Object):Z
- equals(java.lang.Object):Z
- getKey(java.lang.Object):java.lang.Object
- getKeys():java.util.Collection
- getValue(java.lang.Object):java.lang.Object
- getValues():java.util.Collection
- hashCode():I
- put(java.lang.Object,java.lang.Object):V
- remove(java.lang.Object):V
- size():I
@:com.intellij.openapi.util.NlsContext
- java.lang.annotation.Annotation
- a:prefix():java.lang.String
- a:suffix():java.lang.String
f:com.intellij.openapi.util.NlsContexts
- <init>():V
@:com.intellij.openapi.util.NlsContexts$AttributeDescriptor
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$BorderTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$Button
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$Checkbox
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ColumnName
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$Command
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ConfigurableName
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$DetailedDescription
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$DialogMessage
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$DialogTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$HintText
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$Label
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$LinkLabel
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ListItem
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$NotificationContent
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$NotificationSubtitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$NotificationTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ParsingError
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$PopupAdvertisement
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$PopupContent
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$PopupTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ProgressDetails
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ProgressText
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$ProgressTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$RadioButton
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$Separator
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$StatusBarText
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$StatusText
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$SystemNotificationText
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$SystemNotificationTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$TabTitle
- java.lang.annotation.Annotation
@:com.intellij.openapi.util.NlsContexts$Tooltip
- java.lang.annotation.Annotation
com.intellij.openapi.util.NotNullComputable
- com.intellij.openapi.util.Computable
- sf:TRUE:com.intellij.openapi.util.NotNullComputable
- a:compute():java.lang.Object
com.intellij.openapi.util.NotNullFactory
- com.intellij.openapi.util.Factory
- a:create():java.lang.Object
f:com.intellij.openapi.util.NotNullLazyKey
- com.intellij.openapi.util.Key
- s:create(java.lang.String,com.intellij.util.NotNullFunction):com.intellij.openapi.util.NotNullLazyKey
- s:createLazyKey(java.lang.String,java.util.function.Function):com.intellij.openapi.util.NotNullLazyKey
- getValue(com.intellij.openapi.util.UserDataHolder):java.lang.Object
Fa:com.intellij.openapi.util.NotNullLazyValue
- java.util.function.Supplier
- s:atomicLazy(java.util.function.Supplier):com.intellij.openapi.util.NotNullLazyValue
- s:createConstantValue(java.lang.Object):com.intellij.openapi.util.NotNullLazyValue
- s:createValue(com.intellij.openapi.util.NotNullFactory):com.intellij.openapi.util.NotNullLazyValue
- f:get():java.lang.Object
- getValue():java.lang.Object
- isComputed():Z
- s:lazy(java.util.function.Supplier):com.intellij.openapi.util.NotNullLazyValue
- s:softLazy(java.util.function.Supplier):java.util.function.Supplier
- s:volatileLazy(java.util.function.Supplier):com.intellij.openapi.util.NotNullLazyValue
f:com.intellij.openapi.util.NullUtils
- s:hasNull(java.lang.Object[]):Z
- s:notNull(java.lang.Object[]):Z
com.intellij.openapi.util.NullableComputable
- com.intellij.openapi.util.Computable
- a:compute():java.lang.Object
com.intellij.openapi.util.NullableFactory
- com.intellij.openapi.util.Factory
- a:create():java.lang.Object
f:com.intellij.openapi.util.NullableLazyKey
- com.intellij.openapi.util.Key
- s:create(java.lang.String,com.intellij.util.NullableFunction):com.intellij.openapi.util.NullableLazyKey
- getValue(com.intellij.openapi.util.UserDataHolder):java.lang.Object
a:com.intellij.openapi.util.NullableLazyValue
- <init>():V
- s:atomicLazyNullable(java.util.function.Supplier):com.intellij.openapi.util.NullableLazyValue
- pa:compute():java.lang.Object
- s:createValue(com.intellij.openapi.util.Factory):com.intellij.openapi.util.NullableLazyValue
- getValue():java.lang.Object
- isComputed():Z
- s:lazyNullable(java.util.function.Supplier):com.intellij.openapi.util.NullableLazyValue
- s:volatileLazyNullable(java.util.function.Supplier):com.intellij.openapi.util.NullableLazyValue
a:com.intellij.openapi.util.Pass
- java.util.function.Consumer
- <init>():V
- accept(java.lang.Object):V
- s:create(java.util.function.Consumer):com.intellij.openapi.util.Pass
- a:pass(java.lang.Object):V
f:com.intellij.openapi.util.PasswordUtil
- s:decodePassword(java.lang.String):java.lang.String
- s:decodePasswordAsCharArray(java.lang.String):C[]
- s:encodePassword(java.lang.String):java.lang.String
- s:encodePassword(C[]):java.lang.String
f:com.intellij.openapi.util.Predicates
- <init>():V
- s:alwaysFalse():java.util.function.Predicate
- s:alwaysTrue():java.util.function.Predicate
- s:nonNull():java.util.function.Predicate
c:com.intellij.openapi.util.ProperTextRange
- com.intellij.openapi.util.TextRange
- <init>(I,I):V
- <init>(com.intellij.openapi.util.TextRange):V
- s:create(I,I):com.intellij.openapi.util.ProperTextRange
- s:create(com.intellij.openapi.util.Segment):com.intellij.openapi.util.ProperTextRange
- cutOut(com.intellij.openapi.util.TextRange):com.intellij.openapi.util.ProperTextRange
- s:from(I,I):com.intellij.openapi.util.ProperTextRange
- grown(I):com.intellij.openapi.util.ProperTextRange
- intersection(com.intellij.openapi.util.TextRange):com.intellij.openapi.util.ProperTextRange
- shiftRight(I):com.intellij.openapi.util.ProperTextRange
- union(com.intellij.openapi.util.TextRange):com.intellij.openapi.util.ProperTextRange
f:com.intellij.openapi.util.PropertiesUtil
- <init>():V
- s:loadProperties(java.io.Reader):java.util.Map
a:com.intellij.openapi.util.RecursionGuard
- a:computePreventingRecursion(java.lang.Object,Z,com.intellij.openapi.util.ThrowableComputable):java.lang.Object
- a:currentStack():java.util.List
- doPreventingRecursion(java.lang.Object,Z,com.intellij.openapi.util.Computable):java.lang.Object
- a:prohibitResultCaching(java.lang.Object):V
com.intellij.openapi.util.RecursionGuard$StackStamp
- a:mayCacheNow():Z
f:com.intellij.openapi.util.RecursionManager
- <init>():V
- s:assertOnMissedCache(com.intellij.openapi.Disposable):V
- s:assertOnRecursionPrevention(com.intellij.openapi.Disposable):V
- s:createGuard(java.lang.String):com.intellij.openapi.util.RecursionGuard
- s:disableAssertOnRecursionPrevention(com.intellij.openapi.Disposable):V
- s:disableMissedCacheAssertions(com.intellij.openapi.Disposable):V
- s:doPreventingRecursion(java.lang.Object,Z,com.intellij.openapi.util.Computable):java.lang.Object
- s:markStack():com.intellij.openapi.util.RecursionGuard$StackStamp
f:com.intellij.openapi.util.RemoveUserDataKt
- sf:removeUserData(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key):java.lang.Object
com.intellij.openapi.util.ScalableIcon
- javax.swing.Icon
- a:getScale():F
- a:scale(F):javax.swing.Icon
a:com.intellij.openapi.util.SimpleFieldCache
- <init>():V
- pa:compute(java.lang.Object):java.lang.Object
- pf:compute(java.lang.Object,java.lang.Object):java.lang.Object
- f:get(java.lang.Object):java.lang.Object
- pa:getValue(java.lang.Object):java.lang.Object
- pf:getValue(java.lang.Object,java.lang.Object):java.lang.Object
- pa:putValue(java.lang.Object,java.lang.Object):V
- pf:putValue(java.lang.Object,java.lang.Object,java.lang.Object):V
f:com.intellij.openapi.util.StackOverflowPreventedException
- java.lang.RuntimeException
- <init>(java.lang.String):V
f:com.intellij.openapi.util.SystemInfo
- sf:JAVA_RUNTIME_VERSION:java.lang.String
- sf:JAVA_VENDOR:java.lang.String
- sf:JAVA_VERSION:java.lang.String
- sf:OS_ARCH:java.lang.String
- sf:OS_NAME:java.lang.String
- sf:OS_VERSION:java.lang.String
- sf:is32Bit:Z
- sf:is64Bit:Z
- sf:isAarch64:Z
- sf:isAzulJvm:Z
- sf:isChromeOS:Z
- sf:isFileSystemCaseSensitive:Z
- sf:isFreeBSD:Z
- sf:isGNOME:Z
- sf:isI3:Z
- sf:isIbmJvm:Z
- sf:isJetBrainsJvm:Z
- sf:isKDE:Z
- sf:isLinux:Z
- sf:isMac:Z
- sf:isMacOSBigSur:Z
- sf:isMacOSCatalina:Z
- sf:isMacOSMonterey:Z
- sf:isMacOSSequoia:Z
- sf:isMacOSSonoma:Z
- sf:isMacOSVentura:Z
- sf:isMacSystemMenu:Z
- sf:isOracleJvm:Z
- sf:isSolaris:Z
- sf:isUnix:Z
- sf:isWayland:Z
- sf:isWin10OrNewer:Z
- sf:isWin11OrNewer:Z
- sf:isWin8OrNewer:Z
- sf:isWindows:Z
- sf:isXWindow:Z
- sf:isXfce:Z
- <init>():V
- s:getMacOSMajorVersion():java.lang.String
- s:getMacOSMajorVersion(java.lang.String):java.lang.String
- s:getMacOSMajorVersionCode():java.lang.String
- s:getMacOSMajorVersionCode(java.lang.String):java.lang.String
- s:getMacOSMinorVersionCode():java.lang.String
- s:getMacOSMinorVersionCode(java.lang.String):java.lang.String
- s:getMacOSVersionCode():java.lang.String
- s:getMacOSVersionCode(java.lang.String):java.lang.String
- s:getOsName():java.lang.String
- s:getOsNameAndVersion():java.lang.String
- s:getWinBuildNumber():java.lang.Long
- s:hasXdgMime():Z
- s:hasXdgOpen():Z
- s:isJavaVersionAtLeast(java.lang.String):Z
- s:isOsVersionAtLeast(java.lang.String):Z
com.intellij.openapi.util.Throwable2Computable
- a:compute():java.lang.Object
com.intellij.openapi.util.ThrowableNotNullFunction
- a:fun(java.lang.Object):java.lang.Object
f:com.intellij.openapi.util.TimeoutCachedValue
- java.util.function.Supplier
- <init>(J,java.util.concurrent.TimeUnit,java.util.function.Supplier):V
- get():java.lang.Object
- hasUpToDateValue():Z
c:com.intellij.openapi.util.TraceableDisposable
- <init>(Z):V
- getStackTrace():java.lang.String
- kill(java.lang.String):V
- killExceptionally(java.lang.Throwable):V
- throwDisposalError(java.lang.String):V
c:com.intellij.openapi.util.Trinity
- f:first:java.lang.Object
- f:second:java.lang.Object
- f:third:java.lang.Object
- <init>(java.lang.Object,java.lang.Object,java.lang.Object):V
- s:create(java.lang.Object,java.lang.Object,java.lang.Object):com.intellij.openapi.util.Trinity
- f:equals(java.lang.Object):Z
- f:getFirst():java.lang.Object
- s:getFirst(com.intellij.openapi.util.Trinity):java.lang.Object
- f:getSecond():java.lang.Object
- s:getSecond(com.intellij.openapi.util.Trinity):java.lang.Object
- f:getThird():java.lang.Object
- s:getThird(com.intellij.openapi.util.Trinity):java.lang.Object
- f:hashCode():I
f:com.intellij.openapi.util.UnfairTextRange
- com.intellij.openapi.util.TextRange
- <init>(I,I):V
f:com.intellij.openapi.util.UnorderedPair
- f:first:java.lang.Object
- f:second:java.lang.Object
- <init>(java.lang.Object,java.lang.Object):V
- equals(java.lang.Object):Z
- hashCode():I
c:com.intellij.openapi.util.UnprotectedUserDataHolder
- com.intellij.openapi.util.UserDataHolder
- <init>():V
- getUserData(com.intellij.openapi.util.Key):java.lang.Object
- getUserDataUnprotected(com.intellij.openapi.util.Key):java.lang.Object
- putUserData(com.intellij.openapi.util.Key,java.lang.Object):V
- putUserDataUnprotected(com.intellij.openapi.util.Key,java.lang.Object):V
a:com.intellij.openapi.util.UserDataCache
- p:<init>():V
- <init>(java.lang.String):V
- clear(com.intellij.openapi.util.Key,com.intellij.openapi.util.UserDataHolder):V
- get(com.intellij.openapi.util.Key,com.intellij.openapi.util.UserDataHolder,java.lang.Object):java.lang.Object
- get(com.intellij.openapi.util.UserDataHolder,java.lang.Object):java.lang.Object
- pf:getValue(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key):java.lang.Object
- put(com.intellij.openapi.util.UserDataHolder,java.lang.Object):V
- pf:putValue(java.lang.Object,com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key):V
com.intellij.openapi.util.UserDataHolder
- a:getUserData(com.intellij.openapi.util.Key):java.lang.Object
- a:putUserData(com.intellij.openapi.util.Key,java.lang.Object):V
c:com.intellij.openapi.util.UserDataHolderBase
- java.util.concurrent.atomic.AtomicReference
- com.intellij.openapi.util.UserDataHolderEx
- <init>():V
- p:changeUserMap(com.intellij.util.keyFMap.KeyFMap,com.intellij.util.keyFMap.KeyFMap):Z
- p:clearUserData():V
- p:clone():java.lang.Object
- copyCopyableDataTo(com.intellij.openapi.util.UserDataHolderBase):V
- copyUserDataTo(com.intellij.openapi.util.UserDataHolderBase):V
- getCopyableUserData(com.intellij.openapi.util.Key):java.lang.Object
- getUserData(com.intellij.openapi.util.Key):java.lang.Object
- getUserDataString():java.lang.String
- p:getUserMap():com.intellij.util.keyFMap.KeyFMap
- isUserDataEmpty():Z
- putCopyableUserData(com.intellij.openapi.util.Key,java.lang.Object):V
- putUserData(com.intellij.openapi.util.Key,java.lang.Object):V
- putUserDataIfAbsent(com.intellij.openapi.util.Key,java.lang.Object):java.lang.Object
- replace(com.intellij.openapi.util.Key,java.lang.Object,java.lang.Object):Z
- p:setUserMap(com.intellij.util.keyFMap.KeyFMap):V
com.intellij.openapi.util.UserDataHolderEx
- com.intellij.openapi.util.UserDataHolder
- a:putUserDataIfAbsent(com.intellij.openapi.util.Key,java.lang.Object):java.lang.Object
- a:replace(com.intellij.openapi.util.Key,java.lang.Object,java.lang.Object):Z
f:com.intellij.openapi.util.UserDataHolderExKt
- sf:getAndUpdateUserData(com.intellij.openapi.util.UserDataHolderEx,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function1):java.lang.Object
- sf:getOrCreateUserData(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function0):java.lang.Object
- sf:getOrCreateUserData(com.intellij.openapi.util.UserDataHolderEx,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function0):java.lang.Object
- sf:getOrCreateUserDataUnsafe(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function0):java.lang.Object
- sf:getOrMaybeCreateUserData(com.intellij.openapi.util.UserDataHolderEx,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function0):java.lang.Object
- sf:nullableLazyValue(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function0):java.lang.Object
- sf:nullableLazyValueUnsafe(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function0):java.lang.Object
- sf:updateUserData(com.intellij.openapi.util.UserDataHolderEx,com.intellij.openapi.util.Key,kotlin.jvm.functions.Function1):java.lang.Object
com.intellij.openapi.util.ValueKey
- sf:Companion:com.intellij.openapi.util.ValueKey$Companion
- a:getName():java.lang.String
- match():com.intellij.openapi.util.ValueKey$BeforeIf
- s:match(java.lang.String):com.intellij.openapi.util.ValueKey$BeforeIf
com.intellij.openapi.util.ValueKey$BeforeIf
- a:get():java.lang.Object
- a:getKeyName():java.lang.String
- a:ifEq(com.intellij.openapi.util.ValueKey):com.intellij.openapi.util.ValueKey$BeforeThen
- a:orNull():java.lang.Object
com.intellij.openapi.util.ValueKey$BeforeThen
- a:or(com.intellij.openapi.util.ValueKey):com.intellij.openapi.util.ValueKey$BeforeThen
- a:then(java.lang.Object):com.intellij.openapi.util.ValueKey$BeforeIf
- a:thenGet(java.util.function.Supplier):com.intellij.openapi.util.ValueKey$BeforeIf
f:com.intellij.openapi.util.ValueKey$Companion
- f:match(java.lang.String):com.intellij.openapi.util.ValueKey$BeforeIf
c:com.intellij.openapi.util.Version
- java.io.Serializable
- java.lang.Comparable
- f:bugfix:I
- f:major:I
- f:minor:I
- <init>(I,I,I):V
- compareTo(com.intellij.openapi.util.Version):I
- compareTo(java.lang.Integer):I
- compareTo(java.lang.Integer,java.lang.Integer):I
- compareTo(java.lang.Integer,java.lang.Integer,java.lang.Integer):I
- equals(java.lang.Object):Z
- hashCode():I
- is(java.lang.Integer):Z
- is(java.lang.Integer,java.lang.Integer):Z
- is(java.lang.Integer,java.lang.Integer,java.lang.Integer):Z
- isOrGreaterThan(java.lang.Integer):Z
- isOrGreaterThan(java.lang.Integer,java.lang.Integer):Z
- isOrGreaterThan(java.lang.Integer,java.lang.Integer,java.lang.Integer):Z
- lessThan(java.lang.Integer):Z
- lessThan(java.lang.Integer,java.lang.Integer):Z
- lessThan(java.lang.Integer,java.lang.Integer,java.lang.Integer):Z
- s:parseVersion(java.lang.String):com.intellij.openapi.util.Version
- toCompactString():java.lang.String
- s:toCompactString(I,I,I):java.lang.String
Fa:com.intellij.openapi.util.VolatileNullableLazyValue
- com.intellij.openapi.util.NullableLazyValue
- getValue():java.lang.Object
- isComputed():Z
f:com.intellij.openapi.util.WriteExternalException
- java.lang.RuntimeException
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
f:com.intellij.openapi.util.io.BufferExposingByteArrayInputStream
- com.intellij.util.io.UnsyncByteArrayInputStream
- <init>(B[]):V
- getInternalBuffer():B[]
f:com.intellij.openapi.util.io.BufferExposingByteArrayOutputStream
- com.intellij.util.io.UnsyncByteArrayOutputStream
- <init>():V
- <init>(I):V
- <init>(com.intellij.util.io.UnsyncByteArrayOutputStream$ByteArrayAllocator,I):V
- <init>(B[]):V
- backOff(I):I
- getInternalBuffer():B[]
f:com.intellij.openapi.util.io.ByteArraySequence
- com.intellij.openapi.util.io.ByteSequence
- sf:EMPTY:com.intellij.openapi.util.io.ByteArraySequence
- <init>(B[]):V
- <init>(B[],I,I):V
- byteAt(I):B
- s:create(B[]):com.intellij.openapi.util.io.ByteArraySequence
- equals(java.lang.Object):Z
- getLength():I
- getOffset():I
- hashCode():I
- length():I
- subSequence(I,I):com.intellij.openapi.util.io.ByteSequence
- toBytes():B[]
- toInputStream():java.io.DataInputStream
com.intellij.openapi.util.io.ByteSequence
- a:byteAt(I):B
- a:length():I
- a:subSequence(I,I):com.intellij.openapi.util.io.ByteSequence
- a:toBytes():B[]
com.intellij.openapi.util.io.CaseSensitivityAttribute
- java.nio.file.attribute.BasicFileAttributes
- a:getCaseSensitivity():com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
f:com.intellij.openapi.util.io.FileAttributes
- sf:BROKEN_SYMLINK:com.intellij.openapi.util.io.FileAttributes
- f:lastModified:J
- f:length:J
- <init>(Z,Z,Z,Z,J,J,Z):V
- <init>(Z,Z,Z,Z,J,J,Z,com.intellij.openapi.util.io.FileAttributes$CaseSensitivity):V
- areChildrenCaseSensitive():com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
- equals(java.lang.Object):Z
- s:fromNio(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes):com.intellij.openapi.util.io.FileAttributes
- getType():com.intellij.openapi.util.io.FileAttributes$Type
- hashCode():I
- isDirectory():Z
- isFile():Z
- isHidden():Z
- isSpecial():Z
- isSymLink():Z
- isWritable():Z
- withCaseSensitivity(com.intellij.openapi.util.io.FileAttributes$CaseSensitivity):com.intellij.openapi.util.io.FileAttributes
- withTimeStamp(J):com.intellij.openapi.util.io.FileAttributes
e:com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
- java.lang.Enum
- sf:INSENSITIVE:com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
- sf:SENSITIVE:com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
- sf:UNKNOWN:com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
- s:valueOf(java.lang.String):com.intellij.openapi.util.io.FileAttributes$CaseSensitivity
- s:values():com.intellij.openapi.util.io.FileAttributes$CaseSensitivity[]
e:com.intellij.openapi.util.io.FileAttributes$Type
- java.lang.Enum
- sf:DIRECTORY:com.intellij.openapi.util.io.FileAttributes$Type
- sf:FILE:com.intellij.openapi.util.io.FileAttributes$Type
- sf:SPECIAL:com.intellij.openapi.util.io.FileAttributes$Type
- s:valueOf(java.lang.String):com.intellij.openapi.util.io.FileAttributes$Type
- s:values():com.intellij.openapi.util.io.FileAttributes$Type[]
f:com.intellij.openapi.util.io.FileFilters
- sf:DIRECTORIES:java.io.FileFilter
- sf:EVERYTHING:java.io.FileFilter
- s:filesWithExtension(java.lang.String):java.io.FileFilter
- s:withExtension(java.lang.String):java.io.FileFilter
f:com.intellij.openapi.util.io.FileSystemUtil
- s:getAttributes(java.io.File):com.intellij.openapi.util.io.FileAttributes
- s:getAttributes(java.lang.String):com.intellij.openapi.util.io.FileAttributes
- s:isSymLink(java.io.File):Z
- s:isSymLink(java.lang.String):Z
- s:lastModified(java.io.File):J
- s:resolveSymLink(java.io.File):java.lang.String
- s:resolveSymLink(java.lang.String):java.lang.String
Fc:com.intellij.openapi.util.io.FileUtil
- sf:ASYNC_DELETE_EXTENSION:java.lang.String
- sf:REGEX_PATTERN_FLAGS:I
- <init>():V
- s:adaptiveLoadBytes(java.io.InputStream):B[]
- s:adaptiveLoadText(java.io.Reader):C[]
- s:appendToFile(java.io.File,java.lang.String):V
- s:asyncDelete(java.io.File):java.util.concurrent.Future
- s:asyncDelete(java.util.Collection):java.util.concurrent.Future
- s:canExecute(java.io.File):Z
- s:canWrite(java.lang.String):Z
- s:collectMatchedFiles(java.io.File,java.util.regex.Pattern,java.util.List):V
- s:compareFiles(java.io.File,java.io.File):I
- s:comparePaths(java.lang.String,java.lang.String):I
- s:containsWindowsShortName(java.lang.String):Z
- s:convertAntToRegexp(java.lang.String):java.lang.String
- s:convertAntToRegexp(java.lang.String,Z):java.lang.String
- s:copy(java.io.File,java.io.File):V
- s:copy(java.io.InputStream,I,java.io.OutputStream):V
- s:copy(java.io.InputStream,J,java.io.OutputStream):V
- s:copy(java.io.InputStream,java.io.OutputStream):V
- s:copyContent(java.io.File,java.io.File):V
- s:copyDir(java.io.File,java.io.File):V
- s:copyDir(java.io.File,java.io.File,java.io.FileFilter):V
- s:copyDir(java.io.File,java.io.File,Z):V
- s:copyDirContent(java.io.File,java.io.File):V
- s:copyFileOrDir(java.io.File,java.io.File):V
- s:copyFileOrDir(java.io.File,java.io.File,Z):V
- s:createDirectory(java.io.File):Z
- s:createIfDoesntExist(java.io.File):Z
- s:createIfNotExists(java.io.File):Z
- s:createParentDirs(java.io.File):Z
- s:createSequentFileName(java.io.File,java.lang.String,java.lang.String):java.lang.String
- s:createSequentFileName(java.io.File,java.lang.String,java.lang.String,java.util.function.Predicate):java.lang.String
- s:createTempDirectory(java.io.File,java.lang.String,java.lang.String):java.io.File
- s:createTempDirectory(java.io.File,java.lang.String,java.lang.String,Z):java.io.File
- s:createTempDirectory(java.lang.String,java.lang.String):java.io.File
- s:createTempDirectory(java.lang.String,java.lang.String,Z):java.io.File
- s:createTempFile(java.io.File,java.lang.String,java.lang.String):java.io.File
- s:createTempFile(java.io.File,java.lang.String,java.lang.String,Z):java.io.File
- s:createTempFile(java.io.File,java.lang.String,java.lang.String,Z,Z):java.io.File
- s:createTempFile(java.lang.String,java.lang.String):java.io.File
- s:createTempFile(java.lang.String,java.lang.String,Z):java.io.File
- s:delete(java.io.File):Z
- s:delete(java.nio.file.Path):V
- s:deleteRecursively(java.nio.file.Path):V
- s:deleteWithRenaming(java.io.File):Z
- s:deleteWithRenaming(java.nio.file.Path):Z
- s:deleteWithRenamingIfExists(java.nio.file.Path):Z
- s:ensureCanCreateFile(java.io.File):Z
- s:ensureExists(java.io.File):V
- s:exists(java.lang.String):Z
- s:expandUserHome(java.lang.String):java.lang.String
- s:extensionEquals(java.lang.String,java.lang.String):Z
- s:extractRootPath(java.lang.String):java.lang.String
- s:fileHashCode(java.io.File):I
- s:fileToUri(java.io.File):java.net.URI
- s:fileTraverser(java.io.File):com.intellij.util.containers.JBTreeTraverser
- s:filesEqual(java.io.File,java.io.File):Z
- s:findAncestor(java.io.File,java.io.File):java.io.File
- s:findAncestor(java.nio.file.Path,java.nio.file.Path):java.nio.file.Path
- s:findFileInProvidedPath(java.lang.String,java.lang.String[]):java.lang.String
- s:findFilesByMask(java.util.regex.Pattern,java.io.File):java.util.List
- s:findFilesOrDirsByMask(java.util.regex.Pattern,java.io.File):java.util.List
- s:findFirstThatExist(java.lang.String[]):java.io.File
- s:findSequentFile(java.io.File,java.lang.String,java.lang.String,java.util.function.Predicate):java.io.File
- s:findSequentNonexistentFile(java.io.File,java.lang.String,java.lang.String):java.io.File
- s:generateRandomTemporaryPath():java.io.File
- s:generateRandomTemporaryPath(java.lang.String,java.lang.String):java.io.File
- s:getExtension(java.lang.CharSequence):java.lang.CharSequence
- s:getExtension(java.lang.CharSequence,java.lang.String):java.lang.CharSequence
- s:getExtension(java.lang.String):java.lang.String
- s:getLocationRelativeToUserHome(java.lang.String):java.lang.String
- s:getLocationRelativeToUserHome(java.lang.String,Z):java.lang.String
- s:getNameWithoutExtension(java.io.File):java.lang.String
- s:getNameWithoutExtension(java.lang.String):java.lang.String
- s:getParentFile(java.io.File):java.io.File
- s:getRelativePath(java.io.File,java.io.File):java.lang.String
- s:getRelativePath(java.lang.String,java.lang.String,C):java.lang.String
- s:getRelativePath(java.lang.String,java.lang.String,C,Z):java.lang.String
- s:getTempDirectory():java.lang.String
- s:getUrl(java.io.File):java.lang.String
- s:isAbsolute(java.lang.String):Z
- s:isAbsolutePlatformIndependent(java.lang.String):Z
- s:isAncestor(java.io.File,java.io.File,Z):Z
- s:isAncestor(java.lang.String,java.lang.String,Z):Z
- s:isAncestorThreeState(java.lang.String,java.lang.String,Z):com.intellij.util.ThreeState
- s:isHashBangLine(java.lang.CharSequence,java.lang.String):Z
- s:isJarOrZip(java.io.File):Z
- s:isUnixAbsolutePath(java.lang.String):Z
- s:isWindowsAbsolutePath(java.lang.String):Z
- s:join(java.lang.String[]):java.lang.String
- s:loadBytes(java.io.InputStream):B[]
- s:loadBytes(java.io.InputStream,I):B[]
- s:loadFile(java.io.File):java.lang.String
- s:loadFile(java.io.File,java.lang.String):java.lang.String
- s:loadFile(java.io.File,java.lang.String,Z):java.lang.String
- s:loadFile(java.io.File,java.nio.charset.Charset):java.lang.String
- s:loadFile(java.io.File,Z):java.lang.String
- s:loadFileBytes(java.io.File):B[]
- s:loadFileOrNull(java.io.File):java.lang.String
- s:loadFileOrNull(java.lang.String):java.lang.String
- s:loadFileText(java.io.File):C[]
- s:loadFileText(java.io.File,java.lang.String):C[]
- s:loadFileText(java.io.File,java.nio.charset.Charset):C[]
- s:loadFirstAndClose(java.io.InputStream,I):B[]
- s:loadLines(java.io.BufferedReader):java.util.List
- s:loadLines(java.io.File):java.util.List
- s:loadLines(java.io.File,java.lang.String):java.util.List
- s:loadLines(java.lang.String):java.util.List
- s:loadLines(java.lang.String,java.lang.String):java.util.List
- s:loadText(java.io.Reader,I):C[]
- s:loadTextAndClose(java.io.InputStream):java.lang.String
- s:loadTextAndClose(java.io.Reader):java.lang.String
- s:moveDirWithContent(java.io.File,java.io.File):Z
- s:namesEqual(java.lang.String,java.lang.String):Z
- s:normalize(java.lang.String):java.lang.String
- s:notNullize(java.io.File[]):java.io.File[]
- s:notNullize(java.io.File[],java.io.File[]):java.io.File[]
- s:pathHashCode(java.lang.String):I
- s:pathsEqual(java.lang.String,java.lang.String):Z
- s:processFilesRecursively(java.io.File,com.intellij.util.Processor):Z
- s:processFilesRecursively(java.io.File,com.intellij.util.Processor,com.intellij.util.Processor):Z
- s:rename(java.io.File,java.io.File):V
- s:rename(java.io.File,java.lang.String):Z
- s:resetCanonicalTempPathCache(java.lang.String):V
- s:resolveShortWindowsName(java.lang.String):java.lang.String
- s:sanitizeFileName(java.lang.String):java.lang.String
- s:sanitizeFileName(java.lang.String,Z):java.lang.String
- s:sanitizeFileName(java.lang.String,Z,java.lang.String):java.lang.String
- s:setExecutable(java.io.File):V
- s:splitPath(java.lang.String):java.util.List
- s:splitPath(java.lang.String,C):java.util.List
- s:startsWith(java.lang.String,java.lang.String):Z
- s:startsWith(java.lang.String,java.lang.String,Z):Z
- s:startsWith(java.lang.String,java.lang.String,Z,Z):Z
- s:toCanonicalPath(java.lang.String):java.lang.String
- s:toCanonicalPath(java.lang.String,C):java.lang.String
- s:toCanonicalPath(java.lang.String,C,Z):java.lang.String
- s:toCanonicalPath(java.lang.String,Z):java.lang.String
- s:toCanonicalUriPath(java.lang.String):java.lang.String
- s:toSystemDependentName(java.lang.String):java.lang.String
- s:toSystemDependentName(java.lang.String,C):java.lang.String
- s:toSystemIndependentName(java.lang.String):java.lang.String
- s:unquote(java.lang.String):java.lang.String
- s:visitFiles(java.io.File,com.intellij.util.Processor):Z
- s:writeToFile(java.io.File,java.lang.String):V
- s:writeToFile(java.io.File,java.lang.String,java.nio.charset.Charset):V
- s:writeToFile(java.io.File,java.lang.String,Z):V
- s:writeToFile(java.io.File,B[]):V
- s:writeToFile(java.io.File,B[],I,I):V
- s:writeToFile(java.io.File,B[],Z):V
f:com.intellij.openapi.util.io.JarUtil
- <init>():V
- s:containsClass(java.io.File,java.lang.String):Z
- s:containsClass(java.lang.String,java.lang.String):Z
- s:containsEntry(java.io.File,java.lang.String):Z
- s:getJarAttribute(java.io.File,java.lang.String,java.util.jar.Attributes$Name):java.lang.String
- s:getJarAttribute(java.io.File,java.util.jar.Attributes$Name):java.lang.String
- s:loadProperties(java.io.File,java.lang.String):java.util.Properties
f:com.intellij.openapi.util.io.NioFiles
- sf:BROKEN_SYMLINK:java.nio.file.attribute.BasicFileAttributes
- s:createDirectories(java.nio.file.Path):java.nio.file.Path
- s:createIfNotExists(java.nio.file.Path):java.nio.file.Path
- s:createParentDirectories(java.nio.file.Path):java.nio.file.Path
- s:deleteRecursively(java.nio.file.Path):V
- s:deleteRecursively(java.nio.file.Path,java.util.function.Consumer):V
- s:getFileName(java.nio.file.Path):java.lang.String
- s:isWritable(java.nio.file.Path):Z
- s:list(java.nio.file.Path):java.util.List
- s:readAttributes(java.nio.file.Path):java.nio.file.attribute.BasicFileAttributes
- s:setExecutable(java.nio.file.Path):V
- s:setReadOnly(java.nio.file.Path,Z):V
- s:toPath(java.lang.String):java.nio.file.Path
a:com.intellij.openapi.util.io.NioFiles$StatsCollectingVisitor
- java.nio.file.SimpleFileVisitor
- <init>():V
- pa:countDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes):V
- pa:countFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes):V
- postVisitDirectory(java.nio.file.Path,java.io.IOException):java.nio.file.FileVisitResult
- preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes):java.nio.file.FileVisitResult
- visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes):java.nio.file.FileVisitResult
- visitFileFailed(java.nio.file.Path,java.io.IOException):java.nio.file.FileVisitResult
f:com.intellij.openapi.util.io.NioPathUtil
- sf:getResolvedPath(java.nio.file.Path,java.lang.String):java.nio.file.Path
- sf:toCanonicalPath(java.nio.file.Path):java.lang.String
- sf:toNioPathOrNull(java.lang.String):java.nio.file.Path
f:com.intellij.openapi.util.io.OSAgnosticPathUtil
- sf:COMPARATOR:java.util.Comparator
- s:getParent(java.lang.String):java.lang.String
- s:isAbsolute(java.lang.String):Z
- s:isAbsoluteDosPath(java.lang.String):Z
- s:isDriveLetter(C):Z
- s:isUncPath(java.lang.String):Z
- s:startsWith(java.lang.String,java.lang.String):Z
- s:startsWithWindowsDrive(java.lang.String):Z
f:com.intellij.openapi.util.io.StreamUtil
- sf:BUFFER_SIZE:I
- s:closeStream(java.io.Closeable):V
- s:convertSeparators(java.lang.String):java.lang.String
- s:copy(java.io.InputStream,java.io.OutputStream):I
- s:copyStreamContent(java.io.InputStream,java.io.OutputStream):I
- s:loadFromStream(java.io.InputStream):B[]
- s:readBytes(java.io.InputStream):B[]
- s:readBytes(java.io.InputStream,I):B[]
- s:readText(java.io.InputStream):java.lang.String
- s:readText(java.io.InputStream,java.lang.String):java.lang.String
- s:readText(java.io.InputStream,java.nio.charset.Charset):java.lang.String
- s:readText(java.io.Reader):java.lang.String
- s:readTextAndConvertSeparators(java.io.Reader):C[]
- s:readTextFrom(java.io.Reader):java.lang.String
f:com.intellij.openapi.util.registry.Registry
- sf:Companion:com.intellij.openapi.util.registry.Registry$Companion
- sf:REGISTRY_BUNDLE:java.lang.String
- <init>():V
- sf:doubleValue(java.lang.String):D
- sf:doubleValue(java.lang.String,D):D
- sf:get(java.lang.String):com.intellij.openapi.util.registry.RegistryValue
- f:getBundleValueOrNull(java.lang.String):java.lang.String
- sf:getColor(java.lang.String,java.awt.Color):java.awt.Color
- sf:getInstance():com.intellij.openapi.util.registry.Registry
- f:getValueChangeListener():com.intellij.openapi.util.registry.RegistryValueListener
- sf:intValue(java.lang.String):I
- sf:intValue(java.lang.String,I):I
- sf:intValue(java.lang.String,I,I,I):I
- sf:is(java.lang.String):Z
- sf:is(java.lang.String,Z):Z
- f:isInDefaultState():Z
- f:isLoaded():Z
- f:isRestartNeeded():Z
- f:reset():V
- sf:stringValue(java.lang.String):java.lang.String
f:com.intellij.openapi.util.registry.Registry$Companion
- f:doubleValue(java.lang.String):D
- f:doubleValue(java.lang.String,D):D
- f:get(java.lang.String):com.intellij.openapi.util.registry.RegistryValue
- f:getColor(java.lang.String,java.awt.Color):java.awt.Color
- f:getInstance():com.intellij.openapi.util.registry.Registry
- f:intValue(java.lang.String):I
- f:intValue(java.lang.String,I):I
- f:intValue(java.lang.String,I,I,I):I
- f:is(java.lang.String):Z
- f:is(java.lang.String,Z):Z
- f:stringValue(java.lang.String):java.lang.String
c:com.intellij.openapi.util.registry.RegistryValue
- f:addListener(com.intellij.openapi.util.registry.RegistryValueListener,com.intellij.openapi.Disposable):V
- f:addListener(com.intellij.openapi.util.registry.RegistryValueListener,kotlinx.coroutines.CoroutineScope):V
- asBoolean():Z
- f:asColor(java.awt.Color):java.awt.Color
- f:asDouble():D
- f:asInteger():I
- f:asOptions():java.util.List
- asString():java.lang.String
- getDescription():java.lang.String
- f:getKey():java.lang.String
- f:getPluginId():java.lang.String
- f:getSelectedOption():java.lang.String
- isBoolean():Z
- isChangedFromDefault():Z
- f:isChangedSinceAppStart():Z
- f:isMultiValue():Z
- f:isOptionEnabled(java.lang.String):Z
- isRestartRequired():Z
- f:resetToDefault():V
- f:setSelectedOption(java.lang.String):V
- f:setValue(I):V
- f:setValue(I,com.intellij.openapi.Disposable):V
- setValue(java.lang.String):V
- f:setValue(java.lang.String,com.intellij.openapi.Disposable):V
- f:setValue(Z):V
- f:setValue(Z,com.intellij.openapi.Disposable):V
com.intellij.openapi.util.registry.RegistryValueListener
- afterValueChanged(com.intellij.openapi.util.registry.RegistryValue):V
- beforeValueChanged(com.intellij.openapi.util.registry.RegistryValue):V
com.intellij.openapi.util.text.CharFilter
- sf:NOT_WHITESPACE_FILTER:com.intellij.openapi.util.text.CharFilter
- sf:WHITESPACE_FILTER:com.intellij.openapi.util.text.CharFilter
- a:accept(C):Z
a:com.intellij.openapi.util.text.DelimitedListProcessor
- <init>(java.lang.String):V
- p:isDelimiter(C):Z
- processText(java.lang.String):V
- pa:processToken(I,I,Z):V
- p:skipDelimiters(java.lang.String,I):I
f:com.intellij.openapi.util.text.HtmlBuilder
- <init>():V
- append(com.intellij.openapi.util.text.HtmlBuilder):com.intellij.openapi.util.text.HtmlBuilder
- append(com.intellij.openapi.util.text.HtmlChunk):com.intellij.openapi.util.text.HtmlBuilder
- append(java.lang.String):com.intellij.openapi.util.text.HtmlBuilder
- appendLink(java.lang.String,java.lang.String):com.intellij.openapi.util.text.HtmlBuilder
- appendRaw(java.lang.String):com.intellij.openapi.util.text.HtmlBuilder
- appendWithSeparators(com.intellij.openapi.util.text.HtmlChunk,java.lang.Iterable):com.intellij.openapi.util.text.HtmlBuilder
- br():com.intellij.openapi.util.text.HtmlBuilder
- clear():V
- clearAndAppend(com.intellij.openapi.util.text.HtmlChunk):V
- hr():com.intellij.openapi.util.text.HtmlBuilder
- isEmpty():Z
- nbsp():com.intellij.openapi.util.text.HtmlBuilder
- nbsp(I):com.intellij.openapi.util.text.HtmlBuilder
- toFragment():com.intellij.openapi.util.text.HtmlChunk
- wrapWith(com.intellij.openapi.util.text.HtmlChunk$Element):com.intellij.openapi.util.text.HtmlChunk$Element
- wrapWith(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- wrapWithHtmlBody():com.intellij.openapi.util.text.HtmlChunk$Element
a:com.intellij.openapi.util.text.HtmlChunk
- <init>():V
- a:appendTo(java.lang.StringBuilder):V
- s:body():com.intellij.openapi.util.text.HtmlChunk$Element
- bold():com.intellij.openapi.util.text.HtmlChunk$Element
- s:br():com.intellij.openapi.util.text.HtmlChunk$Element
- code():com.intellij.openapi.util.text.HtmlChunk$Element
- s:div():com.intellij.openapi.util.text.HtmlChunk$Element
- s:div(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- s:empty():com.intellij.openapi.util.text.HtmlChunk
- findIcon(java.lang.String):javax.swing.Icon
- s:font(I):com.intellij.openapi.util.text.HtmlChunk$Element
- s:font(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- s:fragment(com.intellij.openapi.util.text.HtmlChunk[]):com.intellij.openapi.util.text.HtmlChunk
- s:head():com.intellij.openapi.util.text.HtmlChunk$Element
- s:hr():com.intellij.openapi.util.text.HtmlChunk$Element
- s:html():com.intellij.openapi.util.text.HtmlChunk$Element
- s:htmlEntity(java.lang.String):com.intellij.openapi.util.text.HtmlChunk
- s:icon(java.lang.String,javax.swing.Icon):com.intellij.openapi.util.text.HtmlChunk$Element
- isEmpty():Z
- italic():com.intellij.openapi.util.text.HtmlChunk$Element
- s:li():com.intellij.openapi.util.text.HtmlChunk$Element
- s:link(java.lang.String,com.intellij.openapi.util.text.HtmlChunk):com.intellij.openapi.util.text.HtmlChunk$Element
- s:link(java.lang.String,java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- s:nbsp():com.intellij.openapi.util.text.HtmlChunk
- s:nbsp(I):com.intellij.openapi.util.text.HtmlChunk
- s:p():com.intellij.openapi.util.text.HtmlChunk$Element
- s:raw(java.lang.String):com.intellij.openapi.util.text.HtmlChunk
- s:span():com.intellij.openapi.util.text.HtmlChunk$Element
- s:span(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- strikethrough():com.intellij.openapi.util.text.HtmlChunk$Element
- s:styleTag(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- s:tag(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- s:template(java.lang.String,java.lang.String,com.intellij.openapi.util.text.HtmlChunk):com.intellij.openapi.util.text.HtmlChunk
- s:template(java.lang.String,java.util.Map$Entry[]):com.intellij.openapi.util.text.HtmlChunk
- s:text(java.lang.String):com.intellij.openapi.util.text.HtmlChunk
- s:toFragment():java.util.stream.Collector
- s:toFragment(com.intellij.openapi.util.text.HtmlChunk):java.util.stream.Collector
- s:ul():com.intellij.openapi.util.text.HtmlChunk$Element
- wrapWith(com.intellij.openapi.util.text.HtmlChunk$Element):com.intellij.openapi.util.text.HtmlChunk$Element
- wrapWith(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
c:com.intellij.openapi.util.text.HtmlChunk$Element
- com.intellij.openapi.util.text.HtmlChunk
- addRaw(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- addText(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- appendTo(java.lang.StringBuilder):V
- applyStyles(java.util.Map):com.intellij.openapi.util.text.HtmlChunk
- attr(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- attr(java.lang.String,I):com.intellij.openapi.util.text.HtmlChunk$Element
- attr(java.lang.String,java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- child(com.intellij.openapi.util.text.HtmlChunk):com.intellij.openapi.util.text.HtmlChunk$Element
- children(java.util.List):com.intellij.openapi.util.text.HtmlChunk$Element
- children(com.intellij.openapi.util.text.HtmlChunk[]):com.intellij.openapi.util.text.HtmlChunk$Element
- equals(java.lang.Object):Z
- findIcon(java.lang.String):javax.swing.Icon
- hashCode():I
- setClass(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
- style(java.lang.String):com.intellij.openapi.util.text.HtmlChunk$Element
f:com.intellij.openapi.util.text.HtmlChunkUtilKt
f:com.intellij.openapi.util.text.LineColumn
- f:column:I
- f:line:I
- equals(java.lang.Object):Z
- hashCode():I
- s:of(I,I):com.intellij.openapi.util.text.LineColumn
Fc:com.intellij.openapi.util.text.StringUtil
- sf:ELLIPSIS:java.lang.String
- sf:NON_BREAK_SPACE:java.lang.String
- sf:QUOTER:java.util.function.Function
- sf:SINGLE_QUOTER:java.util.function.Function
- sf:THREE_DOTS:java.lang.String
- <init>():V
- s:assertValidSeparators(java.lang.CharSequence):V
- s:canBeCapitalized(java.lang.String):Z
- s:capitalize(java.lang.String):java.lang.String
- s:capitalizeWithJavaBeanConvention(java.lang.String):java.lang.String
- s:capitalizeWords(java.lang.String,java.lang.String,Z,Z):java.lang.String
- s:capitalizeWords(java.lang.String,Z):java.lang.String
- s:charsEqualIgnoreCase(C,C):Z
- s:collapseWhiteSpace(java.lang.CharSequence):java.lang.String
- s:commonPrefix(java.lang.String,java.lang.String):java.lang.String
- s:commonPrefixLength(java.lang.CharSequence,java.lang.CharSequence):I
- s:commonPrefixLength(java.lang.CharSequence,java.lang.CharSequence,Z):I
- s:commonSuffix(java.lang.String,java.lang.String):java.lang.String
- s:commonSuffixLength(java.lang.CharSequence,java.lang.CharSequence):I
- s:compare(C,C,Z):I
- s:compare(java.lang.CharSequence,java.lang.CharSequence,Z):I
- s:compare(java.lang.String,java.lang.String,Z):I
- s:comparePairs(java.lang.String,java.lang.String,java.lang.String,java.lang.String,Z):I
- s:compareVersionNumbers(java.lang.String,java.lang.String):I
- s:contains(java.lang.CharSequence,I,I,C):Z
- s:contains(java.lang.CharSequence,java.lang.CharSequence):Z
- s:containsAlphaCharacters(java.lang.String):Z
- s:containsAnyChar(java.lang.String,java.lang.String):Z
- s:containsAnyChar(java.lang.String,java.lang.String,I,I):Z
- s:containsChar(java.lang.String,C):Z
- s:containsIgnoreCase(java.lang.String,java.lang.String):Z
- s:containsLineBreak(java.lang.CharSequence):Z
- s:containsWhitespaces(java.lang.CharSequence):Z
- s:convertLineSeparators(java.lang.CharSequence,java.lang.String):java.lang.CharSequence
- s:convertLineSeparators(java.lang.String):java.lang.String
- s:convertLineSeparators(java.lang.String,java.lang.String):java.lang.String
- s:convertLineSeparators(java.lang.String,java.lang.String,I[]):java.lang.String
- s:convertLineSeparators(java.lang.String,java.lang.String,I[],Z):java.lang.String
- s:convertLineSeparators(java.lang.String,Z):java.lang.String
- s:countChars(java.lang.CharSequence,C):I
- s:countChars(java.lang.CharSequence,C,I,I,Z):I
- s:countChars(java.lang.CharSequence,C,I,Z):I
- s:countNewLines(java.lang.CharSequence):I
- s:createToStringFunction(java.lang.Class):com.intellij.util.Function
- s:decapitalize(java.lang.String):java.lang.String
- s:defaultIfEmpty(java.lang.String,java.lang.String):java.lang.String
- s:detectSeparators(java.lang.CharSequence):com.intellij.util.LineSeparator
- s:difference(java.lang.String,java.lang.String):I
- s:endsWith(java.lang.CharSequence,I,I,java.lang.CharSequence):Z
- s:endsWith(java.lang.CharSequence,java.lang.CharSequence):Z
- s:endsWithChar(java.lang.CharSequence,C):Z
- s:endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence):Z
- s:endsWithIgnoreCase(java.lang.String,java.lang.String):Z
- s:endsWithLineBreak(java.lang.CharSequence):Z
- s:equal(java.lang.CharSequence,java.lang.CharSequence,Z):Z
- s:equals(java.lang.CharSequence,java.lang.CharSequence):Z
- s:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence):Z
- s:equalsIgnoreWhitespaces(java.lang.CharSequence,java.lang.CharSequence):Z
- s:equalsTrimWhitespaces(java.lang.CharSequence,java.lang.CharSequence):Z
- s:escapeBackSlashes(java.lang.String):java.lang.String
- s:escapeChar(java.lang.String,C):java.lang.String
- s:escapeChar(java.lang.StringBuilder,C):V
- s:escapeCharCharacters(java.lang.String):java.lang.String
- s:escapeChars(java.lang.String,C[]):java.lang.String
- s:escapeLineBreak(java.lang.String):java.lang.String
- s:escapeMnemonics(java.lang.String):java.lang.String
- s:escapePattern(java.lang.String):java.lang.String
- s:escapeProperty(java.lang.String,Z):java.lang.String
- s:escapeQuotes(java.lang.String):java.lang.String
- s:escapeQuotes(java.lang.StringBuilder):V
- s:escapeSlashes(java.lang.String):java.lang.String
- s:escapeStringCharacters(I,java.lang.String,java.lang.String,java.lang.StringBuilder):java.lang.StringBuilder
- s:escapeStringCharacters(I,java.lang.String,java.lang.String,Z,java.lang.StringBuilder):java.lang.StringBuilder
- s:escapeStringCharacters(I,java.lang.String,java.lang.String,Z,Z,java.lang.StringBuilder):java.lang.StringBuilder
- s:escapeStringCharacters(I,java.lang.String,java.lang.StringBuilder):V
- s:escapeStringCharacters(java.lang.String):java.lang.String
- s:escapeToRegexp(java.lang.CharSequence,java.lang.StringBuilder):java.lang.StringBuilder
- s:escapeToRegexp(java.lang.String):java.lang.String
- s:escapeXml(java.lang.String):java.lang.String
- s:escapeXmlEntities(java.lang.String):java.lang.String
- s:escaper(Z,java.lang.String):com.intellij.util.NotNullFunction
- s:filterEmptyStrings(java.lang.String[]):java.lang.String[]
- s:findFirst(java.lang.CharSequence,com.intellij.openapi.util.text.CharFilter):I
- s:findIgnoreCase(java.lang.String,java.lang.String[]):Z
- s:findMatches(java.lang.String,java.util.regex.Pattern):java.util.List
- s:findMatches(java.lang.String,java.util.regex.Pattern,I):java.util.List
- s:first(java.lang.CharSequence,I,Z):java.lang.CharSequence
- s:first(java.lang.String,I,Z):java.lang.String
- s:firstLast(java.lang.String,I):java.lang.String
- s:fixVariableNameDerivedFromPropertyName(java.lang.String):java.lang.String
- s:formatDuration(J):java.lang.String
- s:formatDuration(java.time.Duration):java.lang.String
- s:formatFileSize(J):java.lang.String
- s:formatFileSize(J,java.lang.String):java.lang.String
- s:formatFileSize(J,java.lang.String,I):java.lang.String
- s:formatFileSize(J,java.lang.String,I,Z):java.lang.String
- s:formatLinks(java.lang.String):java.lang.String
- s:getLineBreakCount(java.lang.CharSequence):I
- s:getLineSeparatorAt(java.lang.CharSequence,I):com.intellij.util.LineSeparator
- s:getMessage(java.lang.Throwable):java.lang.String
- s:getOccurrenceCount(java.lang.String,C):I
- s:getOccurrenceCount(java.lang.String,java.lang.String):I
- s:getPackageName(java.lang.String):java.lang.String
- s:getPackageName(java.lang.String,C):java.lang.String
- s:getPropertyName(java.lang.String):java.lang.String
- s:getQualifiedName(java.lang.String,java.lang.String):java.lang.String
- s:getShortName(java.lang.Class):java.lang.String
- s:getShortName(java.lang.String):java.lang.String
- s:getShortName(java.lang.String,C):java.lang.String
- s:getThrowableText(java.lang.Throwable):java.lang.String
- s:getWordIndicesIn(java.lang.String):java.util.List
- s:getWordIndicesIn(java.lang.String,java.util.Set):java.util.List
- s:getWordsIn(java.lang.String):java.util.List
- s:getWordsInStringLongestFirst(java.lang.String):java.util.List
- s:getWordsWithOffset(java.lang.String):java.util.List
- s:hasLowerCaseChar(java.lang.String):Z
- s:hasUpperCaseChar(java.lang.String):Z
- s:htmlEmphasize(java.lang.String):java.lang.String
- s:indexOf(java.lang.CharSequence,C):I
- s:indexOf(java.lang.CharSequence,C,I):I
- s:indexOf(java.lang.CharSequence,C,I,I):I
- s:indexOf(java.lang.CharSequence,C,I,I,Z):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence,I):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence,I,I):I
- s:indexOf(C[],C,I,I,Z):I
- s:indexOfAny(java.lang.CharSequence,java.lang.String):I
- s:indexOfAny(java.lang.CharSequence,java.lang.String,I,I):I
- s:indexOfAny(java.lang.String,java.lang.String):I
- s:indexOfAny(java.lang.String,java.lang.String,I,I):I
- s:indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,I):I
- s:indexOfIgnoreCase(java.lang.String,C,I):I
- s:indexOfIgnoreCase(java.lang.String,java.lang.String,I):I
- s:indexOfSubstringEnd(java.lang.String,java.lang.String):I
- s:internEmptyString(java.lang.String):java.lang.String
- s:isBetween(java.lang.String,java.lang.String,java.lang.String):Z
- s:isCapitalized(java.lang.String):Z
- s:isChar(java.lang.CharSequence,I,C):Z
- s:isDecimalDigit(C):Z
- s:isEmpty(java.lang.CharSequence):Z
- s:isEmpty(java.lang.String):Z
- s:isEmptyOrSpaces(java.lang.CharSequence):Z
- s:isEmptyOrSpaces(java.lang.String):Z
- s:isEscapedBackslash(java.lang.CharSequence,I,I):Z
- s:isHexDigit(C):Z
- s:isJavaIdentifier(java.lang.CharSequence,I,I):Z
- s:isJavaIdentifier(java.lang.String):Z
- s:isJavaIdentifierPart(C):Z
- s:isJavaIdentifierStart(C):Z
- s:isLatinAlphanumeric(java.lang.CharSequence):Z
- s:isLineBreak(C):Z
- s:isLowerCase(java.lang.CharSequence):Z
- s:isNotEmpty(java.lang.String):Z
- s:isNotNegativeNumber(java.lang.CharSequence):Z
- s:isNumeric(java.lang.CharSequence):Z
- s:isOctalDigit(C):Z
- s:isPreposition(java.lang.String,I,I,java.lang.String[]):Z
- s:isPrintableUnicode(C):Z
- s:isQuotedString(java.lang.String):Z
- s:isShortNameOf(java.lang.String,java.lang.String):Z
- s:isUpperCase(java.lang.CharSequence):Z
- s:isVowel(C):Z
- s:isWhiteSpace(C):Z
- s:join(java.lang.Iterable,com.intellij.util.Function,java.lang.String):java.lang.String
- s:join(java.lang.Iterable,com.intellij.util.Function,java.lang.String,java.lang.StringBuilder):V
- s:join(java.lang.Iterable,java.lang.String):java.lang.String
- s:join(java.util.Collection,com.intellij.util.Function,java.lang.String):java.lang.String
- s:join(java.util.Collection,java.lang.String):java.lang.String
- s:join(java.util.Collection,java.lang.String,java.lang.StringBuilder):V
- s:join(I[],java.lang.String):java.lang.String
- s:join(java.lang.Object[],com.intellij.util.Function,java.lang.String):java.lang.String
- s:join(java.lang.String[]):java.lang.String
- s:join(java.lang.String[],I,I,java.lang.String):java.lang.String
- s:join(java.lang.String[],java.lang.String):java.lang.String
- s:joinOrNull(java.lang.String[]):java.lang.String
- s:joining():java.util.stream.Collector
- s:last(java.lang.CharSequence,I,Z):java.lang.CharSequence
- s:lastIndexOf(java.lang.CharSequence,C,I,I):I
- s:lastIndexOfAny(java.lang.CharSequence,java.lang.String):I
- s:lastIndexOfIgnoreCase(java.lang.String,C,I):I
- s:length(java.lang.CharSequence):I
- s:lineColToOffset(java.lang.CharSequence,I,I):I
- s:naturalCompare(java.lang.String,java.lang.String):I
- s:newBombedCharSequence(java.lang.CharSequence,J):java.lang.CharSequence
- s:notNullize(java.lang.String):java.lang.String
- s:notNullize(java.lang.String,java.lang.String):java.lang.String
- s:nullize(java.lang.String):java.lang.String
- s:nullize(java.lang.String,java.lang.String):java.lang.String
- s:nullize(java.lang.String,Z):java.lang.String
- s:offsetToLineColumn(java.lang.CharSequence,I):com.intellij.openapi.util.text.LineColumn
- s:offsetToLineNumber(java.lang.CharSequence,I):I
- s:parseDouble(java.lang.String,D):D
- s:parseEnum(java.lang.String,java.lang.Enum,java.lang.Class):java.lang.Enum
- s:parseHexString(java.lang.String):B[]
- s:parseInt(java.lang.String,I):I
- s:parseLong(java.lang.String,J):J
- s:pluralize(java.lang.String):java.lang.String
- s:pluralize(java.lang.String,I):java.lang.String
- s:quote(java.lang.StringBuilder):V
- s:quote(java.lang.StringBuilder,C):V
- s:rankForFileSize(J):I
- s:removeEllipsisSuffix(java.lang.String):java.lang.String
- s:removeHtmlTags(java.lang.String):java.lang.String
- s:removeHtmlTags(java.lang.String,Z):java.lang.String
- s:repeat(java.lang.String,I):java.lang.String
- s:repeatSymbol(C,I):java.lang.String
- s:repeatSymbol(java.lang.Appendable,C,I):V
- s:replace(java.lang.String,java.lang.String,java.lang.String):java.lang.String
- s:replace(java.lang.String,java.lang.String,java.lang.String,Z):java.lang.String
- s:replace(java.lang.String,java.util.List,java.util.List):java.lang.String
- s:replaceChar(java.lang.String,C,C):java.lang.String
- s:replaceIgnoreCase(java.lang.String,java.lang.String,java.lang.String):java.lang.String
- s:replaceSubSequence(java.lang.CharSequence,I,I,java.lang.CharSequence):com.intellij.util.text.MergingCharSequence
- s:replaceSubstring(java.lang.String,com.intellij.openapi.util.TextRange,java.lang.String):java.lang.String
- s:replaceUnicodeEscapeSequences(java.lang.String):java.lang.String
- s:sanitizeJavaIdentifier(java.lang.String):java.lang.String
- s:shortenPathWithEllipsis(java.lang.String,I):java.lang.String
- s:shortenPathWithEllipsis(java.lang.String,I,Z):java.lang.String
- s:shortenTextWithEllipsis(java.lang.String,I,I):java.lang.String
- s:shortenTextWithEllipsis(java.lang.String,I,I,java.lang.String):java.lang.String
- s:shortenTextWithEllipsis(java.lang.String,I,I,Z):java.lang.String
- s:skipWhitespaceBackward(java.lang.CharSequence,I):I
- s:skipWhitespaceForward(java.lang.CharSequence,I):I
- s:skipWhitespaceOrNewLineBackward(java.lang.CharSequence,I):I
- s:skipWhitespaceOrNewLineForward(java.lang.CharSequence,I):I
- s:split(java.lang.CharSequence,com.intellij.openapi.util.text.CharFilter,Z,Z):java.util.List
- s:split(java.lang.CharSequence,java.lang.CharSequence):java.util.List
- s:split(java.lang.CharSequence,java.lang.CharSequence,Z,Z):java.util.List
- s:split(java.lang.String,com.intellij.openapi.util.text.CharFilter,Z,Z):java.util.List
- s:split(java.lang.String,java.lang.String):java.util.List
- s:split(java.lang.String,java.lang.String,Z):java.util.List
- s:split(java.lang.String,java.lang.String,Z,Z):java.util.List
- s:splitByLines(java.lang.String):java.lang.String[]
- s:splitByLines(java.lang.String,Z):java.lang.String[]
- s:splitByLinesDontTrim(java.lang.String):java.lang.String[]
- s:splitByLinesKeepSeparators(java.lang.String):java.lang.String[]
- s:splitHonorQuotes(java.lang.String,C):java.util.List
- s:startsWith(java.lang.CharSequence,I,java.lang.CharSequence):Z
- s:startsWith(java.lang.CharSequence,java.lang.CharSequence):Z
- s:startsWithChar(java.lang.CharSequence,C):Z
- s:startsWithConcatenation(java.lang.String,java.lang.String[]):Z
- s:startsWithIgnoreCase(java.lang.String,I,java.lang.String):Z
- s:startsWithIgnoreCase(java.lang.String,java.lang.String):Z
- s:startsWithWhitespace(java.lang.String):Z
- s:stringHashCode(java.lang.CharSequence):I
- s:stringHashCode(java.lang.CharSequence,I,I):I
- s:stringHashCode(java.lang.CharSequence,I,I,I):I
- s:stringHashCode(C[],I,I):I
- s:stringHashCodeIgnoreWhitespaces(java.lang.CharSequence):I
- s:stringHashCodeInsensitive(java.lang.CharSequence):I
- s:stringHashCodeInsensitive(java.lang.CharSequence,I,I):I
- s:stringHashCodeInsensitive(java.lang.CharSequence,I,I,I):I
- s:stringHashCodeInsensitive(C[],I,I):I
- s:strip(java.lang.String,com.intellij.openapi.util.text.CharFilter):java.lang.String
- s:stripHtml(java.lang.String,java.lang.String):java.lang.String
- s:stripHtml(java.lang.String,Z):java.lang.String
- s:stripQuotesAroundValue(java.lang.String):java.lang.String
- s:substringAfter(java.lang.String,java.lang.String):java.lang.String
- s:substringAfterLast(java.lang.String,java.lang.String):java.lang.String
- s:substringBefore(java.lang.String,java.lang.String):java.lang.String
- s:substringBeforeLast(java.lang.String,java.lang.String):java.lang.String
- s:substringBeforeLast(java.lang.String,java.lang.String,Z):java.lang.String
- s:surround(java.lang.String[],java.lang.String,java.lang.String):java.lang.String[]
- s:tail(java.lang.String,I):java.lang.String
- s:toHexString(B[]):java.lang.String
- s:toLowerCase(C):C
- s:toLowerCase(java.lang.String):java.lang.String
- s:toTitleCase(java.lang.String):java.lang.String
- s:toUpperCase(C):C
- s:toUpperCase(java.lang.String):java.lang.String
- s:tokenize(java.lang.String,java.lang.String):java.lang.Iterable
- s:tokenize(java.util.StringTokenizer):java.lang.Iterable
- s:trim(java.lang.CharSequence):java.lang.CharSequence
- s:trim(java.lang.String):java.lang.String
- s:trim(java.lang.String,com.intellij.openapi.util.text.CharFilter):java.lang.String
- s:trimEnd(java.lang.String,C):java.lang.String
- s:trimEnd(java.lang.String,java.lang.String):java.lang.String
- s:trimEnd(java.lang.String,java.lang.String,Z):java.lang.String
- s:trimEnd(java.lang.StringBuilder,java.lang.CharSequence):Z
- s:trimExtensions(java.lang.String):java.lang.String
- s:trimLeading(java.lang.CharSequence):java.lang.CharSequence
- s:trimLeading(java.lang.String):java.lang.String
- s:trimLeading(java.lang.String,C):java.lang.String
- s:trimLeading(java.lang.StringBuilder,C):java.lang.StringBuilder
- s:trimLog(java.lang.String,I):java.lang.String
- s:trimMiddle(java.lang.String,I):java.lang.String
- s:trimStart(java.lang.String,java.lang.String):java.lang.String
- s:trimTrailing(java.lang.CharSequence):java.lang.CharSequence
- s:trimTrailing(java.lang.String):java.lang.String
- s:trimTrailing(java.lang.String,C):java.lang.String
- s:trimTrailing(java.lang.StringBuilder,C):java.lang.StringBuilder
- s:unescapeAnsiStringCharacters(java.lang.String):java.lang.String
- s:unescapeBackSlashes(java.lang.String):java.lang.String
- s:unescapeChar(java.lang.String,C):java.lang.String
- s:unescapeStringCharacters(java.lang.String):java.lang.String
- s:unescapeXml(java.lang.String):java.lang.String
- s:unescapeXmlEntities(java.lang.String):java.lang.String
- s:unpluralize(java.lang.String):java.lang.String
- s:unquoteString(java.lang.String):java.lang.String
- s:unquoteString(java.lang.String,C):java.lang.String
- s:wordsToBeginFromLowerCase(java.lang.String):java.lang.String
- s:wordsToBeginFromUpperCase(java.lang.String):java.lang.String
- s:wrapWithDoubleQuote(java.lang.String):java.lang.String
- s:zip(java.lang.String[],java.lang.String[],java.lang.String):java.lang.String[]
a:com.intellij.openapi.util.text.StringUtil$BombedCharSequence
- java.lang.CharSequence
- p:<init>(java.lang.CharSequence):V
- charAt(I):C
- p:check():V
- pa:checkCanceled():V
- f:defuse():V
- length():I
- subSequence(I,I):java.lang.CharSequence
f:com.intellij.serialization.ClassUtil
- s:getRawType(java.lang.reflect.Type):java.lang.Class
- s:isMutableCollection(java.lang.Object):Z
- s:isMutableMap(java.util.Map):Z
- s:isPrimitive(java.lang.Class):Z
- s:resolveVariable(java.lang.reflect.TypeVariable,java.lang.Class,Z):java.lang.reflect.Type
- s:resolveVariableInHierarchy(java.lang.reflect.TypeVariable,java.lang.Class):java.lang.reflect.Type
- s:stringToEnum(java.lang.String,java.lang.Class,Z):java.lang.Object
- s:typeToClass(java.lang.reflect.Type):java.lang.Class
c:com.intellij.serialization.SerializationException
- java.lang.RuntimeException
- <init>():V
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
- <init>(java.lang.String,java.util.Map):V
- <init>(java.lang.Throwable):V
f:com.intellij.ui.ColorHexUtil
- <init>():V
- s:fromHex(java.lang.String):java.awt.Color
- s:fromHex(java.lang.String,java.awt.Color):java.awt.Color
- s:fromHexOrNull(java.lang.String):java.awt.Color
com.intellij.ui.IconManager
- sf:Companion:com.intellij.ui.IconManager$Companion
- colorize(java.awt.Graphics2D,javax.swing.Icon,java.awt.Color):javax.swing.Icon
- a:createDeferredIcon(javax.swing.Icon,java.lang.Object,kotlin.jvm.functions.Function1):javax.swing.Icon
- createEmptyIcon(javax.swing.Icon):javax.swing.Icon
- a:createLayered(javax.swing.Icon[]):javax.swing.Icon
- a:createLayeredIcon(com.intellij.openapi.util.Iconable,javax.swing.Icon,I):com.intellij.ui.icons.RowIcon
- createOffsetIcon(javax.swing.Icon):javax.swing.Icon
- createRowIcon(I):com.intellij.ui.icons.RowIcon
- a:createRowIcon(I,com.intellij.ui.icons.RowIcon$Alignment):com.intellij.ui.icons.RowIcon
- a:createRowIcon(javax.swing.Icon[]):com.intellij.ui.icons.RowIcon
- getClassLoader(java.lang.String,java.lang.String):java.lang.ClassLoader
- a:getIcon(java.lang.String,java.lang.Class):javax.swing.Icon
- a:getIcon(java.lang.String,java.lang.ClassLoader):javax.swing.Icon
- s:getInstance():com.intellij.ui.IconManager
- getPluginAndModuleId(java.lang.ClassLoader):kotlin.Pair
- a:registerIconLayer(I,javax.swing.Icon):V
- a:tooltipOnlyIfComposite(javax.swing.Icon):javax.swing.Icon
- withIconBadge(javax.swing.Icon,java.awt.Paint):javax.swing.Icon
f:com.intellij.ui.IconManager$Companion
- f:activate(com.intellij.ui.IconManager):V
- f:deactivate():V
- f:getInstance():com.intellij.ui.IconManager
f:com.intellij.ui.NewUiValue
- sf:KEY:java.lang.String
- <init>():V
- s:initialize(java.util.function.Supplier):V
- s:isEnabled():Z
- s:overrideNewUiForOneRemDevSession(Z):V
c:com.intellij.ui.classFilter.ClassFilter
- com.intellij.openapi.util.JDOMExternalizable
- java.lang.Cloneable
- sf:EMPTY_ARRAY:com.intellij.ui.classFilter.ClassFilter[]
- ENABLED:Z
- INCLUDE:Z
- PATTERN:java.lang.String
- <init>():V
- <init>(java.lang.String):V
- clone():com.intellij.ui.classFilter.ClassFilter
- s:deepCopyOf(com.intellij.ui.classFilter.ClassFilter[]):com.intellij.ui.classFilter.ClassFilter[]
- equals(java.lang.Object):Z
- getPattern():java.lang.String
- hashCode():I
- isEnabled():Z
- isInclude():Z
- matches(java.lang.String):Z
- readExternal(org.jdom.Element):V
- setEnabled(Z):V
- setInclude(Z):V
- setPattern(java.lang.String):V
- writeExternal(org.jdom.Element):V
com.intellij.ui.icons.CompositeIcon
- com.intellij.ui.icons.ReplaceableIcon
- javax.swing.Icon
- a:getIcon(I):javax.swing.Icon
- a:getIconCount():I
com.intellij.ui.icons.DarkIconProvider
- a:getDarkIcon(Z):javax.swing.Icon
com.intellij.ui.icons.IconPathProvider
- a:getExpUIPath():java.lang.String
- a:getOriginalPath():java.lang.String
com.intellij.ui.icons.IconReplacer
- replaceIcon(javax.swing.Icon):javax.swing.Icon
com.intellij.ui.icons.ReplaceableIcon
- javax.swing.Icon
- replaceBy(com.intellij.ui.icons.IconReplacer):javax.swing.Icon
com.intellij.ui.icons.RowIcon
- com.intellij.ui.icons.CompositeIcon
- com.intellij.ui.icons.DarkIconProvider
- a:getAllIcons():java.util.List
- a:setIcon(javax.swing.Icon,I):V
e:com.intellij.ui.icons.RowIcon$Alignment
- java.lang.Enum
- sf:BOTTOM:com.intellij.ui.icons.RowIcon$Alignment
- sf:CENTER:com.intellij.ui.icons.RowIcon$Alignment
- sf:TOP:com.intellij.ui.icons.RowIcon$Alignment
- s:valueOf(java.lang.String):com.intellij.ui.icons.RowIcon$Alignment
- s:values():com.intellij.ui.icons.RowIcon$Alignment[]
a:com.intellij.util.AbstractPathMapper
- com.intellij.util.PathMapper
- <init>():V
- f:canReplaceLocal(java.lang.String):Z
- f:canReplaceRemote(java.lang.String):Z
- s:convertToLocal(java.lang.String,java.lang.Iterable):java.lang.String
- s:convertToRemote(java.lang.String,java.util.Collection):java.lang.String
- f:convertToRemote(java.util.Collection):java.util.List
- pa:getAvailablePathMappings():java.util.Collection
f:com.intellij.util.AdapterProcessor
- com.intellij.util.Processor
- <init>(com.intellij.util.Processor,com.intellij.util.Function):V
- process(java.lang.Object):Z
com.intellij.util.AsyncProducer
- a:produce(com.intellij.util.Consumer):V
c:com.intellij.util.AuthData
- <init>(java.lang.String,java.lang.String):V
- getLogin():java.lang.String
- getPassword():java.lang.String
f:com.intellij.util.BeforeAfter
- <init>(java.lang.Object,java.lang.Object):V
- getAfter():java.lang.Object
- getBefore():java.lang.Object
f:com.intellij.util.BitUtil
- <init>():V
- s:assertOneBitMask(I):V
- s:clear(B,B):B
- s:clear(I,I):I
- s:clear(J,J):J
- s:isSet(B,B):Z
- s:isSet(I,I):Z
- s:isSet(J,J):Z
- s:set(B,B,Z):B
- s:set(I,I,Z):I
- s:set(J,J,Z):J
com.intellij.util.BooleanFunction
- java.util.function.Predicate
- a:fun(java.lang.Object):Z
- test(java.lang.Object):Z
f:com.intellij.util.BooleanValueHolder
- <init>(Z):V
- getValue():Z
- setValue(Z):V
com.intellij.util.CatchingConsumer
- com.intellij.util.Consumer
- a:consume(java.lang.Throwable):V
f:com.intellij.util.Chunk
- <init>(java.lang.Object):V
- <init>(java.util.Set):V
- containsNode(java.lang.Object):Z
- equals(java.lang.Object):Z
- getNodes():java.util.Set
- hashCode():I
f:com.intellij.util.CodeWriter
- java.io.PrintWriter
- <init>(java.io.PrintWriter):V
- print(java.lang.String):V
- println():V
- println(java.lang.String):V
c:com.intellij.util.CollectConsumer
- com.intellij.util.Consumer
- java.util.function.Consumer
- <init>():V
- <init>(java.util.Collection):V
- accept(java.lang.Object):V
- consume(java.lang.Object):V
- getResult():java.util.Collection
f:com.intellij.util.CommonProcessors
- <init>():V
- s:alwaysFalse():com.intellij.util.Processor
- s:alwaysTrue():com.intellij.util.Processor
- s:notNullProcessor(com.intellij.util.Processor):com.intellij.util.Processor
- s:processAll(com.intellij.util.Consumer):com.intellij.util.Processor
c:com.intellij.util.CommonProcessors$CollectProcessor
- com.intellij.util.Processor
- <init>():V
- <init>(java.util.Collection):V
- p:accept(java.lang.Object):Z
- getResults():java.util.Collection
- process(java.lang.Object):Z
- toArray(java.lang.Object[]):java.lang.Object[]
c:com.intellij.util.CommonProcessors$CollectUniquesProcessor
- com.intellij.util.Processor
- <init>():V
- getResults():java.util.Collection
- process(java.lang.Object):Z
- toArray(java.lang.Object[]):java.lang.Object[]
c:com.intellij.util.CommonProcessors$FindFirstAndOnlyProcessor
- com.intellij.util.CommonProcessors$FindFirstProcessor
- <init>():V
- process(java.lang.Object):Z
c:com.intellij.util.CommonProcessors$FindFirstProcessor
- com.intellij.util.CommonProcessors$FindProcessor
- <init>():V
- p:accept(java.lang.Object):Z
a:com.intellij.util.CommonProcessors$FindProcessor
- com.intellij.util.Processor
- <init>():V
- pa:accept(java.lang.Object):Z
- getFoundValue():java.lang.Object
- isFound():Z
- process(java.lang.Object):Z
- reset():java.lang.Object
c:com.intellij.util.CommonProcessors$UniqueProcessor
- com.intellij.util.Processor
- <init>(com.intellij.util.Processor):V
- <init>(com.intellij.util.Processor,com.intellij.util.containers.HashingStrategy):V
- process(java.lang.Object):Z
f:com.intellij.util.CompressionUtil
- sf:DUMP_COMPRESSION_STATS:Z
- <init>():V
- s:compressStringRawBytes(java.lang.CharSequence):java.lang.Object
- s:readCompressed(java.io.DataInput):B[]
- s:readCompressedWithoutOriginalBufferLength(java.io.DataInput,I):B[]
- s:uncompressStringRawBytes(java.lang.Object):java.lang.CharSequence
- s:writeCompressed(java.io.DataOutput,B[],I,I):I
- s:writeCompressedWithoutOriginalBufferLength(java.io.DataOutput,B[],I):I
f:com.intellij.util.ConcurrencyUtil
- sf:DEFAULT_TIMEOUT_MS:J
- <init>():V
- s:awaitQuiescence(java.util.concurrent.ThreadPoolExecutor,J,java.util.concurrent.TimeUnit):V
- s:cacheOrGet(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object):java.lang.Object
- s:cacheOrGet(java.util.concurrent.atomic.AtomicReference,java.lang.Object):java.lang.Object
- s:computeIfAbsent(com.intellij.openapi.util.UserDataHolder,com.intellij.openapi.util.Key,java.util.function.Supplier):java.lang.Object
- s:getAll(J,java.util.concurrent.TimeUnit,java.util.Collection):V
- s:getAll(java.util.Collection):V
- s:invokeAll(java.util.Collection,java.util.concurrent.ExecutorService):java.util.List
- s:joinAll(java.util.Collection):V
- s:joinAll(java.lang.Thread[]):V
- s:manifestExceptionsIn(java.util.concurrent.Future):V
- s:newNamedThreadFactory(java.lang.String):java.util.concurrent.ThreadFactory
- s:newNamedThreadFactory(java.lang.String,Z,I):java.util.concurrent.ThreadFactory
- s:newSameThreadExecutorService():java.util.concurrent.ExecutorService
- s:newSingleScheduledThreadExecutor(java.lang.String):java.util.concurrent.ScheduledThreadPoolExecutor
- s:newSingleScheduledThreadExecutor(java.lang.String,I):java.util.concurrent.ScheduledThreadPoolExecutor
- s:newSingleThreadExecutor(java.lang.String):java.util.concurrent.ThreadPoolExecutor
- s:newSingleThreadExecutor(java.lang.String,I):java.util.concurrent.ThreadPoolExecutor
- s:once(java.lang.Runnable):java.lang.Runnable
- s:runUnderThreadName(java.lang.String,java.lang.Runnable):V
- s:underThreadNameRunnable(java.lang.String,java.lang.Runnable):java.lang.Runnable
- s:withLock(java.util.concurrent.locks.Lock,com.intellij.openapi.util.ThrowableComputable):java.lang.Object
- s:withLock(java.util.concurrent.locks.Lock,com.intellij.util.ThrowableRunnable):V
c:com.intellij.util.ConstantFunction
- com.intellij.util.NotNullFunction
- <init>(java.lang.Object):V
- fun(java.lang.Object):java.lang.Object
com.intellij.util.Consumer
- java.util.function.Consumer
- accept(java.lang.Object):V
- a:consume(java.lang.Object):V
f:com.intellij.util.CoroutineScopeKt
- sf:asDisposable(kotlinx.coroutines.CoroutineScope):com.intellij.openapi.Disposable
- sf:attachAsChildTo(com.intellij.openapi.Disposable,kotlinx.coroutines.CoroutineScope):V
- sf:disposeOnCompletion(com.intellij.openapi.Disposable,kotlinx.coroutines.CoroutineScope):V
f:com.intellij.util.DefaultBundleService
- <init>():V
- compute(java.util.function.Supplier):java.lang.Object
- s:getInstance():com.intellij.util.DefaultBundleService
- s:isDefaultBundle():Z
f:com.intellij.util.EmptyConsumer
- <init>():V
- s:getInstance():com.intellij.util.Consumer
f:com.intellij.util.EnvironmentUtil
- sf:BASH_EXECUTABLE_NAME:java.lang.String
- sf:DISABLE_OMZ_AUTO_UPDATE:java.lang.String
- sf:ENV_ZERO_ARGUMENT:java.lang.String
- sf:MacOS_LOADER_BINARY:java.lang.String
- sf:SHELL_COMMAND_ARGUMENT:java.lang.String
- sf:SHELL_ENV_COMMAND:java.lang.String
- sf:SHELL_LOGIN_ARGUMENT:java.lang.String
- sf:SHELL_SOURCE_COMMAND:java.lang.String
- sf:SHELL_VARIABLE_NAME:java.lang.String
- s:containsEnvKeySubstitution(java.lang.String,java.lang.String):Z
- s:getEnvironmentMap():java.util.Map
- s:getValue(java.lang.String):java.lang.String
- s:inlineParentOccurrences(java.util.Map):V
- s:inlineParentOccurrences(java.util.Map,java.util.Map):V
- s:isValidName(java.lang.String):Z
- s:isValidValue(java.lang.String):Z
- s:parseEnv(java.lang.String[]):java.util.Map
- s:setLocaleEnv(java.util.Map,java.nio.charset.Charset):java.lang.String
c:com.intellij.util.EnvironmentUtil$ShellEnvReader
- <init>():V
- <init>(J):V
- p:getShell():java.lang.String
- p:getShellProcessCommand():java.util.List
- f:readShellEnv(java.nio.file.Path,java.util.Map):java.util.Map
- pf:runProcessAndReadOutputAndEnvs(java.util.List,java.nio.file.Path,java.util.Map,java.nio.file.Path):java.util.Map$Entry
- pf:runProcessAndReadOutputAndEnvs(java.util.List,java.nio.file.Path,java.util.function.Consumer,java.nio.file.Path):java.util.Map$Entry
f:com.intellij.util.EventDispatcher
- addListener(java.util.EventListener):V
- addListener(java.util.EventListener,com.intellij.openapi.Disposable):V
- s:create(java.lang.Class):com.intellij.util.EventDispatcher
- s:create(java.lang.Class,java.util.Map):com.intellij.util.EventDispatcher
- s:createMulticaster(java.lang.Class,java.util.function.Supplier):java.lang.Object
- getListeners():java.util.List
- getMulticaster():java.util.EventListener
- s:handleException(java.lang.Throwable,java.util.List):java.util.List
- s:handleObjectMethod(java.lang.Object,java.lang.Object[],java.lang.String):java.lang.Object
- hasListeners():Z
- neuterMultiCasterWhilePerformanceTestIsRunningUntil(com.intellij.openapi.Disposable):V
- removeListener(java.util.EventListener):V
f:com.intellij.util.ExceptionUtil
- s:causedBy(java.lang.Throwable,java.lang.Class):Z
- s:currentStackTrace():java.lang.String
- s:findCause(java.lang.Throwable,java.lang.Class):java.lang.Object
- s:findCauseAndSuppressed(java.lang.Throwable,java.lang.Class):java.util.List
- s:getMessage(java.lang.Throwable):java.lang.String
- s:getNonEmptyMessage(java.lang.Throwable,java.lang.String):java.lang.String
- s:getRootCause(java.lang.Throwable):java.lang.Throwable
- s:getThrowableText(java.lang.Throwable):java.lang.String
- s:getThrowableText(java.lang.Throwable,java.lang.String):java.lang.String
- s:getUserStackTrace(java.lang.Throwable,com.intellij.openapi.diagnostic.Logger):java.lang.String
- s:makeStackTraceRelative(java.lang.Throwable,java.lang.Throwable):java.lang.Throwable
- s:rethrow(java.lang.Throwable):V
- s:rethrowAll(java.lang.Throwable):V
- s:rethrowAllAsUnchecked(java.lang.Throwable):V
- s:rethrowUnchecked(java.lang.Throwable):V
- s:runAllAndRethrowAllExceptions(java.lang.Class,java.util.function.Supplier,com.intellij.util.ThrowableRunnable[]):V
- s:runAndCatch(com.intellij.util.ThrowableRunnable):java.lang.Exception
- s:unwrapException(java.lang.Throwable,java.lang.Class):java.lang.Throwable
f:com.intellij.util.FilteringProcessor
- com.intellij.util.Processor
- <init>(com.intellij.openapi.util.Condition,com.intellij.util.Processor):V
- process(java.lang.Object):Z
f:com.intellij.util.FunctionUtil
- s:composeRunnables(java.lang.Runnable,java.lang.Runnable):java.lang.Runnable
- s:composition(com.intellij.util.NotNullFunction,com.intellij.util.NotNullFunction):com.intellij.util.NotNullFunction
- s:constant(java.lang.Object):com.intellij.util.Function
- s:id():com.intellij.util.Function
- s:nullConstant():com.intellij.util.NullableFunction
- s:string():com.intellij.util.Function
f:com.intellij.util.Functions
- <init>():V
- s:TO_STRING():com.intellij.util.Function
- s:compose(com.intellij.util.Function,com.intellij.util.Function):com.intellij.util.Function
- s:constant(java.lang.Object):com.intellij.util.Function
- s:fromMap(java.util.Map):com.intellij.util.Function
- s:id():com.intellij.util.Function$Mono
- s:identity():com.intellij.util.Function
- s:pairFirst():com.intellij.util.Function
- s:pairSecond():com.intellij.util.Function
- s:wrapArray():com.intellij.util.Function
com.intellij.util.Generator
- a:generate(com.intellij.util.Processor):V
f:com.intellij.util.JBIterableClassTraverser
- <init>():V
- s:classTraverser(java.lang.Class):com.intellij.util.containers.JBTreeTraverser
com.intellij.util.JavaContinuation
- a:cancel():V
- a:getContext():kotlin.coroutines.CoroutineContext
- a:resume(java.lang.Object):V
- a:resumeWithException(java.lang.Throwable):V
f:com.intellij.util.JavaModuleOptions
- s:readOptions(java.io.InputStream,com.intellij.util.system.OS):java.util.List
- s:readOptions(java.nio.file.Path,com.intellij.util.system.OS):java.util.List
f:com.intellij.util.KotlinUtils
- sf:alsoIfNull(java.lang.Object,kotlin.jvm.functions.Function0):java.lang.Object
- sf:applyIf(java.lang.Object,Z,kotlin.jvm.functions.Function1):java.lang.Object
- sf:getValue(java.util.concurrent.atomic.AtomicReference,java.lang.Object,kotlin.reflect.KProperty):java.lang.Object
- sf:runIf(Z,kotlin.jvm.functions.Function0):java.lang.Object
- sf:setValue(java.util.concurrent.atomic.AtomicReference,java.lang.Object,kotlin.reflect.KProperty,java.lang.Object):V
- sf:takeWhileInclusive(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1):kotlin.sequences.Sequence
- sf:use(kotlin.Pair,kotlin.jvm.functions.Function2):java.lang.Object
- sf:use(kotlin.Triple,kotlin.jvm.functions.Function3):java.lang.Object
f:com.intellij.util.LateinitValKt
- sf:lateinitVal():kotlin.properties.ReadWriteProperty
f:com.intellij.util.LazyInitializer
- <init>():V
- s:create(java.util.function.Supplier):com.intellij.util.LazyInitializer$LazyValue
f:com.intellij.util.LazyInitializer$LazyValue
- <init>(java.util.function.Supplier):V
- get():java.lang.Object
e:com.intellij.util.LineSeparator
- java.lang.Enum
- sf:CR:com.intellij.util.LineSeparator
- sf:CRLF:com.intellij.util.LineSeparator
- sf:LF:com.intellij.util.LineSeparator
- s:fromString(java.lang.String):com.intellij.util.LineSeparator
- getSeparatorBytes():B[]
- getSeparatorString():java.lang.String
- s:getSystemLineSeparator():com.intellij.util.LineSeparator
- s:valueOf(java.lang.String):com.intellij.util.LineSeparator
- s:values():com.intellij.util.LineSeparator[]
c:com.intellij.util.ListWithSelection
- java.util.ArrayList
- <init>():V
- <init>(java.util.Collection):V
- <init>(java.util.Collection,java.lang.Object):V
- getSelectedIndex():java.lang.Integer
- getSelection():java.lang.Object
- select(java.lang.Object):Z
- selectFirst():V
f:com.intellij.util.LocalTimeCounter
- sf:TIME_MASK:I
- <init>():V
- s:currentTime():J
f:com.intellij.util.MathUtil
- <init>():V
- s:between(D,D,D,D):Z
- s:between(F,F,F,F):Z
- s:clamp(D,D,D):D
- s:clamp(F,F,F):F
- s:clamp(I,I,I):I
- s:clamp(J,J,J):J
- s:compare(D,D,D):I
- s:compare(F,F,F):I
- s:equals(D,D,D):Z
- s:equals(F,F,F):Z
- s:nonNegativeAbs(I):I
f:com.intellij.util.Matrix
- s:create(I,D[]):com.intellij.util.Matrix
- s:createColumn(com.intellij.util.Vector):com.intellij.util.Matrix
- s:createIdentity(I):com.intellij.util.Matrix
- s:createRow(com.intellij.util.Vector):com.intellij.util.Matrix
- determinant():D
- equals(java.lang.Object):Z
- get(I,I):D
- getColumn(I):com.intellij.util.Vector
- getColumns():I
- getRow(I):com.intellij.util.Vector
- getRows():I
- inverse():com.intellij.util.Matrix
- minus(com.intellij.util.Matrix):com.intellij.util.Matrix
- multiply(D):com.intellij.util.Matrix
- multiply(com.intellij.util.Matrix):com.intellij.util.Matrix
- multiply(com.intellij.util.Vector):com.intellij.util.Vector
- plus(com.intellij.util.Matrix):com.intellij.util.Matrix
- transpose():com.intellij.util.Matrix
f:com.intellij.util.MemoryDumpHelper
- <init>():V
- s:captureMemoryDump(java.lang.String):V
- s:captureMemoryDumpZipped(java.lang.String):V
- s:captureMemoryDumpZipped(java.nio.file.Path):V
- s:memoryDumpAvailable():Z
f:com.intellij.util.MethodInvocator
- <init>(java.lang.Class,java.lang.String,java.lang.Class[]):V
- <init>(Z,java.lang.Class,java.lang.String,java.lang.Class[]):V
- invoke(java.lang.Object,java.lang.Object[]):java.lang.Object
- isAvailable():Z
f:com.intellij.util.NewInstanceFactory
- com.intellij.openapi.util.Factory
- create():java.lang.Object
- s:fromClass(java.lang.Class):com.intellij.openapi.util.Factory
com.intellij.util.NotNullFunction
- com.intellij.util.NullableFunction
- java.util.function.Function
- a:fun(java.lang.Object):java.lang.Object
com.intellij.util.NotNullProducer
- com.intellij.util.Producer
- a:produce():java.lang.Object
f:com.intellij.util.NotNullizer
- <init>(java.lang.String):V
- notNullize(java.lang.Object):java.lang.Object
- nullize(java.lang.Object):java.lang.Object
f:com.intellij.util.NullableConstantFunction
- com.intellij.util.NullableFunction
- <init>(java.lang.Object):V
- fun(java.lang.Object):java.lang.Object
com.intellij.util.NullableConsumer
- com.intellij.util.Consumer
- java.util.function.Consumer
- accept(java.lang.Object):V
- a:consume(java.lang.Object):V
com.intellij.util.NullableFunction
- com.intellij.util.Function
- java.util.function.Function
- apply(java.lang.Object):java.lang.Object
- a:fun(java.lang.Object):java.lang.Object
f:com.intellij.util.ObjectUtils
- sf:NULL:java.lang.Object
- s:assertAllElementsNotNull(java.lang.Object[]):V
- s:assertNotNull(java.lang.Object):java.lang.Object
- s:binarySearch(I,I,java.util.function.IntUnaryOperator):I
- s:chooseNotNull(java.lang.Object,java.lang.Object):java.lang.Object
- s:coalesce(java.lang.Iterable):java.lang.Object
- s:coalesce(java.lang.Object,java.lang.Object):java.lang.Object
- s:coalesce(java.lang.Object,java.lang.Object,java.lang.Object):java.lang.Object
- s:consumeIfCast(java.lang.Object,java.lang.Class,com.intellij.util.Consumer):V
- s:consumeIfNotNull(java.lang.Object,com.intellij.util.Consumer):V
- s:doIfCast(java.lang.Object,java.lang.Class,com.intellij.util.containers.Convertor):java.lang.Object
- s:doIfNotNull(java.lang.Object,com.intellij.util.Function):java.lang.Object
- s:notNull(java.lang.Object):java.lang.Object
- s:notNull(java.lang.Object,com.intellij.openapi.util.NotNullFactory):java.lang.Object
- s:notNull(java.lang.Object,java.lang.Object):java.lang.Object
- s:nullizeByCondition(java.lang.Object,java.util.function.Predicate):java.lang.Object
- s:nullizeIfDefaultValue(java.lang.Object,java.lang.Object):java.lang.Object
- s:objectInfo(java.lang.Object):java.lang.String
- s:sentinel(java.lang.String):java.lang.Object
- s:sentinel(java.lang.String,java.lang.Class):java.lang.Object
- s:tryCast(java.lang.Object,java.lang.Class):java.lang.Object
com.intellij.util.PairConsumer
- java.util.function.BiConsumer
- accept(java.lang.Object,java.lang.Object):V
- a:consume(java.lang.Object,java.lang.Object):V
com.intellij.util.PairFunction
- java.util.function.BiFunction
- apply(java.lang.Object,java.lang.Object):java.lang.Object
- a:fun(java.lang.Object,java.lang.Object):java.lang.Object
com.intellij.util.PairProcessor
- s:alwaysFalse():com.intellij.util.PairProcessor
- s:alwaysTrue():com.intellij.util.PairProcessor
- a:process(java.lang.Object,java.lang.Object):Z
com.intellij.util.ParameterizedRunnable
- java.util.function.Consumer
- accept(java.lang.Object):V
- a:run(java.lang.Object):V
f:com.intellij.util.ParameterizedTypeImpl
- java.lang.reflect.ParameterizedType
- <init>(java.lang.reflect.Type,java.lang.reflect.Type[]):V
- equals(java.lang.Object):Z
- getActualTypeArguments():java.lang.reflect.Type[]
- getOwnerType():java.lang.reflect.Type
- getRawType():java.lang.reflect.Type
- hashCode():I
com.intellij.util.PathMapper
- a:canReplaceLocal(java.lang.String):Z
- a:canReplaceRemote(java.lang.String):Z
- a:convertToLocal(java.lang.String):java.lang.String
- a:convertToRemote(java.lang.String):java.lang.String
- a:convertToRemote(java.util.Collection):java.util.List
- a:isEmpty():Z
c:com.intellij.util.PathMappingSettings
- com.intellij.util.AbstractPathMapper
- java.lang.Cloneable
- <init>():V
- <init>(java.util.List):V
- add(com.intellij.util.PathMappingSettings$PathMapping):V
- addAll(com.intellij.util.PathMappingSettings):V
- addAll(java.util.List):V
- addMapping(java.lang.String,java.lang.String):V
- addMappingCheckUnique(java.lang.String,java.lang.String):V
- convertToLocal(java.lang.String):java.lang.String
- convertToRemote(java.lang.String):java.lang.String
- equals(java.lang.Object):Z
- pf:getAvailablePathMappings():java.util.Collection
- getPathMappings():java.util.List
- hashCode():I
- s:isAnyEmpty(java.lang.String,java.lang.String):Z
- isEmpty():Z
- s:mapToLocal(java.lang.String,java.lang.String,java.lang.String):java.lang.String
- s:readExternal(org.jdom.Element):com.intellij.util.PathMappingSettings
- setPathMappings(java.util.List):V
- s:writeExternal(org.jdom.Element,com.intellij.util.PathMappingSettings):V
c:com.intellij.util.PathMappingSettings$BestMappingSelector
- <init>():V
- consider(com.intellij.util.PathMappingSettings$PathMapping,I):V
- get():com.intellij.util.PathMappingSettings$PathMapping
c:com.intellij.util.PathMappingSettings$PathMapping
- <init>():V
- <init>(java.lang.String,java.lang.String):V
- canReplaceLocal(java.lang.String):Z
- canReplaceRemote(java.lang.String):Z
- clone():com.intellij.util.PathMappingSettings$PathMapping
- equals(java.lang.Object):Z
- getLocalLen():I
- getLocalRoot():java.lang.String
- getRemoteLen():I
- getRemoteRoot():java.lang.String
- hashCode():I
- mapToLocal(java.lang.String):java.lang.String
- mapToRemote(java.lang.String):java.lang.String
- setLocalRoot(java.lang.String):V
- setRemoteRoot(java.lang.String):V
f:com.intellij.util.PatternUtil
- sf:NOTHING:java.util.regex.Pattern
- <init>():V
- s:compileSafe(java.lang.String,java.util.regex.Pattern):java.util.regex.Pattern
- s:convertToRegex(java.lang.String):java.lang.String
- s:fromMask(java.lang.String):java.util.regex.Pattern
- s:fromMask(java.lang.String,I):java.util.regex.Pattern
- s:getFirstMatch(java.util.List,java.util.regex.Pattern):java.lang.String
f:com.intellij.util.ProcessingContext
- <init>():V
- <init>(com.intellij.util.SharedProcessingContext):V
- get(com.intellij.openapi.util.Key):java.lang.Object
- get(java.lang.Object):java.lang.Object
- getSharedContext():com.intellij.util.SharedProcessingContext
- put(com.intellij.openapi.util.Key,java.lang.Object):V
- put(java.lang.Object,java.lang.Object):V
com.intellij.util.Producer
- java.util.function.Supplier
- get():java.lang.Object
- a:produce():java.lang.Object
c:com.intellij.util.Range
- <init>(java.lang.Comparable,java.lang.Comparable):V
- equals(java.lang.Object):Z
- getFrom():java.lang.Comparable
- getTo():java.lang.Comparable
- hashCode():I
- isWithin(java.lang.Comparable):Z
- isWithin(java.lang.Comparable,Z):Z
f:com.intellij.util.RecursionTrackerKt
- sf:findCycle(java.lang.Object,kotlin.jvm.functions.Function1):java.util.List
c:com.intellij.util.ReflectionAssignabilityCache
- <init>():V
- clear():V
- isAssignable(java.lang.Class,java.lang.Class):Z
f:com.intellij.util.ReflectionUtil
- s:boxType(java.lang.Class):java.lang.Class
- s:collectFields(java.lang.Class):java.util.List
- s:comparePublicNonFinalFields(java.lang.Object,java.lang.Object):Z
- s:copyFieldValue(java.lang.Object,java.lang.Object,java.lang.reflect.Field):V
- s:copyFields(java.lang.reflect.Field[],java.lang.Object,java.lang.Object):V
- s:copyFields(java.lang.reflect.Field[],java.lang.Object,java.lang.Object,com.intellij.openapi.util.DifferenceFilter):V
- s:createInstance(java.lang.reflect.Constructor,java.lang.Object[]):java.lang.Object
- s:dumpFields(java.lang.Class,java.lang.Object,java.lang.String[]):java.lang.String
- s:findAssignableField(java.lang.Class,java.lang.Class,java.lang.String):java.lang.reflect.Field
- s:findCallerClass(I):java.lang.Class
- s:findField(java.lang.Class,java.lang.Class,java.lang.String):java.lang.reflect.Field
- s:findFieldInHierarchy(java.lang.Class,java.util.function.Predicate):java.lang.reflect.Field
- s:findMethod(java.util.Collection,java.lang.String,java.lang.Class[]):java.lang.reflect.Method
- s:forName(java.lang.String):java.lang.Class
- s:getCallerClass(I):java.lang.Class
- s:getClassDeclaredMethods(java.lang.Class):java.util.List
- s:getClassPublicMethods(java.lang.Class):java.util.List
- s:getDeclaredField(java.lang.Class,java.lang.String):java.lang.reflect.Field
- s:getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]):java.lang.reflect.Method
- s:getDefaultConstructor(java.lang.Class):java.lang.reflect.Constructor
- s:getField(java.lang.Class,java.lang.Object,java.lang.Class,java.lang.String):java.lang.Object
- s:getFieldValue(java.lang.reflect.Field,java.lang.Object):java.lang.Object
- s:getGrandCallerClass():java.lang.Class
- s:getMethod(java.lang.Class,java.lang.String,java.lang.Class[]):java.lang.reflect.Method
- s:getMethodDeclaringClass(java.lang.Class,java.lang.String,java.lang.Class[]):java.lang.Class
- s:getStaticFieldValue(java.lang.Class,java.lang.Class,java.lang.String):java.lang.Object
- s:getTheOnlyVolatileInstanceFieldOfClass(java.lang.Class,java.lang.Class):java.lang.reflect.Field
- s:isAssignable(java.lang.Class,java.lang.Class):Z
- s:isInstanceField(java.lang.reflect.Field):Z
- s:newInstance(java.lang.Class):java.lang.Object
- s:newInstance(java.lang.Class,Z):java.lang.Object
- s:proxy(java.lang.Class,java.lang.reflect.InvocationHandler):java.lang.Object
- s:proxy(java.lang.ClassLoader,java.lang.Class,java.lang.reflect.InvocationHandler):java.lang.Object
- s:resetField(java.lang.Class,java.lang.Class,java.lang.String):V
- s:resetField(java.lang.Object,java.lang.String):V
- s:resetField(java.lang.Object,java.lang.reflect.Field):V
- s:setField(java.lang.Class,java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object):Z
f:com.intellij.util.SharedProcessingContext
- <init>():V
- get(com.intellij.openapi.util.Key):java.lang.Object
- get(com.intellij.openapi.util.Key,java.lang.Object):java.lang.Object
- get(java.lang.String):java.lang.Object
- put(com.intellij.openapi.util.Key,java.lang.Object):V
- put(com.intellij.openapi.util.Key,java.lang.Object,java.lang.Object):V
- put(java.lang.String,java.lang.Object):V
f:com.intellij.util.SmartFMap
- java.util.Map
- clear():V
- containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- s:emptyMap():com.intellij.util.SmartFMap
- entrySet():java.util.Set
- equals(java.lang.Object):Z
- forEach(java.util.function.BiConsumer):V
- get(java.lang.Object):java.lang.Object
- hashCode():I
- isEmpty():Z
- keySet():java.util.Set
- minus(java.lang.Object):com.intellij.util.SmartFMap
- minusAll(java.util.Collection):com.intellij.util.SmartFMap
- plus(java.lang.Object,java.lang.Object):com.intellij.util.SmartFMap
- plusAll(java.util.Map):com.intellij.util.SmartFMap
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- remove(java.lang.Object):java.lang.Object
- size():I
- values():java.util.Collection
f:com.intellij.util.StringBuilderSpinAllocator
- s:alloc():java.lang.StringBuilder
- s:dispose(java.lang.StringBuilder):V
f:com.intellij.util.StringLenComparator
- java.util.Comparator
- compare(java.lang.String,java.lang.String):I
- s:getDescendingInstance():com.intellij.util.StringLenComparator
- s:getInstance():com.intellij.util.StringLenComparator
f:com.intellij.util.SynchronizedCollectConsumer
- com.intellij.util.CollectConsumer
- <init>():V
- <init>(java.util.Collection):V
- consume(java.lang.Object):V
- getResult():java.util.Collection
f:com.intellij.util.TestRuntimeUtil
- sf:INSTANCE:com.intellij.util.TestRuntimeUtil
- f:isRunningUnderUnitTest():Z
f:com.intellij.util.TextWithIcon
- <init>(java.lang.String,javax.swing.Icon):V
- getIcon():javax.swing.Icon
- getText():java.lang.String
e:com.intellij.util.ThreeState
- java.lang.Enum
- sf:NO:com.intellij.util.ThreeState
- sf:UNSURE:com.intellij.util.ThreeState
- sf:YES:com.intellij.util.ThreeState
- s:fromBoolean(Z):com.intellij.util.ThreeState
- isAtLeast(com.intellij.util.ThreeState):Z
- merge(com.intellij.util.ThreeState):com.intellij.util.ThreeState
- s:merge(java.lang.Iterable):com.intellij.util.ThreeState
- s:mostPositive(java.lang.Iterable):com.intellij.util.ThreeState
- toBoolean():Z
- s:valueOf(java.lang.String):com.intellij.util.ThreeState
- s:values():com.intellij.util.ThreeState[]
com.intellij.util.ThrowableConvertor
- a:convert(java.lang.Object):java.lang.Object
com.intellij.util.ThrowablePairConsumer
- a:consume(java.lang.Object,java.lang.Object):V
com.intellij.util.Time
- sf:DAY:I
- sf:HOUR:I
- sf:MINUTE:I
- sf:SECOND:I
- sf:WEEK:I
f:com.intellij.util.TimeoutUtil
- <init>():V
- s:getDurationMillis(J):J
- s:sleep(J):V
f:com.intellij.util.TreeItem
- <init>(java.lang.Object):V
- addChild(com.intellij.util.TreeItem):V
- addChildAfter(com.intellij.util.TreeItem,com.intellij.util.TreeItem):V
- getChildren():java.util.List
- getData():java.lang.Object
- getParent():com.intellij.util.TreeItem
- setData(java.lang.Object):V
com.intellij.util.TriConsumer
- a:accept(java.lang.Object,java.lang.Object,java.lang.Object):V
com.intellij.util.TripleFunction
- a:fun(java.lang.Object,java.lang.Object,java.lang.Object):java.lang.Object
c:com.intellij.util.UnmodifiableIterator
- java.util.Iterator
- <init>(java.util.Iterator):V
- hasNext():Z
- next():java.lang.Object
- remove():V
c:com.intellij.util.Vector
- s:create(D[]):com.intellij.util.Vector
- equals(java.lang.Object):Z
- get(I):D
- getSize():I
- length():D
- minus(com.intellij.util.Vector):com.intellij.util.Vector
- multiply(D):com.intellij.util.Vector
- multiply(com.intellij.util.Matrix):com.intellij.util.Vector
- multiply(com.intellij.util.Vector):D
- plus(com.intellij.util.Vector):com.intellij.util.Vector
f:com.intellij.util.VersionUtil
- <init>():V
- s:parseVersion(java.lang.String,java.util.regex.Pattern[]):com.intellij.openapi.util.Version
a:com.intellij.util.WaitFor
- <init>():V
- <init>(I):V
- <init>(I,I):V
- <init>(I,java.lang.Runnable):V
- assertCompleted():V
- assertCompleted(java.lang.String):V
- pa:condition():Z
- getWaitedTime():J
- isConditionRealized():Z
- isInterrupted():Z
- join():V
c:com.intellij.util.WalkingState
- p:startedWalking:Z
- <init>(com.intellij.util.WalkingState$TreeGuide):V
- elementFinished(java.lang.Object):V
- elementStarted(java.lang.Object):V
- next(java.lang.Object,java.lang.Object,Z):java.lang.Object
- s:processAll(java.lang.Object,com.intellij.util.WalkingState$TreeGuide,com.intellij.util.Processor):Z
- s:setUnitTestMode():V
- startedWalking():V
- stopWalking():V
- visit(java.lang.Object):V
com.intellij.util.WalkingState$TreeGuide
- a:getFirstChild(java.lang.Object):java.lang.Object
- a:getNextSibling(java.lang.Object):java.lang.Object
- a:getParent(java.lang.Object):java.lang.Object
- a:getPrevSibling(java.lang.Object):java.lang.Object
a:com.intellij.util.WeakListener
- java.lang.reflect.InvocationHandler
- p:<init>(java.lang.Object,java.lang.Class,java.lang.Object):V
- pa:addListener(java.lang.Object,java.lang.Object):V
- f:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]):java.lang.Object
- pa:removeListener(java.lang.Object,java.lang.Object):V
c:com.intellij.util.WeakPropertyChangeAdapter
- java.beans.PropertyChangeListener
- <init>(java.beans.PropertyChangeListener):V
- propertyChange(java.beans.PropertyChangeEvent):V
f:com.intellij.util.cls.ClsFormatException
- java.lang.Exception
- <init>():V
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
f:com.intellij.util.concurrency.AppExecutorUtil
- <init>():V
- s:createBoundedApplicationPoolExecutor(java.lang.String,I):java.util.concurrent.ExecutorService
- s:createBoundedApplicationPoolExecutor(java.lang.String,java.util.concurrent.Executor,I):java.util.concurrent.ExecutorService
- s:createBoundedApplicationPoolExecutor(java.lang.String,java.util.concurrent.Executor,I,com.intellij.openapi.Disposable):java.util.concurrent.ExecutorService
- s:createBoundedScheduledExecutorService(java.lang.String,I):java.util.concurrent.ScheduledExecutorService
- s:createCustomPriorityQueueBoundedApplicationPoolExecutor(java.lang.String,java.util.concurrent.Executor,I,java.util.Comparator):java.util.concurrent.ExecutorService
- s:getAppExecutorService():java.util.concurrent.ExecutorService
- s:getAppScheduledExecutorService():java.util.concurrent.ScheduledExecutorService
f:com.intellij.util.concurrency.BoundedTaskExecutor
- java.util.concurrent.AbstractExecutorService
- awaitTermination(J,java.util.concurrent.TimeUnit):Z
- clearAndCancelAll():java.util.List
- execute(java.lang.Runnable):V
- isEmpty():Z
- isShutdown():Z
- isTerminated():Z
- shutdown():V
- shutdownNow():java.util.List
c:com.intellij.util.concurrency.FixedFuture
- java.util.concurrent.Future
- <init>(java.lang.Object):V
- cancel(Z):Z
- s:completeExceptionally(java.lang.Throwable):com.intellij.util.concurrency.FixedFuture
- get():java.lang.Object
- get(J,java.util.concurrent.TimeUnit):java.lang.Object
- isCancelled():Z
- isDone():Z
f:com.intellij.util.concurrency.Semaphore
- <init>():V
- <init>(I):V
- down():V
- isUp():Z
- tryUp():Z
- up():V
- waitFor():V
- waitFor(J):Z
- waitForUnsafe():V
- waitForUnsafe(J):Z
f:com.intellij.util.concurrency.SequentialTaskExecutor
- s:createSequentialApplicationPoolExecutor(java.lang.String):java.util.concurrent.ExecutorService
- s:createSequentialApplicationPoolExecutor(java.lang.String,java.util.concurrent.Executor):java.util.concurrent.ExecutorService
f:com.intellij.util.concurrency.SynchronizedClearableLazy
- java.util.function.Supplier
- sf:Companion:com.intellij.util.concurrency.SynchronizedClearableLazy$Companion
- <init>(kotlin.jvm.functions.Function0):V
- f:compareAndDrop(java.lang.Object):Z
- f:drop():java.lang.Object
- get():java.lang.Object
- f:getValue():java.lang.Object
- f:getValueIfInitialized():java.lang.Object
- f:isInitialized():Z
- f:setValue(java.lang.Object):V
f:com.intellij.util.concurrency.SynchronizedClearableLazy$Companion
c:com.intellij.util.containers.ArrayListSet
- java.util.AbstractSet
- <init>():V
- add(java.lang.Object):Z
- clear():V
- contains(java.lang.Object):Z
- get(I):java.lang.Object
- iterator():java.util.Iterator
- remove(java.lang.Object):Z
- size():I
f:com.intellij.util.containers.BiDirectionalEnumerator
- <init>(I):V
- clear():V
- enumerateImpl(java.lang.Object):I
- forEachValue(java.util.function.Predicate):V
- getValue(I):java.lang.Object
f:com.intellij.util.containers.BidirectionalMap
- java.util.Map
- <init>():V
- clear():V
- containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- getKeysByValue(java.lang.Object):java.util.List
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- remove(java.lang.Object):java.lang.Object
- removeValue(java.lang.Object):V
- size():I
- values():java.util.Collection
f:com.intellij.util.containers.BidirectionalMultiMap
- <init>():V
- <init>(java.util.Map,java.util.Map):V
- clear():V
- containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- getKeys():java.util.Set
- getKeys(java.lang.Object):java.util.Set
- getValues():java.util.Set
- getValues(java.lang.Object):java.util.Set
- isEmpty():Z
- put(java.lang.Object,java.lang.Object):Z
- remove(java.lang.Object,java.lang.Object):V
- removeKey(java.lang.Object):Z
- removeValue(java.lang.Object):Z
f:com.intellij.util.containers.BooleanStack
- <init>():V
- <init>(I):V
- clear():V
- equals(java.lang.Object):Z
- isEmpty():Z
- peek():Z
- pop():Z
- push(Z):V
- size():I
c:com.intellij.util.containers.ClassMap
- pf:myMap:java.util.Map
- <init>():V
- <init>(java.util.Map):V
- clear():V
- get(java.lang.Class):java.lang.Object
- put(java.lang.Class,java.lang.Object):V
- remove(java.lang.Class):V
- f:values():java.util.Collection
f:com.intellij.util.containers.ComparatorUtil
- s:compareBy(java.util.function.Function,java.util.Comparator):java.util.Comparator
- s:equalsNullable(java.lang.Object,java.lang.Object):Z
- s:max(java.lang.Comparable,java.lang.Comparable):java.lang.Comparable
- s:min(java.lang.Comparable,java.lang.Comparable):java.lang.Comparable
a:com.intellij.util.containers.ConcurrentFactoryMap
- java.util.concurrent.ConcurrentMap
- clear():V
- f:containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- s:create(com.intellij.util.Function,java.util.function.Supplier):java.util.concurrent.ConcurrentMap
- pa:create(java.lang.Object):java.lang.Object
- p:createMap():java.util.concurrent.ConcurrentMap
- s:createMap(com.intellij.util.Function):java.util.concurrent.ConcurrentMap
- s:createWeakMap(com.intellij.util.Function):java.util.concurrent.ConcurrentMap
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- putIfAbsent(java.lang.Object,java.lang.Object):java.lang.Object
- remove(java.lang.Object):java.lang.Object
- remove(java.lang.Object,java.lang.Object):Z
- removeValue(java.lang.Object):Z
- replace(java.lang.Object,java.lang.Object):java.lang.Object
- replace(java.lang.Object,java.lang.Object,java.lang.Object):Z
- size():I
- values():java.util.Collection
com.intellij.util.containers.ConcurrentIntObjectMap
- com.intellij.util.containers.IntObjectMap
- a:cacheOrGet(I,java.lang.Object):java.lang.Object
- a:elements():java.util.Enumeration
- a:getOrDefault(I,java.lang.Object):java.lang.Object
- a:putIfAbsent(I,java.lang.Object):java.lang.Object
- a:remove(I,java.lang.Object):Z
- a:replace(I,java.lang.Object):java.lang.Object
- a:replace(I,java.lang.Object,java.lang.Object):Z
- a:size():I
com.intellij.util.containers.ConcurrentList
- java.util.List
- a:addAllAbsent(java.util.Collection):I
- a:addIfAbsent(java.lang.Object):Z
com.intellij.util.containers.ConcurrentLongObjectMap
- a:cacheOrGet(J,java.lang.Object):java.lang.Object
- a:clear():V
- a:containsKey(J):Z
- a:containsValue(java.lang.Object):Z
- a:elements():java.util.Iterator
- a:entries():java.lang.Iterable
- a:entrySet():java.util.Set
- a:get(J):java.lang.Object
- a:getOrDefault(J,java.lang.Object):java.lang.Object
- a:isEmpty():Z
- a:keys():J[]
- a:put(J,java.lang.Object):java.lang.Object
- a:putIfAbsent(J,java.lang.Object):java.lang.Object
- a:remove(J):java.lang.Object
- a:remove(J,java.lang.Object):Z
- a:replace(J,java.lang.Object):java.lang.Object
- a:replace(J,java.lang.Object,java.lang.Object):Z
- a:size():I
- a:values():java.util.Collection
com.intellij.util.containers.ConcurrentLongObjectMap$LongEntry
- a:getKey():J
- a:getValue():java.lang.Object
f:com.intellij.util.containers.ConcurrentMostlySingularMultiMap
- com.intellij.util.containers.MostlySingularMultiMap
- <init>():V
- add(java.lang.Object,java.lang.Object):V
- addAll(com.intellij.util.containers.MostlySingularMultiMap):V
- compact():V
- remove(java.lang.Object,java.lang.Object):Z
- replace(java.lang.Object,java.util.Collection,java.util.Collection):Z
f:com.intellij.util.containers.ContainerUtil
- <init>():V
- s:add(java.lang.Object,java.util.Collection,com.intellij.openapi.Disposable):V
- s:addAll(java.util.Collection,java.lang.Iterable):V
- s:addAll(java.util.Collection,java.util.Enumeration):V
- s:addAll(java.util.Collection,java.util.Iterator):V
- s:addAll(java.util.Collection,java.lang.Object[]):java.util.Collection
- s:addAllNotNull(java.util.Collection,java.lang.Iterable):V
- s:addAllNotNull(java.util.Collection,java.util.Iterator):V
- s:addAllNotNull(java.util.Collection,java.lang.Object[]):java.util.Collection
- s:addIfNotNull(java.util.Collection,java.lang.Object):V
- s:all(java.util.Collection,com.intellij.openapi.util.Condition):Z
- s:all(java.lang.Object[],com.intellij.openapi.util.Condition):Z
- s:and(java.lang.Iterable,com.intellij.openapi.util.Condition):Z
- s:and(java.lang.Object[],com.intellij.openapi.util.Condition):Z
- s:append(java.util.List,java.lang.Object[]):java.util.List
- s:ar(java.lang.Object[]):java.lang.Object[]
- s:classify(java.util.Iterator,com.intellij.util.containers.Convertor):java.util.Map
- s:collect(java.util.Iterator):java.util.List
- s:collect(java.util.Iterator,com.intellij.util.containers.FilteringIterator$InstanceOf):java.util.List
- s:collect(java.util.Iterator,java.util.function.Predicate):java.util.List
- s:compareLexicographically(java.util.List,java.util.List):I
- s:compareLexicographically(java.util.List,java.util.List,java.util.Comparator):I
- s:concat(java.lang.Iterable):java.util.List
- s:concat(java.lang.Iterable,com.intellij.util.Function):java.util.List
- s:concat(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable
- s:concat(java.util.List):java.util.List
- s:concat(java.util.List,java.util.List):java.util.List
- s:concat(java.lang.Iterable[]):java.lang.Iterable
- s:concat(java.lang.Object[],com.intellij.util.Function):java.util.List
- s:concat(java.util.List[]):java.util.List
- s:concat(java.lang.Object[][]):java.lang.Iterable
- s:concatIterators(java.util.Collection):java.util.Iterator
- s:concatIterators(java.util.Iterator[]):java.util.Iterator
- s:containsIdentity(java.lang.Iterable,java.lang.Object):Z
- s:convert(java.lang.Object[],java.lang.Object[],com.intellij.util.Function):java.lang.Object[]
- s:copyAndClear(java.util.Collection,com.intellij.util.ArrayFactory,Z):java.lang.Object[]
- s:copyList(java.util.List):java.util.List
- s:count(java.lang.Iterable,com.intellij.openapi.util.Condition):I
- s:createConcurrentIntObjectMap():com.intellij.util.containers.ConcurrentIntObjectMap
- s:createConcurrentList():com.intellij.util.containers.ConcurrentList
- s:createConcurrentList(java.util.Collection):com.intellij.util.containers.ConcurrentList
- s:createConcurrentSoftKeySoftValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeySoftValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeyWeakValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakValueMap():java.util.concurrent.ConcurrentMap
- s:createEmptyCOWList():java.util.concurrent.CopyOnWriteArrayList
- s:createIntKeyWeakValueMap():com.intellij.util.containers.IntObjectMap
- s:createLockFreeCopyOnWriteList():java.util.List
- s:createLockFreeCopyOnWriteList(java.util.Collection):java.util.List
- s:createMaybeSingletonList(java.lang.Object):java.util.List
- s:createMaybeSingletonSet(java.lang.Object):java.util.Set
- s:createSoftKeySoftValueMap():java.util.Map
- s:createSoftMap():java.util.Map
- s:createSoftValueMap():java.util.Map
- s:createWeakKeyIntValueMap():com.intellij.util.containers.ObjectIntMap
- s:createWeakKeySoftValueMap():java.util.Map
- s:createWeakKeyWeakValueMap():java.util.Map
- s:createWeakMap():java.util.Map
- s:createWeakSet():java.util.Set
- s:createWeakValueMap():java.util.Map
- s:diff(java.util.Map,java.util.Map):java.util.Map
- s:emptyList():java.util.List
- s:equalsIdentity(java.util.List,java.util.List):Z
- s:exists(java.lang.Iterable,com.intellij.openapi.util.Condition):Z
- s:exists(java.lang.Object[],com.intellij.openapi.util.Condition):Z
- s:fillMapWithValues(java.util.Map,java.util.Iterator,com.intellij.util.containers.Convertor):V
- s:filter(java.util.Collection,com.intellij.openapi.util.Condition):java.util.List
- s:filter(java.util.Map,com.intellij.openapi.util.Condition):java.util.Map
- s:filter(java.lang.Object[],com.intellij.openapi.util.Condition):java.util.List
- s:filterIsInstance(java.util.Collection,java.lang.Class):java.util.List
- s:filterIsInstance(java.lang.Object[],java.lang.Class):java.util.List
- s:filterIterator(java.util.Iterator,com.intellij.openapi.util.Condition):java.util.Iterator
- s:find(java.lang.Iterable,com.intellij.openapi.util.Condition):java.lang.Object
- s:find(java.lang.Iterable,java.lang.Object):java.lang.Object
- s:find(java.util.Iterator,com.intellij.openapi.util.Condition):java.lang.Object
- s:find(java.util.Iterator,java.lang.Object):java.lang.Object
- s:find(java.lang.Object[],com.intellij.openapi.util.Condition):java.lang.Object
- s:findAll(java.util.Collection,com.intellij.openapi.util.Condition):java.util.List
- s:findAll(java.util.Collection,java.lang.Class):java.util.List
- s:findAll(java.lang.Object[],com.intellij.openapi.util.Condition):java.util.List
- s:findAll(java.lang.Object[],java.lang.Class):java.util.List
- s:findAllAsArray(java.util.Collection,java.lang.Class):java.lang.Object[]
- s:findAllAsArray(java.lang.Object[],com.intellij.openapi.util.Condition):java.lang.Object[]
- s:findAllAsArray(java.lang.Object[],java.lang.Class):java.lang.Object[]
- s:findInstance(java.lang.Iterable,java.lang.Class):java.lang.Object
- s:findInstance(java.util.Iterator,java.lang.Class):java.lang.Object
- s:findInstance(java.lang.Object[],java.lang.Class):java.lang.Object
- s:findLast(java.util.List,com.intellij.openapi.util.Condition):java.lang.Object
- s:findLastInstance(java.util.List,java.lang.Class):java.lang.Object
- s:flatMap(java.lang.Iterable,com.intellij.util.Function):java.util.List
- s:flatten(java.lang.Iterable):java.util.List
- s:flatten(java.util.Collection[]):java.util.List
- s:getFirstItem(java.util.Collection):java.lang.Object
- s:getFirstItem(java.util.Collection,java.lang.Object):java.lang.Object
- s:getFirstItem(java.util.List):java.lang.Object
- s:getFirstItems(java.util.List,I):java.util.List
- s:getLastItem(java.util.List):java.lang.Object
- s:getLastItem(java.util.List,java.lang.Object):java.lang.Object
- s:getOnlyItem(java.util.Collection):java.lang.Object
- s:getOnlyItem(java.util.Collection,java.lang.Object):java.lang.Object
- s:getOrCreate(java.util.Map,java.lang.Object,com.intellij.openapi.util.Factory):java.lang.Object
- s:getOrCreate(java.util.Map,java.lang.Object,java.lang.Object):java.lang.Object
- s:getOrElse(java.util.List,I,java.lang.Object):java.lang.Object
- s:groupBy(java.lang.Iterable,com.intellij.util.NullableFunction):com.intellij.util.containers.MultiMap
- s:immutableList():java.util.List
- s:immutableList(java.lang.Object):java.util.List
- s:immutableList(java.util.List):com.intellij.util.containers.ImmutableList
- s:immutableList(java.lang.Object[]):com.intellij.util.containers.ImmutableList
- s:immutableMapBuilder():com.intellij.util.containers.ContainerUtil$ImmutableMapBuilder
- s:immutableSet(java.lang.Object[]):java.util.Set
- s:immutableSingletonList(java.lang.Object):com.intellij.util.containers.ImmutableList
- s:indexOf(java.util.List,com.intellij.openapi.util.Condition):I
- s:indexOf(java.lang.Object[],com.intellij.openapi.util.Condition):I
- s:indexOfIdentity(java.util.List,java.lang.Object):I
- s:intersection(java.util.Collection,java.util.Collection):java.util.Collection
- s:intersection(java.util.EnumSet,java.util.EnumSet):java.util.EnumSet
- s:intersection(java.util.Map,java.util.Map):java.util.Map
- s:intersects(java.util.Collection,java.util.Collection):Z
- s:isEmpty(java.util.Collection):Z
- s:isEmpty(java.util.Map):Z
- s:iterate(java.util.Enumeration):java.util.Iterator
- s:iterate(java.lang.Object[]):java.util.Iterator
- s:iterateAndGetLastItem(java.lang.Iterable):java.lang.Object
- s:iterateAndGetLastItem(java.util.List):java.lang.Object
- s:iterateBackward(java.util.List):java.lang.Iterable
- s:lastIndexOf(java.util.List,com.intellij.openapi.util.Condition):I
- s:list(java.lang.Object[]):java.util.List
- s:map(java.lang.Iterable,com.intellij.util.Function):java.util.List
- s:map(java.util.Collection,com.intellij.util.Function):java.util.List
- s:map(java.util.Iterator,com.intellij.util.Function):java.util.List
- s:map(java.lang.Object[],com.intellij.util.Function):java.util.List
- s:map(java.lang.Object[],com.intellij.util.Function,java.lang.Object[]):java.lang.Object[]
- s:map2Array(java.util.Collection,com.intellij.util.Function):java.lang.Object[]
- s:map2Array(java.util.Collection,java.lang.Class,com.intellij.util.Function):java.lang.Object[]
- s:map2Array(java.util.Collection,java.lang.Object[],com.intellij.util.Function):java.lang.Object[]
- s:map2Array(java.lang.Object[],com.intellij.util.Function):java.lang.Object[]
- s:map2Array(java.lang.Object[],java.lang.Class,com.intellij.util.Function):java.lang.Object[]
- s:map2Array(java.lang.Object[],java.lang.Object[],com.intellij.util.Function):java.lang.Object[]
- s:map2LinkedSet(java.util.Collection,com.intellij.util.Function):java.util.Set
- s:map2List(java.util.Collection,com.intellij.util.Function):java.util.List
- s:map2Map(java.util.Collection):java.util.Map
- s:map2Map(java.util.Collection,com.intellij.util.Function):java.util.Map
- s:map2Map(java.lang.Object[],com.intellij.util.Function):java.util.Map
- s:map2MapNotNull(java.util.Collection,com.intellij.util.Function):java.util.Map
- s:map2MapNotNull(java.lang.Object[],com.intellij.util.Function):java.util.Map
- s:map2Set(java.util.Collection,com.intellij.util.Function):java.util.Set
- s:map2Set(java.lang.Object[],com.intellij.util.Function):java.util.Set
- s:map2SetNotNull(java.util.Collection,com.intellij.util.Function):java.util.Set
- s:mapIterator(java.util.Iterator,com.intellij.util.Function):java.util.Iterator
- s:mapNotNull(java.lang.Iterable,com.intellij.util.Function):java.util.List
- s:mapNotNull(java.util.Collection,com.intellij.util.Function):java.util.List
- s:mapNotNull(java.lang.Object[],com.intellij.util.Function):java.util.List
- s:mapNotNull(java.lang.Object[],com.intellij.util.Function,java.lang.Object[]):java.lang.Object[]
- s:mergeSortedLists(java.util.List,java.util.List,java.util.Comparator,Z):java.util.List
- s:newArrayList():java.util.ArrayList
- s:newArrayList(java.lang.Iterable):java.util.ArrayList
- s:newArrayList(java.util.Collection):java.util.ArrayList
- s:newArrayList(java.lang.Object[]):java.util.ArrayList
- s:newArrayListWithCapacity(I):java.util.ArrayList
- s:newConcurrentMap():java.util.concurrent.ConcurrentMap
- s:newConcurrentSet():java.util.Set
- s:newHashMap():java.util.HashMap
- s:newHashMap(com.intellij.openapi.util.Pair,com.intellij.openapi.util.Pair[]):java.util.Map
- s:newHashMap(java.util.List,java.util.List):java.util.Map
- s:newHashOrEmptySet(java.lang.Iterable):java.util.Set
- s:newHashSet():java.util.HashSet
- s:newHashSet(java.lang.Iterable):java.util.HashSet
- s:newHashSet(java.util.Collection):java.util.HashSet
- s:newHashSet(java.util.Iterator):java.util.HashSet
- s:newHashSet(java.lang.Object[]):java.util.HashSet
- s:newLinkedHashMap():java.util.LinkedHashMap
- s:newLinkedHashMap(com.intellij.openapi.util.Pair,com.intellij.openapi.util.Pair[]):java.util.LinkedHashMap
- s:newLinkedHashSet():java.util.LinkedHashSet
- s:newLinkedHashSet(java.lang.Iterable):java.util.LinkedHashSet
- s:newLinkedHashSet(java.util.Collection):java.util.LinkedHashSet
- s:newLinkedHashSet(java.lang.Object[]):java.util.LinkedHashSet
- s:newLinkedList():java.util.LinkedList
- s:newLinkedList(java.lang.Object[]):java.util.LinkedList
- s:newMapFromKeys(java.util.Iterator,com.intellij.util.containers.Convertor):java.util.Map
- s:newMapFromValues(java.util.Iterator,com.intellij.util.containers.Convertor):java.util.Map
- s:newSmartList():java.util.List
- s:newUnmodifiableList(java.util.List):java.util.List
- s:notNullize(java.util.List):java.util.List
- s:notNullize(java.util.Map):java.util.Map
- s:notNullize(java.util.Set):java.util.Set
- s:nullize(java.util.Collection):java.util.Collection
- s:or(java.lang.Iterable,com.intellij.openapi.util.Condition):Z
- s:or(java.lang.Object[],com.intellij.openapi.util.Condition):Z
- s:packNullables(java.lang.Object[]):java.util.List
- s:prepend(java.util.List,java.lang.Object[]):java.util.List
- s:process(java.lang.Iterable,com.intellij.util.Processor):Z
- s:process(java.util.Iterator,com.intellij.util.Processor):Z
- s:process(java.util.List,com.intellij.util.Processor):Z
- s:process(java.lang.Object[],com.intellij.util.Processor):Z
- s:processSortedListsInOrder(java.util.List,java.util.List,java.util.Comparator,Z,com.intellij.util.PairConsumer):V
- s:putIfNotNull(java.lang.Object,java.lang.Object,com.intellij.util.containers.MultiMap):V
- s:putIfNotNull(java.lang.Object,java.lang.Object,java.util.Map):V
- s:putIfNotNull(java.lang.Object,java.util.Collection,com.intellij.util.containers.MultiMap):V
- s:quickSort(java.util.List,java.util.Comparator):V
- s:reduce(java.util.List,java.lang.Object,java.util.function.BinaryOperator):java.lang.Object
- s:removeAll(java.util.Collection,java.lang.Object[]):Z
- s:removeDuplicates(java.util.Collection):V
- s:removeDuplicatesFromSorted(java.util.List,java.util.Comparator):java.util.List
- s:retainAll(java.util.Collection,com.intellij.openapi.util.Condition):Z
- s:reverse(java.util.List):java.util.List
- s:reverseMap(java.util.Map):java.util.Map
- s:set():java.util.Set
- s:set(java.lang.Object):java.util.Set
- s:set(java.lang.Object[]):java.util.Set
- s:skipNulls(java.util.Collection):java.util.List
- s:sort(java.util.List):V
- s:sort(java.util.List,java.util.Comparator):V
- s:sort(java.lang.Comparable[]):V
- s:sort(java.lang.Object[],java.util.Comparator):V
- s:sorted(java.lang.Iterable,java.util.Comparator):java.util.List
- s:sorted(java.util.Collection):java.util.List
- s:sorted(java.util.Collection,java.util.Comparator):java.util.List
- s:splitListToChunks(java.util.List,I):java.util.stream.Stream
- s:startsWith(java.util.List,java.util.List):Z
- s:subArrayAsList(java.lang.Object[],I,I):java.util.List
- s:subList(java.util.List,I):java.util.List
- s:subtract(java.util.Collection,java.util.Collection):java.util.Collection
- s:swapElements(java.util.List,I,I):V
- s:toArray(java.util.Collection,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:toArray(java.util.Collection,java.util.Collection,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:toArray(java.util.Collection,java.lang.Object[]):java.lang.Object[]
- s:toArray(java.util.List,java.lang.Object[]):java.lang.Object[]
- s:toCollection(java.lang.Iterable):java.util.Collection
- s:toCollection(java.util.Collection):java.util.Collection
- s:toList(java.util.Enumeration):java.util.List
- s:trimToSize(java.util.List):java.util.List
- s:union(java.util.Collection,java.util.Collection):java.util.Set
- s:union(java.util.Map,java.util.Map):java.util.Map
- s:union(java.util.Set,java.util.Set):java.util.Set
- s:unmodifiableOrEmptyList(java.util.List):java.util.List
- s:unmodifiableOrEmptyMap(java.util.Map):java.util.Map
- s:unmodifiableOrEmptySet(java.util.Set):java.util.Set
- s:zip(java.lang.Iterable,java.lang.Iterable):java.lang.Iterable
f:com.intellij.util.containers.ContainerUtil$ImmutableMapBuilder
- <init>():V
- build():java.util.Map
- put(java.lang.Object,java.lang.Object):com.intellij.util.containers.ContainerUtil$ImmutableMapBuilder
- putAll(java.util.Map):com.intellij.util.containers.ContainerUtil$ImmutableMapBuilder
f:com.intellij.util.containers.ContainerUtil$KeyOrderedMultiMap
- com.intellij.util.containers.MultiMap
- <init>():V
- <init>(com.intellij.util.containers.MultiMap):V
- navigableKeySet():java.util.NavigableSet
e:com.intellij.util.containers.ContainerUtil$MergeResult
- java.lang.Enum
- sf:COPIED_FROM_LIST1:com.intellij.util.containers.ContainerUtil$MergeResult
- sf:COPIED_FROM_LIST2:com.intellij.util.containers.ContainerUtil$MergeResult
- sf:MERGED_EQUAL_FROM_BOTH:com.intellij.util.containers.ContainerUtil$MergeResult
- s:valueOf(java.lang.String):com.intellij.util.containers.ContainerUtil$MergeResult
- s:values():com.intellij.util.containers.ContainerUtil$MergeResult[]
com.intellij.util.containers.Convertor
- java.util.function.Function
- sf:SELF:com.intellij.util.containers.Convertor$IntoSelf
- apply(java.lang.Object):java.lang.Object
- asFunction():java.util.function.Function
- a:convert(java.lang.Object):java.lang.Object
- s:self():com.intellij.util.containers.Convertor
f:com.intellij.util.containers.Convertor$IntoSelf
- com.intellij.util.containers.Convertor
- <init>():V
- convert(java.lang.Object):java.lang.Object
f:com.intellij.util.containers.DisposableWrapperList
- java.util.AbstractList
- <init>():V
- add(I,java.lang.Object):V
- add(I,java.lang.Object,com.intellij.openapi.Disposable):com.intellij.openapi.Disposable
- add(java.lang.Object):Z
- add(java.lang.Object,com.intellij.openapi.Disposable):com.intellij.openapi.Disposable
- addAll(I,java.util.Collection):Z
- addAll(java.util.Collection):Z
- clear():V
- contains(java.lang.Object):Z
- containsAll(java.util.Collection):Z
- get(I):java.lang.Object
- indexOf(java.lang.Object):I
- isEmpty():Z
- iterator():java.util.Iterator
- lastIndexOf(java.lang.Object):I
- listIterator():java.util.ListIterator
- listIterator(I):java.util.ListIterator
- remove(I):java.lang.Object
- remove(java.lang.Object):Z
- removeAll(java.util.Collection):Z
- removeIf(java.util.function.Predicate):Z
- retainAll(java.util.Collection):Z
- set(I,java.lang.Object):java.lang.Object
- size():I
- subList(I,I):java.util.List
- toArray():java.lang.Object[]
- toArray(java.lang.Object[]):java.lang.Object[]
a:com.intellij.util.containers.DistinctRootsCollection
- java.util.Collection
- <init>():V
- <init>(java.util.Collection):V
- <init>(java.lang.Object[]):V
- add(java.lang.Object):Z
- addAll(java.util.Collection):Z
- clear():V
- contains(java.lang.Object):Z
- containsAll(java.util.Collection):Z
- pa:isAncestor(java.lang.Object,java.lang.Object):Z
- isEmpty():Z
- iterator():java.util.Iterator
- remove(java.lang.Object):Z
- removeAll(java.util.Collection):Z
- retainAll(java.util.Collection):Z
- size():I
- toArray():java.lang.Object[]
- toArray(java.lang.Object[]):java.lang.Object[]
a:com.intellij.util.containers.FactoryMap
- java.util.Map
- clear():V
- f:containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- s:create(com.intellij.util.Function):java.util.Map
- pa:create(java.lang.Object):java.lang.Object
- p:createMap():java.util.Map
- s:createMap(com.intellij.util.Function,java.util.function.Supplier):java.util.Map
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- remove(java.lang.Object):java.lang.Object
- removeValue(java.lang.Object):Z
- size():I
- values():java.util.Collection
a:com.intellij.util.containers.FilteredTraverserBase
- java.lang.Iterable
- p:<init>(com.intellij.util.containers.FilteredTraverserBase$Meta):V
- f:bfsTraversal():com.intellij.util.containers.JBIterable
- f:biOrderDfsTraversal():com.intellij.util.containers.JBIterable
- f:cached():com.intellij.util.containers.FilteredTraverserBase
- f:expand(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:expandAndFilter(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:expandAndSkip(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:filter(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:filter(java.lang.Class):com.intellij.util.containers.JBIterable
- f:forceDisregard(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:forceIgnore(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:getRoot():java.lang.Object
- f:getRoots():java.lang.Iterable
- getTree():com.intellij.util.Function
- f:intercept(com.intellij.util.Function):com.intellij.util.containers.FilteredTraverserBase
- f:iterator():java.util.Iterator
- p:mapImpl(com.intellij.util.Function):com.intellij.util.containers.FilteredTraverserBase
- p:mapImpl(com.intellij.util.Function,com.intellij.util.Function):com.intellij.util.containers.FilteredTraverserBase
- pa:newInstance(com.intellij.util.containers.FilteredTraverserBase$Meta):com.intellij.util.containers.FilteredTraverserBase
- onRange(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:postOrderDfsTraversal():com.intellij.util.containers.JBIterable
- f:preOrderDfsTraversal():com.intellij.util.containers.JBIterable
- f:regard(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase
- f:reset():com.intellij.util.containers.FilteredTraverserBase
- f:toList():java.util.List
- f:toSet():java.util.Set
- f:tracingBfsTraversal():com.intellij.util.containers.JBIterable
- f:traverse():com.intellij.util.containers.JBIterable
- f:traverse(com.intellij.util.containers.TreeTraversal):com.intellij.util.containers.JBIterable
- f:unique():com.intellij.util.containers.FilteredTraverserBase
- f:unique(com.intellij.util.Function):com.intellij.util.containers.FilteredTraverserBase
- f:withRoot(java.lang.Object):com.intellij.util.containers.FilteredTraverserBase
- f:withRoots(java.lang.Iterable):com.intellij.util.containers.FilteredTraverserBase
- f:withRoots(java.lang.Object[]):com.intellij.util.containers.FilteredTraverserBase
- f:withTraversal(com.intellij.util.containers.TreeTraversal):com.intellij.util.containers.FilteredTraverserBase
a:com.intellij.util.containers.FilteredTraverserBase$EdgeFilter
- com.intellij.util.containers.JBIterable$SCond
- p:edgeSource:java.lang.Object
- <init>():V
pf:com.intellij.util.containers.FilteredTraverserBase$Meta
- s:create(com.intellij.util.Function):com.intellij.util.containers.FilteredTraverserBase$Meta
- expand(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase$Meta
- filter(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase$Meta
- forceDisregard(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase$Meta
- forceExpand(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase$Meta
- forceIgnore(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase$Meta
- interceptTraversal(com.intellij.util.Function):com.intellij.util.containers.FilteredTraverserBase$Meta
- regard(com.intellij.openapi.util.Condition):com.intellij.util.containers.FilteredTraverserBase$Meta
- reset():com.intellij.util.containers.FilteredTraverserBase$Meta
- withRoots(java.lang.Iterable):com.intellij.util.containers.FilteredTraverserBase$Meta
- withTraversal(com.intellij.util.containers.TreeTraversal):com.intellij.util.containers.FilteredTraverserBase$Meta
f:com.intellij.util.containers.FilteringIterator
- com.intellij.util.containers.PeekableIterator
- <init>(java.util.Iterator,com.intellij.openapi.util.Condition):V
- s:create(java.util.Iterator,java.util.function.Predicate):java.util.Iterator
- hasNext():Z
- s:instanceOf(java.lang.Class):com.intellij.util.containers.FilteringIterator$InstanceOf
- next():java.lang.Object
- peek():java.lang.Object
- remove():V
- s:skipNulls(java.util.Iterator):java.util.Iterator
f:com.intellij.util.containers.FilteringIterator$InstanceOf
- com.intellij.openapi.util.Condition
- <init>(java.lang.Class):V
- value(java.lang.Object):Z
f:com.intellij.util.containers.FixedHashMap
- java.util.LinkedHashMap
- <init>(I):V
- <init>(I,I,F,Z):V
a:com.intellij.util.containers.FlatteningIterator
- java.util.Iterator
- <init>(java.util.Iterator):V
- pa:createValueIterator(java.lang.Object):java.util.Iterator
- hasNext():Z
- next():java.lang.Object
- remove():V
f:com.intellij.util.containers.HashSetQueue
- java.util.AbstractCollection
- java.util.Queue
- <init>():V
- add(java.lang.Object):Z
- contains(java.lang.Object):Z
- element():java.lang.Object
- find(java.lang.Object):java.lang.Object
- iterator():com.intellij.util.containers.HashSetQueue$PositionalIterator
- offer(java.lang.Object):Z
- peek():java.lang.Object
- poll():java.lang.Object
- remove():java.lang.Object
- remove(java.lang.Object):Z
- size():I
com.intellij.util.containers.HashSetQueue$PositionalIterator
- java.util.Iterator
- a:position():com.intellij.util.containers.HashSetQueue$PositionalIterator$IteratorPosition
com.intellij.util.containers.HashSetQueue$PositionalIterator$IteratorPosition
- java.lang.Comparable
- a:next():com.intellij.util.containers.HashSetQueue$PositionalIterator$IteratorPosition
- a:peek():java.lang.Object
a:com.intellij.util.containers.ImmutableList
- java.util.AbstractCollection
- java.util.List
- <init>():V
- add(I,java.lang.Object):V
- addAll(I,java.util.Collection):Z
- equals(java.lang.Object):Z
- hashCode():I
- indexOf(java.lang.Object):I
- iterator():java.util.Iterator
- lastIndexOf(java.lang.Object):I
- listIterator():java.util.ListIterator
- listIterator(I):java.util.ListIterator
- remove(I):java.lang.Object
- set(I,java.lang.Object):java.lang.Object
- subList(I,I):com.intellij.util.containers.ImmutableList
a:com.intellij.util.containers.ImmutableUserMap
- sf:EMPTY:com.intellij.util.containers.ImmutableUserMap
- a:get(com.intellij.openapi.util.Key):java.lang.Object
- f:put(com.intellij.openapi.util.Key,java.lang.Object):com.intellij.util.containers.ImmutableUserMap
f:com.intellij.util.containers.IntArrayList
- java.lang.Cloneable
- <init>():V
- <init>(I):V
- add(I):V
- add(I,I):V
- add(I[]):V
- clear():V
- clone():java.lang.Object
- contains(I):Z
- copyRange(I,I,I):V
- ensureCapacity(I):V
- fill(I,I,I):V
- get(I):I
- getQuick(I):I
- indexOf(I):I
- indexOf(I,I,I):I
- isEmpty():Z
- lastIndexOf(I):I
- remove(I):I
- removeRange(I,I):V
- set(I,I):I
- setQuick(I,I):V
- size():I
- sort():V
- toArray():I[]
- toArray(I,I):I[]
- toArray(I[]):I[]
- trimToSize():V
f:com.intellij.util.containers.IntIntHashMap
- it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap
- <init>():V
- <init>(I):V
- <init>(I,I):V
f:com.intellij.util.containers.IntObjectCache
- java.lang.Iterable
- sf:MIN_SIZE:I
- <init>():V
- <init>(I):V
- addDeletedPairsListener(com.intellij.util.containers.IntObjectCache$DeletedPairsListener):V
- cacheObject(I,java.lang.Object):V
- containsKey(I):Z
- count():I
- get(I):java.lang.Object
- hitRate():D
- isCached(I):Z
- isEmpty():Z
- iterator():java.util.Iterator
- put(I,java.lang.Object):java.lang.Object
- remove(I):V
- removeAll():V
- removeDeletedPairsListener(com.intellij.util.containers.IntObjectCache$DeletedPairsListener):V
- resize(I):V
- size():I
- tryKey(I):java.lang.Object
com.intellij.util.containers.IntObjectCache$DeletedPairsListener
- java.util.EventListener
- a:objectRemoved(I,java.lang.Object):V
com.intellij.util.containers.IntObjectMap
- a:clear():V
- a:containsKey(I):Z
- a:containsValue(java.lang.Object):Z
- a:entrySet():java.util.Set
- a:get(I):java.lang.Object
- a:isEmpty():Z
- a:keys():I[]
- a:put(I,java.lang.Object):java.lang.Object
- a:remove(I):java.lang.Object
- a:size():I
- a:values():java.util.Collection
com.intellij.util.containers.IntObjectMap$Entry
- a:getKey():I
- a:getValue():java.lang.Object
c:com.intellij.util.containers.IntStack
- java.lang.Cloneable
- <init>():V
- <init>(I):V
- clear():V
- clone():com.intellij.util.containers.IntStack
- empty():Z
- equals(java.lang.Object):Z
- get(I):I
- peek():I
- pop():I
- push(I):V
- size():I
com.intellij.util.containers.InternalIterator
- a:visit(java.lang.Object):Z
f:com.intellij.util.containers.InternalIterator$Collector
- com.intellij.util.containers.InternalIterator
- <init>(java.util.Collection):V
- s:create(java.util.Collection):com.intellij.util.containers.InternalIterator
- visit(java.lang.Object):Z
f:com.intellij.util.containers.InternalIterator$Filtering
- com.intellij.util.containers.InternalIterator
- <init>(com.intellij.util.containers.InternalIterator,com.intellij.openapi.util.Condition):V
- s:create(com.intellij.util.containers.InternalIterator,com.intellij.openapi.util.Condition):com.intellij.util.containers.InternalIterator
- s:createInstanceOf(com.intellij.util.containers.InternalIterator,com.intellij.util.containers.FilteringIterator$InstanceOf):com.intellij.util.containers.InternalIterator
- s:createInstanceOf(com.intellij.util.containers.InternalIterator,java.lang.Class):com.intellij.util.containers.InternalIterator
- visit(java.lang.Object):Z
a:com.intellij.util.containers.JBIterable
- java.lang.Iterable
- p:<init>():V
- f:addAllTo(java.util.Collection):java.util.Collection
- f:append(java.lang.Iterable):com.intellij.util.containers.JBIterable
- f:append(java.lang.Iterable,com.intellij.util.Function):com.intellij.util.containers.JBIterable
- f:append(java.lang.Object):com.intellij.util.containers.JBIterable
- f:append(java.lang.Object[]):com.intellij.util.containers.JBIterable
- f:collect():com.intellij.util.containers.JBIterable
- f:collect(java.util.Collection):com.intellij.util.containers.JBIterable
- f:consumeEach(com.intellij.util.Consumer):V
- f:contains(java.lang.Object):Z
- s:create(java.util.function.Supplier):com.intellij.util.containers.JBIterable
- s:empty():com.intellij.util.containers.JBIterable
- f:filter(com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterable
- f:filter(java.lang.Class):com.intellij.util.containers.JBIterable
- f:filterMap(com.intellij.util.Function):com.intellij.util.containers.JBIterable
- f:filterNotNull():com.intellij.util.containers.JBIterable
- f:find(com.intellij.openapi.util.Condition):java.lang.Object
- f:first():java.lang.Object
- f:flatMap(com.intellij.util.Function):com.intellij.util.containers.JBIterable
- flatten(com.intellij.util.Function):com.intellij.util.containers.JBIterable
- s:from(java.lang.Iterable):com.intellij.util.containers.JBIterable
- s:generate(java.lang.Object,com.intellij.util.Function):com.intellij.util.containers.JBIterable
- s:generate(java.lang.Object,java.lang.Object,com.intellij.util.PairFunction):com.intellij.util.containers.JBIterable
- f:get(I):java.lang.Object
- f:indexOf(com.intellij.openapi.util.Condition):I
- f:intercept(com.intellij.util.Function):com.intellij.util.containers.JBIterable
- f:isEmpty():Z
- f:isNotEmpty():Z
- f:join(java.lang.Object):com.intellij.util.containers.JBIterable
- f:last():java.lang.Object
- f:map(com.intellij.util.Function):com.intellij.util.containers.JBIterable
- s:of(java.lang.Object):com.intellij.util.containers.JBIterable
- s:of(java.lang.Object[]):com.intellij.util.containers.JBIterable
- s:once(java.util.Iterator):com.intellij.util.containers.JBIterable
- f:processEach(com.intellij.util.Processor):Z
- f:reduce(com.intellij.util.PairFunction):java.lang.Object
- f:reduce(java.lang.Object,com.intellij.util.PairFunction):java.lang.Object
- f:repeat(I):com.intellij.util.containers.JBIterable
- f:single():java.lang.Object
- f:size():I
- f:skip(I):com.intellij.util.containers.JBIterable
- f:skipWhile(com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterable
- f:sort(java.util.Comparator):com.intellij.util.containers.JBIterable
- f:split(I):com.intellij.util.containers.JBIterable
- f:split(I,Z):com.intellij.util.containers.JBIterable
- f:split(com.intellij.util.containers.JBIterable$Split,com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterable
- f:take(I):com.intellij.util.containers.JBIterable
- f:takeWhile(com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterable
- f:toArray(java.lang.Object[]):java.lang.Object[]
- f:toList():java.util.List
- f:toMap(com.intellij.util.containers.Convertor):java.util.Map
- f:toMap(com.intellij.util.containers.Convertor,com.intellij.util.containers.Convertor):java.util.Map
- f:toReverseMap(com.intellij.util.containers.Convertor):java.util.Map
- f:toSet():java.util.Set
- f:toStream():java.util.stream.Stream
- f:transform(com.intellij.util.Function):com.intellij.util.containers.JBIterable
- typedIterator():java.util.Iterator
- f:unique():com.intellij.util.containers.JBIterable
- f:unique(com.intellij.util.Function):com.intellij.util.containers.JBIterable
a:com.intellij.util.containers.JBIterable$SCond
- com.intellij.util.containers.JBIterable$Stateful
- com.intellij.openapi.util.Condition
- <init>():V
a:com.intellij.util.containers.JBIterable$SFun
- com.intellij.util.containers.JBIterable$Stateful
- com.intellij.util.Function
- <init>():V
e:com.intellij.util.containers.JBIterable$Split
- java.lang.Enum
- sf:AFTER:com.intellij.util.containers.JBIterable$Split
- sf:AROUND:com.intellij.util.containers.JBIterable$Split
- sf:BEFORE:com.intellij.util.containers.JBIterable$Split
- sf:GROUP:com.intellij.util.containers.JBIterable$Split
- sf:OFF:com.intellij.util.containers.JBIterable$Split
- s:valueOf(java.lang.String):com.intellij.util.containers.JBIterable$Split
- s:values():com.intellij.util.containers.JBIterable$Split[]
a:com.intellij.util.containers.JBIterable$Stateful
- java.lang.Cloneable
- <init>():V
- clone():com.intellij.util.containers.JBIterable$Stateful
a:com.intellij.util.containers.JBIterator
- java.util.Iterator
- <init>():V
- f:advance():Z
- f:current():java.lang.Object
- p:currentChanged():V
- s:cursor(com.intellij.util.containers.JBIterator):com.intellij.util.containers.JBIterable
- f:filter(com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterator
- f:filterMap(com.intellij.util.Function):com.intellij.util.containers.JBIterator
- s:from(java.util.Iterator):com.intellij.util.containers.JBIterator
- f:getTransformations():com.intellij.util.containers.JBIterable
- f:hasNext():Z
- f:map(com.intellij.util.Function):com.intellij.util.containers.JBIterator
- f:next():java.lang.Object
- pa:nextImpl():java.lang.Object
- f:remove():V
- pf:skip():java.lang.Object
- f:skip(I):com.intellij.util.containers.JBIterator
- f:skipWhile(com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterator
- pf:stop():java.lang.Object
- f:take(I):com.intellij.util.containers.JBIterator
- f:takeWhile(com.intellij.openapi.util.Condition):com.intellij.util.containers.JBIterator
- f:toList():java.util.List
c:com.intellij.util.containers.JBTreeTraverser
- com.intellij.util.containers.FilteredTraverserBase
- <init>(com.intellij.util.Function):V
- p:<init>(com.intellij.util.containers.FilteredTraverserBase$Meta):V
- s:from(com.intellij.util.Function):com.intellij.util.containers.JBTreeTraverser
- f:map(com.intellij.util.Function):com.intellij.util.containers.JBTreeTraverser
- f:map(com.intellij.util.Function,com.intellij.util.Function):com.intellij.util.containers.JBTreeTraverser
- p:newInstance(com.intellij.util.containers.FilteredTraverserBase$Meta):com.intellij.util.containers.JBTreeTraverser
- s:of(com.intellij.util.Function):com.intellij.util.containers.JBTreeTraverser
c:com.intellij.util.containers.LimitedPool
- <init>(I,com.intellij.util.containers.LimitedPool$ObjectFactory):V
- alloc():java.lang.Object
- recycle(java.lang.Object):V
com.intellij.util.containers.LimitedPool$ObjectFactory
- cleanup(java.lang.Object):V
- a:create():java.lang.Object
f:com.intellij.util.containers.LimitedPool$Sync
- com.intellij.util.containers.LimitedPool
- <init>(I,com.intellij.util.containers.LimitedPool$ObjectFactory):V
- alloc():java.lang.Object
- recycle(java.lang.Object):V
f:com.intellij.util.containers.LinkedListWithSum
- java.util.AbstractSequentialList
- java.util.List
- <init>(java.util.function.ToIntFunction):V
- getSum():J
- listIterator(I):com.intellij.util.containers.LinkedListWithSum$ListIterator
- size():I
f:com.intellij.util.containers.LinkedListWithSum$ListIterator
- java.util.ListIterator
- add(java.lang.Object):V
- getValue():I
- hasNext():Z
- hasPrevious():Z
- next():java.lang.Object
- nextIndex():I
- previous():java.lang.Object
- previousIndex():I
- remove():V
- set(java.lang.Object):V
c:com.intellij.util.containers.LinkedMultiMap
- com.intellij.util.containers.MultiMap
- <init>():V
f:com.intellij.util.containers.LongStack
- <init>():V
- <init>(I):V
- clear():V
- empty():Z
- equals(java.lang.Object):Z
- peek():J
- pop():J
- push(J):V
c:com.intellij.util.containers.MostlySingularMultiMap
- java.io.Serializable
- pf:myMap:java.util.Map
- <init>():V
- <init>(java.util.Map):V
- add(java.lang.Object,java.lang.Object):V
- addAll(com.intellij.util.containers.MostlySingularMultiMap):V
- clear():V
- compact():V
- f:containsKey(java.lang.Object):Z
- s:createValueList():java.util.List
- s:emptyMap():com.intellij.util.containers.MostlySingularMultiMap
- f:get(java.lang.Object):java.lang.Iterable
- s:getValueListClass():java.lang.Class
- f:isEmpty():Z
- f:keySet():java.util.Set
- processAllValues(com.intellij.util.Processor):Z
- f:processForKey(java.lang.Object,com.intellij.util.Processor):Z
- pf:rawValueToCollection(java.lang.Object):java.util.List
- remove(java.lang.Object,java.lang.Object):Z
- removeAllValues(java.lang.Object):Z
- f:size():I
- f:valuesForKey(java.lang.Object):I
pf:com.intellij.util.containers.MostlySingularMultiMap$ValueList
- java.util.ArrayList
- <init>():V
- <init>(I):V
- <init>(java.util.Collection):V
Fc:com.intellij.util.containers.MultiMap
- java.io.Serializable
- <init>():V
- <init>(I):V
- <init>(I,F):V
- <init>(com.intellij.util.containers.MultiMap):V
- <init>(java.util.Map):V
- f:clear():V
- f:containsKey(java.lang.Object):Z
- f:containsScalarValue(java.lang.Object):Z
- copy():com.intellij.util.containers.MultiMap
- s:create():com.intellij.util.containers.MultiMap
- s:create(I,F):com.intellij.util.containers.MultiMap
- s:createConcurrent():com.intellij.util.containers.MultiMap
- s:createConcurrentSet():com.intellij.util.containers.MultiMap
- s:createIdentity():com.intellij.util.containers.MultiMap
- s:createLinked():com.intellij.util.containers.MultiMap
- s:createLinkedSet():com.intellij.util.containers.MultiMap
- s:createOrderedSet():com.intellij.util.containers.MultiMap
- s:createSet():com.intellij.util.containers.MultiMap
- s:createSet(java.util.Map):com.intellij.util.containers.MultiMap
- s:createWeakKey():com.intellij.util.containers.MultiMap
- s:empty():com.intellij.util.containers.MultiMap
- f:entrySet():java.util.Set
- f:equals(java.lang.Object):Z
- f:freezeValues():java.util.Map
- f:get(java.lang.Object):java.util.Collection
- f:getModifiable(java.lang.Object):java.util.Collection
- f:getOrPut(java.lang.Object,java.util.function.Supplier):java.util.Collection
- f:hashCode():I
- f:isEmpty():Z
- f:keySet():java.util.Set
- f:put(java.lang.Object,java.util.Collection):V
- f:putAllValues(com.intellij.util.containers.MultiMap):V
- f:putAllValues(java.util.Map):V
- f:putValue(java.lang.Object,java.lang.Object):V
- f:putValues(java.lang.Object,java.util.Collection):V
- f:remove(java.lang.Object):java.util.Collection
- remove(java.lang.Object,java.lang.Object):Z
- f:removeValue(java.lang.Object,java.lang.Object):V
- f:size():I
- f:toHashMap():java.util.Map
- f:values():java.util.Collection
f:com.intellij.util.containers.NotNullList
- java.util.ArrayList
- <init>():V
- <init>(I):V
- <init>(java.util.Collection):V
- add(I,java.lang.Object):V
- add(java.lang.Object):Z
- addAll(I,java.util.Collection):Z
- addAll(java.util.Collection):Z
- get(I):java.lang.Object
- set(I,java.lang.Object):java.lang.Object
- subList(I,I):java.util.List
com.intellij.util.containers.ObjectIntMap
- a:clear():V
- a:containsKey(java.lang.Object):Z
- a:containsValue(I):Z
- a:entries():java.lang.Iterable
- a:get(java.lang.Object):I
- a:getOrDefault(java.lang.Object,I):I
- a:isEmpty():Z
- a:keySet():java.util.Set
- a:put(java.lang.Object,I):I
- a:remove(java.lang.Object):I
- a:size():I
- a:values():I[]
com.intellij.util.containers.ObjectIntMap$Entry
- a:getKey():java.lang.Object
- a:getValue():I
c:com.intellij.util.containers.OrderedSet
- java.util.ArrayList
- java.util.RandomAccess
- java.util.Set
- <init>():V
- <init>(I):V
- <init>(com.intellij.util.containers.HashingStrategy):V
- <init>(java.util.Collection):V
- add(I,java.lang.Object):V
- add(java.lang.Object):Z
- addAll(I,java.util.Collection):Z
- addAll(java.util.Collection):Z
- clear():V
- contains(java.lang.Object):Z
- indexOf(java.lang.Object):I
- lastIndexOf(java.lang.Object):I
- remove(I):java.lang.Object
- remove(java.lang.Object):Z
- removeAll(java.util.Collection):Z
- retainAll(java.util.Collection):Z
- set(I,java.lang.Object):java.lang.Object
- subList(I,I):java.util.List
f:com.intellij.util.containers.PathInterner
- <init>():V
f:com.intellij.util.containers.PathInterner$PathEnumerator
- com.intellij.util.containers.Interner
- <init>():V
- addPath(java.lang.CharSequence):I
- clear():V
- containsPath(java.lang.CharSequence):Z
- getAllPaths():java.util.List
- getValues():java.util.Set
- intern(java.lang.CharSequence):java.lang.CharSequence
- retrievePath(I):java.lang.CharSequence
com.intellij.util.containers.Predicate
- java.util.function.Predicate
- a:apply(java.lang.Object):Z
- test(java.lang.Object):Z
c:com.intellij.util.containers.SLRUMap
- <init>(I,I):V
- <init>(I,I,com.intellij.util.containers.hash.EqualityPolicy):V
- clear():V
- dumpStats():java.lang.String
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- iterateKeys(java.util.function.Consumer):V
- p:onDropFromCache(java.lang.Object,java.lang.Object):V
- put(java.lang.Object,java.lang.Object):V
- p:putToProtectedQueue(java.lang.Object,java.lang.Object):V
- remove(java.lang.Object):Z
- values():java.util.Set
com.intellij.util.containers.ShareableKey
- a:getStableCopy():com.intellij.util.containers.ShareableKey
f:com.intellij.util.containers.SimpleEntry
- com.intellij.util.containers.IntObjectMap$Entry
- <init>(I,java.lang.Object):V
- getKey():I
- getValue():java.lang.Object
f:com.intellij.util.containers.SingletonIterator
- com.intellij.util.containers.SingletonIteratorBase
- <init>(java.lang.Object):V
- remove():V
a:com.intellij.util.containers.SingletonIteratorBase
- java.util.Iterator
- <init>():V
- pa:checkCoModification():V
- pa:getElement():java.lang.Object
- f:hasNext():Z
- f:next():java.lang.Object
f:com.intellij.util.containers.SmartHashSet
- java.util.HashSet
- <init>():V
- <init>(I):V
- <init>(I,F):V
- <init>(java.util.Collection):V
- add(java.lang.Object):Z
- clear():V
- contains(java.lang.Object):Z
- equals(java.lang.Object):Z
- forEach(java.util.function.Consumer):V
- hashCode():I
- isEmpty():Z
- iterator():java.util.Iterator
- remove(java.lang.Object):Z
- size():I
- spliterator():java.util.Spliterator
- stream():java.util.stream.Stream
- toArray():java.lang.Object[]
- toArray(java.lang.Object[]):java.lang.Object[]
a:com.intellij.util.containers.SoftFactoryMap
- <init>():V
- clear():V
- pa:create(java.lang.Object):java.lang.Object
- f:get(java.lang.Object):java.lang.Object
f:com.intellij.util.containers.SortedList
- java.util.AbstractList
- <init>(java.util.Comparator):V
- add(I,java.lang.Object):V
- add(java.lang.Object):Z
- clear():V
- get(I):java.lang.Object
- getComparator():java.util.Comparator
- isEmpty():Z
- remove(I):java.lang.Object
- remove(java.lang.Object):Z
- size():I
f:com.intellij.util.containers.ThreadLocalRandom
- <init>():V
- s:advanceProbe(I):I
- s:getProbe():I
- s:localInit():V
c:com.intellij.util.containers.TransferToEDTQueue
- <init>(java.lang.String,com.intellij.util.Processor,com.intellij.openapi.util.Condition,I):V
- s:createRunnableMerger(java.lang.String):com.intellij.util.containers.TransferToEDTQueue
- s:createRunnableMerger(java.lang.String,I):com.intellij.util.containers.TransferToEDTQueue
- drain():V
- dump():java.util.Collection
- offer(java.lang.Object):Z
- offerIfAbsent(java.lang.Object):Z
- p:schedule(java.lang.Runnable):V
- size():I
- stop():V
e:com.intellij.util.containers.TreeNodeProcessingResult
- java.lang.Enum
- sf:CONTINUE:com.intellij.util.containers.TreeNodeProcessingResult
- sf:SKIP_CHILDREN:com.intellij.util.containers.TreeNodeProcessingResult
- sf:SKIP_TO_PARENT:com.intellij.util.containers.TreeNodeProcessingResult
- sf:STOP:com.intellij.util.containers.TreeNodeProcessingResult
- s:getEntries():kotlin.enums.EnumEntries
- s:valueOf(java.lang.String):com.intellij.util.containers.TreeNodeProcessingResult
- s:values():com.intellij.util.containers.TreeNodeProcessingResult[]
a:com.intellij.util.containers.TreeTraversal
- sf:BI_ORDER_DFS:com.intellij.util.containers.TreeTraversal
- sf:INTERLEAVED_DFS:com.intellij.util.containers.TreeTraversal
- sf:LEAVES_BFS:com.intellij.util.containers.TreeTraversal
- sf:LEAVES_DFS:com.intellij.util.containers.TreeTraversal
- sf:PLAIN_BFS:com.intellij.util.containers.TreeTraversal
- sf:POST_ORDER_DFS:com.intellij.util.containers.TreeTraversal
- sf:PRE_ORDER_DFS:com.intellij.util.containers.TreeTraversal
- sf:TRACING_BFS:com.intellij.util.containers.TreeTraversal
- p:<init>(java.lang.String):V
- s:GUIDED_TRAVERSAL(com.intellij.util.containers.TreeTraversal$GuidedIt$Guide):com.intellij.util.containers.TreeTraversal
- f:cached(java.util.Map):com.intellij.util.containers.TreeTraversal
- a:createIterator(java.lang.Iterable,com.intellij.util.Function):com.intellij.util.containers.TreeTraversal$It
- f:intercept(java.lang.String,com.intellij.util.containers.TreeTraversal$TraversalInterceptor):com.intellij.util.containers.TreeTraversal
- f:onRange(com.intellij.openapi.util.Condition):com.intellij.util.containers.TreeTraversal
- f:traversal(com.intellij.util.Function):com.intellij.util.Function
- f:traversal(java.lang.Iterable,com.intellij.util.Function):com.intellij.util.containers.JBIterable
- f:traversal(java.lang.Object,com.intellij.util.Function):com.intellij.util.containers.JBIterable
- f:unique():com.intellij.util.containers.TreeTraversal
- f:unique(com.intellij.util.Function):com.intellij.util.containers.TreeTraversal
a:com.intellij.util.containers.TreeTraversal$GuidedIt
- com.intellij.util.containers.TreeTraversal$It
- curChild:java.lang.Object
- curChildren:java.lang.Iterable
- curNoChildren:Z
- curParent:java.lang.Object
- p:<init>(com.intellij.util.Function):V
- a:queueLast(java.lang.Object):com.intellij.util.containers.TreeTraversal$GuidedIt
- a:queueNext(java.lang.Object):com.intellij.util.containers.TreeTraversal$GuidedIt
- a:result(java.lang.Object):com.intellij.util.containers.TreeTraversal$GuidedIt
com.intellij.util.containers.TreeTraversal$GuidedIt$Guide
- a:guide(com.intellij.util.containers.TreeTraversal$GuidedIt):V
a:com.intellij.util.containers.TreeTraversal$It
- com.intellij.util.containers.JBIterator
- pf:tree:com.intellij.util.Function
- p:<init>(com.intellij.util.Function):V
a:com.intellij.util.containers.TreeTraversal$TracingIt
- com.intellij.util.containers.TreeTraversal$It
- p:<init>(com.intellij.util.Function):V
- p:_transform(com.intellij.util.containers.JBIterable):com.intellij.util.containers.JBIterable
- p:_transform(java.lang.Object):java.lang.Object
- backtrace():com.intellij.util.containers.JBIterable
- isDescending():Z
- parent():java.lang.Object
f:com.intellij.util.containers.TreeTraversal$TraversalArgs
- f:roots:java.lang.Iterable
- f:tree:com.intellij.util.Function
- <init>(java.lang.Iterable,com.intellij.util.Function):V
com.intellij.util.containers.TreeTraversal$TraversalInterceptor
- s:compose(com.intellij.util.containers.TreeTraversal$TraversalInterceptor,com.intellij.util.containers.TreeTraversal$TraversalInterceptor):com.intellij.util.containers.TreeTraversal$TraversalInterceptor
- a:intercept(com.intellij.util.containers.TreeTraversal$TraversalArgs):com.intellij.util.containers.TreeTraversal$TraversalArgs
f:com.intellij.util.containers.UnmodifiableHashMap
- java.util.Map
- clear():V
- containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- s:empty():com.intellij.util.containers.UnmodifiableHashMap
- s:empty(com.intellij.util.containers.HashingStrategy):com.intellij.util.containers.UnmodifiableHashMap
- entrySet():java.util.Set
- equals(java.lang.Object):Z
- forEach(java.util.function.BiConsumer):V
- s:fromMap(com.intellij.util.containers.HashingStrategy,java.util.Map):com.intellij.util.containers.UnmodifiableHashMap
- s:fromMap(java.util.Map):com.intellij.util.containers.UnmodifiableHashMap
- get(java.lang.Object):java.lang.Object
- getOrDefault(java.lang.Object,java.lang.Object):java.lang.Object
- hashCode():I
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- remove(java.lang.Object):java.lang.Object
- size():I
- values():java.util.Collection
- with(java.lang.Object,java.lang.Object):com.intellij.util.containers.UnmodifiableHashMap
- withAll(java.util.Map):com.intellij.util.containers.UnmodifiableHashMap
- without(java.lang.Object):com.intellij.util.containers.UnmodifiableHashMap
c:com.intellij.util.containers.UnsafeWeakList
- java.util.AbstractCollection
- <init>():V
- <init>(I):V
- add(java.lang.Object):Z
- addAll(java.util.Collection):Z
- addIfAbsent(java.lang.Object):Z
- clear():V
- contains(java.lang.Object):Z
- containsAll(com.intellij.util.containers.UnsafeWeakList,java.util.function.Predicate):Z
- isEmpty():Z
- iterator():java.util.Iterator
- remove(java.lang.Object):Z
- removeAll(java.util.Collection):Z
- size():I
- toStrongList():java.util.List
f:com.intellij.util.containers.UnsignedShortArrayList
- java.lang.Cloneable
- <init>():V
- <init>(I):V
- add(I):V
- add(I,I):V
- clear():V
- clone():java.lang.Object
- contains(I):Z
- copyRange(I,I,I):V
- ensureCapacity(I):V
- fill(I,I,I):V
- get(I):I
- getQuick(I):I
- indexOf(I):I
- indexOf(I,I,I):I
- isEmpty():Z
- lastIndexOf(I):I
- remove(I):I
- removeRange(I,I):V
- set(I,I):I
- setQuick(I,I):V
- size():I
- toArray():I[]
- toArray(I,I):I[]
- toArray(I[]):I[]
- trimToSize():V
f:com.intellij.util.containers.UtilKt
- sf:addAllIfNotNull(java.util.List,java.lang.Object[]):V
- sf:addIfNotNull(java.util.List,java.lang.Object):V
- sf:asJBIterable(java.lang.Iterable):com.intellij.util.containers.JBIterable
- sf:asJBIterable(java.lang.Object[]):com.intellij.util.containers.JBIterable
- sf:concat(java.util.stream.Stream[]):java.util.stream.Stream
- sf:filterSmartMutable(java.util.Collection,kotlin.jvm.functions.Function1):java.util.List
- sf:forEachGuaranteed(java.util.Collection,kotlin.jvm.functions.Function1):V
- sf:forEachGuaranteed(java.util.Iterator,kotlin.jvm.functions.Function1):V
- sf:forEachGuaranteed(java.lang.Object[],kotlin.jvm.functions.Function1):V
- sf:forEachLoggingErrors(java.util.Collection,com.intellij.openapi.diagnostic.Logger,kotlin.jvm.functions.Function1):V
- sf:generateRecursiveSequence(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1):kotlin.sequences.Sequence
- sf:getIfSingle(java.util.stream.Stream):java.lang.Object
- sf:headTail(java.util.List):kotlin.Pair
- sf:headTailOrNull(java.util.List):kotlin.Pair
- sf:init(java.util.List):java.util.List
- sf:isEmpty(java.util.stream.Stream):Z
- sf:isNullOrEmpty(java.util.Collection):Z
- sf:mapInPlace(java.lang.Object[],kotlin.jvm.functions.Function1):java.lang.Object[]
- sf:mapNotNullLoggingErrors(java.util.Collection,com.intellij.openapi.diagnostic.Logger,kotlin.jvm.functions.Function1):java.util.List
- sf:mapSmart(java.util.Collection,kotlin.jvm.functions.Function1):java.util.List
- sf:mapSmart(java.lang.Object[],kotlin.jvm.functions.Function1):java.util.List
- sf:mapSmartNotNull(java.util.Collection,kotlin.jvm.functions.Function1):java.util.List
- sf:mapSmartSet(java.util.Collection,kotlin.jvm.functions.Function1):java.util.Set
- sf:minimalElements(java.util.Collection,java.util.Comparator):java.util.Collection
- sf:notNullize(java.util.stream.Stream):java.util.stream.Stream
- sf:nullize(java.util.List):java.util.List
- sf:nullize(java.lang.Object[]):java.lang.Object[]
- sf:orNull(java.util.Optional):java.lang.Object
- sf:putValue(java.util.Map,java.lang.Object,java.lang.Object):V
- sf:remove(java.util.Map,java.lang.Object,java.lang.Object):V
- sf:reverse(java.util.Map):java.util.Map
- sf:sequenceOfNotNull(java.lang.Object):kotlin.sequences.Sequence
- sf:stopAfter(java.util.Iterator,kotlin.jvm.functions.Function1):java.util.Iterator
- sf:stream(java.lang.Object[]):java.util.stream.Stream
- sf:tail(java.util.List):java.util.List
- sf:tailOrEmpty(java.util.List):java.util.List
- sf:toArray(java.util.Collection,java.lang.Object[]):java.lang.Object[]
- sf:toMultiMap(java.lang.Iterable):com.intellij.util.containers.MultiMap
- sf:toMultiMap(java.lang.Iterable,com.intellij.util.containers.MultiMap):com.intellij.util.containers.MultiMap
- sf:toMutableSmartList(java.util.List):java.util.List
f:com.intellij.util.containers.WeakList
- com.intellij.util.containers.UnsafeWeakList
- <init>():V
- <init>(I):V
- add(java.lang.Object):Z
- addAll(java.util.Collection):Z
- addIfAbsent(java.lang.Object):Z
- clear():V
- contains(java.lang.Object):Z
- copyAndClear():java.util.List
- isEmpty():Z
- iterator():java.util.Iterator
- remove(java.lang.Object):Z
- removeAll(java.util.Collection):Z
- toStrongList():java.util.List
f:com.intellij.util.containers.WeakValueHashMap
- java.util.Map
- <init>():V
- clear():V
- containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- remove(java.lang.Object):java.lang.Object
- size():I
- values():java.util.Collection
com.intellij.util.containers.hash.EqualityPolicy
- sf:CANONICAL:com.intellij.util.containers.hash.EqualityPolicy
- sf:IDENTITY:com.intellij.util.containers.hash.EqualityPolicy
- a:getHashCode(java.lang.Object):I
- a:isEqual(java.lang.Object,java.lang.Object):Z
c:com.intellij.util.containers.hash.LinkedHashMap
- java.util.AbstractMap
- java.util.Map
- <init>():V
- <init>(I,F,com.intellij.util.containers.hash.EqualityPolicy,Z):V
- <init>(I,Z):V
- <init>(com.intellij.util.containers.hash.EqualityPolicy):V
- clear():V
- containsKey(java.lang.Object):Z
- doRemoveEldestEntry():V
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- getFirstKey():java.lang.Object
- getLastKey():java.lang.Object
- getLastValue():java.lang.Object
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- remove(java.lang.Object):java.lang.Object
- p:removeEldestEntry(java.util.Map$Entry):Z
- p:removeEldestEntry(java.util.Map$Entry,java.lang.Object,java.lang.Object):Z
- size():I
- values():java.util.Collection
f:com.intellij.util.diff.DiffTree
- s:diff(com.intellij.util.diff.FlyweightCapableTreeStructure,com.intellij.util.diff.FlyweightCapableTreeStructure,com.intellij.util.diff.ShallowNodeComparator,com.intellij.util.diff.DiffTreeChangeBuilder,java.lang.CharSequence):V
com.intellij.util.diff.DiffTreeChangeBuilder
- a:nodeDeleted(java.lang.Object,java.lang.Object):V
- a:nodeInserted(java.lang.Object,java.lang.Object,I):V
- a:nodeReplaced(java.lang.Object,java.lang.Object):V
com.intellij.util.diff.FlyweightCapableTreeStructure
- a:disposeChildren(java.lang.Object[],I):V
- a:getChildren(java.lang.Object,com.intellij.openapi.util.Ref):I
- a:getEndOffset(java.lang.Object):I
- a:getParent(java.lang.Object):java.lang.Object
- a:getRoot():java.lang.Object
- a:getStartOffset(java.lang.Object):I
- a:toString(java.lang.Object):java.lang.CharSequence
com.intellij.util.diff.ShallowNodeComparator
- a:deepEqual(java.lang.Object,java.lang.Object):com.intellij.util.ThreeState
- a:hashCodesEqual(java.lang.Object,java.lang.Object):Z
- a:typesEqual(java.lang.Object,java.lang.Object):Z
f:com.intellij.util.execution.ParametersListUtil
- sf:COLON_LINE_JOINER:com.intellij.util.Function
- sf:COLON_LINE_PARSER:com.intellij.util.Function
- sf:DEFAULT_LINE_JOINER:com.intellij.util.Function
- sf:DEFAULT_LINE_PARSER:com.intellij.util.Function
- <init>():V
- s:escape(java.lang.CharSequence):java.lang.String
- s:join(java.util.List):java.lang.String
- s:join(java.util.List,com.intellij.util.Function):java.lang.String
- s:join(java.lang.String[]):java.lang.String
- s:parse(java.lang.String):java.util.List
- s:parse(java.lang.String,Z):java.util.List
- s:parse(java.lang.String,Z,Z):java.util.List
- s:parse(java.lang.String,Z,Z,Z):java.util.List
- s:parseToArray(java.lang.String):java.lang.String[]
com.intellij.util.fmap.FMap
- s:empty():com.intellij.util.fmap.FMap
- a:get(java.lang.Object):java.lang.Object
- a:isEmpty():Z
- a:keys():java.util.Collection
- a:minus(java.lang.Object):com.intellij.util.fmap.FMap
- s:of(java.lang.Object,java.lang.Object):com.intellij.util.fmap.FMap
- s:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):com.intellij.util.fmap.FMap
- a:plus(java.lang.Object,java.lang.Object):com.intellij.util.fmap.FMap
- a:size():I
- a:toMap():java.util.Map
f:com.intellij.util.graph.CachingSemiGraph
- com.intellij.util.graph.InboundSemiGraph
- s:cache(com.intellij.util.graph.InboundSemiGraph):com.intellij.util.graph.InboundSemiGraph
- getIn(java.lang.Object):java.util.Iterator
- getNodes():java.util.Collection
f:com.intellij.util.graph.DFSTBuilder
- <init>(com.intellij.util.graph.OutboundSemiGraph):V
- <init>(com.intellij.util.graph.OutboundSemiGraph,java.lang.Object):V
- comparator():java.util.Comparator
- comparator(Z):java.util.Comparator
- getCircularDependency():java.util.Map$Entry
- getComponents():java.util.Collection
- getNodeByNNumber(I):java.lang.Object
- getNodeByTNumber(I):java.lang.Object
- getSCCs():it.unimi.dsi.fastutil.ints.IntList
- getSortedNodes():java.util.List
- isAcyclic():Z
f:com.intellij.util.graph.ElementOrder
- comparator():java.util.Comparator
- equals(java.lang.Object):Z
- hashCode():I
- s:insertion():com.intellij.util.graph.ElementOrder
- s:natural():com.intellij.util.graph.ElementOrder
- s:sorted(java.util.Comparator):com.intellij.util.graph.ElementOrder
- s:stable():com.intellij.util.graph.ElementOrder
- type():com.intellij.util.graph.ElementOrder$Type
- s:unordered():com.intellij.util.graph.ElementOrder
e:com.intellij.util.graph.ElementOrder$Type
- java.lang.Enum
- sf:INSERTION:com.intellij.util.graph.ElementOrder$Type
- sf:SORTED:com.intellij.util.graph.ElementOrder$Type
- sf:STABLE:com.intellij.util.graph.ElementOrder$Type
- sf:UNORDERED:com.intellij.util.graph.ElementOrder$Type
- s:valueOf(java.lang.String):com.intellij.util.graph.ElementOrder$Type
- s:values():com.intellij.util.graph.ElementOrder$Type[]
a:com.intellij.util.graph.EndpointPair
- java.lang.Iterable
- f:adjacentNode(java.lang.Object):java.lang.Object
- a:equals(java.lang.Object):Z
- a:hashCode():I
- a:isOrdered():Z
- f:iterator():com.intellij.util.UnmodifiableIterator
- f:nodeU():java.lang.Object
- f:nodeV():java.lang.Object
- s:ordered(java.lang.Object,java.lang.Object):com.intellij.util.graph.EndpointPair
- a:source():java.lang.Object
- a:target():java.lang.Object
- s:unordered(java.lang.Object,java.lang.Object):com.intellij.util.graph.EndpointPair
com.intellij.util.graph.Graph
- com.intellij.util.graph.InboundSemiGraph
- com.intellij.util.graph.OutboundSemiGraph
- a:getIn(java.lang.Object):java.util.Iterator
- a:getNodes():java.util.Collection
- a:getOut(java.lang.Object):java.util.Iterator
f:com.intellij.util.graph.GraphGenerator
- com.intellij.util.graph.Graph
- s:generate(com.intellij.util.graph.InboundSemiGraph):com.intellij.util.graph.Graph
- getIn(java.lang.Object):java.util.Iterator
- getNodes():java.util.Collection
- getOut(java.lang.Object):java.util.Iterator
com.intellij.util.graph.HierarchyTree
- a:connect(java.lang.Object,java.lang.Object):V
- a:connect(java.util.Collection,java.lang.Object):V
- a:getAllHierarchyNodes():java.util.Set
- a:getChildren(java.lang.Object,Z):java.util.Set
- bs:getChildren$default(com.intellij.util.graph.HierarchyTree,java.lang.Object,Z,I,java.lang.Object):java.util.Set
- a:getDepth(java.lang.Object):I
- a:getParent(java.lang.Object):java.lang.Object
- a:removeGroupWithItsNodes(java.lang.Object):V
- a:ungroupAllNodes():V
- a:ungroupNodes(java.lang.Object):V
- a:ungroupNodes(java.util.Collection):V
com.intellij.util.graph.InboundSemiGraph
- a:getIn(java.lang.Object):java.util.Iterator
- a:getNodes():java.util.Collection
com.intellij.util.graph.MutableNetwork
- com.intellij.util.graph.Network
- a:addEdge(com.intellij.util.graph.EndpointPair,java.lang.Object):Z
- a:addEdge(java.lang.Object,java.lang.Object,java.lang.Object):Z
- a:addNode(java.lang.Object):Z
- a:removeEdge(java.lang.Object):Z
- a:removeNode(java.lang.Object):Z
com.intellij.util.graph.Network
- a:adjacentEdges(java.lang.Object):java.util.Set
- a:adjacentNodes(java.lang.Object):java.util.Set
- a:allowsParallelEdges():Z
- a:allowsSelfLoops():Z
- a:asGraph():com.intellij.util.graph.Graph
- a:degree(java.lang.Object):I
- a:edgeConnecting(com.intellij.util.graph.EndpointPair):java.util.Optional
- a:edgeConnecting(java.lang.Object,java.lang.Object):java.util.Optional
- a:edgeConnectingOrNull(com.intellij.util.graph.EndpointPair):java.lang.Object
- a:edgeConnectingOrNull(java.lang.Object,java.lang.Object):java.lang.Object
- a:edgeOrder():com.intellij.util.graph.ElementOrder
- a:edges():java.util.Set
- a:edgesConnecting(com.intellij.util.graph.EndpointPair):java.util.Set
- a:edgesConnecting(java.lang.Object,java.lang.Object):java.util.Set
- a:equals(java.lang.Object):Z
- a:hasEdgeConnecting(com.intellij.util.graph.EndpointPair):Z
- a:hasEdgeConnecting(java.lang.Object,java.lang.Object):Z
- a:hashCode():I
- a:inDegree(java.lang.Object):I
- a:inEdges(java.lang.Object):java.util.Set
- a:incidentEdges(java.lang.Object):java.util.Set
- a:incidentNodes(java.lang.Object):com.intellij.util.graph.EndpointPair
- a:isDirected():Z
- a:nodeOrder():com.intellij.util.graph.ElementOrder
- a:nodes():java.util.Set
- a:outDegree(java.lang.Object):I
- a:outEdges(java.lang.Object):java.util.Set
- a:predecessors(java.lang.Object):java.util.Set
- a:successors(java.lang.Object):java.util.Set
a:com.intellij.util.graph.NetworkBuilder
- p:myDoAllowParallelEdges:Z
- p:myDoAllowSelfLoops:Z
- p:myEdgeOrder:com.intellij.util.graph.ElementOrder
- p:myExpectedEdgeCount:java.util.OptionalInt
- p:myExpectedNodeCount:java.util.OptionalInt
- p:myIncidentEdgeOrder:com.intellij.util.graph.ElementOrder
- pf:myIsDirected:Z
- p:myNodeOrder:com.intellij.util.graph.ElementOrder
- p:<init>(Z):V
- allowsParallelEdges(Z):com.intellij.util.graph.NetworkBuilder
- allowsSelfLoops(Z):com.intellij.util.graph.NetworkBuilder
- a:build():com.intellij.util.graph.MutableNetwork
- edgeOrder(com.intellij.util.graph.ElementOrder):com.intellij.util.graph.NetworkBuilder
- expectedEdgeCount(I):com.intellij.util.graph.NetworkBuilder
- expectedNodeCount(I):com.intellij.util.graph.NetworkBuilder
- nodeOrder(com.intellij.util.graph.ElementOrder):com.intellij.util.graph.NetworkBuilder
com.intellij.util.graph.OutboundSemiGraph
- a:getNodes():java.util.Collection
- a:getOut(java.lang.Object):java.util.Iterator
com.intellij.util.indexing.DataIndexer
- a:map(java.lang.Object):java.util.Map
a:com.intellij.util.indexing.IndexExtension
- <init>():V
- a:getIndexer():com.intellij.util.indexing.DataIndexer
- a:getKeyDescriptor():com.intellij.util.io.KeyDescriptor
- a:getName():com.intellij.util.indexing.IndexId
- a:getValueExternalizer():com.intellij.util.io.DataExternalizer
- a:getVersion():I
c:com.intellij.util.indexing.IndexId
- p:<init>(java.lang.String):V
- s:create(java.lang.String):com.intellij.util.indexing.IndexId
- f:getName():java.lang.String
com.intellij.util.indexing.InvertedIndex
- a:clear():V
- a:dispose():V
- a:flush():V
- getData(java.lang.Object):com.intellij.util.indexing.ValueContainer
- a:mapInputAndPrepareUpdate(I,java.lang.Object):com.intellij.util.indexing.StorageUpdate
- a:prepareUpdate(I,com.intellij.util.indexing.impl.InputData):com.intellij.util.indexing.StorageUpdate
- a:withData(java.lang.Object,com.intellij.util.indexing.impl.ValueContainerProcessor):Z
f:com.intellij.util.indexing.InvertedIndexUtil
- <init>():V
- s:collectInputIdsContainingAllKeys(com.intellij.util.indexing.InvertedIndex,java.util.Collection,com.intellij.openapi.util.Condition,java.util.function.IntPredicate):it.unimi.dsi.fastutil.ints.IntSet
- s:collectInputIdsContainingAnyKey(com.intellij.util.indexing.InvertedIndex,java.util.Collection,com.intellij.openapi.util.Condition,java.util.function.IntPredicate):it.unimi.dsi.fastutil.ints.IntSet
f:com.intellij.util.indexing.StorageException
- java.lang.Exception
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
- <init>(java.lang.Throwable):V
com.intellij.util.indexing.StorageUpdate
- sf:NOOP:com.intellij.util.indexing.StorageUpdate
- s:combine(com.intellij.util.indexing.StorageUpdate[]):com.intellij.util.indexing.StorageUpdate
- a:update():Z
a:com.intellij.util.indexing.ValueContainer
- <init>():V
- s:emptyContainer():com.intellij.util.indexing.ValueContainer
- f:forEach(com.intellij.util.indexing.ValueContainer$ContainerAction):Z
- a:getValueIterator():com.intellij.util.indexing.ValueContainer$ValueIterator
- f:process(com.intellij.util.indexing.ValueContainer$ThrowableContainerProcessor):Z
- a:size():I
com.intellij.util.indexing.ValueContainer$ContainerAction
- a:perform(I,java.lang.Object):Z
com.intellij.util.indexing.ValueContainer$IntIterator
- a:hasNext():Z
- a:next():I
- a:size():I
com.intellij.util.indexing.ValueContainer$ThrowableContainerProcessor
- a:process(I,java.lang.Object):Z
com.intellij.util.indexing.ValueContainer$ValueIterator
- java.util.Iterator
- a:getInputIdsIterator():com.intellij.util.indexing.ValueContainer$IntIterator
- a:getValueAssociationPredicate():java.util.function.IntPredicate
com.intellij.util.indexing.containers.IntIdsIterator
- com.intellij.util.indexing.ValueContainer$IntIterator
- a:createCopyInInitialState():com.intellij.util.indexing.containers.IntIdsIterator
- a:hasAscendingOrder():Z
com.intellij.util.indexing.containers.RandomAccessIntContainer
- a:add(I):Z
- a:clone():java.lang.Object
- a:compact():V
- a:contains(I):Z
- a:ensureContainerCapacity(I):com.intellij.util.indexing.containers.RandomAccessIntContainer
- a:intIterator():com.intellij.util.indexing.containers.IntIdsIterator
- a:remove(I):Z
- a:size():I
f:com.intellij.util.indexing.impl.CollectionDataExternalizer
- com.intellij.util.io.DataExternalizer
- <init>(com.intellij.util.io.DataExternalizer):V
- read(java.io.DataInput):java.util.Collection
- save(java.io.DataOutput,java.util.Collection):V
com.intellij.util.indexing.impl.IndexStorage
- java.io.Closeable
- java.io.Flushable
- a:addValue(java.lang.Object,I,java.lang.Object):V
- a:clear():V
- a:clearCaches():V
- a:close():V
- a:flush():V
- a:isDirty():Z
- read(java.lang.Object):com.intellij.util.indexing.ValueContainer
- a:read(java.lang.Object,com.intellij.util.indexing.impl.ValueContainerProcessor):Z
- a:removeAllValues(java.lang.Object,I):V
- a:updateValue(java.lang.Object,I,java.lang.Object):V
f:com.intellij.util.indexing.impl.IndexStorageUtil
- <init>():V
- s:adaptKeyDescriptorToStrategy(com.intellij.util.io.KeyDescriptor):com.intellij.util.containers.HashingStrategy
- s:createKeyDescriptorHashedMap(com.intellij.util.io.KeyDescriptor):java.util.Map
c:com.intellij.util.indexing.impl.InputData
- s:empty():com.intellij.util.indexing.impl.InputData
- getKeyValues():java.util.Map
f:com.intellij.util.indexing.impl.InputIndexDataExternalizer
- com.intellij.util.io.DataExternalizer
- <init>(com.intellij.util.io.KeyDescriptor,com.intellij.util.indexing.IndexId):V
- read(java.io.DataInput):java.util.Collection
- save(java.io.DataOutput,java.util.Collection):V
com.intellij.util.indexing.impl.ValueContainerProcessor
- a:process(com.intellij.util.indexing.ValueContainer):Z
com.intellij.util.indexing.impl.ValueSerializationProblemReporter
- a:reportProblem(java.lang.Exception):V
com.intellij.util.indexing.impl.forward.ForwardIndex
- com.intellij.util.io.KeyValueStore
- a:clear():V
- a:get(java.lang.Integer):com.intellij.openapi.util.io.ByteArraySequence
- a:isClosed():Z
- a:put(java.lang.Integer,com.intellij.openapi.util.io.ByteArraySequence):V
com.intellij.util.indexing.impl.forward.IntForwardIndex
- com.intellij.util.indexing.impl.forward.ForwardIndex
- get(java.lang.Integer):com.intellij.openapi.util.io.ByteArraySequence
- a:getInt(I):I
- put(java.lang.Integer,com.intellij.openapi.util.io.ByteArraySequence):V
- a:putInt(I,I):V
f:com.intellij.util.indexing.impl.forward.IntMapForwardIndex
- com.intellij.util.indexing.impl.forward.IntForwardIndex
- <init>(java.nio.file.Path,Z):V
- clear():V
- close():V
- force():V
- getInt(I):I
- isClosed():Z
- isDirty():Z
- keysCountApproximately():I
- putInt(I,I):V
com.intellij.util.io.AbstractStringEnumerator
- com.intellij.openapi.Forceable
- com.intellij.util.io.DataEnumerator
- java.io.Closeable
- a:markCorrupted():V
com.intellij.util.io.AppendablePersistentMap
- com.intellij.util.io.PersistentMap
- a:appendData(java.lang.Object,com.intellij.util.io.AppendablePersistentMap$ValueDataAppender):V
com.intellij.util.io.AppendablePersistentMap$ValueDataAppender
- a:append(java.io.DataOutput):V
a:com.intellij.util.io.BaseDataReader
- p:isStopped:Z
- pf:mySleepMonitor:java.lang.Object
- pf:mySleepingPolicy:com.intellij.util.io.BaseDataReader$SleepingPolicy
- <init>(com.intellij.util.io.BaseDataReader$SleepingPolicy):V
- p:beforeSleeping(Z):V
- pa:close():V
- p:doRun():V
- pa:executeOnPooledThread(java.lang.Runnable):java.util.concurrent.Future
- p:flush():V
- p:readAvailable():Z
- p:readAvailableBlocking():Z
- p:readAvailableNonBlocking():Z
- p:start(java.lang.String):V
- stop():V
- waitFor():V
- waitFor(J,java.util.concurrent.TimeUnit):V
com.intellij.util.io.BaseDataReader$SleepingPolicy
- sf:BLOCKING:com.intellij.util.io.BaseDataReader$SleepingPolicy
- sf:NON_BLOCKING:com.intellij.util.io.BaseDataReader$SleepingPolicy
- sf:SIMPLE:com.intellij.util.io.BaseDataReader$SleepingPolicy
- sf:sleepTimeWhenIdle:I
- sf:sleepTimeWhenWasActive:I
- a:getTimeToSleep(Z):I
c:com.intellij.util.io.BaseInputStreamReader
- java.io.InputStreamReader
- <init>(java.io.InputStream):V
- <init>(java.io.InputStream,java.nio.charset.Charset):V
- close():V
a:com.intellij.util.io.BaseOutputReader
- com.intellij.util.io.BaseDataReader
- pf:myReader:java.io.Reader
- <init>(java.io.InputStream,java.nio.charset.Charset):V
- <init>(java.io.InputStream,java.nio.charset.Charset,com.intellij.util.io.BaseOutputReader$Options):V
- <init>(java.io.Reader):V
- <init>(java.io.Reader,com.intellij.util.io.BaseOutputReader$Options):V
- p:close():V
- p:flush():V
- pa:onTextAvailable(java.lang.String):V
- pf:readAvailableBlocking():Z
- pf:readAvailableNonBlocking():Z
c:com.intellij.util.io.BaseOutputReader$Options
- sf:BLOCKING:com.intellij.util.io.BaseOutputReader$Options
- sf:NON_BLOCKING:com.intellij.util.io.BaseOutputReader$Options
- <init>():V
- s:forMostlySilentProcess():com.intellij.util.io.BaseOutputReader$Options
- s:forTerminalPtyProcess():com.intellij.util.io.BaseOutputReader$Options
- policy():com.intellij.util.io.BaseDataReader$SleepingPolicy
- sendIncompleteLines():Z
- splitToLines():Z
- s:withPolicy(com.intellij.util.io.BaseDataReader$SleepingPolicy):com.intellij.util.io.BaseOutputReader$Options
- withSeparators():Z
a:com.intellij.util.io.BinaryOutputReader
- com.intellij.util.io.BaseDataReader
- <init>(java.io.InputStream,com.intellij.util.io.BaseDataReader$SleepingPolicy):V
- p:close():V
- pa:onBinaryAvailable(B[],I):V
- pf:readAvailableBlocking():Z
- p:readAvailableNonBlocking():Z
f:com.intellij.util.io.Bits
- <init>():V
- s:getBoolean(B[],I):Z
- s:getChar(B[],I):C
- s:getDouble(B[],I):D
- s:getFloat(B[],I):F
- s:getInt(B[],I):I
- s:getLong(B[],I):J
- s:getShort(B[],I):S
- s:putBoolean(B[],I,Z):V
- s:putChar(B[],I,C):V
- s:putDouble(B[],I,D):V
- s:putFloat(B[],I,F):V
- s:putInt(B[],I,I):V
- s:putLong(B[],I,J):V
- s:putShort(B[],I,S):V
f:com.intellij.util.io.BooleanDataDescriptor
- com.intellij.util.io.InlineKeyDescriptor
- sf:INSTANCE:com.intellij.util.io.BooleanDataDescriptor
- fromInt(I):java.lang.Boolean
- toInt(java.lang.Boolean):I
f:com.intellij.util.io.ByteBufferUtil
- <init>():V
- s:cleanBuffer(java.nio.ByteBuffer):Z
- s:copyMemory(java.nio.ByteBuffer,I,B[],I,I):V
- s:getAddress(java.nio.ByteBuffer):J
f:com.intellij.util.io.ByteSequenceDataExternalizer
- com.intellij.util.io.DataExternalizer
- sf:INSTANCE:com.intellij.util.io.ByteSequenceDataExternalizer
- <init>():V
- read(java.io.DataInput):com.intellij.openapi.util.io.ByteArraySequence
- save(java.io.DataOutput,com.intellij.openapi.util.io.ByteArraySequence):V
f:com.intellij.util.io.CachingEnumerator
- com.intellij.util.io.DataEnumerator
- <init>(com.intellij.util.io.DataEnumerator,com.intellij.util.containers.hash.EqualityPolicy):V
- enumerate(java.lang.Object):I
- valueOf(I):java.lang.Object
f:com.intellij.util.io.CaseInsensitiveEnumeratorStringDescriptor
- com.intellij.util.io.EnumeratorStringDescriptor
- <init>():V
- getHashCode(java.lang.String):I
- isEqual(java.lang.String,java.lang.String):Z
com.intellij.util.io.CleanableStorage
- a:closeAndClean():V
f:com.intellij.util.io.CompactDataInput
- java.io.DataInput
- <init>(java.io.InputStream):V
- readBoolean():Z
- readByte():B
- readChar():C
- readDouble():D
- readFloat():F
- readFully(B[]):V
- readFully(B[],I,I):V
- readInt():I
- readLine():java.lang.String
- readLong():J
- readShort():S
- readUTF():java.lang.String
- readUnsignedByte():I
- readUnsignedShort():I
- skipBytes(I):I
f:com.intellij.util.io.CompactDataOutput
- java.io.DataOutput
- <init>(java.io.OutputStream):V
- write(I):V
- write(B[]):V
- write(B[],I,I):V
- writeBoolean(Z):V
- writeByte(I):V
- writeBytes(java.lang.String):V
- writeChar(I):V
- writeChars(java.lang.String):V
- writeDouble(D):V
- writeFloat(F):V
- writeInt(I):V
- writeLong(J):V
- writeShort(I):V
- writeUTF(java.lang.String):V
c:com.intellij.util.io.CompressedAppendableFile
- <init>(java.nio.file.Path):V
- append(java.lang.Object,com.intellij.util.io.KeyDescriptor):V
- append(B[],I):V
- append(B[],I,I):V
- p:compress(com.intellij.util.io.DataOutputStream,B[]):I
- p:decompress(java.io.DataInputStream):B[]
- dispose():V
- force():V
- p:getChunkAppendStream():com.intellij.util.io.DataOutputStream
- p:getChunkInputStream(J,I):java.io.InputStream
- p:getChunkLengthAppendStream():com.intellij.util.io.DataOutputStream
- p:getChunkLengthFile():java.nio.file.Path
- p:getChunksFile():java.nio.file.Path
- getStream(J):java.io.DataInputStream
- hashCode():I
- isDirty():Z
- length():J
- read(J,com.intellij.util.io.KeyDescriptor):java.lang.Object
a:com.intellij.util.io.Compressor
- java.io.Closeable
- p:<init>():V
- f:addDirectory(java.io.File):V
- f:addDirectory(java.lang.String):V
- f:addDirectory(java.lang.String,J):V
- f:addDirectory(java.lang.String,java.io.File):V
- f:addDirectory(java.lang.String,java.nio.file.Path):V
- f:addDirectory(java.lang.String,java.nio.file.Path,J):V
- f:addDirectory(java.nio.file.Path):V
- f:addFile(java.lang.String,java.io.File):V
- f:addFile(java.lang.String,java.io.InputStream):V
- f:addFile(java.lang.String,java.io.InputStream,J):V
- f:addFile(java.lang.String,java.nio.file.Path):V
- f:addFile(java.lang.String,java.nio.file.Path,J):V
- f:addFile(java.lang.String,B[]):V
- f:addFile(java.lang.String,B[],J):V
- filter(java.util.function.BiPredicate):com.intellij.util.io.Compressor
- pa:writeDirectoryEntry(java.lang.String,J):V
- pa:writeFileEntry(java.lang.String,java.io.InputStream,J,J,I,java.lang.String):V
f:com.intellij.util.io.Compressor$Jar
- com.intellij.util.io.Compressor$Zip
- <init>(java.io.File):V
- <init>(java.nio.file.Path):V
- addManifest(java.util.jar.Manifest):V
c:com.intellij.util.io.Compressor$Tar
- com.intellij.util.io.Compressor
- <init>(java.io.File,com.intellij.util.io.Compressor$Tar$Compression):V
- <init>(java.nio.file.Path,com.intellij.util.io.Compressor$Tar$Compression):V
- close():V
- p:writeDirectoryEntry(java.lang.String,J):V
- p:writeFileEntry(java.lang.String,java.io.InputStream,J,J,I,java.lang.String):V
e:com.intellij.util.io.Compressor$Tar$Compression
- java.lang.Enum
- sf:BZIP2:com.intellij.util.io.Compressor$Tar$Compression
- sf:GZIP:com.intellij.util.io.Compressor$Tar$Compression
- sf:NONE:com.intellij.util.io.Compressor$Tar$Compression
- s:valueOf(java.lang.String):com.intellij.util.io.Compressor$Tar$Compression
- s:values():com.intellij.util.io.Compressor$Tar$Compression[]
c:com.intellij.util.io.Compressor$Zip
- com.intellij.util.io.Compressor
- <init>(java.io.File):V
- <init>(java.io.OutputStream):V
- <init>(java.nio.file.Path):V
- p:<init>(java.util.zip.ZipOutputStream):V
- close():V
- withLevel(I):com.intellij.util.io.Compressor$Zip
- p:writeDirectoryEntry(java.lang.String,J):V
- p:writeFileEntry(java.lang.String,java.io.InputStream,J,J,I,java.lang.String):V
f:com.intellij.util.io.CoroutinesKt
- sf:await(java.util.concurrent.CompletableFuture,kotlin.coroutines.Continuation):java.lang.Object
- sf:await(java.util.concurrent.Future,kotlin.coroutines.Continuation):java.lang.Object
- sf:awaitFor(com.intellij.util.concurrency.Semaphore,kotlin.coroutines.Continuation):java.lang.Object
f:com.intellij.util.io.CountingGZIPInputStream
- java.util.zip.GZIPInputStream
- s:create(java.io.InputStream):com.intellij.util.io.CountingGZIPInputStream
- getCompressedBytesRead():J
f:com.intellij.util.io.CountingInputStream
- java.io.FilterInputStream
- <init>(java.io.InputStream):V
- getBytesRead():J
- mark(I):V
- read():I
- read(B[],I,I):I
- reset():V
- skip(J):J
com.intellij.util.io.DataEnumerator
- sf:NULL_ID:I
- a:enumerate(java.lang.Object):I
- a:valueOf(I):java.lang.Object
com.intellij.util.io.DataEnumeratorEx
- com.intellij.util.io.DataEnumerator
- a:tryEnumerate(java.lang.Object):I
com.intellij.util.io.DataExternalizer
- a:read(java.io.DataInput):java.lang.Object
- a:save(java.io.DataOutput,java.lang.Object):V
f:com.intellij.util.io.DataInputOutputUtil
- sf:timeBase:J
- s:readINT(java.io.DataInput):I
- s:readINT(java.nio.ByteBuffer):I
- s:readLONG(java.io.DataInput):J
- s:readLONG(java.nio.ByteBuffer):J
- s:readNullable(java.io.DataInput,com.intellij.openapi.util.ThrowableComputable):java.lang.Object
- s:readSINT(java.io.DataInput):I
- s:readSeq(java.io.DataInput,com.intellij.openapi.util.ThrowableComputable):java.util.List
- s:readTIME(java.io.DataInput):J
- s:readTIME(java.nio.ByteBuffer):J
- s:writeINT(java.io.DataOutput,I):V
- s:writeINT(java.nio.ByteBuffer,I):V
- s:writeLONG(java.io.DataOutput,J):V
- s:writeNullable(java.io.DataOutput,java.lang.Object,com.intellij.util.ThrowableConsumer):V
- s:writeSINT(java.io.DataOutput,I):V
- s:writeSeq(java.io.DataOutput,java.util.Collection,com.intellij.util.ThrowableConsumer):V
- s:writeTIME(java.io.DataOutput,J):V
- s:writeTIME(java.nio.ByteBuffer,J):V
c:com.intellij.util.io.DataOutputStream
- java.io.DataOutputStream
- <init>(java.io.OutputStream):V
- getWrittenBytesCount():I
- write(I):V
- write(B[],I,I):V
a:com.intellij.util.io.Decompressor
- p:<init>():V
- pa:closeEntryStream(java.io.InputStream):V
- pa:closeStream():V
- s:entryFile(java.nio.file.Path,java.lang.String):java.nio.file.Path
- entryFilter(java.util.function.Predicate):com.intellij.util.io.Decompressor
- errorHandler(java.util.function.BiFunction):com.intellij.util.io.Decompressor
- escapingSymlinkPolicy(com.intellij.util.io.Decompressor$EscapingSymlinkPolicy):com.intellij.util.io.Decompressor
- f:extract(java.io.File):V
- f:extract(java.nio.file.Path):V
- filter(java.util.function.Predicate):com.intellij.util.io.Decompressor
- pa:nextEntry():com.intellij.util.io.Decompressor$Entry
- pa:openEntryStream(com.intellij.util.io.Decompressor$Entry):java.io.InputStream
- pa:openStream():V
- overwrite(Z):com.intellij.util.io.Decompressor
- postProcessor(java.util.function.BiConsumer):com.intellij.util.io.Decompressor
- postProcessor(java.util.function.Consumer):com.intellij.util.io.Decompressor
- removePrefixPath(java.lang.String):com.intellij.util.io.Decompressor
f:com.intellij.util.io.Decompressor$Entry
- sf:DOS_HIDDEN:I
- sf:DOS_READ_ONLY:I
- f:linkTarget:java.lang.String
- f:mode:I
- f:name:java.lang.String
- f:size:J
- f:type:com.intellij.util.io.Decompressor$Entry$Type
e:com.intellij.util.io.Decompressor$Entry$Type
- java.lang.Enum
- sf:DIR:com.intellij.util.io.Decompressor$Entry$Type
- sf:FILE:com.intellij.util.io.Decompressor$Entry$Type
- sf:SYMLINK:com.intellij.util.io.Decompressor$Entry$Type
- s:valueOf(java.lang.String):com.intellij.util.io.Decompressor$Entry$Type
- s:values():com.intellij.util.io.Decompressor$Entry$Type[]
e:com.intellij.util.io.Decompressor$ErrorHandlerChoice
- java.lang.Enum
- sf:ABORT:com.intellij.util.io.Decompressor$ErrorHandlerChoice
- sf:BAIL_OUT:com.intellij.util.io.Decompressor$ErrorHandlerChoice
- sf:RETRY:com.intellij.util.io.Decompressor$ErrorHandlerChoice
- sf:SKIP:com.intellij.util.io.Decompressor$ErrorHandlerChoice
- sf:SKIP_ALL:com.intellij.util.io.Decompressor$ErrorHandlerChoice
- s:valueOf(java.lang.String):com.intellij.util.io.Decompressor$ErrorHandlerChoice
- s:values():com.intellij.util.io.Decompressor$ErrorHandlerChoice[]
e:com.intellij.util.io.Decompressor$EscapingSymlinkPolicy
- java.lang.Enum
- sf:ALLOW:com.intellij.util.io.Decompressor$EscapingSymlinkPolicy
- sf:DISALLOW:com.intellij.util.io.Decompressor$EscapingSymlinkPolicy
- sf:RELATIVIZE_ABSOLUTE:com.intellij.util.io.Decompressor$EscapingSymlinkPolicy
- s:valueOf(java.lang.String):com.intellij.util.io.Decompressor$EscapingSymlinkPolicy
- s:values():com.intellij.util.io.Decompressor$EscapingSymlinkPolicy[]
f:com.intellij.util.io.Decompressor$Tar
- com.intellij.util.io.Decompressor
- <init>(java.io.File):V
- <init>(java.io.InputStream):V
- <init>(java.nio.file.Path):V
f:com.intellij.util.io.Decompressor$Zip
- com.intellij.util.io.Decompressor
- <init>(java.io.File):V
- <init>(java.nio.file.Path):V
- withZipExtensions():com.intellij.util.io.Decompressor
com.intellij.util.io.DifferentSerializableBytesImplyNonEqualityPolicy
f:com.intellij.util.io.DigestUtil
- sf:INSTANCE:com.intellij.util.io.DigestUtil
- sf:digestToHash(java.security.MessageDigest):java.lang.String
- sf:getRandom():java.security.SecureRandom
- sf:md5():java.security.MessageDigest
- sf:randomToken():java.lang.String
- sf:sha1():java.security.MessageDigest
- sf:sha1Hex(java.lang.String):java.lang.String
- sf:sha1Hex(B[]):java.lang.String
- sf:sha256():java.security.MessageDigest
- sf:sha256Hex(B[]):java.lang.String
- sf:sha512():java.security.MessageDigest
- sf:updateContentHash(java.security.MessageDigest,java.io.InputStream):V
- sf:updateContentHash(java.security.MessageDigest,java.io.InputStream,B[]):V
- sf:updateContentHash(java.security.MessageDigest,java.nio.file.Path):V
- sf:updateContentHash(java.security.MessageDigest,java.nio.file.Path,B[]):V
- bs:updateContentHash$default(java.security.MessageDigest,java.io.InputStream,B[],I,java.lang.Object):V
- bs:updateContentHash$default(java.security.MessageDigest,java.nio.file.Path,B[],I,java.lang.Object):V
f:com.intellij.util.io.DigestUtilKt
- sf:bytesToHex(B[]):java.lang.String
- sf:hashToHexString(java.lang.String,java.security.MessageDigest):java.lang.String
- sf:hashToHexString(B[],java.security.MessageDigest):java.lang.String
- sf:sha256Hex(java.nio.file.Path):java.lang.String
- sf:sha2_512():java.security.MessageDigest
- sf:sha3_224():java.security.MessageDigest
- sf:sha3_256():java.security.MessageDigest
- sf:sha3_512():java.security.MessageDigest
com.intellij.util.io.DurableDataEnumerator
- com.intellij.openapi.Forceable
- com.intellij.util.io.DataEnumeratorEx
- java.io.Closeable
f:com.intellij.util.io.EnumDataDescriptor
- com.intellij.util.io.InlineKeyDescriptor
- <init>(java.lang.Class):V
- fromInt(I):java.lang.Enum
- toInt(java.lang.Enum):I
f:com.intellij.util.io.EnumeratorCharSequenceDescriptor
- com.intellij.util.io.DifferentSerializableBytesImplyNonEqualityPolicy
- com.intellij.util.io.KeyDescriptor
- sf:INSTANCE:com.intellij.util.io.EnumeratorCharSequenceDescriptor
- <init>():V
- getHashCode(java.lang.CharSequence):I
- isEqual(java.lang.CharSequence,java.lang.CharSequence):Z
- read(java.io.DataInput):java.lang.CharSequence
- save(java.io.DataOutput,java.lang.CharSequence):V
f:com.intellij.util.io.EnumeratorIntegerDescriptor
- com.intellij.util.io.IntInlineKeyDescriptor
- sf:INSTANCE:com.intellij.util.io.EnumeratorIntegerDescriptor
- <init>():V
c:com.intellij.util.io.EnumeratorStringDescriptor
- com.intellij.util.io.KeyDescriptor
- sf:INSTANCE:com.intellij.util.io.EnumeratorStringDescriptor
- <init>():V
- getHashCode(java.lang.String):I
- isEqual(java.lang.String,java.lang.String):Z
- read(java.io.DataInput):java.lang.String
- save(java.io.DataOutput,java.lang.String):V
f:com.intellij.util.io.ExternalIntegerKeyDescriptor
- com.intellij.util.io.KeyDescriptor
- sf:INSTANCE:com.intellij.util.io.ExternalIntegerKeyDescriptor
- <init>():V
- getHashCode(java.lang.Integer):I
- isEqual(java.lang.Integer,java.lang.Integer):Z
- read(java.io.DataInput):java.lang.Integer
- save(java.io.DataOutput,java.lang.Integer):V
a:com.intellij.util.io.FileAccessorCache
- com.intellij.util.containers.hash.EqualityPolicy
- <init>(I,I):V
- clear():V
- pa:createAccessor(java.lang.Object):java.lang.Object
- pa:disposeAccessor(java.lang.Object):V
- f:get(java.lang.Object):com.intellij.util.io.FileAccessorCache$Handle
- getHashCode(java.lang.Object):I
- getIfCached(java.lang.Object):com.intellij.util.io.FileAccessorCache$Handle
- isEqual(java.lang.Object,java.lang.Object):Z
- remove(java.lang.Object):Z
f:com.intellij.util.io.FileAccessorCache$Handle
- com.intellij.util.io.ResourceHandle
- allocate():V
- close():V
- get():java.lang.Object
- getRefCount():I
- release():V
f:com.intellij.util.io.IOUtil
- sf:GiB:I
- sf:KiB:I
- sf:MiB:I
- s:allocReadWriteUTFBuffer():B[]
- s:allocateFileRegion(java.nio.channels.FileChannel,J):V
- s:asciiToMagicWord(java.lang.String):I
- s:closeSafe(com.intellij.openapi.diagnostic.Logger,java.io.Closeable[]):V
- s:closeSafe(com.intellij.openapi.diagnostic.Logger,java.lang.AutoCloseable[]):V
- s:deleteAllFilesStartingWith(java.io.File):Z
- s:deleteAllFilesStartingWith(java.nio.file.Path):Z
- s:directBuffersTotalAllocatedSize():J
- s:fillFileRegionWithZeros(java.nio.channels.FileChannel,J,J):V
- s:fromBytes(B[],com.intellij.util.io.DataExternalizer):java.lang.Object
- s:isAscii(C):Z
- s:isAscii(java.lang.CharSequence):Z
- s:isAscii(java.lang.String):Z
- s:isSharedCachesEnabled():Z
- s:magicWordToASCII(I):java.lang.String
- s:openCleanOrResetBroken(com.intellij.openapi.util.ThrowableComputable,java.io.File):java.lang.Object
- s:openCleanOrResetBroken(com.intellij.openapi.util.ThrowableComputable,java.lang.Runnable):java.lang.Object
- s:openCleanOrResetBroken(com.intellij.openapi.util.ThrowableComputable,java.nio.file.Path):java.lang.Object
- s:readString(java.io.DataInput):java.lang.String
- s:readString(java.nio.ByteBuffer):java.lang.String
- s:readStringCollection(java.io.DataInput,java.util.function.IntFunction):java.util.Collection
- s:readStringList(java.io.DataInput):java.util.List
- s:readUTF(java.io.DataInput):java.lang.String
- s:readUTFCharSequence(java.io.DataInput):java.lang.CharSequence
- s:readUTFFast(B[],java.io.DataInput):java.lang.String
- s:readUTFFastCharSequence(java.io.DataInput):java.lang.CharSequence
- s:toBytes(java.lang.Object,com.intellij.util.io.DataExternalizer):B[]
- s:toHexString(java.nio.ByteBuffer):java.lang.String
- s:toHexString(java.nio.ByteBuffer,I):java.lang.String
- s:toHexString(B[]):java.lang.String
- s:toHexString(B[],I):java.lang.String
- s:toString(java.nio.ByteBuffer):java.lang.String
- s:wrapSafely(java.lang.AutoCloseable,com.intellij.openapi.util.ThrowableNotNullFunction):java.lang.Object
- s:writeCharSequence(java.lang.CharSequence,java.io.DataOutput):V
- s:writeString(java.lang.String,java.io.DataOutput):V
- s:writeStringList(java.io.DataOutput,java.util.Collection):V
- s:writeUTF(java.io.DataOutput,java.lang.CharSequence):V
- s:writeUTF(java.io.DataOutput,java.lang.String):V
- s:writeUTFFast(B[],java.io.DataOutput,java.lang.CharSequence):V
- s:writeUTFFast(B[],java.io.DataOutput,java.lang.String):V
- s:writeUTFTruncated(java.io.DataOutput,java.lang.String):V
f:com.intellij.util.io.InMemoryDataEnumerator
- com.intellij.util.io.DataEnumeratorEx
- <init>():V
- enumerate(java.lang.Object):I
- tryEnumerate(java.lang.Object):I
- valueOf(I):java.lang.Object
a:com.intellij.util.io.InlineKeyDescriptor
- com.intellij.util.io.KeyDescriptor
- <init>():V
- a:fromInt(I):java.lang.Object
- f:getHashCode(java.lang.Object):I
- p:isCompactFormat():Z
- f:isEqual(java.lang.Object,java.lang.Object):Z
- f:read(java.io.DataInput):java.lang.Object
- f:save(java.io.DataOutput,java.lang.Object):V
- a:toInt(java.lang.Object):I
f:com.intellij.util.io.IntCollectionDataExternalizer
- com.intellij.util.io.DataExternalizer
- <init>():V
- read(java.io.DataInput):java.util.Collection
- save(java.io.DataOutput,java.util.Collection):V
c:com.intellij.util.io.IntInlineKeyDescriptor
- com.intellij.util.io.InlineKeyDescriptor
- <init>():V
- fromInt(I):java.lang.Integer
- toInt(java.lang.Integer):I
f:com.intellij.util.io.IoKt
- sf:decodeBase64(java.lang.String):B[]
- sf:encodeUrlQueryParameter(java.lang.String):java.lang.String
- sf:readCharSequence(java.io.Reader,I):java.lang.CharSequence
- sf:toByteArray(java.nio.ByteBuffer,Z):B[]
- bs:toByteArray$default(java.nio.ByteBuffer,Z,I,java.lang.Object):B[]
com.intellij.util.io.KeyDescriptor
- com.intellij.util.containers.hash.EqualityPolicy
- com.intellij.util.io.DataExternalizer
- a:getHashCode(java.lang.Object):I
- a:save(java.io.DataOutput,java.lang.Object):V
f:com.intellij.util.io.MultiCloseable
- java.lang.AutoCloseable
- <init>():V
- close():V
- close(java.lang.Throwable):V
- s:closeAll(java.lang.AutoCloseable[]):V
- s:closeAll(java.lang.AutoCloseable[],Z,java.lang.Throwable):V
- registerCloseable(java.lang.AutoCloseable):V
f:com.intellij.util.io.NullableDataExternalizer
- com.intellij.util.io.DataExternalizer
- <init>(com.intellij.util.io.DataExternalizer):V
- read(java.io.DataInput):java.lang.Object
- save(java.io.DataOutput,java.lang.Object):V
f:com.intellij.util.io.PersistentHashMap
- com.intellij.util.io.AppendablePersistentMap
- <init>(com.intellij.util.io.PersistentMapBase):V
- <init>(java.io.File,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer):V
- <init>(java.nio.file.Path,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer):V
- <init>(java.nio.file.Path,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer,I):V
- <init>(java.nio.file.Path,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer,I,I):V
- appendData(java.lang.Object,com.intellij.util.io.AppendablePersistentMap$ValueDataAppender):V
- appendData(java.lang.Object,com.intellij.util.io.PersistentHashMap$ValueDataAppender):V
- s:canonicalize(com.intellij.util.io.PersistentHashMap,com.intellij.util.io.PersistentHashMap,java.util.function.Function,java.util.function.Function):com.intellij.util.io.PersistentHashMap
- close():V
- closeAndClean():V
- consumeKeysWithExistingMapping(java.util.function.Consumer):V
- containsMapping(java.lang.Object):Z
- dropMemoryCaches():V
- force():V
- get(java.lang.Object):java.lang.Object
- getAllKeysWithExistingMapping():java.util.Collection
- getImpl():com.intellij.util.io.PersistentMapBase
- isClosed():Z
- isDirty():Z
- keysCountApproximately():I
- markCorrupted():V
- markDirty():V
- processKeys(com.intellij.util.Processor):Z
- processKeysWithExistingMapping(com.intellij.util.Processor):Z
- put(java.lang.Object,java.lang.Object):V
- remove(java.lang.Object):V
com.intellij.util.io.PersistentHashMap$ValueDataAppender
- com.intellij.util.io.AppendablePersistentMap$ValueDataAppender
com.intellij.util.io.PersistentMap
- com.intellij.util.io.KeyValueStore
- a:containsMapping(java.lang.Object):Z
- a:isClosed():Z
- a:isDirty():Z
- a:markDirty():V
- a:processKeys(com.intellij.util.Processor):Z
- a:remove(java.lang.Object):V
f:com.intellij.util.io.PersistentMapInMemory
- com.intellij.util.io.PersistentMapBase
- <init>(com.intellij.util.io.PersistentMapBuilder):V
- close():V
- closeAndDelete():V
- containsKey(java.lang.Object):Z
- force():V
- get(java.lang.Object):java.lang.Object
- getDataAccessLock():java.lang.Object
- getValuesExternalizer():com.intellij.util.io.DataExternalizer
- isClosed():Z
- isDirty():Z
- keysCount():I
- markDirty():V
- processExistingKeys(com.intellij.util.Processor):Z
- processKeys(com.intellij.util.Processor):Z
- put(java.lang.Object,java.lang.Object):V
- remove(java.lang.Object):V
f:com.intellij.util.io.PersistentMapWalPlayer
- java.io.Closeable
- <init>(com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer,java.nio.file.Path):V
- close():V
- f:getVersion():I
- f:readWal():kotlin.sequences.Sequence
c:com.intellij.util.io.PersistentStringEnumerator
- com.intellij.util.io.AbstractStringEnumerator
- com.intellij.util.io.DataEnumeratorEx
- com.intellij.util.io.DurableDataEnumerator
- <init>(java.nio.file.Path):V
- <init>(java.nio.file.Path,I):V
- <init>(java.nio.file.Path,Z):V
- close():V
- enumerate(java.lang.String):I
- valueOf(I):java.lang.String
f:com.intellij.util.io.PreemptiveSafeFileOutputStream
- java.io.OutputStream
- <init>(java.nio.file.Path):V
- abort():V
- close():V
- flush():V
- write(I):V
- write(B[],I,I):V
f:com.intellij.util.io.ProcessKt
- sf:awaitExit(java.lang.Process,kotlin.coroutines.Continuation):java.lang.Object
- sf:readLineAsync(java.io.BufferedReader,kotlin.coroutines.Continuation):java.lang.Object
c:com.intellij.util.io.ReplicatorInputStream
- java.io.InputStream
- <init>(java.io.InputStream,com.intellij.openapi.util.io.BufferExposingByteArrayOutputStream):V
- available():I
- close():V
- mark(I):V
- markSupported():Z
- read():I
- read(B[]):I
- read(B[],I,I):I
- reset():V
- skip(J):J
com.intellij.util.io.RepresentableAsByteArraySequence
- a:asByteArraySequence():com.intellij.openapi.util.io.ByteArraySequence
a:com.intellij.util.io.ResourceHandle
- java.io.Closeable
- <init>():V
- a:get():java.lang.Object
f:com.intellij.util.io.SafeFileOutputStream
- java.io.OutputStream
- <init>(java.io.File):V
- <init>(java.io.File,java.lang.String):V
- <init>(java.nio.file.Path):V
- <init>(java.nio.file.Path,java.lang.String):V
- abort():V
- close():V
- write(I):V
- write(B[],I,I):V
f:com.intellij.util.io.Sanitize_nameKt
- sf:sanitizeFileName(java.lang.String,java.lang.String,Z,java.util.function.Predicate):java.lang.String
- bs:sanitizeFileName$default(java.lang.String,java.lang.String,Z,java.util.function.Predicate,I,java.lang.Object):java.lang.String
f:com.intellij.util.io.SourceCodeCompressor
- s:compress(B[]):B[]
- s:compress(B[],I,I):B[]
- s:decompress(B[]):B[]
- s:decompress(B[],I,I):B[]
c:com.intellij.util.io.StorageAlreadyInUseException
- java.io.IOException
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
f:com.intellij.util.io.StringRef
- sf:EMPTY_ARRAY:com.intellij.util.io.StringRef[]
- s:createArray(I):com.intellij.util.io.StringRef[]
- equals(java.lang.Object):Z
- s:fromNullableString(java.lang.String):com.intellij.util.io.StringRef
- s:fromStream(java.io.DataInput,com.intellij.util.io.AbstractStringEnumerator):com.intellij.util.io.StringRef
- s:fromString(java.lang.String):com.intellij.util.io.StringRef
- getId(com.intellij.util.io.AbstractStringEnumerator):I
- getString():java.lang.String
- hashCode():I
- length():I
- s:stringFromStream(java.io.DataInput,com.intellij.util.io.AbstractStringEnumerator):java.lang.String
- s:toString(com.intellij.util.io.StringRef):java.lang.String
- writeTo(java.io.DataOutput,com.intellij.util.io.AbstractStringEnumerator):V
f:com.intellij.util.io.URLUtil
- sf:DATA_URI_PATTERN:java.util.regex.Pattern
- sf:FILE_PROTOCOL:java.lang.String
- sf:FILE_URL_PATTERN:java.util.regex.Pattern
- sf:HREF_PATTERN:java.util.regex.Pattern
- sf:HTTPS_PROTOCOL:java.lang.String
- sf:HTTP_PROTOCOL:java.lang.String
- sf:JAR_PROTOCOL:java.lang.String
- sf:JAR_SEPARATOR:java.lang.String
- sf:JRT_PROTOCOL:java.lang.String
- sf:SCHEME_SEPARATOR:java.lang.String
- sf:URL_PATTERN:java.util.regex.Pattern
- sf:URL_WITH_PARENS_PATTERN:java.util.regex.Pattern
- s:addSchemaIfMissing(java.lang.String):java.lang.String
- s:canContainUrl(java.lang.String):Z
- s:containsScheme(java.lang.String):Z
- s:decode(java.lang.String):java.lang.String
- s:encodePath(java.lang.String):java.lang.String
- s:encodeQuery(java.lang.String):java.lang.String
- s:encodeURIComponent(java.lang.String):java.lang.String
- s:extractPath(java.lang.String):java.lang.String
- s:findUrl(java.lang.CharSequence,I,I):com.intellij.openapi.util.TextRange
- s:getBytesFromDataUri(java.lang.String):B[]
- s:getJarEntryURL(java.io.File,java.lang.String):java.net.URL
- s:internProtocol(java.net.URL):java.net.URL
- s:isDataUri(java.lang.String):Z
- s:openResourceStream(java.net.URL):java.io.InputStream
- s:openStream(java.net.URL):java.io.InputStream
- s:parseHostFromSshUrl(java.lang.String):java.lang.String
- s:resourceExists(java.net.URL):com.intellij.util.ThreeState
- s:splitJarUrl(java.lang.String):com.intellij.openapi.util.Pair
- s:unescapePercentSequences(java.lang.CharSequence,I,I):java.lang.CharSequence
- s:unescapePercentSequences(java.lang.String):java.lang.String
- s:urlToFile(java.net.URL):java.io.File
- s:urlToPath(java.lang.String):java.lang.String
com.intellij.util.io.Unmappable
- a:closeAndUnsafelyUnmap():V
c:com.intellij.util.io.UnmodifiableEnumeratorWrapper
- com.intellij.util.io.DataEnumeratorEx
- <init>(com.intellij.util.io.DataEnumeratorEx):V
- enumerate(java.lang.Object):I
- tryEnumerate(java.lang.Object):I
- valueOf(I):java.lang.Object
c:com.intellij.util.io.UnsyncByteArrayInputStream
- java.io.InputStream
- pf:myBuffer:B[]
- <init>(B[]):V
- <init>(B[],I,I):V
- available():I
- mark(I):V
- markSupported():Z
- read():I
- read(B[],I,I):I
- readShortLittleEndian():I
- reset():V
- skip(J):J
c:com.intellij.util.io.UnsyncByteArrayOutputStream
- java.io.OutputStream
- com.intellij.util.io.RepresentableAsByteArraySequence
- p:myBuffer:B[]
- p:myCount:I
- <init>():V
- <init>(I):V
- <init>(com.intellij.util.io.UnsyncByteArrayOutputStream$ByteArrayAllocator,I):V
- <init>(B[]):V
- asByteArraySequence():com.intellij.openapi.util.io.ByteArraySequence
- reset():V
- size():I
- toByteArray():B[]
- toByteArraySequence():com.intellij.openapi.util.io.ByteArraySequence
- toInputStream():java.io.InputStream
- toNewByteArray():B[]
- write(I):V
- write(B[],I,I):V
- writeTo(java.io.OutputStream):V
com.intellij.util.io.UnsyncByteArrayOutputStream$ByteArrayAllocator
- a:allocate(I):B[]
f:com.intellij.util.io.VersionUpdatedException
- java.io.IOException
f:com.intellij.util.io.VoidDataExternalizer
- com.intellij.util.io.DataExternalizer
- sf:INSTANCE:com.intellij.util.io.VoidDataExternalizer
- <init>():V
- read(java.io.DataInput):java.lang.Void
- save(java.io.DataOutput,java.lang.Void):V
a:com.intellij.util.io.WalEvent
- a:getKey():java.lang.Object
f:com.intellij.util.io.WalEvent$AppendEvent
- com.intellij.util.io.WalEvent
- <init>(java.lang.Object,B[]):V
- f:component1():java.lang.Object
- f:component2():B[]
- f:copy(java.lang.Object,B[]):com.intellij.util.io.WalEvent$AppendEvent
- bs:copy$default(com.intellij.util.io.WalEvent$AppendEvent,java.lang.Object,B[],I,java.lang.Object):com.intellij.util.io.WalEvent$AppendEvent
- equals(java.lang.Object):Z
- f:getData():B[]
- getKey():java.lang.Object
- hashCode():I
f:com.intellij.util.io.WalEvent$CorruptionEvent
- com.intellij.util.io.WalEvent
- sf:INSTANCE:com.intellij.util.io.WalEvent$CorruptionEvent
- getKey():java.lang.Void
f:com.intellij.util.io.WalEvent$PutEvent
- com.intellij.util.io.WalEvent
- <init>(java.lang.Object,java.lang.Object):V
- f:component1():java.lang.Object
- f:component2():java.lang.Object
- f:copy(java.lang.Object,java.lang.Object):com.intellij.util.io.WalEvent$PutEvent
- bs:copy$default(com.intellij.util.io.WalEvent$PutEvent,java.lang.Object,java.lang.Object,I,java.lang.Object):com.intellij.util.io.WalEvent$PutEvent
- equals(java.lang.Object):Z
- getKey():java.lang.Object
- f:getValue():java.lang.Object
- hashCode():I
f:com.intellij.util.io.WalEvent$RemoveEvent
- com.intellij.util.io.WalEvent
- <init>(java.lang.Object):V
- f:component1():java.lang.Object
- f:copy(java.lang.Object):com.intellij.util.io.WalEvent$RemoveEvent
- bs:copy$default(com.intellij.util.io.WalEvent$RemoveEvent,java.lang.Object,I,java.lang.Object):com.intellij.util.io.WalEvent$RemoveEvent
- equals(java.lang.Object):Z
- getKey():java.lang.Object
- hashCode():I
f:com.intellij.util.io.WriteAheadLogKt
- sf:getDebugWalRecords():Z
- sf:restoreHashMapFromWal(java.nio.file.Path,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer):java.util.Map
- sf:restoreMemoryEnumeratorFromWal(java.nio.file.Path,com.intellij.util.io.KeyDescriptor):java.util.List
- sf:restorePersistentMapFromWal(java.nio.file.Path,java.nio.file.Path,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer):com.intellij.util.io.PersistentMap
- sf:setDebugWalRecords(Z):V
f:com.intellij.util.io.ZipUtil
- s:addDirToZipRecursively(java.util.zip.ZipOutputStream,java.io.File,java.io.File,java.lang.String,java.io.FileFilter,java.util.Set):Z
- s:addFileOrDirRecursively(java.util.zip.ZipOutputStream,java.io.File,java.io.File,java.lang.String,java.io.FileFilter,java.util.Set):Z
- s:addFileToZip(java.util.zip.ZipOutputStream,java.io.File,java.lang.String,java.util.Set,java.io.FileFilter):Z
- s:addFileToZip(java.util.zip.ZipOutputStream,java.io.File,java.lang.String,java.util.Set,java.io.FileFilter,J):Z
- s:addFileToZip(java.util.zip.ZipOutputStream,java.io.File,java.lang.String,java.util.Set,java.io.FileFilter,com.intellij.util.io.ZipUtil$FileContentProcessor,Z):Z
- s:compressFile(java.io.File,java.io.File):V
- s:compressFile(java.nio.file.Path,java.nio.file.Path):V
- s:extract(java.io.File,java.io.File,java.io.FilenameFilter):V
- s:extract(java.io.File,java.io.File,java.io.FilenameFilter,Z):V
- s:extract(java.nio.file.Path,java.nio.file.Path,java.io.FilenameFilter):V
- s:extract(java.nio.file.Path,java.nio.file.Path,java.io.FilenameFilter,Z):V
- s:isZipContainsFolder(java.io.File):Z
com.intellij.util.io.ZipUtil$FileContentProcessor
- sf:STANDARD:com.intellij.util.io.ZipUtil$FileContentProcessor
- a:getContent(java.io.File):java.io.InputStream
com.intellij.util.io.blobstorage.SpaceAllocationStrategy
- a:capacity(I,I):I
- a:defaultCapacity():I
f:com.intellij.util.io.blobstorage.SpaceAllocationStrategy$DataLengthPlusFixedPercentStrategy
- com.intellij.util.io.blobstorage.SpaceAllocationStrategy
- <init>(I,I,I,I):V
- capacity(I,I):I
- defaultCapacity():I
f:com.intellij.util.io.blobstorage.SpaceAllocationStrategy$WriterDecidesStrategy
- com.intellij.util.io.blobstorage.SpaceAllocationStrategy
- <init>(I,I):V
- capacity(I,I):I
- defaultCapacity():I
f:com.intellij.util.io.externalizer.StringCollectionExternalizer
- com.intellij.util.io.KeyDescriptor
- sf:STRING_LIST_EXTERNALIZER:com.intellij.util.io.externalizer.StringCollectionExternalizer
- <init>(java.util.function.IntFunction):V
- getHashCode(java.util.Collection):I
- isEqual(java.util.Collection,java.util.Collection):Z
- read(java.io.DataInput):java.util.Collection
- save(java.io.DataOutput,java.util.Collection):V
a:com.intellij.util.io.storage.AbstractRecordsTable
- com.intellij.util.io.storage.IRecordsTable
- psf:DEFAULT_HEADER_SIZE:I
- psf:DEFAULT_RECORD_SIZE:I
- psf:SPECIAL_NEGATIVE_SIZE_FOR_REMOVED_RECORD:I
- close():V
- createNewRecord():I
- createRecordIdIterator():com.intellij.util.io.storage.RecordIdIterator
- deleteRecord(I):V
- force():V
- getAddress(I):J
- getCapacity(I):I
- p:getHeaderSize():I
- pa:getImplVersion():I
- getLiveRecordsCount():I
- p:getOffset(I,I):I
- pa:getRecordSize():I
- getRecordsCount():I
- getSize(I):I
- getVersion():I
- pa:getZeros():B[]
- isDirty():Z
- ps:isSizeOfLiveRecord(I):Z
- ps:isSizeOfRemovedRecord(I):Z
- markDirty():V
- setAddress(I,J):V
- setCapacity(I,I):V
- setSize(I,I):V
- setVersion(I):V
a:com.intellij.util.io.storage.CapacityAllocationPolicy
- sf:DEFAULT:com.intellij.util.io.storage.CapacityAllocationPolicy
- sf:FIVE_PERCENT_FOR_GROWTH:com.intellij.util.io.storage.CapacityAllocationPolicy
- sf:FIXED:com.intellij.util.io.storage.CapacityAllocationPolicy
- sf:REASONABLY_SMALL:com.intellij.util.io.storage.CapacityAllocationPolicy
- <init>():V
- a:calculateCapacity(I):I
f:com.intellij.util.io.storage.HeavyProcessLatch
- sf:INSTANCE:com.intellij.util.io.storage.HeavyProcessLatch
- addListener(com.intellij.openapi.Disposable,com.intellij.util.io.storage.HeavyProcessLatch$HeavyProcessListener):V
- findRunningExcept(com.intellij.util.io.storage.HeavyProcessLatch$Type):com.intellij.util.io.storage.HeavyProcessLatch$Operation
- getAnyRunningOperation():com.intellij.util.io.storage.HeavyProcessLatch$Operation
- isRunning():Z
- isRunning(com.intellij.util.io.storage.HeavyProcessLatch$Type):Z
- isRunningAnythingBut(com.intellij.util.io.storage.HeavyProcessLatch$Type):Z
- performOperation(com.intellij.util.io.storage.HeavyProcessLatch$Type,java.lang.String,java.lang.Runnable):V
com.intellij.util.io.storage.HeavyProcessLatch$HeavyProcessListener
- java.util.EventListener
- a:processFinished(com.intellij.util.io.storage.HeavyProcessLatch$Operation):V
- processStarted(com.intellij.util.io.storage.HeavyProcessLatch$Operation):V
com.intellij.util.io.storage.HeavyProcessLatch$Operation
- a:getDisplayName():java.lang.String
- a:getType():com.intellij.util.io.storage.HeavyProcessLatch$Type
e:com.intellij.util.io.storage.HeavyProcessLatch$Type
- java.lang.Enum
- sf:Indexing:com.intellij.util.io.storage.HeavyProcessLatch$Type
- sf:Processing:com.intellij.util.io.storage.HeavyProcessLatch$Type
- sf:Syncing:com.intellij.util.io.storage.HeavyProcessLatch$Type
- s:valueOf(java.lang.String):com.intellij.util.io.storage.HeavyProcessLatch$Type
- s:values():com.intellij.util.io.storage.HeavyProcessLatch$Type[]
com.intellij.util.io.storage.IAppenderStream
- com.intellij.util.io.RepresentableAsByteArraySequence
- java.io.Closeable
- java.io.DataOutput
- java.io.Flushable
com.intellij.util.io.storage.IDataTable
- com.intellij.openapi.Forceable
- java.io.Closeable
- a:allocateSpace(I):J
- a:close():V
- a:force():V
- a:getFileSize():J
- a:getWaste():I
- a:isCompactNecessary():Z
- a:isDirty():Z
- a:readBytes(J,B[]):V
- a:reclaimSpace(I):V
- a:writeBytes(J,B[]):V
- a:writeBytes(J,B[],I,I):V
com.intellij.util.io.storage.IRecordsTable
- com.intellij.openapi.Forceable
- java.io.Closeable
- a:close():V
- a:createNewRecord():I
- a:createRecordIdIterator():com.intellij.util.io.storage.RecordIdIterator
- a:deleteRecord(I):V
- a:force():V
- a:getAddress(I):J
- a:getCapacity(I):I
- a:getLiveRecordsCount():I
- a:getRecordsCount():I
- a:getSize(I):I
- a:getVersion():I
- a:isDirty():Z
- a:markDirty():V
- a:setAddress(I,J):V
- a:setCapacity(I,I):V
- a:setSize(I,I):V
- a:setVersion(I):V
com.intellij.util.io.storage.IStorage
- com.intellij.openapi.Disposable
- com.intellij.openapi.Forceable
- com.intellij.util.io.CleanableStorage
- a:appendStream(I):com.intellij.util.io.storage.IAppenderStream
- a:checkSanity(I):V
- a:createRecordIdIterator():com.intellij.util.io.storage.RecordIdIterator
- a:getLiveRecordsCount():I
- a:getVersion():I
- a:readStream(I):java.io.DataInputStream
- a:replaceBytes(I,I,com.intellij.openapi.util.io.ByteArraySequence):V
- a:setVersion(I):V
- a:writeBytes(I,com.intellij.openapi.util.io.ByteArraySequence,Z):V
- a:writeStream(I):com.intellij.util.io.storage.IStorageDataOutput
- a:writeStream(I,Z):com.intellij.util.io.storage.IStorageDataOutput
com.intellij.util.io.storage.IStorageDataOutput
- com.intellij.util.io.RepresentableAsByteArraySequence
- com.intellij.util.io.storage.RecordDataOutput
- java.io.Closeable
- java.io.DataOutput
- java.io.Flushable
com.intellij.util.io.storage.RecordDataOutput
- java.io.DataOutput
- a:close():V
- a:getRecordId():I
com.intellij.util.io.storage.RecordIdIterator
- a:hasNextId():Z
- a:nextId():I
- a:validId():Z
com.intellij.util.io.storage.RefCountingContentStorage
- com.intellij.util.io.CleanableStorage
- com.intellij.util.io.storage.IStorage
- a:acquireNewRecord():I
- a:acquireRecord(I):V
- a:getRecordsCount():I
- a:getRefCount(I):I
- a:releaseRecord(I):V
c:com.intellij.util.io.storage.Storage
- com.intellij.util.io.storage.IStorage
- <init>(java.nio.file.Path):V
- <init>(java.nio.file.Path,com.intellij.util.io.storage.CapacityAllocationPolicy):V
- createNewRecord():I
- deleteRecord(I):V
f:com.intellij.util.io.zip.DosTime
- s:dosToJavaTime(J):J
- s:javaToDosTime(J):J
c:com.intellij.util.io.zip.JBZipEntry
- p:<init>(com.intellij.util.io.zip.JBZipFile):V
- p:<init>(java.lang.String,com.intellij.util.io.zip.JBZipFile):V
- addExtra(com.intellij.util.io.zip.JBZipExtraField):V
- calcDataOffset():J
- erase():V
- getComment():java.lang.String
- getCompressedSize():J
- getCrc():J
- getData():B[]
- getExternalAttributes():J
- getExtra():java.util.List
- getHeaderOffset():J
- getInternalAttributes():I
- getMethod():I
- getName():java.lang.String
- getPlatform():I
- getSize():J
- getTime():J
- getUnixMode():I
- hashCode():I
- isDirectory():Z
- setComment(java.lang.String):V
- setCompressedSize(J):V
- setCrc(J):V
- setData(B[]):V
- setData(B[],J):V
- setDataFromFile(java.io.File):V
- setDataFromPath(java.nio.file.Path):V
- setDataFromStream(java.io.InputStream):V
- setExternalAttributes(J):V
- setHeaderOffset(J):V
- setInternalAttributes(I):V
- setMethod(I):V
- p:setName(java.lang.String):V
- p:setPlatform(I):V
- setSize(J):V
- setTime(J):V
- setUnixMode(I):V
- writeDataTo(java.io.OutputStream):V
com.intellij.util.io.zip.JBZipExtraField
- a:getCentralDirectoryData():B[]
- a:getCentralDirectoryLength():com.intellij.util.io.zip.ZipShort
- a:getHeaderId():com.intellij.util.io.zip.ZipShort
- a:getLocalFileDataData():B[]
- a:getLocalFileDataLength():com.intellij.util.io.zip.ZipShort
- a:parseFromCentralDirectoryData(B[],I,I):V
- a:parseFromLocalFileData(B[],I,I):V
c:com.intellij.util.io.zip.JBZipFile
- java.io.Closeable
- <init>(java.io.File):V
- <init>(java.io.File,java.lang.String):V
- <init>(java.io.File,java.nio.charset.Charset):V
- <init>(java.io.File,java.nio.charset.Charset,Z):V
- <init>(java.io.File,java.nio.charset.Charset,Z,com.intellij.util.ThreeState):V
- <init>(java.io.File,Z):V
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.String):V
- <init>(java.nio.channels.SeekableByteChannel,java.nio.charset.Charset,Z,com.intellij.util.ThreeState):V
- close():V
- eraseEntry(com.intellij.util.io.zip.JBZipEntry):V
- gc():V
- getEncoding():java.nio.charset.Charset
- getEntries():java.util.List
- getEntry(java.lang.String):com.intellij.util.io.zip.JBZipEntry
- getOrCreateEntry(java.lang.String):com.intellij.util.io.zip.JBZipEntry
f:com.intellij.util.io.zip.Zip64ExtraField
- com.intellij.util.io.zip.JBZipExtraField
- <init>(com.intellij.util.io.zip.ZipUInt64,com.intellij.util.io.zip.ZipUInt64,com.intellij.util.io.zip.ZipUInt64):V
- getCentralDirectoryData():B[]
- getCentralDirectoryLength():com.intellij.util.io.zip.ZipShort
- getCompressedSize():com.intellij.util.io.zip.ZipUInt64
- getHeaderId():com.intellij.util.io.zip.ZipShort
- getHeaderOffset():com.intellij.util.io.zip.ZipUInt64
- getLocalFileDataData():B[]
- getLocalFileDataLength():com.intellij.util.io.zip.ZipShort
- getSize():com.intellij.util.io.zip.ZipUInt64
- parseFromCentralDirectoryData(B[],I,I):V
- parseFromLocalFileData(B[],I,I):V
f:com.intellij.util.io.zip.ZipLong
- java.lang.Cloneable
- <init>(J):V
- <init>(B[]):V
- <init>(B[],I):V
- equals(java.lang.Object):Z
- getBytes():B[]
- s:getBytes(J):B[]
- getValue():J
- s:getValue(B[]):J
- s:getValue(B[],I):J
- hashCode():I
f:com.intellij.util.io.zip.ZipShort
- java.lang.Cloneable
- <init>(I):V
- <init>(B[]):V
- <init>(B[],I):V
- equals(java.lang.Object):Z
- getBytes():B[]
- s:getBytes(I):B[]
- getValue():I
- s:getValue(B[]):I
- s:getValue(B[],I):I
- hashCode():I
f:com.intellij.util.io.zip.ZipUInt64
- <init>(J):V
- <init>(java.math.BigInteger):V
- <init>(B[]):V
- <init>(B[],I):V
- equals(java.lang.Object):Z
- getBytes():B[]
- s:getBytes(J):B[]
- s:getBytes(java.math.BigInteger):B[]
- getLongValue():J
- s:getLongValue(B[]):J
- s:getLongValue(B[],I):J
- getValue():java.math.BigInteger
- s:getValue(B[]):java.math.BigInteger
- s:getValue(B[],I):java.math.BigInteger
- hashCode():I
com.intellij.util.keyFMap.KeyFMap
- sf:EMPTY_MAP:com.intellij.util.keyFMap.KeyFMap
- a:equalsByReference(com.intellij.util.keyFMap.KeyFMap):Z
- a:get(com.intellij.openapi.util.Key):java.lang.Object
- a:getKeys():com.intellij.openapi.util.Key[]
- a:getValueIdentityHashCode():I
- a:isEmpty():Z
- a:minus(com.intellij.openapi.util.Key):com.intellij.util.keyFMap.KeyFMap
- a:plus(com.intellij.openapi.util.Key,java.lang.Object):com.intellij.util.keyFMap.KeyFMap
- a:size():I
f:com.intellij.util.lang.CompoundRuntimeException
- java.lang.RuntimeException
- <init>(java.util.List):V
- getCause():java.lang.Throwable
- getExceptions():java.util.List
- getLocalizedMessage():java.lang.String
- getMessage():java.lang.String
- printStackTrace(java.io.PrintStream):V
- printStackTrace(java.io.PrintWriter):V
- s:throwIfNotEmpty(java.util.List):V
f:com.intellij.util.lang.JavaVersion
- java.lang.Comparable
- f:build:I
- f:ea:Z
- f:feature:I
- f:minor:I
- f:update:I
- compareTo(com.intellij.util.lang.JavaVersion):I
- s:compose(I):com.intellij.util.lang.JavaVersion
- s:compose(I,I,I,I,Z):com.intellij.util.lang.JavaVersion
- s:current():com.intellij.util.lang.JavaVersion
- equals(java.lang.Object):Z
- hashCode():I
- isAtLeast(I):Z
- s:parse(java.lang.String):com.intellij.util.lang.JavaVersion
- toFeatureMinorUpdateString():java.lang.String
- toFeatureString():java.lang.String
- s:tryParse(java.lang.String):com.intellij.util.lang.JavaVersion
e:com.intellij.util.system.CpuArch
- java.lang.Enum
- sf:ARM32:com.intellij.util.system.CpuArch
- sf:ARM64:com.intellij.util.system.CpuArch
- sf:CURRENT:com.intellij.util.system.CpuArch
- sf:OTHER:com.intellij.util.system.CpuArch
- sf:UNKNOWN:com.intellij.util.system.CpuArch
- sf:X86:com.intellij.util.system.CpuArch
- sf:X86_64:com.intellij.util.system.CpuArch
- f:width:I
- s:fromString(java.lang.String):com.intellij.util.system.CpuArch
- s:is32Bit():Z
- s:isArm32():Z
- s:isArm64():Z
- s:isEmulated():Z
- s:isIntel32():Z
- s:isIntel64():Z
- s:valueOf(java.lang.String):com.intellij.util.system.CpuArch
- s:values():com.intellij.util.system.CpuArch[]
e:com.intellij.util.system.OS
- java.lang.Enum
- sf:CURRENT:com.intellij.util.system.OS
- sf:FreeBSD:com.intellij.util.system.OS
- sf:Linux:com.intellij.util.system.OS
- sf:Other:com.intellij.util.system.OS
- sf:Windows:com.intellij.util.system.OS
- sf:macOS:com.intellij.util.system.OS
- f:version:java.lang.String
- s:fromString(java.lang.String):com.intellij.util.system.OS
- getPlatform():com.intellij.execution.Platform
- s:valueOf(java.lang.String):com.intellij.util.system.OS
- s:values():com.intellij.util.system.OS[]
f:com.intellij.util.text.CharArrayIterator
- java.text.CharacterIterator
- <init>(C[],I,I):V
- clone():com.intellij.util.text.CharArrayIterator
- current():C
- first():C
- getBeginIndex():I
- getEndIndex():I
- getIndex():I
- last():C
- next():C
- previous():C
- setIndex(I):C
f:com.intellij.util.text.CharSequenceCharacterIterator
- java.text.CharacterIterator
- <init>(java.lang.CharSequence):V
- clone():java.lang.Object
- current():C
- first():C
- getBeginIndex():I
- getEndIndex():I
- getIndex():I
- last():C
- next():C
- previous():C
- setIndex(I):C
f:com.intellij.util.text.CharSequenceIterator
- java.text.CharacterIterator
- <init>(java.lang.CharSequence,I,I):V
- clone():com.intellij.util.text.CharSequenceIterator
- current():C
- first():C
- getBeginIndex():I
- getEndIndex():I
- getIndex():I
- last():C
- next():C
- previous():C
- setIndex(I):C
f:com.intellij.util.text.EditDistance
- s:levenshtein(java.lang.CharSequence,java.lang.CharSequence,Z):I
- s:optimalAlignment(java.lang.CharSequence,java.lang.CharSequence,Z):I
- s:optimalAlignment(java.lang.CharSequence,java.lang.CharSequence,Z,I):I
f:com.intellij.util.text.LineReader
- <init>(java.io.InputStream):V
- readLine():B[]
- readLines():java.util.List
f:com.intellij.util.text.PlaceholderTextRanges
- s:getPlaceholderRanges(java.lang.String,java.lang.String,java.lang.String):java.util.Set
- s:getPlaceholderRanges(java.lang.String,java.lang.String,java.lang.String,Z):java.util.Set
- s:getPlaceholderRanges(java.lang.String,java.lang.String,java.lang.String,Z,Z):java.util.Set
f:com.intellij.util.text.ReverseCharSequence
- java.lang.CharSequence
- <init>(java.lang.CharSequence):V
- charAt(I):C
- length():I
- subSequence(I,I):java.lang.CharSequence
f:com.intellij.util.text.SingleCharSequence
- java.lang.CharSequence
- <init>(C):V
- charAt(I):C
- length():I
- subSequence(I,I):java.lang.CharSequence
f:com.intellij.util.text.StringKt
- sf:allOccurrencesOf(java.lang.String,java.lang.String):kotlin.sequences.Sequence
- sf:escLBr(java.lang.String):java.lang.String
- sf:findTextRange(java.lang.String,java.lang.String):com.intellij.openapi.util.TextRange
- sf:nullize(java.lang.String,Z):java.lang.String
- sf:nullize(C[]):C[]
- bs:nullize$default(java.lang.String,Z,I,java.lang.Object):java.lang.String
- sf:trimMiddle(java.lang.String,I,Z):java.lang.String
- bs:trimMiddle$default(java.lang.String,I,Z,I,java.lang.Object):java.lang.String
f:com.intellij.util.text.StringTokenizer
- java.util.Enumeration
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.String):V
- <init>(java.lang.String,java.lang.String,Z):V
- countTokens():I
- getCurrentPosition():I
- hasMoreElements():Z
- hasMoreTokens():Z
- nextElement():java.lang.String
- nextToken():java.lang.String
- nextToken(java.lang.String):java.lang.String
- reset(java.lang.String):V
f:com.intellij.util.text.TextRangeUtil
- sf:RANGE_COMPARATOR:java.util.Comparator
- s:excludeRanges(com.intellij.openapi.util.TextRange,java.util.List):java.lang.Iterable
- s:getDistance(com.intellij.openapi.util.Segment,com.intellij.openapi.util.Segment):I
- s:getEnclosingTextRange(java.util.List):com.intellij.openapi.util.TextRange
- s:intersectsOneOf(com.intellij.openapi.util.TextRange,java.util.List):Z
- s:rangesContain(java.util.List,I):Z
f:com.intellij.util.text.TextRanges
- java.lang.Iterable
- <init>():V
- gapIterator():java.util.Iterator
- isEmpty():Z
- iterator():java.util.Iterator
- revGapIterator():java.util.Iterator
- revIterator():java.util.Iterator
- union(com.intellij.openapi.util.TextRange):com.intellij.util.text.TextRanges
c:com.intellij.util.text.UniqueNameGenerator
- com.intellij.openapi.util.Condition
- <init>():V
- <init>(java.util.Collection,com.intellij.util.Function):V
- addExistingName(java.lang.String):V
- generateUniqueName(java.lang.String):java.lang.String
- s:generateUniqueName(java.lang.String,com.intellij.openapi.util.Condition):java.lang.String
- generateUniqueName(java.lang.String,java.lang.String,java.lang.String):java.lang.String
- s:generateUniqueName(java.lang.String,java.lang.String,java.lang.String,com.intellij.openapi.util.Condition):java.lang.String
- generateUniqueName(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String):java.lang.String
- s:generateUniqueName(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.intellij.openapi.util.Condition):java.lang.String
- s:generateUniqueName(java.lang.String,java.lang.String,java.lang.String,java.util.Collection):java.lang.String
- s:generateUniqueName(java.lang.String,java.util.Collection):java.lang.String
- s:generateUniqueNameOneBased(java.lang.String,com.intellij.openapi.util.Condition):java.lang.String
- f:isUnique(java.lang.String):Z
- f:isUnique(java.lang.String,java.lang.String,java.lang.String):Z
- f:value(java.lang.String):Z
f:com.intellij.util.text.XmlCharsetDetector
- <init>():V
- s:extractXmlEncodingFromProlog(java.lang.CharSequence):java.lang.String
- s:extractXmlEncodingFromProlog(B[]):java.lang.String
f:com.intellij.util.text.minimatch.DefaultPathAdapter
- com.intellij.util.text.minimatch.PathAdapter
- sf:INSTANCE:com.intellij.util.text.minimatch.DefaultPathAdapter
- toArray(java.lang.String,com.intellij.util.text.minimatch.MinimatchOptions):java.util.List
f:com.intellij.util.text.minimatch.Minimatch
- <init>(java.lang.String):V
- <init>(java.lang.String,com.intellij.util.text.minimatch.MinimatchOptions):V
- b:<init>(java.lang.String,com.intellij.util.text.minimatch.MinimatchOptions,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- equals(java.lang.Object):Z
- f:getNegate():Z
- f:getOptions():com.intellij.util.text.minimatch.MinimatchOptions
- hashCode():I
- f:match(java.lang.Object,com.intellij.util.text.minimatch.PathAdapter):Z
- f:match(java.lang.Object,com.intellij.util.text.minimatch.PathAdapter,Z):Z
- f:match(java.lang.String):Z
- f:match(java.lang.String,Z):Z
- f:match(java.util.List,Z):Z
- bs:match$default(com.intellij.util.text.minimatch.Minimatch,java.lang.Object,com.intellij.util.text.minimatch.PathAdapter,Z,I,java.lang.Object):Z
- bs:match$default(com.intellij.util.text.minimatch.Minimatch,java.lang.String,Z,I,java.lang.Object):Z
- bs:match$default(com.intellij.util.text.minimatch.Minimatch,java.util.List,Z,I,java.lang.Object):Z
f:com.intellij.util.text.minimatch.MinimatchKt
- sf:globUnescape(java.lang.String):java.lang.String
- sf:minimatch(java.lang.String,java.lang.String):Z
- sf:minimatch(java.lang.String,java.lang.String,com.intellij.util.text.minimatch.MinimatchOptions):Z
- bs:minimatch$default(java.lang.String,java.lang.String,com.intellij.util.text.minimatch.MinimatchOptions,I,java.lang.Object):Z
- sf:minimatchAll(java.util.List,java.util.List):Z
- sf:replaceEscapedBackSlash(java.lang.String):java.lang.String
f:com.intellij.util.text.minimatch.MinimatchOptions
- <init>():V
- <init>(Z,Z,Z,Z,Z,Z,Z,Z,Z,Z):V
- b:<init>(Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- f:component1():Z
- f:component10():Z
- f:component2():Z
- f:component3():Z
- f:component4():Z
- f:component5():Z
- f:component6():Z
- f:component7():Z
- f:component8():Z
- f:component9():Z
- f:copy(Z,Z,Z,Z,Z,Z,Z,Z,Z,Z):com.intellij.util.text.minimatch.MinimatchOptions
- bs:copy$default(com.intellij.util.text.minimatch.MinimatchOptions,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,I,java.lang.Object):com.intellij.util.text.minimatch.MinimatchOptions
- equals(java.lang.Object):Z
- f:getAllowWindowsPaths():Z
- f:getDot():Z
- f:getFlipNegate():Z
- f:getMatchBase():Z
- f:getNobrace():Z
- f:getNocase():Z
- f:getNocomment():Z
- f:getNoext():Z
- f:getNoglobstar():Z
- f:getNonegate():Z
- hashCode():I
- f:setAllowWindowsPaths(Z):V
- f:setDot(Z):V
- f:setFlipNegate(Z):V
- f:setMatchBase(Z):V
- f:setNobrace(Z):V
- f:setNocase(Z):V
- f:setNocomment(Z):V
- f:setNoext(Z):V
- f:setNoglobstar(Z):V
- f:setNonegate(Z):V
com.intellij.util.text.minimatch.PathAdapter
- a:toArray(java.lang.Object,com.intellij.util.text.minimatch.MinimatchOptions):java.util.List
f:com.intellij.util.ui.EDT
- s:assertIsEdt():V
- s:dispatchAllInvocationEvents():V
- s:isCurrentThreadEdt():Z
a:com.intellij.util.ui.EdtInvocationManager
- <init>():V
- s:getInstance():com.intellij.util.ui.EdtInvocationManager
- a:invokeAndWait(java.lang.Runnable):V
- s:invokeAndWaitIfNeeded(java.lang.Runnable):V
- a:invokeLater(java.lang.Runnable):V
- s:invokeLaterIfNeeded(java.lang.Runnable):V
- f:isEventDispatchThread():Z
c:com.intellij.util.ui.EdtInvocationManager$SwingEdtInvocationManager
- com.intellij.util.ui.EdtInvocationManager
- <init>():V
- invokeAndWait(java.lang.Runnable):V
- invokeLater(java.lang.Runnable):V
com.intellij.util.xmlb.Accessor
- a:getAnnotation(java.lang.Class):java.lang.annotation.Annotation
- a:getGenericType():java.lang.reflect.Type
- a:getName():java.lang.String
- a:getValueClass():java.lang.Class
- a:isAnnotationPresent(java.lang.Class):Z
- a:isWritable():Z
- a:read(java.lang.Object):java.lang.Object
- a:readBoolean(java.lang.Object):Z
- a:readDouble(java.lang.Object):D
- a:readFloat(java.lang.Object):F
- a:readInt(java.lang.Object):I
- a:readLong(java.lang.Object):J
- a:readUnsafe(java.lang.Object):java.lang.Object
c:com.intellij.util.xmlb.BeanBinding
- com.intellij.util.xmlb.Binding
- com.intellij.util.xmlb.RootBinding
- f:beanClass:java.lang.Class
- compareByFields:com.intellij.util.ThreeState
- f:tagName:java.lang.String
- <init>(java.lang.Class):V
- f:deserializeInto(java.lang.Object,org.jdom.Element):V
- deserializeToJson(org.jdom.Element):kotlinx.serialization.json.JsonElement
- f:deserializeToJson(org.jdom.Element,Z):kotlinx.serialization.json.JsonElement
- f:equalByFields(java.lang.Object,java.lang.Object,com.intellij.util.xmlb.SkipDefaultsSerializationFilter):Z
- fromJson(java.lang.Object,kotlinx.serialization.json.JsonElement):java.lang.Object
- f:init(java.lang.reflect.Type,com.intellij.util.xmlb.Serializer):V
- newInstance():java.lang.Object
- serialize(java.lang.Object,com.intellij.util.xmlb.SerializationFilter):org.jdom.Element
- f:serialize(java.lang.Object,org.jdom.Element,com.intellij.util.xmlb.SerializationFilter):V
- f:serialize(java.lang.Object,Z,com.intellij.util.xmlb.SerializationFilter):org.jdom.Element
- f:serializeInto(java.lang.Object,org.jdom.Element,com.intellij.util.xmlb.SerializationFilter):org.jdom.Element
- serializeProperties(java.lang.Object,org.jdom.Element,com.intellij.util.xmlb.SerializationFilter):org.jdom.Element
- f:sortBindings(it.unimi.dsi.fastutil.objects.Object2FloatMap):V
- toJson(java.lang.Object,com.intellij.util.xmlb.SerializationFilter):kotlinx.serialization.json.JsonElement
com.intellij.util.xmlb.Binding
- init(java.lang.reflect.Type,com.intellij.util.xmlb.Serializer):V
- a:serialize(java.lang.Object,org.jdom.Element,com.intellij.util.xmlb.SerializationFilter):V
- a:toJson(java.lang.Object,com.intellij.util.xmlb.SerializationFilter):kotlinx.serialization.json.JsonElement
com.intellij.util.xmlb.Constants
- sf:ENTRY:java.lang.String
- sf:KEY:java.lang.String
- sf:LIST:java.lang.String
- sf:MAP:java.lang.String
- sf:NAME:java.lang.String
- sf:OPTION:java.lang.String
- sf:SET:java.lang.String
- sf:VALUE:java.lang.String
a:com.intellij.util.xmlb.Converter
- <init>():V
- a:fromString(java.lang.String):java.lang.Object
- a:toString(java.lang.Object):java.lang.String
f:com.intellij.util.xmlb.JDOMXIncluder
- sf:DEFAULT_PATH_RESOLVER:com.intellij.util.xmlb.JDOMXIncluder$PathResolver
- s:resolve(org.jdom.Element,java.net.URL):java.util.List
- s:resolveWithDefaultPluginPointer(org.jdom.Element,java.net.URL):java.util.List
com.intellij.util.xmlb.JDOMXIncluder$PathResolver
- a:resolvePath(java.lang.String,java.net.URL):java.net.URL
com.intellij.util.xmlb.RootBinding
- com.intellij.util.xmlb.Binding
- a:deserializeToJson(org.jdom.Element):kotlinx.serialization.json.JsonElement
- a:fromJson(java.lang.Object,kotlinx.serialization.json.JsonElement):java.lang.Object
- a:serialize(java.lang.Object,com.intellij.util.xmlb.SerializationFilter):org.jdom.Element
com.intellij.util.xmlb.SerializationFilter
- a:accepts(com.intellij.util.xmlb.Accessor,java.lang.Object):Z
a:com.intellij.util.xmlb.SerializationFilterBase
- com.intellij.util.xmlb.SerializationFilter
- <init>():V
- accepts(com.intellij.util.xmlb.Accessor,java.lang.Object):Z
- pa:accepts(com.intellij.util.xmlb.Accessor,java.lang.Object,java.lang.Object):Z
com.intellij.util.xmlb.Serializer
- a:getBinding(java.lang.Class,java.lang.reflect.Type):com.intellij.util.xmlb.Binding
- getRootBinding(java.lang.Class):com.intellij.util.xmlb.Binding
- a:getRootBinding(java.lang.Class,java.lang.reflect.Type):com.intellij.util.xmlb.Binding
@:com.intellij.util.xmlb.SettingsInternalApi
- java.lang.annotation.Annotation
c:com.intellij.util.xmlb.SkipDefaultValuesSerializationFilters
- com.intellij.util.xmlb.SerializationFilterBase
- <init>():V
- <init>(java.lang.Object[]):V
- p:accepts(com.intellij.util.xmlb.Accessor,java.lang.Object,java.lang.Object):Z
- p:configure(java.lang.Object):V
- getDefaultValue(java.lang.Class):java.lang.Object
- getDefaultValue(java.lang.Class,java.util.function.Function):java.lang.Object
c:com.intellij.util.xmlb.SkipDefaultsSerializationFilter
- com.intellij.util.xmlb.SkipDefaultValuesSerializationFilters
- <init>(java.lang.Object[]):V
c:com.intellij.util.xmlb.SkipEmptySerializationFilter
- com.intellij.util.xmlb.SerializationFilterBase
- <init>():V
- p:accepts(com.intellij.util.xmlb.Accessor,java.lang.Object,java.lang.Object):Z
- p:accepts(java.lang.String,java.lang.Object):com.intellij.util.ThreeState
f:com.intellij.util.xmlb.SmartSerializer
- <init>():V
- readExternal(java.lang.Object,org.jdom.Element):V
- s:skipEmptySerializer():com.intellij.util.xmlb.SmartSerializer
- writeExternal(java.lang.Object,org.jdom.Element):V
- writeExternal(java.lang.Object,org.jdom.Element,Z):V
f:com.intellij.util.xmlb.XIncludeException
- java.lang.RuntimeException
f:com.intellij.util.xmlb.XmlSerializationException
- com.intellij.serialization.SerializationException
- <init>():V
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Throwable):V
- <init>(java.lang.Throwable):V
f:com.intellij.util.xmlb.XmlSerializer
- s:deserialize(java.net.URL,java.lang.Class):java.lang.Object
- s:deserialize(org.jdom.Document,java.lang.Class):java.lang.Object
- s:deserialize(org.jdom.Element,java.lang.Class):java.lang.Object
- s:deserializeInto(java.lang.Object,org.jdom.Element):V
- s:serialize(java.lang.Object):org.jdom.Element
- s:serialize(java.lang.Object,com.intellij.util.xmlb.SerializationFilter):org.jdom.Element
- s:serializeInto(java.lang.Object,org.jdom.Element):V
- s:serializeInto(java.lang.Object,org.jdom.Element,com.intellij.util.xmlb.SerializationFilter):V
f:com.intellij.util.xmlb.XmlSerializerUtil
- s:copyBean(java.lang.Object,java.lang.Object):V
- s:createCopy(java.lang.Object):java.lang.Object
- s:getAccessors(java.lang.Class):java.util.List
@:com.intellij.util.xmlb.annotations.AbstractCollection
- java.lang.annotation.Annotation
- a:elementTag():java.lang.String
- a:elementTypes():java.lang.Class[]
- a:elementValueAttribute():java.lang.String
- a:sortOrderedSet():Z
- a:surroundWithTag():Z
@:com.intellij.util.xmlb.annotations.Attribute
- java.lang.annotation.Annotation
- a:converter():java.lang.Class
- a:value():java.lang.String
@:com.intellij.util.xmlb.annotations.CollectionBean
- java.lang.annotation.Annotation
@:com.intellij.util.xmlb.annotations.MapAnnotation
- java.lang.annotation.Annotation
- a:entryTagName():java.lang.String
- a:keyAttributeName():java.lang.String
- a:sortBeforeSave():Z
- a:surroundKeyWithTag():Z
- a:surroundValueWithTag():Z
- a:surroundWithTag():Z
- a:valueAttributeName():java.lang.String
@:com.intellij.util.xmlb.annotations.OptionTag
- java.lang.annotation.Annotation
- a:converter():java.lang.Class
- a:nameAttribute():java.lang.String
- a:tag():java.lang.String
- a:value():java.lang.String
- a:valueAttribute():java.lang.String
@:com.intellij.util.xmlb.annotations.Property
- java.lang.annotation.Annotation
- a:alwaysWrite():Z
- a:assertIfNoBindings():Z
- a:filter():java.lang.Class
- a:flat():Z
- a:style():com.intellij.util.xmlb.annotations.Property$Style
- a:surroundWithTag():Z
e:com.intellij.util.xmlb.annotations.Property$Style
- java.lang.Enum
- sf:ATTRIBUTE:com.intellij.util.xmlb.annotations.Property$Style
- sf:OPTION_TAG:com.intellij.util.xmlb.annotations.Property$Style
- s:valueOf(java.lang.String):com.intellij.util.xmlb.annotations.Property$Style
- s:values():com.intellij.util.xmlb.annotations.Property$Style[]
@:com.intellij.util.xmlb.annotations.Tag
- java.lang.annotation.Annotation
- a:textIfEmpty():java.lang.String
- a:value():java.lang.String
@:com.intellij.util.xmlb.annotations.Text
- java.lang.annotation.Annotation
@:com.intellij.util.xmlb.annotations.Transient
- java.lang.annotation.Annotation
@:com.intellij.util.xmlb.annotations.XCollection
- java.lang.annotation.Annotation
- a:elementName():java.lang.String
- a:elementTypes():java.lang.Class[]
- a:propertyElementName():java.lang.String
- a:style():com.intellij.util.xmlb.annotations.XCollection$Style
- a:valueAttributeName():java.lang.String
e:com.intellij.util.xmlb.annotations.XCollection$Style
- java.lang.Enum
- sf:v1:com.intellij.util.xmlb.annotations.XCollection$Style
- sf:v2:com.intellij.util.xmlb.annotations.XCollection$Style
- s:valueOf(java.lang.String):com.intellij.util.xmlb.annotations.XCollection$Style
- s:values():com.intellij.util.xmlb.annotations.XCollection$Style[]
@:com.intellij.util.xmlb.annotations.XMap
- java.lang.annotation.Annotation
- a:entryTagName():java.lang.String
- a:keyAttributeName():java.lang.String
- a:propertyElementName():java.lang.String
- a:valueAttributeName():java.lang.String
f:com.intellij.xml.CommonXmlStrings
- sf:AMP:java.lang.String
- sf:BODY_END:java.lang.String
- sf:BODY_START:java.lang.String
- sf:CDATA_END:java.lang.String
- sf:CDATA_START:java.lang.String
- sf:GT:java.lang.String
- sf:HTML_END:java.lang.String
- sf:HTML_START:java.lang.String
- sf:INSTANCE:com.intellij.xml.CommonXmlStrings
- sf:LT:java.lang.String
- sf:NBSP:java.lang.String
- sf:QUOT:java.lang.String
f:com.intellij.xml.util.XmlStringUtil
- s:appendEscapedSymbol(java.lang.String,java.lang.StringBuilder,I,java.lang.String,C):java.lang.StringBuilder
- s:convertToHtmlContent(java.lang.String):java.lang.String
- s:escapeIllegalXmlChars(java.lang.String):java.lang.String
- s:escapeString(java.lang.String):java.lang.String
- s:escapeString(java.lang.String,Z):java.lang.String
- s:escapeString(java.lang.String,Z,Z):java.lang.String
- s:formatLink(java.lang.String,java.lang.String):java.lang.String
- s:isWrappedInHtml(java.lang.String):Z
- s:stripHtml(java.lang.String):java.lang.String
- s:unescapeIllegalXmlChars(java.lang.String):java.lang.String
- s:wrapInCDATA(java.lang.String):java.lang.String
- s:wrapInHtml(java.lang.CharSequence):java.lang.String
- s:wrapInHtmlLines(java.lang.CharSequence[]):java.lang.String
- s:wrapInHtmlTag(java.lang.String,java.lang.String):java.lang.String
- s:wrapInHtmlTagWithAttributes(java.lang.String,java.lang.String,java.lang.String):java.lang.String
c:org.apache.log4j.Level
- org.apache.log4j.Priority
- java.io.Serializable
- sf:ALL:org.apache.log4j.Level
- sf:DEBUG:org.apache.log4j.Level
- sf:ERROR:org.apache.log4j.Level
- sf:FATAL:org.apache.log4j.Level
- sf:INFO:org.apache.log4j.Level
- sf:OFF:org.apache.log4j.Level
- sf:TRACE:org.apache.log4j.Level
- sf:TRACE_INT:I
- sf:WARN:org.apache.log4j.Level
- p:<init>(I,java.lang.String,I):V
- s:toLevel(I):org.apache.log4j.Level
- s:toLevel(I,org.apache.log4j.Level):org.apache.log4j.Level
- s:toLevel(java.lang.String):org.apache.log4j.Level
- s:toLevel(java.lang.String,org.apache.log4j.Level):org.apache.log4j.Level
f:org.jdom.ImmutableCDATA
- org.jdom.CDATA
- append(java.lang.String):V
- append(org.jdom.Text):V
- clone():org.jdom.CDATA
- detach():org.jdom.CDATA
- getParent():org.jdom.Element
- setText(java.lang.String):org.jdom.CDATA
f:org.jdom.ImmutableText
- org.jdom.Text
- append(java.lang.String):V
- append(org.jdom.Text):V
- clone():org.jdom.Text
- detach():org.jdom.Text
- getParent():org.jdom.Element
- setText(java.lang.String):org.jdom.Text
f:org.jdom.JDOMInterner
- <init>():V
- s:equals(org.jdom.Element,org.jdom.Element):Z
- s:hashCode(org.jdom.Element):I
- internElement(org.jdom.Element):org.jdom.Element
- s:isInterned(org.jdom.Element):Z
