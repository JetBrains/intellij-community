### auto-generated section `build intellij.platform.util` start
load("@rules_jvm//:jvm.bzl", "jvm_library", "jvm_provided_library", "resourcegroup")

resourcegroup(
  name = "util_resources",
  srcs = glob(["resources/**/*"]),
  strip_prefix = "resources"
)

jvm_provided_library(
  name = "platform_util_troveCompileOnly_provided",
  lib = "//platform/util/troveCompileOnly"
)

jvm_library(
  name = "util",
  module_name = "intellij.platform.util",
  visibility = ["//visibility:public"],
  srcs = glob(["src/**/*.kt", "src/**/*.java", "src/**/*.form"], allow_empty = True),
  resources = [":util_resources"],
  kotlinc_opts = "@community//:k8",
  deps = [
    "//platform/util/jdom",
    "@lib//:log4_j",
    "@lib//:jetbrains-annotations",
    "//platform/util-rt",
    "//platform/util-class-loader:util-classLoader",
    "@lib//:jna",
    "@lib//:oro_matcher",
    "@lib//:lz4-java",
    "@lib//:commons-compress",
    "@lib//:fastutil-min",
    "@lib//:kotlin-stdlib",
    "//platform/util/base",
    "//libraries/aalto-xml",
    "//platform/util/xmlDom",
    "@lib//:kotlinx-coroutines-core",
    "//libraries/kotlinx/serialization/core",
    "//libraries/kotlinx/serialization/json",
    "//platform/util/coroutines",
    "//platform/util/multiplatform",
    ":platform_util_troveCompileOnly_provided",
  ],
  exports = [
    "@lib//:jetbrains-annotations",
    "//platform/util-rt",
    "//platform/util/base",
    "//platform/util/multiplatform",
  ],
  runtime_deps = [
    "@lib//:commons-io",
    "@lib//:commons-codec",
    "@lib//:commons-lang3",
  ]
)
### auto-generated section `build intellij.platform.util` end

### auto-generated section `build intellij.platform.util.tests` start
resourcegroup(
  name = "util-tests_test_resources",
  srcs = glob(["testData/**/*"]),
  strip_prefix = "testData"
)

resourcegroup(
  name = "util-tests_test_resources_1",
  srcs = glob(["testResources/**/*"]),
  strip_prefix = "testResources"
)

jvm_library(
  name = "util-tests",
  visibility = ["//visibility:public"],
  srcs = glob([], allow_empty = True)
)

jvm_library(
  name = "util-tests_test_lib",
  module_name = "intellij.platform.util.tests",
  visibility = ["//visibility:public"],
  srcs = glob(["testSrc/**/*.kt", "testSrc/**/*.java", "testSrc/**/*.form"], allow_empty = True),
  resources = [
    ":util-tests_test_resources",
    ":util-tests_test_resources_1",
  ],
  deps = [
    "//platform/util/concurrency",
    "//platform/util/concurrency:concurrency_test_lib",
    "//platform/core-ui",
    "//platform/indexing-api:indexing",
    "//jps/model-api:model",
    "//platform/util",
    "//platform/core-impl",
    "@lib//:kotlin-stdlib",
    "@lib//:assert_j",
    "@lib//:junit4",
    "@lib//:jna",
    "//platform/core-api:core",
    "//platform/indexing-impl",
    "//platform/lang-api:lang",
    "//platform/projectModel-impl",
    "@lib//:jet_check",
    "@lib//:commons-compress",
    "//libraries/guava",
    "//platform/testFramework",
    "//platform/testFramework:testFramework_test_lib",
    "//platform/testFramework/extensions:testExtensions",
    "@lib//:memoryfilesystem",
    "//platform/util-class-loader:util-classLoader",
    "@lib//:fastutil-min",
    "//platform/platform-util-io:ide-util-io",
    "//platform/util-ex",
    "//platform/util/diff",
    "@lib//:junit5",
    "//platform/util/jdom",
    "//platform/boot",
    "//platform/testFramework/junit5",
    "//platform/testFramework/junit5:junit5_test_lib",
    "//platform/testFramework/junit5.jimfs",
    "//platform/testFramework/junit5.jimfs:junit5.jimfs_test_lib",
    "@lib//:kotlinx-coroutines-debug",
    "//tools/intellij.tools.ide.metrics.benchmark:ide-metrics-benchmark",
    "//tools/intellij.tools.ide.metrics.benchmark:ide-metrics-benchmark_test_lib",
    "//platform/util/coroutines",
    "@lib//:jetbrains-kotlinx-lincheck-jvm",
    "//libraries/mockito",
    "@lib//:mockito-kotlin",
    "@lib//:jimfs",
    "//platform/ijent/buildConstants",
    "//platform/testFramework/monorepo:monorepo_test_lib",
  ]
)
### auto-generated section `build intellij.platform.util.tests` end

### auto-generated section `test intellij.platform.util.tests` start
load("@community//build:tests-options.bzl", "jps_test")

jps_test(
  name = "util-tests_test",
  runtime_deps = [":util-tests_test_lib"]
)
### auto-generated section `test intellij.platform.util.tests` end

### auto-generated section `build intellij.platform.util.ui` start
load("@rules_jvm//:jvm.bzl", "kt_javac_options")

kt_javac_options(
  name = "custom-javac-options",
  x_ep_disable_all_checks = True,
  warn = "off",
  add_exports = [
    "java.desktop/sun.font=ALL-UNNAMED",
    "java.desktop/sun.awt.image=ALL-UNNAMED",
    "java.desktop/sun.swing=ALL-UNNAMED",
  ],
  no_proc = True
)

resourcegroup(
  name = "util-ui_resources",
  srcs = glob(["ui/resources/**/*"]),
  strip_prefix = "ui/resources"
)

jvm_library(
  name = "util-ui",
  module_name = "intellij.platform.util.ui",
  visibility = ["//visibility:public"],
  srcs = glob(["ui/src/**/*.kt", "ui/src/**/*.java", "ui/src/**/*.form"], allow_empty = True),
  resources = [":util-ui_resources"],
  javac_opts = ":custom-javac-options",
  deps = [
    "@lib//:eawtstub-provided",
    "//platform/util",
    "@lib//:imgscalr",
    "@lib//:jna",
    "@lib//:java_compatibility",
    "@lib//:kotlin-stdlib",
    "@lib//:fastutil-min",
    "//platform/util-ex",
    "@lib//:netty-buffer",
    "//libraries/caffeine",
    "//libraries/aalto-xml",
    "//platform/util/xmlDom",
    "//platform/util/zip",
    "@lib//:jbr-api",
    "@lib//:jsvg",
    "//platform/util/rt-java8",
    "//libraries/hash4j",
    "@lib//:kotlinx-coroutines-core",
    "//platform/diagnostic",
    "//libraries/kotlinx/serialization/core",
    "@lib//:kotlinx-serialization-protobuf",
    "@lib//:mvstore",
  ]
)
### auto-generated section `build intellij.platform.util.ui` end