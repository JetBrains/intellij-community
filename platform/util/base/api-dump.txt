f:com.intellij.diagnostic.CoroutineDumperKt
- sf:dumpCoroutines(kotlinx.coroutines.CoroutineScope,Z,Z):java.lang.String
- bs:dumpCoroutines$default(kotlinx.coroutines.CoroutineScope,Z,Z,I,java.lang.Object):java.lang.String
f:com.intellij.diagnostic.ThreadDumper
- s:dumpThreadsToString():java.lang.String
f:com.intellij.filename.UniqueNameBuilder
- <init>(java.lang.String,java.lang.String):V
- addPath(java.lang.Object,java.lang.String):V
- contains(java.lang.Object):Z
- getSeparator():java.lang.String
- getShortPath(java.lang.Object):java.lang.String
- size():I
com.intellij.openapi.diagnostic.ControlFlowException
c:com.intellij.openapi.progress.ProcessCanceledException
- java.util.concurrent.CancellationException
- com.intellij.openapi.diagnostic.ControlFlowException
- <init>():V
- p:<init>(java.lang.String):V
- <init>(java.lang.Throwable):V
com.intellij.openapi.util.Segment
- sf:BY_START_OFFSET_THEN_END_OFFSET:java.util.Comparator
- sf:EMPTY_ARRAY:com.intellij.openapi.util.Segment[]
- a:getEndOffset():I
- a:getStartOffset():I
c:com.intellij.openapi.util.TextRange
- com.intellij.openapi.util.Segment
- java.io.Serializable
- sf:EMPTY_ARRAY:com.intellij.openapi.util.TextRange[]
- sf:EMPTY_RANGE:com.intellij.openapi.util.TextRange
- <init>(I,I):V
- p:<init>(I,I,Z):V
- s:allOf(java.lang.String):com.intellij.openapi.util.TextRange
- s:areSegmentsEqual(com.intellij.openapi.util.Segment,com.intellij.openapi.util.Segment):Z
- s:assertProperRange(I,I,java.lang.Object):V
- s:assertProperRange(com.intellij.openapi.util.Segment):V
- s:assertProperRange(com.intellij.openapi.util.Segment,java.lang.Object):V
- contains(I):Z
- contains(com.intellij.openapi.util.Segment):Z
- contains(com.intellij.openapi.util.TextRange):Z
- containsOffset(I):Z
- containsRange(I,I):Z
- s:containsRange(com.intellij.openapi.util.Segment,com.intellij.openapi.util.Segment):Z
- s:create(I,I):com.intellij.openapi.util.TextRange
- s:create(com.intellij.openapi.util.Segment):com.intellij.openapi.util.TextRange
- cutOut(com.intellij.openapi.util.TextRange):com.intellij.openapi.util.TextRange
- equals(java.lang.Object):Z
- equalsToRange(I,I):Z
- s:from(I,I):com.intellij.openapi.util.TextRange
- f:getEndOffset():I
- f:getLength():I
- f:getStartOffset():I
- grown(I):com.intellij.openapi.util.TextRange
- hashCode():I
- intersection(com.intellij.openapi.util.TextRange):com.intellij.openapi.util.TextRange
- intersects(I,I):Z
- intersects(com.intellij.openapi.util.Segment):Z
- intersects(com.intellij.openapi.util.TextRange):Z
- intersectsStrict(I,I):Z
- intersectsStrict(com.intellij.openapi.util.TextRange):Z
- isEmpty():Z
- s:isProperRange(I,I):Z
- replace(java.lang.String,java.lang.String):java.lang.String
- shiftLeft(I):com.intellij.openapi.util.TextRange
- shiftRight(I):com.intellij.openapi.util.TextRange
- subSequence(java.lang.CharSequence):java.lang.CharSequence
- substring(java.lang.String):java.lang.String
- union(com.intellij.openapi.util.TextRange):com.intellij.openapi.util.TextRange
f:com.intellij.openapi.util.text.Formats
- <init>():V
- s:formatDuration(J):java.lang.String
- s:formatDuration(J,java.lang.String):java.lang.String
- s:formatDuration(java.time.Duration):java.lang.String
- s:formatFileSize(J):java.lang.String
- s:formatFileSize(J,java.lang.String):java.lang.String
f:com.intellij.openapi.util.text.LineTokenizer
- <init>(java.lang.CharSequence):V
- <init>(C[],I,I):V
- advance():V
- atEnd():Z
- s:calcLineCount(java.lang.CharSequence,Z):I
- getLength():I
- getLineSeparatorLength():I
- getOffset():I
- s:tokenize(java.lang.CharSequence,Z):java.lang.String[]
- s:tokenize(java.lang.CharSequence,Z,Z):java.lang.String[]
- s:tokenize(C[],I,I,Z):java.lang.String[]
- s:tokenize(C[],I,I,Z,Z):java.lang.String[]
- s:tokenize(C[],Z):java.lang.String[]
- s:tokenize(C[],Z,Z):java.lang.String[]
- s:tokenizeIntoList(java.lang.CharSequence,Z):java.util.List
- s:tokenizeIntoList(java.lang.CharSequence,Z,Z):java.util.List
f:com.intellij.openapi.util.text.NaturalComparator
- java.util.Comparator
- sf:INSTANCE:java.util.Comparator
- <init>():V
- compare(java.lang.String,java.lang.String):I
- s:naturalCompare(java.lang.String,java.lang.String,Z,Z):I
f:com.intellij.openapi.util.text.Strings
- sf:EMPTY_CHAR_SEQUENCE:java.lang.CharSequence
- <init>():V
- s:areSameInstance(java.lang.String,java.lang.String):Z
- s:capitalize(java.lang.String):java.lang.String
- s:charsEqualIgnoreCase(C,C):Z
- s:charsMatch(C,C,Z):Z
- s:compare(C,C,Z):I
- s:compare(java.lang.CharSequence,java.lang.CharSequence,Z):I
- s:contains(java.lang.CharSequence,I,I,C):Z
- s:contains(java.lang.CharSequence,java.lang.CharSequence):Z
- s:containsAnyChar(java.lang.String,java.lang.String):Z
- s:containsAnyChar(java.lang.String,java.lang.String,I,I):Z
- s:containsChar(java.lang.String,C):Z
- s:convertLineSeparators(java.lang.String):java.lang.String
- s:convertLineSeparators(java.lang.String,java.lang.String):java.lang.String
- s:convertLineSeparators(java.lang.String,java.lang.String,I[]):java.lang.String
- s:convertLineSeparators(java.lang.String,Z):java.lang.String
- s:countChars(java.lang.CharSequence,C):I
- s:countChars(java.lang.CharSequence,C,I,I,Z):I
- s:countChars(java.lang.CharSequence,C,I,Z):I
- s:endsWith(java.lang.CharSequence,java.lang.CharSequence):Z
- s:endsWithChar(java.lang.CharSequence,C):Z
- s:endsWithIgnoreCase(java.lang.CharSequence,java.lang.String):Z
- s:equalsIgnoreWhitespaces(java.lang.CharSequence,java.lang.CharSequence):Z
- s:equalsTrimWhitespaces(java.lang.CharSequence,java.lang.CharSequence):Z
- s:escapeToRegexp(java.lang.CharSequence,java.lang.StringBuilder):java.lang.StringBuilder
- s:escapeXmlEntities(java.lang.String):java.lang.String
- s:indexOf(java.lang.CharSequence,C):I
- s:indexOf(java.lang.CharSequence,C,I):I
- s:indexOf(java.lang.CharSequence,C,I,I):I
- s:indexOf(java.lang.CharSequence,C,I,I,Z):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence,I):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence,I,I):I
- s:indexOf(C[],C,I,I,Z):I
- s:indexOfAny(java.lang.CharSequence,java.lang.String):I
- s:indexOfAny(java.lang.CharSequence,java.lang.String,I,I):I
- s:indexOfAny(java.lang.String,java.lang.String):I
- s:indexOfAny(java.lang.String,java.lang.String,I,I):I
- s:indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,I):I
- s:indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,I,I):I
- s:indexOfIgnoreCase(java.lang.String,C,I):I
- s:indexOfIgnoreCase(java.lang.String,java.lang.String,I):I
- s:isAscii(C):Z
- s:isCapitalized(java.lang.String):Z
- s:isDecimalDigit(C):Z
- s:isEmpty(java.lang.CharSequence):Z
- s:isEmpty(java.lang.String):Z
- s:isEmptyOrSpaces(java.lang.CharSequence):Z
- s:isNotEmpty(java.lang.String):Z
- s:isNotNegativeNumber(java.lang.CharSequence):Z
- s:isWhiteSpace(C):Z
- s:join(java.lang.Iterable,com.intellij.util.Function,java.lang.String):java.lang.String
- s:join(java.lang.Iterable,com.intellij.util.Function,java.lang.String,java.lang.StringBuilder):V
- s:join(java.lang.Iterable,java.lang.String):java.lang.String
- s:join(java.util.Collection,com.intellij.util.Function,java.lang.String):java.lang.String
- s:join(java.util.Collection,java.lang.String):java.lang.String
- s:join(java.util.Collection,java.lang.String,java.lang.StringBuilder):V
- s:join(I[],java.lang.String):java.lang.String
- s:join(java.lang.Object[],com.intellij.util.Function,java.lang.String):java.lang.String
- s:join(java.lang.String[]):java.lang.String
- s:notNullize(java.lang.String):java.lang.String
- s:notNullize(java.lang.String,java.lang.String):java.lang.String
- s:nullize(java.lang.String):java.lang.String
- s:nullize(java.lang.String,java.lang.String):java.lang.String
- s:nullize(java.lang.String,Z):java.lang.String
- s:pluralize(java.lang.String):java.lang.String
- s:replace(java.lang.String,java.util.List,java.util.List):java.lang.String
- s:startsWith(java.lang.CharSequence,I,java.lang.CharSequence):Z
- s:stringHashCode(java.lang.CharSequence):I
- s:stringHashCode(java.lang.CharSequence,I,I):I
- s:stringHashCode(java.lang.CharSequence,I,I,I):I
- s:stringHashCode(C[],I,I):I
- s:stringHashCodeIgnoreWhitespaces(java.lang.CharSequence):I
- s:stringHashCodeInsensitive(java.lang.CharSequence):I
- s:stringHashCodeInsensitive(java.lang.CharSequence,I,I):I
- s:stringHashCodeInsensitive(java.lang.CharSequence,I,I,I):I
- s:stringHashCodeInsensitive(C[],I,I):I
- s:toLowerCase(C):C
- s:toLowerCase(java.lang.String):java.lang.String
- s:toUpperCase(C):C
- s:toUpperCase(java.lang.String):java.lang.String
- s:trim(java.lang.String):java.lang.String
- s:trimEnd(java.lang.String,C):java.lang.String
- s:trimEnd(java.lang.String,java.lang.String):java.lang.String
- s:trimEnd(java.lang.String,java.lang.String,Z):java.lang.String
- s:trimStart(java.lang.String,java.lang.String):java.lang.String
- s:unescapeXmlEntities(java.lang.String):java.lang.String
- s:unpluralize(java.lang.String):java.lang.String
c:com.intellij.reference.SoftReference
- java.lang.ref.SoftReference
- java.util.function.Supplier
- <init>(java.lang.Object):V
- s:deref(java.util.function.Supplier):java.lang.Object
- s:dereference(java.lang.ref.Reference):java.lang.Object
e:com.intellij.smRunner.OutputStreamType
- java.lang.Enum
- sf:STDERR:com.intellij.smRunner.OutputStreamType
- sf:STDOUT:com.intellij.smRunner.OutputStreamType
- sf:SYSTEM:com.intellij.smRunner.OutputStreamType
- s:getEntries():kotlin.enums.EnumEntries
- s:valueOf(java.lang.String):com.intellij.smRunner.OutputStreamType
- s:values():com.intellij.smRunner.OutputStreamType[]
f:com.intellij.smRunner.OutputType
- <init>(java.lang.Object,com.intellij.smRunner.OutputStreamType):V
- f:component1():java.lang.Object
- f:component2():com.intellij.smRunner.OutputStreamType
- f:copy(java.lang.Object,com.intellij.smRunner.OutputStreamType):com.intellij.smRunner.OutputType
- bs:copy$default(com.intellij.smRunner.OutputType,java.lang.Object,com.intellij.smRunner.OutputStreamType,I,java.lang.Object):com.intellij.smRunner.OutputType
- equals(java.lang.Object):Z
- f:getData():java.lang.Object
- f:getStreamType():com.intellij.smRunner.OutputStreamType
- hashCode():I
com.intellij.util.ArrayFactory
- a:create(I):java.lang.Object[]
f:com.intellij.util.ArrayUtil
- sf:EMPTY_BYTE_ARRAY:B[]
- sf:EMPTY_CHAR_ARRAY:C[]
- sf:EMPTY_CHAR_SEQUENCE:java.lang.CharSequence
- sf:EMPTY_CLASS_ARRAY:java.lang.Class[]
- sf:EMPTY_DOUBLE_ARRAY:D[]
- sf:EMPTY_FILE_ARRAY:java.io.File[]
- sf:EMPTY_INT_ARRAY:I[]
- sf:EMPTY_LONG_ARRAY:J[]
- sf:EMPTY_OBJECT_ARRAY:java.lang.Object[]
- sf:EMPTY_RUNNABLE_ARRAY:java.lang.Runnable[]
- sf:EMPTY_STRING_ARRAY:java.lang.String[]
- sf:OBJECT_ARRAY_FACTORY:com.intellij.util.ArrayFactory
- sf:STRING_ARRAY_FACTORY:com.intellij.util.ArrayFactory
- s:append(B[],B):B[]
- s:append(I[],I):I[]
- s:append(J[],J):J[]
- s:append(java.lang.Object[],java.lang.Object):java.lang.Object[]
- s:append(java.lang.Object[],java.lang.Object,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:append(java.lang.Object[],java.lang.Object,java.lang.Class):java.lang.Object[]
- s:append(Z[],Z):Z[]
- s:areEqual(java.lang.Object[],java.lang.Object[],java.util.function.BiPredicate):Z
- s:averageAmongMedians(I[],I):J
- s:averageAmongMedians(J[],I):J
- s:contains(java.lang.Object,java.lang.Object[]):Z
- s:contains(java.lang.String,java.lang.String[]):Z
- s:copy(java.util.Collection,java.lang.Object[],I):V
- s:copyOf(B[]):B[]
- s:copyOf(I[]):I[]
- s:copyOf(java.lang.Object[]):java.lang.Object[]
- s:copyOf(Z[]):Z[]
- s:ensureExactSize(I,java.lang.Object[]):java.lang.Object[]
- s:find(I[],I):I
- s:find(java.lang.Object[],java.lang.Object):I
- s:getComponentType(java.lang.Object[]):java.lang.Class
- s:getFirstElement(java.lang.Object[]):java.lang.Object
- s:getLastElement(I[],I):I
- s:getLastElement(java.lang.Object[]):java.lang.Object
- s:indexOf(java.util.List,java.lang.Object,java.util.function.BiPredicate):I
- s:indexOf(B[],B[],I):I
- s:indexOf(I[],I):I
- s:indexOf(J[],J):I
- s:indexOf(java.lang.Object[],java.lang.Object):I
- s:indexOf(java.lang.Object[],java.lang.Object,java.util.function.BiPredicate):I
- s:indexOfIdentity(java.lang.Object[],java.lang.Object):I
- s:insert(C[],I,C):C[]
- s:insert(I[],I,I):I[]
- s:insert(J[],I,J):J[]
- s:insert(java.lang.Object[],I,java.lang.Object):java.lang.Object[]
- s:intersection(I[],I[]):I[]
- s:isEmpty(java.lang.Object[]):Z
- s:lastIndexOf(I[],I):I
- s:lastIndexOf(java.lang.Object[],java.lang.Object):I
- s:lastIndexOfNot(I[],I):I
- s:lexicographicCompare(I[],I[]):I
- s:lexicographicCompare(java.lang.Comparable[],java.lang.Comparable[]):I
- s:lexicographicCompare(java.lang.String[],java.lang.String[]):I
- s:max(D[]):D
- s:max(I[]):I
- s:mergeArrayAndCollection(java.lang.Object[],java.util.Collection,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:mergeArrays(B[],B[]):B[]
- s:mergeArrays(I[],I[]):I[]
- s:mergeArrays(java.lang.Object[],java.lang.Object[]):java.lang.Object[]
- s:mergeArrays(java.lang.Object[],java.lang.Object[],com.intellij.util.ArrayFactory):java.lang.Object[]
- s:mergeArrays(java.lang.String[],java.lang.String[]):java.lang.String[]
- s:mergeCollections(java.util.Collection,java.util.Collection,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:mergeSortedArrays(I[],I[],Z):I[]
- s:min(I[]):I
- s:newArray(java.lang.Class,I):java.lang.Object[]
- s:newByteArray(I):B[]
- s:newIntArray(I):I[]
- s:newLongArray(I):J[]
- s:newObjectArray(I):java.lang.Object[]
- s:newStringArray(I):java.lang.String[]
- s:prepend(B,B[]):B[]
- s:prepend(java.lang.Object,java.lang.Object[]):java.lang.Object[]
- s:prepend(java.lang.Object,java.lang.Object[],com.intellij.util.ArrayFactory):java.lang.Object[]
- s:prepend(java.lang.Object,java.lang.Object[],java.lang.Class):java.lang.Object[]
- s:realloc(B[],I):B[]
- s:realloc(C[],I):C[]
- s:realloc(D[],I):D[]
- s:realloc(I[],I):I[]
- s:realloc(J[],I):J[]
- s:realloc(java.lang.Object[],I,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:realloc(S[],I):S[]
- s:realloc(Z[],I):Z[]
- s:remove(I[],I):I[]
- s:remove(java.lang.Object[],I):java.lang.Object[]
- s:remove(java.lang.Object[],I,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:remove(java.lang.Object[],java.lang.Object):java.lang.Object[]
- s:remove(java.lang.Object[],java.lang.Object,com.intellij.util.ArrayFactory):java.lang.Object[]
- s:remove(S[],I):S[]
- s:reverseArray(I[]):I[]
- s:reverseArray(java.lang.Object[]):java.lang.Object[]
- s:rotateLeft(java.lang.Object[],I,I):V
- s:rotateRight(java.lang.Object[],I,I):V
- s:startsWith(B[],I,B[]):Z
- s:startsWith(B[],B[]):Z
- s:startsWith(java.lang.Object[],java.lang.Object[]):Z
- s:stripTrailingNulls(java.lang.Object[]):java.lang.Object[]
- s:swap(C[],I,I):V
- s:swap(I[],I,I):V
- s:swap(java.lang.Object[],I,I):V
- s:swap(Z[],I,I):V
- s:toIntArray(java.util.Collection):I[]
- s:toObjectArray(java.lang.Class,java.lang.Object[]):java.lang.Object[]
- s:toObjectArray(java.util.Collection):java.lang.Object[]
- s:toObjectArray(java.util.Collection,java.lang.Class):java.lang.Object[]
- s:toStringArray(java.util.Collection):java.lang.String[]
com.intellij.util.Function
- java.util.function.Function
- apply(java.lang.Object):java.lang.Object
- a:fun(java.lang.Object):java.lang.Object
com.intellij.util.Function$Mono
- com.intellij.util.Function
c:com.intellij.util.IncorrectOperationException
- java.lang.RuntimeException
- <init>():V
- <init>(java.lang.String):V
- <init>(java.lang.String,java.lang.Exception):V
- <init>(java.lang.String,java.lang.Throwable):V
- <init>(java.lang.Throwable):V
f:com.intellij.util.IntPair
- f:first:I
- f:second:I
- <init>(I,I):V
- equals(java.lang.Object):Z
- hashCode():I
f:com.intellij.util.ObjectUtilsRt
- <init>():V
- s:reachabilityFence(java.lang.Object):V
com.intellij.util.Processor
- a:process(java.lang.Object):Z
c:com.intellij.util.SmartList
- java.util.AbstractList
- java.util.RandomAccess
- <init>():V
- <init>(java.lang.Object):V
- <init>(java.util.Collection):V
- <init>(java.lang.Object[]):V
- add(I,java.lang.Object):V
- add(java.lang.Object):Z
- contains(java.lang.Object):Z
- equals(java.lang.Object):Z
- forEach(java.util.function.Consumer):V
- get(I):java.lang.Object
- getModificationCount():I
- indexOf(java.lang.Object):I
- iterator():java.util.Iterator
- remove(I):java.lang.Object
- p:removeRange(I,I):V
- set(I,java.lang.Object):java.lang.Object
- size():I
- sort(java.util.Comparator):V
- toArray(java.lang.Object[]):java.lang.Object[]
- trimToSize():V
f:com.intellij.util.SystemProperties
- s:getBooleanProperty(java.lang.String,Z):Z
- s:getFloatProperty(java.lang.String,F):F
- s:getIntProperty(java.lang.String,I):I
- s:getJavaHome():java.lang.String
- s:getLongProperty(java.lang.String,J):J
- s:getUserHome():java.lang.String
- s:getUserName():java.lang.String
- s:setProperty(java.lang.String,java.lang.String):java.lang.String
f:com.intellij.util.containers.CollectionFactory
- <init>():V
- s:createCaseInsensitiveStringMap():java.util.Map
- s:createCaseInsensitiveStringMap(I):java.util.Map
- s:createCaseInsensitiveStringMap(java.util.Map):java.util.Map
- s:createCaseInsensitiveStringSet():java.util.Set
- s:createCaseInsensitiveStringSet(I):java.util.Set
- s:createCaseInsensitiveStringSet(java.util.Collection):java.util.Set
- s:createCharSequenceMap(I,F,Z):java.util.Map
- s:createCharSequenceMap(Z):java.util.Map
- s:createCharSequenceMap(Z,I,F):java.util.Map
- s:createCharSequenceSet(java.util.List):java.util.Set
- s:createCharSequenceSet(Z):java.util.Set
- s:createCharSequenceSet(Z,I):java.util.Set
- s:createCharSequenceSet(Z,I,F):java.util.Set
- s:createConcurrentSoftKeySoftValueMap(I,F,I):java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftMap(I,F,I,com.intellij.util.containers.HashingStrategy):java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftMap(java.util.function.BiConsumer):java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentSoftValueMap(java.util.function.BiConsumer):java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakCaseInsensitiveMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakIdentityMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeySoftValueIdentityMap(I,F,I):java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeySoftValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeySoftValueMap(I,F,I,com.intellij.util.containers.HashingStrategy):java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeyWeakValueIdentityMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeyWeakValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakKeyWeakValueMap(com.intellij.util.containers.HashingStrategy):java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakMap(I,F,I,com.intellij.util.containers.HashingStrategy):java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakMap(com.intellij.util.containers.HashingStrategy):java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakValueMap():java.util.concurrent.ConcurrentMap
- s:createConcurrentWeakValueMap(java.util.function.BiConsumer):java.util.concurrent.ConcurrentMap
- s:createCustomHashingStrategyMap(I,com.intellij.util.containers.HashingStrategy):java.util.Map
- s:createCustomHashingStrategyMap(com.intellij.util.containers.HashingStrategy):java.util.Map
- s:createCustomHashingStrategySet(com.intellij.util.containers.HashingStrategy):java.util.Set
- s:createFilePathLinkedMap():java.util.Map
- s:createFilePathLinkedSet():java.util.Set
- s:createFilePathLinkedSet(java.util.Set):java.util.Set
- s:createFilePathMap():java.util.Map
- s:createFilePathMap(I):java.util.Map
- s:createFilePathMap(I,Z):java.util.Map
- s:createFilePathSet():java.util.Set
- s:createFilePathSet(I):java.util.Set
- s:createFilePathSet(I,Z):java.util.Set
- s:createFilePathSet(java.util.Collection):java.util.Set
- s:createFilePathSet(java.util.Collection,Z):java.util.Set
- s:createFilePathSet(java.lang.String[],Z):java.util.Set
- s:createLinkedCustomHashingStrategyMap(com.intellij.util.containers.HashingStrategy):java.util.Map
- s:createLinkedCustomHashingStrategySet(com.intellij.util.containers.HashingStrategy):java.util.Set
- s:createSmallMemoryFootprintLinkedMap():java.util.Map
- s:createSmallMemoryFootprintLinkedSet():java.util.Set
- s:createSmallMemoryFootprintMap():java.util.Map
- s:createSmallMemoryFootprintMap(I):java.util.Map
- s:createSmallMemoryFootprintMap(I,F):java.util.Map
- s:createSmallMemoryFootprintMap(java.util.Map):java.util.Map
- s:createSmallMemoryFootprintSet():java.util.Set
- s:createSmallMemoryFootprintSet(I):java.util.Set
- s:createSmallMemoryFootprintSet(java.util.Collection):java.util.Set
- s:createSoftKeySoftValueMap():java.util.Map
- s:createSoftMap():java.util.Map
- s:createSoftMap(com.intellij.util.containers.HashingStrategy,java.util.function.BiConsumer):java.util.Map
- s:createSoftMap(java.util.function.BiConsumer):java.util.Map
- s:createWeakIdentityMap(I,F):java.util.Map
- s:createWeakKeySoftValueMap():java.util.Map
- s:createWeakKeyWeakValueMap():java.util.Map
- s:createWeakMap():java.util.Map
- s:createWeakMap(I,F,com.intellij.util.containers.HashingStrategy):java.util.Map
- s:trimMap(java.util.Map):V
- s:trimSet(java.util.Set):V
c:com.intellij.util.containers.ConcurrentWeakKeySoftValueHashMap
- java.util.concurrent.ConcurrentMap
- p:<init>(I,F,I):V
- p:<init>(I,F,I,com.intellij.util.containers.HashingStrategy):V
- clear():V
- containsKey(java.lang.Object):Z
- containsValue(java.lang.Object):Z
- p:createValueReference(java.lang.Object,java.lang.ref.ReferenceQueue):com.intellij.util.containers.ConcurrentWeakKeySoftValueHashMap$ValueReference
- entrySet():java.util.Set
- get(java.lang.Object):java.lang.Object
- isEmpty():Z
- keySet():java.util.Set
- put(java.lang.Object,java.lang.Object):java.lang.Object
- putAll(java.util.Map):V
- putIfAbsent(java.lang.Object,java.lang.Object):java.lang.Object
- remove(java.lang.Object):java.lang.Object
- remove(java.lang.Object,java.lang.Object):Z
- replace(java.lang.Object,java.lang.Object):java.lang.Object
- replace(java.lang.Object,java.lang.Object,java.lang.Object):Z
- size():I
- values():java.util.Collection
com.intellij.util.containers.ConcurrentWeakKeySoftValueHashMap$KeyReference
- java.util.function.Supplier
- a:equals(java.lang.Object):Z
- a:get():java.lang.Object
- a:getValueReference():com.intellij.util.containers.ConcurrentWeakKeySoftValueHashMap$ValueReference
- a:hashCode():I
com.intellij.util.containers.ConcurrentWeakKeySoftValueHashMap$ValueReference
- java.util.function.Supplier
- a:get():java.lang.Object
- a:getKeyReference():com.intellij.util.containers.ConcurrentWeakKeySoftValueHashMap$KeyReference
f:com.intellij.util.containers.FList
- java.util.AbstractList
- s:createFromReversed(java.lang.Iterable):com.intellij.util.containers.FList
- s:emptyList():com.intellij.util.containers.FList
- equals(java.lang.Object):Z
- get(I):java.lang.Object
- getHead():java.lang.Object
- getTail():com.intellij.util.containers.FList
- hashCode():I
- iterator():java.util.Iterator
- prepend(java.lang.Object):com.intellij.util.containers.FList
- s:singleton(java.lang.Object):com.intellij.util.containers.FList
- size():I
- without(java.lang.Object):com.intellij.util.containers.FList
f:com.intellij.util.containers.FileCollectionFactory
- sf:INSTANCE:com.intellij.util.containers.FileCollectionFactory
- sf:createCanonicalFileLinkedSet():java.util.Set
- sf:createCanonicalFileMap():java.util.Map
- sf:createCanonicalFileMap(I):java.util.Map
- sf:createCanonicalFileMap(java.util.Map):java.util.Map
- sf:createCanonicalFilePathLinkedMap():java.util.Map
- sf:createCanonicalFilePathSet():java.util.Set
- sf:createCanonicalFileSet():java.util.Set
- sf:createCanonicalFileSet(java.util.Collection):java.util.Set
- sf:createCanonicalLinkedPathSet():java.util.Set
- sf:createCanonicalPathLinkedMap():java.util.Map
- sf:createCanonicalPathMap():java.util.Map
- sf:createCanonicalPathSet():java.util.Set
- sf:createCanonicalPathSet(I):java.util.Set
- sf:createCanonicalPathSet(java.util.Collection):java.util.Set
- sf:createCaseSensitiveAwarePathSet():java.util.Set
com.intellij.util.containers.HashingStrategy
- s:canonical():com.intellij.util.containers.HashingStrategy
- s:caseInsensitive():com.intellij.util.containers.HashingStrategy
- s:caseInsensitiveCharSequence():com.intellij.util.containers.HashingStrategy
- s:caseSensitiveCharSequence():com.intellij.util.containers.HashingStrategy
- a:equals(java.lang.Object,java.lang.Object):Z
- a:hashCode(java.lang.Object):I
- s:identity():com.intellij.util.containers.HashingStrategy
Fa:com.intellij.util.containers.Interner
- <init>():V
- a:clear():V
- s:createInterner():com.intellij.util.containers.Interner
- s:createStringInterner():com.intellij.util.containers.Interner
- s:createWeakInterner():com.intellij.util.containers.Interner
- a:getValues():java.util.Set
- a:intern(java.lang.Object):java.lang.Object
com.intellij.util.containers.PeekableIterator
- java.util.Iterator
- sf:EMPTY:com.intellij.util.containers.PeekableIterator
- a:peek():java.lang.Object
c:com.intellij.util.containers.PeekableIteratorWrapper
- com.intellij.util.containers.PeekableIterator
- <init>(java.util.Iterator):V
- hasNext():Z
- next():java.lang.Object
- peek():java.lang.Object
- remove():V
f:com.intellij.util.containers.SoftArrayHashMap
- java.lang.Cloneable
- <init>():V
- clear():V
- clone():com.intellij.util.containers.SoftArrayHashMap
- containsKey(java.lang.Object[]):Z
- get(java.lang.Object[]):java.lang.Object
- processLeafEntries(java.util.function.BiPredicate):Z
- put(java.lang.Object[],java.lang.Object):V
c:com.intellij.util.text.CharArrayCharSequence
- java.lang.CharSequence
- pf:myChars:C[]
- pf:myEnd:I
- pf:myStart:I
- <init>(C[]):V
- <init>(C[],I,I):V
- f:charAt(I):C
- equals(java.lang.Object):Z
- getChars():C[]
- getChars(C[],I):V
- hashCode():I
- f:length():I
- readCharsTo(I,C[],I,I):I
- subSequence(I,I):java.lang.CharSequence
com.intellij.util.text.CharArrayExternalizable
- java.lang.CharSequence
- a:getChars(I,I,C[],I):V
f:com.intellij.util.text.CharArrayUtil
- s:containLineBreaks(java.lang.CharSequence):Z
- s:containLineBreaks(java.lang.CharSequence,I,I):Z
- s:containsOnlyWhiteSpaces(java.lang.CharSequence):Z
- s:createImmutableCharSequence(java.lang.CharSequence):com.intellij.util.text.ImmutableCharSequence
- s:equals(C[],I,I,C[],I,I):Z
- s:fromSequence(java.lang.CharSequence):C[]
- s:fromSequence(java.lang.CharSequence,I,I):C[]
- s:fromSequenceWithoutCopying(java.lang.CharSequence):C[]
- s:getChars(java.lang.CharSequence,C[],I):V
- s:getChars(java.lang.CharSequence,C[],I,I):V
- s:getChars(java.lang.CharSequence,C[],I,I,I):V
- s:getIndents(java.lang.CharSequence,I):com.intellij.openapi.util.TextRange[]
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence,I):I
- s:indexOf(java.lang.CharSequence,java.lang.CharSequence,I,I):I
- s:indexOf(C[],C,I,I):I
- s:indexOf(C[],java.lang.String,I):I
- s:isEmptyOrSpaces(java.lang.CharSequence,I,I):Z
- s:lastIndexOf(java.lang.CharSequence,java.lang.String,I):I
- s:lastIndexOf(C[],C,I,I):I
- s:lastIndexOf(C[],java.lang.String,I):I
- s:readerFromCharSequence(java.lang.CharSequence):java.io.Reader
- s:regionMatches(java.lang.CharSequence,I,I,java.lang.CharSequence):Z
- s:regionMatches(java.lang.CharSequence,I,I,java.lang.CharSequence,I,I):Z
- s:regionMatches(java.lang.CharSequence,I,I,java.lang.CharSequence,I,I,Z):Z
- s:regionMatches(java.lang.CharSequence,I,java.lang.CharSequence):Z
- s:regionMatches(C[],I,I,java.lang.CharSequence):Z
- s:shiftBackward(java.lang.CharSequence,I,I,java.lang.String):I
- s:shiftBackward(java.lang.CharSequence,I,java.lang.String):I
- s:shiftBackward(C[],I,java.lang.String):I
- s:shiftBackwardUntil(java.lang.CharSequence,I,java.lang.String):I
- s:shiftForward(java.lang.CharSequence,I,I,java.lang.String):I
- s:shiftForward(java.lang.CharSequence,I,java.lang.String):I
- s:shiftForward(C[],I,java.lang.String):I
- s:shiftForwardCarefully(java.lang.CharSequence,I,java.lang.String):I
- s:shiftForwardUntil(java.lang.CharSequence,I,java.lang.String):I
c:com.intellij.util.text.CharSequenceBackedByChars
- com.intellij.util.text.CharArrayCharSequence
- <init>(java.nio.CharBuffer):V
- <init>(C[]):V
- <init>(C[],I,I):V
- getByteBuffer():java.nio.ByteBuffer
- subSequence(I,I):java.lang.CharSequence
f:com.intellij.util.text.CharSequenceReader
- java.io.Reader
- <init>(java.lang.CharSequence):V
- close():V
- read():I
- read(C[],I,I):I
c:com.intellij.util.text.CharSequenceSubSequence
- com.intellij.util.text.CharArrayExternalizable
- java.lang.CharSequence
- <init>(java.lang.CharSequence):V
- <init>(java.lang.CharSequence,I,I):V
- f:charAt(I):C
- equals(java.lang.Object):Z
- getChars(I,I,C[],I):V
- hashCode():I
- f:length():I
- subSequence(I,I):java.lang.CharSequence
a:com.intellij.util.text.ImmutableCharSequence
- java.lang.CharSequence
- <init>():V
- s:asImmutable(java.lang.CharSequence):java.lang.CharSequence
- a:concat(java.lang.CharSequence):com.intellij.util.text.ImmutableCharSequence
- a:delete(I,I):com.intellij.util.text.ImmutableCharSequence
- a:insert(I,java.lang.CharSequence):com.intellij.util.text.ImmutableCharSequence
- replace(I,I,java.lang.CharSequence):com.intellij.util.text.ImmutableCharSequence
- a:subtext(I,I):com.intellij.util.text.ImmutableCharSequence
- a:toString():java.lang.String
com.intellij.util.text.Matcher
- a:matches(java.lang.String):Z
f:com.intellij.util.text.MergingCharSequence
- java.lang.CharSequence
- <init>(java.lang.CharSequence,java.lang.CharSequence):V
- charAt(I):C
- length():I
- subSequence(I,I):java.lang.CharSequence
f:com.intellij.util.text.NameUtilCore
- <init>():V
- s:isWordStart(java.lang.String,I):Z
- s:nameToWords(java.lang.String):java.lang.String[]
- s:nextWord(java.lang.String,I):I
- s:splitNameIntoWords(java.lang.String):java.lang.String[]
f:com.intellij.util.text.SemVer
- java.lang.Comparable
- <init>(java.lang.String,I,I,I):V
- <init>(java.lang.String,I,I,I,java.lang.String):V
- compareTo(com.intellij.util.text.SemVer):I
- equals(java.lang.Object):Z
- getMajor():I
- getMinor():I
- getParsedVersion():java.lang.String
- getPatch():I
- getPreRelease():java.lang.String
- getRawVersion():java.lang.String
- hashCode():I
- isGreaterOrEqualThan(I,I,I):Z
- isGreaterOrEqualThan(com.intellij.util.text.SemVer):Z
- isGreaterThan(com.intellij.util.text.SemVer):Z
- s:parseFromText(java.lang.String):com.intellij.util.text.SemVer
f:com.intellij.util.text.StringOperation
- s:applyOperations(java.lang.CharSequence,java.util.Collection):java.lang.CharSequence
- equals(java.lang.Object):Z
- getRange():com.intellij.openapi.util.TextRange
- getReplacement():java.lang.CharSequence
- hashCode():I
- s:insert(I,java.lang.CharSequence):com.intellij.util.text.StringOperation
- s:remove(I,I):com.intellij.util.text.StringOperation
- s:remove(com.intellij.openapi.util.TextRange):com.intellij.util.text.StringOperation
- s:replace(I,I,java.lang.CharSequence):com.intellij.util.text.StringOperation
- s:replace(com.intellij.openapi.util.TextRange,java.lang.CharSequence):com.intellij.util.text.StringOperation
f:com.intellij.util.text.StringSearcher
- <init>(java.lang.String,Z,Z):V
- <init>(java.lang.String,Z,Z,Z):V
- <init>(java.lang.String,Z,Z,Z,Z):V
- equals(java.lang.Object):Z
- findAllOccurrences(java.lang.CharSequence):I[]
- getPattern():java.lang.String
- getPatternLength():I
- hashCode():I
- isCaseSensitive():Z
- isHandleEscapeSequences():Z
- isJavaIdentifier():Z
- processOccurrences(java.lang.CharSequence,java.util.function.IntPredicate):Z
- scan(java.lang.CharSequence):I
- scan(java.lang.CharSequence,I,I):I
- scan(java.lang.CharSequence,C[],I,I):I
