///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2001, Eric D. Friedman All Rights Reserved.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
///////////////////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, PLEASE DO NOT EDIT OR ELSE
package gnu.trove;

import java.util.ConcurrentModificationException;

/**
 * Iterator for int collections.
 *
 * @author Eric D. Friedman
 */
@Deprecated
public final class TIntIterator extends TIterator {
  private final TIntHash _hash;

  /**
   * Creates a TIntIterator for the elements in the specified collection.
   */
  public TIntIterator(TIntHash hash) {
    super(hash);
    _hash = hash;
  }

  /**
   * Advances the iterator to the next element in the underlying collection
   * and returns it.
   *
   * @return the next int in the collection
   * @throws java.util.NoSuchElementException if the iterator is already exhausted
   */
  public int next() {
    moveToNextIndex();
    return _hash._set[_index];
  }

  /**
   * Returns the index of the next value in the data structure
   * or a negative value if the iterator is exhausted.
   *
   * @return an <code>int</code> value
   * @throws ConcurrentModificationException if the underlying collection's
   *                                         size has been modified since the iterator was created.
   */
  @Override
  protected int nextIndex() {
    if (_expectedSize != _hash.size()) {
      throw new ConcurrentModificationException();
    }

    byte[] states = _hash._states;
    int i = _index;
    while (i-- > 0 && (states[i] != TPrimitiveHash.FULL)) ;
    return i;
  }
}// TIntIterator
