*f:com.intellij.platform.util.coroutines.CollectionsKt
- sf:filterConcurrent(java.util.Collection,I,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation):java.lang.Object
- bs:filterConcurrent$default(java.util.Collection,I,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation,I,java.lang.Object):java.lang.Object
- sf:forEachConcurrent(java.util.Collection,I,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation):java.lang.Object
- bs:forEachConcurrent$default(java.util.Collection,I,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation,I,java.lang.Object):java.lang.Object
- sf:mapConcurrent(java.util.Collection,I,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation):java.lang.Object
- bs:mapConcurrent$default(java.util.Collection,I,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation,I,java.lang.Object):java.lang.Object
- sf:transformConcurrent(java.util.Collection,I,kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation):java.lang.Object
- bs:transformConcurrent$default(java.util.Collection,I,kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation,I,java.lang.Object):java.lang.Object
f:com.intellij.platform.util.coroutines.CoroutineScopeKt
- *sf:childScope(kotlinx.coroutines.CoroutineScope,java.lang.String,kotlin.coroutines.CoroutineContext,Z):kotlinx.coroutines.CoroutineScope
- *bs:childScope$default(kotlinx.coroutines.CoroutineScope,java.lang.String,kotlin.coroutines.CoroutineContext,Z,I,java.lang.Object):kotlinx.coroutines.CoroutineScope
*:com.intellij.platform.util.coroutines.TransformCollector
- invoke(java.lang.Object,kotlin.coroutines.Continuation):java.lang.Object
- bs:invoke$suspendImpl(com.intellij.platform.util.coroutines.TransformCollector,java.lang.Object,kotlin.coroutines.Continuation):java.lang.Object
- a:out(java.lang.Object,kotlin.coroutines.Continuation):java.lang.Object
*f:com.intellij.platform.util.coroutines.channel.ChannelInputStream
- java.io.InputStream
- *sf:Companion:com.intellij.platform.util.coroutines.channel.ChannelInputStream$Companion
- available():I
- close():V
- read():I
- read(B[],I,I):I
*f:com.intellij.platform.util.coroutines.channel.ChannelInputStream$Companion
- f:forArrays(kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.channels.ReceiveChannel):com.intellij.platform.util.coroutines.channel.ChannelInputStream
- f:forByteBuffers(kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.channels.ReceiveChannel):com.intellij.platform.util.coroutines.channel.ChannelInputStream
*a:com.intellij.platform.util.coroutines.channel.ChannelOutputStream
- java.io.OutputStream
- *sf:Companion:com.intellij.platform.util.coroutines.channel.ChannelOutputStream$Companion
- close():V
- write(I):V
- write(B[],I,I):V
*f:com.intellij.platform.util.coroutines.channel.ChannelOutputStream$Companion
- f:forArrays(kotlinx.coroutines.channels.SendChannel):com.intellij.platform.util.coroutines.channel.ChannelOutputStream
- f:forByteBuffers(kotlinx.coroutines.channels.SendChannel):com.intellij.platform.util.coroutines.channel.ChannelOutputStream
f:com.intellij.platform.util.coroutines.flow.FlowKt
- sf:collectLatestUndispatched(kotlinx.coroutines.flow.SharedFlow,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation):java.lang.Object
- sf:debounceBatch-HG0u8IE(kotlinx.coroutines.flow.Flow,J):kotlinx.coroutines.flow.Flow
- *sf:mapStateIn(kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.flow.SharingStarted,kotlin.jvm.functions.Function1):kotlinx.coroutines.flow.StateFlow
- *bs:mapStateIn$default(kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.flow.SharingStarted,kotlin.jvm.functions.Function1,I,java.lang.Object):kotlinx.coroutines.flow.StateFlow
- sf:throttle(kotlinx.coroutines.flow.Flow,J):kotlinx.coroutines.flow.Flow
- sf:zipWithNext(kotlinx.coroutines.flow.Flow):kotlinx.coroutines.flow.Flow
- sf:zipWithNext(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3):kotlinx.coroutines.flow.Flow
*:com.intellij.platform.util.coroutines.sync.OverflowSemaphore
- a:withPermit(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation):java.lang.Object
f:com.intellij.platform.util.coroutines.sync.OverflowSemaphoreKt
- *sf:OverflowSemaphore(I,kotlinx.coroutines.channels.BufferOverflow):com.intellij.platform.util.coroutines.sync.OverflowSemaphore
- *bs:OverflowSemaphore$default(I,kotlinx.coroutines.channels.BufferOverflow,I,java.lang.Object):com.intellij.platform.util.coroutines.sync.OverflowSemaphore
