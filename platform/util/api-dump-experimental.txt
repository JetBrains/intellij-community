*:com.intellij.concurrency.IntelliJContextElement
- kotlin.coroutines.CoroutineContext$Element
- afterChildCompleted(kotlin.coroutines.CoroutineContext):V
- beforeChildStarted(kotlin.coroutines.CoroutineContext):V
- produceChildElement(kotlin.coroutines.CoroutineContext,Z):com.intellij.concurrency.IntelliJContextElement
*f:com.intellij.concurrency.IntelliJContextElement$DefaultImpls
- s:fold(com.intellij.concurrency.IntelliJContextElement,java.lang.Object,kotlin.jvm.functions.Function2):java.lang.Object
- s:get(com.intellij.concurrency.IntelliJContextElement,kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element
- s:minusKey(com.intellij.concurrency.IntelliJContextElement,kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext
- s:plus(com.intellij.concurrency.IntelliJContextElement,kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext
*f:com.intellij.concurrency.ThreadContext
- sf:currentThreadContext():kotlin.coroutines.CoroutineContext
- sf:installThreadContext(kotlin.coroutines.CoroutineContext,Z):com.intellij.openapi.application.AccessToken
- bs:installThreadContext$default(kotlin.coroutines.CoroutineContext,Z,I,java.lang.Object):com.intellij.openapi.application.AccessToken
- sf:resetThreadContext():com.intellij.openapi.application.AccessToken
*:com.intellij.openapi.diagnostic.ReportingClassSubstitutor
- s:getClassToReport(java.lang.Object):java.lang.Class
- a:getSubstitutedClass():java.lang.Class
c:com.intellij.openapi.util.UserDataHolderBase
- java.util.concurrent.atomic.AtomicReference
- com.intellij.openapi.util.UserDataHolderEx
- *p:isCopyableDataEqual(com.intellij.openapi.util.UserDataHolderBase):Z
f:com.intellij.openapi.util.io.NioFiles
- *s:copyRecursively(java.nio.file.Path,java.nio.file.Path):V
- *s:copyRecursively(java.nio.file.Path,java.nio.file.Path,java.util.function.Consumer):V
c:com.intellij.openapi.util.registry.RegistryValue
- *f:getSource():com.intellij.openapi.util.registry.RegistryValueSource
- *f:setSelectedOption(java.lang.String,com.intellij.openapi.util.registry.RegistryValueSource):V
- *:setValue(java.lang.String,com.intellij.openapi.util.registry.RegistryValueSource):V
*e:com.intellij.openapi.util.registry.RegistryValueSource
- java.lang.Enum
- sf:MANAGER:com.intellij.openapi.util.registry.RegistryValueSource
- sf:SYSTEM:com.intellij.openapi.util.registry.RegistryValueSource
- sf:USER:com.intellij.openapi.util.registry.RegistryValueSource
- s:getEntries():kotlin.enums.EnumEntries
- s:valueOf(java.lang.String):com.intellij.openapi.util.registry.RegistryValueSource
- s:values():com.intellij.openapi.util.registry.RegistryValueSource[]
f:com.intellij.openapi.util.text.HtmlChunkUtilKt
- *sf:buildChildren(com.intellij.openapi.util.text.HtmlChunk$Element,kotlin.jvm.functions.Function1):com.intellij.openapi.util.text.HtmlChunk$Element
- *sf:buildHtml(kotlin.jvm.functions.Function1):java.lang.String
- *sf:buildHtmlChunk(kotlin.jvm.functions.Function1):com.intellij.openapi.util.text.HtmlChunk
- *sf:plus(com.intellij.openapi.util.text.HtmlChunk,com.intellij.openapi.util.text.HtmlChunk):com.intellij.openapi.util.text.HtmlChunk
com.intellij.ui.IconManager
- *:colorizedIcon(javax.swing.Icon,kotlin.jvm.functions.Function0):javax.swing.Icon
f:com.intellij.util.EnvironmentUtil
- *s:buildShellProcessCommand(java.lang.String,Z,Z,Z):java.util.List
*f:com.intellij.util.JavaCoroutines
- sf:suspendJava(java.util.function.Consumer,kotlin.coroutines.Continuation):java.lang.Object
f:com.intellij.util.TimeoutUtil
- *s:compute(com.intellij.openapi.util.ThrowableComputable,J,java.util.function.LongConsumer):java.lang.Object
- *s:compute(com.intellij.openapi.util.ThrowableComputable,java.util.function.LongConsumer):java.lang.Object
- *s:measureExecutionTime(com.intellij.util.ThrowableRunnable):J
- *s:run(com.intellij.util.ThrowableRunnable,J,java.util.function.LongConsumer):V
- *s:run(com.intellij.util.ThrowableRunnable,java.util.function.LongConsumer):V
*f:com.intellij.util.indexing.impl.MapReduceIndexMappingException
- java.lang.RuntimeException
- <init>(java.lang.Throwable,java.lang.Class):V
- getClassToBlame():java.lang.Class
f:com.intellij.util.io.IoKt
- *sf:copyToAsync(java.io.InputStream,java.io.OutputStream,I,J,kotlin.coroutines.Continuation):java.lang.Object
- *bs:copyToAsync$default(java.io.InputStream,java.io.OutputStream,I,J,kotlin.coroutines.Continuation,I,java.lang.Object):java.lang.Object
*:com.intellij.util.io.KeyValueStore
- com.intellij.openapi.Forceable
- java.io.Closeable
- a:force():V
- a:get(java.lang.Object):java.lang.Object
- a:isDirty():Z
- a:put(java.lang.Object,java.lang.Object):V
com.intellij.util.io.PersistentMap
- com.intellij.util.io.KeyValueStore
- *:closeAndClean():V
*:com.intellij.util.io.PersistentMapBase
- appendData(java.lang.Object,com.intellij.util.io.AppendablePersistentMap$ValueDataAppender):V
- s:canonicalize(com.intellij.util.io.PersistentMapBase,com.intellij.util.io.PersistentMapBase,java.util.function.Function):com.intellij.util.io.PersistentMapBase
- s:canonicalize(com.intellij.util.io.PersistentMapBase,com.intellij.util.io.PersistentMapBase,java.util.function.Function,java.util.function.Function):com.intellij.util.io.PersistentMapBase
- a:close():V
- a:closeAndDelete():V
- a:containsKey(java.lang.Object):Z
- a:force():V
- a:get(java.lang.Object):java.lang.Object
- a:getValuesExternalizer():com.intellij.util.io.DataExternalizer
- a:isClosed():Z
- a:isDirty():Z
- keysCount():I
- markCorrupted():V
- a:markDirty():V
- a:processExistingKeys(com.intellij.util.Processor):Z
- a:processKeys(com.intellij.util.Processor):Z
- a:put(java.lang.Object,java.lang.Object):V
- a:remove(java.lang.Object):V
*f:com.intellij.util.io.PersistentMapBuilder
- build():com.intellij.util.io.PersistentHashMap
- buildImplementation():com.intellij.util.io.PersistentMapBase
- compactOnClose():com.intellij.util.io.PersistentMapBuilder
- copy():com.intellij.util.io.PersistentMapBuilder
- copyWithFile(java.nio.file.Path):com.intellij.util.io.PersistentMapBuilder
- getCompactOnClose(Z):Z
- getFile():java.nio.file.Path
- getInitialSize(I):I
- getInlineValues(Z):Z
- getKeyDescriptor():com.intellij.util.io.KeyDescriptor
- getReadOnly(Z):Z
- getValueExternalizer():com.intellij.util.io.DataExternalizer
- getVersion(I):I
- getWalExecutor():java.util.concurrent.ExecutorService
- hasChunks(Z):com.intellij.util.io.PersistentMapBuilder
- hasNoChunks():com.intellij.util.io.PersistentMapBuilder
- inlineValues():com.intellij.util.io.PersistentMapBuilder
- inlineValues(Z):com.intellij.util.io.PersistentMapBuilder
- isEnableWal():Z
- s:newBuilder(java.nio.file.Path,com.intellij.util.io.KeyDescriptor,com.intellij.util.io.DataExternalizer):com.intellij.util.io.PersistentMapBuilder
- readonly():com.intellij.util.io.PersistentMapBuilder
- withCompactOnClose(Z):com.intellij.util.io.PersistentMapBuilder
- withInitialSize(I):com.intellij.util.io.PersistentMapBuilder
- withReadonly(Z):com.intellij.util.io.PersistentMapBuilder
- withVersion(I):com.intellij.util.io.PersistentMapBuilder
- withWal(Z):com.intellij.util.io.PersistentMapBuilder
- withWalExecutor(java.util.concurrent.ExecutorService):com.intellij.util.io.PersistentMapBuilder
