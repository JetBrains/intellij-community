--- custom-elements-manifest.json	2023-04-14 14:24:39
+++ custom-elements-manifest-patched.json	2023-04-14 16:42:02
@@ -2,6 +2,9 @@
   "$schema": "http://json-schema.org/draft-07/schema#",
   "definitions": {
     "Attribute": {
+      "javaInterfaces": [
+        "CustomElementsContribution"
+      ],
       "properties": {
         "default": {
           "description": "The default value of the attribute, if any.\n\nAs attributes are always strings, this is the actual value, not a human\nreadable description.",
@@ -103,6 +106,9 @@
       "type": "object"
     },
     "ClassField": {
+      "javaInterfaces": [
+        "CustomElementsMember"
+      ],
       "properties": {
         "default": {
           "type": "string"
@@ -158,6 +164,9 @@
       "type": "object"
     },
     "ClassMethod": {
+      "javaInterfaces": [
+        "CustomElementsMember"
+      ],
       "properties": {
         "deprecated": {
           "description": "Whether the function is deprecated.\nIf the value is a string, it's the reason for the deprecation.",
@@ -225,6 +234,9 @@
       "type": "object"
     },
     "CssCustomProperty": {
+      "javaInterfaces": [
+        "CustomElementsContribution"
+      ],
       "properties": {
         "default": {
           "type": "string"
@@ -259,6 +271,9 @@
       "type": "object"
     },
     "CssPart": {
+      "javaInterfaces": [
+        "CustomElementsContribution"
+      ],
       "description": "The description of a CSS Part",
       "properties": {
         "deprecated": {
@@ -285,8 +300,11 @@
       ],
       "type": "object"
     },
-    "CustomElementDeclaration": {
+    "CustomElementOrClassDeclaration": {
       "description": "A description of a custom element class.\n\nCustom elements are JavaScript classes, so this extends from\n`ClassDeclaration` and adds custom-element-specific features like\nattributes, events, and slots.\n\nNote that `tagName` in this interface is optional. Tag names are not\nneccessarily part of a custom element class, but belong to the definition\n(often called the \"registration\") or the `customElements.define()` call.\n\nBecause classes and tag names can only be registered once, there's a\none-to-one relationship between classes and tag names. For ease of use,\nwe allow the tag name here.\n\nSome packages define and register custom elements in separate modules. In\nthese cases one `Module` should contain the `CustomElement` without a\ntagName, and another `Module` should contain the\n`CustomElementExport`.",
+      "javaInterfaces": [
+        "CustomElementClassOrMixinDeclaration"
+      ],
       "properties": {
         "attributes": {
           "description": "The attributes that this element is known to understand.",
@@ -309,9 +327,6 @@
         },
         "customElement": {
           "description": "Distinguishes a regular JavaScript class from a\ncustom element class",
-          "enum": [
-            true
-          ],
           "type": "boolean"
         },
         "demos": {
@@ -391,7 +406,6 @@
         }
       },
       "required": [
-        "customElement",
         "kind",
         "name"
       ],
@@ -429,8 +443,11 @@
       ],
       "type": "object"
     },
-    "CustomElementMixinDeclaration": {
+    "CustomElementMixinOrMixinDeclaration": {
       "description": "A class mixin that also adds custom element related properties.",
+      "javaInterfaces": [
+        "CustomElementClassOrMixinDeclaration"
+      ],
       "properties": {
         "attributes": {
           "description": "The attributes that this element is known to understand.",
@@ -453,9 +470,6 @@
         },
         "customElement": {
           "description": "Distinguishes a regular JavaScript class from a\ncustom element class",
-          "enum": [
-            true
-          ],
           "type": "boolean"
         },
         "demos": {
@@ -557,7 +571,6 @@
         }
       },
       "required": [
-        "customElement",
         "kind",
         "name"
       ],
@@ -583,6 +596,9 @@
       "type": "object"
     },
     "Event": {
+      "javaInterfaces": [
+        "CustomElementsContribution"
+      ],
       "properties": {
         "deprecated": {
           "description": "Whether the event is deprecated.\nIf the value is a string, it's the reason for the deprecation.",
@@ -706,28 +722,25 @@
       "type": "object"
     },
     "JavaScriptModule": {
+      "javaInterfaces": [
+        "CustomElementsContribution"
+      ],
       "properties": {
         "declarations": {
           "description": "The declarations of a module.\n\nFor documentation purposes, all declarations that are reachable from\nexports should be described here. Ie, functions and objects that may be\nproperties of exported objects, or passed as arguments to functions.",
           "items": {
             "anyOf": [
               {
-                "$ref": "#/definitions/ClassDeclaration"
-              },
-              {
                 "$ref": "#/definitions/FunctionDeclaration"
               },
               {
-                "$ref": "#/definitions/MixinDeclaration"
-              },
-              {
                 "$ref": "#/definitions/VariableDeclaration"
               },
               {
-                "$ref": "#/definitions/CustomElementDeclaration"
+                "$ref": "#/definitions/CustomElementOrClassDeclaration"
               },
               {
-                "$ref": "#/definitions/CustomElementMixinDeclaration"
+                "$ref": "#/definitions/CustomElementMixinOrMixinDeclaration"
               }
             ]
           },
@@ -933,6 +946,9 @@
       "type": "object"
     },
     "Slot": {
+      "javaInterfaces": [
+        "CustomElementsContribution"
+      ],
       "properties": {
         "deprecated": {
           "description": "Whether the slot is deprecated.\nIf the value is a string, it's the reason for the deprecation.",

