{
  "$schema": "../../web-types-gen/resources/web-types.json",
  "framework": "vue",
  "name": "vue",
  "version": "2.5.0a",
  "contributions": {
    "html": {
      "types-syntax": "typescript",
      "description-markup": "markdown",
      "tags": [
        {
          "name": "TransitionGroupOld",
          "description": "`<transition-group>` serve as transition effects for multiple elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element it should render via the `tag` attribute.",
          "doc-url": "https://vuejs.org/v2/api/#transition-group",
          "attributes": [
            {
              "name": "tag",
              "default": "\"span\"",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "moveClass",
              "description": "Overwrite CSS class applied during moving transition"
            },
            {
              "name": "name",
              "description": "Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `,.fade-enter-active`, etc.",
              "default": "\"v\"",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appear",
              "description": "Whether to apply transition on initial render.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false",
              "type": "boolean"
            },
            {
              "name": "css",
              "description": "Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.",
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "type": "boolean"
            },
            {
              "name": "type",
              "description": "Specifies the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "duration",
              "description": "Specifies the duration of transition. By default, Vue waits for the first `transitionend` or `animationend` event on the root transition element.",
              "value": {
                "kind": "expression",
                "type": [
                  "number",
                  "{ enter: number, leave: number }"
                ]
              }
            },
            {
              "name": "enterClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "enterToClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveToClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearToClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "enterActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "events": [
            {
              "name": "before-enter"
            },
            {
              "name": "before-leave"
            },
            {
              "name": "before-appear"
            },
            {
              "name": "enter"
            },
            {
              "name": "leave"
            },
            {
              "name": "appear"
            },
            {
              "name": "after-enter"
            },
            {
              "name": "after-leave"
            },
            {
              "name": "after-appear"
            },
            {
              "name": "enter-cancelled"
            },
            {
              "name": "leave-cancelled"
            },
            {
              "name": "appear-cancelled"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ]
        }
      ],
      "attributes": [
        {
          "name": "v-on_old",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\nStarting in 2.4.0+, `v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://vuejs.org/v2/api/#v-on",
          "value": {
            "kind": "expression",
            "required": true,
            "type": [
              "Function",
              "object",
              "any"
            ]
          },
          "vue-argument": {
            "description": "Optional event name",
            "pattern": ".*",
            "required": false
          },
          "vue-modifiers": [
            {
              "name": "stop",
              "description": "Call `event.stopPropagation()`."
            },
            {
              "name": "prevent",
              "description": "Call `event.preventDefault()`."
            },
            {
              "name": "capture",
              "description": "Add event listener in capture mode."
            },
            {
              "name": "self",
              "description": "Only trigger handler if event was dispatched from this element."
            },
            {
              "name": "{keyCode | keyAlias}",
              "pattern": ".*",
              "description": "Only trigger handler on certain keys."
            },
            {
              "name": "native",
              "description": "Listen for a native event on the root element of component."
            },
            {
              "name": "once",
              "description": "Trigger handler at most once."
            },
            {
              "name": "left",
              "description": "Only trigger handler for left button mouse events."
            },
            {
              "name": "right",
              "description": "Only trigger handler for right button mouse events."
            },
            {
              "name": "middle",
              "description": "Only trigger handler for middle button mouse events."
            },
            {
              "name": "passive",
              "description": "attaches a DOM event with `{ passive: true }`."
            }
          ]
        }
      ]
    }
  }
}
