/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.intellij.openapi.roots;

import com.intellij.openapi.extensions.ExtensionPointName;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.Segment;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.util.containers.ContainerUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Collections;
import java.util.List;

/**
 * @author nik
 */
public abstract class GeneratedSourcesFilter {
  public static final ExtensionPointName<GeneratedSourcesFilter> EP_NAME = ExtensionPointName.create("com.intellij.generatedSourcesFilter");

  public static boolean isGeneratedSourceByAnyFilter(@NotNull VirtualFile file, @NotNull Project project) {
    for (GeneratedSourcesFilter filter : EP_NAME.getExtensions()) {
      if (filter.isGeneratedSource(file, project)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Collect original elements from all filters.
   */
  @NotNull
  public static List<? extends PsiElement> collectAllOriginalElements(@NotNull PsiElement element) {
    List<PsiElement> result = null;
    for (GeneratedSourcesFilter filter : EP_NAME.getExtensions()) {
      result = addAll(filter.getOriginalElements(element), result);
    }
    return orEmpty(result);
  }

  /**
   * Collect generated elements from all filters.
   */
  @NotNull
  public static List<? extends PsiElement> collectAllGeneratedElements(@NotNull PsiElement element) {
    List<PsiElement> result = null;
    for (GeneratedSourcesFilter filter : EP_NAME.getExtensions()) {
      result = addAll(filter.getGeneratedElements(element), result);
    }
    return orEmpty(result);
  }

  /**
   * Collect original locations from all filters.
   */
  @NotNull
  public static List<? extends LocationInFile> collectAllOriginalLocations(@NotNull Project project,
                                                                           @NotNull VirtualFile file,
                                                                           @Nullable Segment segment) {
    List<LocationInFile> result = null;
    for (GeneratedSourcesFilter filter : EP_NAME.getExtensions()) {
      result = addAll(filter.getOriginalLocations(project, file, segment), result);
    }
    return orEmpty(result);
  }

  /**
   * Collect generated locations from all filters.
   */
  @NotNull
  public static List<? extends LocationInFile> collectAllGeneratedLocations(@NotNull Project project,
                                                                            @NotNull VirtualFile file,
                                                                            @Nullable Segment segment) {
    List<LocationInFile> result = null;
    for (GeneratedSourcesFilter filter : EP_NAME.getExtensions()) {
      result = addAll(filter.getGeneratedLocations(project, file, segment), result);
    }
    return orEmpty(result);
  }

  private static <T> List<T> addAll(List<? extends T> elements, List<T> result) {
    if (result == null) {
      return ContainerUtil.newArrayList(elements);
    }
    result.addAll(elements);
    return result;
  }

  private static <T> List<T> orEmpty(List<T> elements) {
    if (elements != null) return elements;
    return Collections.emptyList();
  }

  public abstract boolean isGeneratedSource(@NotNull VirtualFile file, @NotNull Project project);

  /**
   * Returns all elements that have been processed by a code generator to derive the given element.
   *
   * @param element the generated element
   * @return a list of original elements. An empty result indicates that the element is not considered to be generated by the filter.
   */
  @NotNull
  public List<? extends PsiElement> getOriginalElements(@NotNull PsiElement element) {
    return Collections.emptyList();
  }

  /**
   * Returns all elements that have been generated from the given element.
   *
   * @param element the generated element
   * @return a list of generated elements. An empty result indicates that no elements are known to be generated from the given element.
   */
  @NotNull
  public List<? extends PsiElement> getGeneratedElements(@NotNull PsiElement element) {
    return Collections.emptyList();
  }

  /**
   * Returns all locations that have been processed by a code generator to generate the given location.
   *
   * @return a list of locations. An empty result indicates that the given segment is not considered to be generated by the filter.
   */
  @NotNull
  public List<? extends LocationInFile> getOriginalLocations(@NotNull Project project,
                                                             @NotNull VirtualFile file,
                                                             @Nullable Segment segment) {
    return Collections.emptyList();
  }

  /**
   * Returns all locations that have been generated from the given location.
   *
   * @return a list of locations. An empty result indicates that no locations are known to be generated from the given segments.
   */
  @NotNull
  public List<? extends LocationInFile> getGeneratedLocations(@NotNull Project project,
                                                              @NotNull VirtualFile file,
                                                              @Nullable Segment segment) {
    return Collections.emptyList();
  }

  public static class LocationInFile {

    @NotNull private final VirtualFile myFile;
    @Nullable private final Segment mySegment;

    public LocationInFile(@NotNull VirtualFile file, @Nullable Segment segment) {
      myFile = file;
      mySegment = segment;
    }

    @NotNull
    public VirtualFile getFile() {
      return myFile;
    }

    @Nullable
    public Segment getSegment() {
      return mySegment;
    }

    @Override
    public String toString() {
      return "LocationInFile{" +
             "myFile=" + myFile +
             ", mySegment=" + mySegment +
             '}';
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;

      LocationInFile that = (LocationInFile)o;

      if (!myFile.equals(that.myFile)) return false;
      if (mySegment != null ? !mySegment.equals(that.mySegment) : that.mySegment != null) return false;

      return true;
    }

    @Override
    public int hashCode() {
      int result = myFile.hashCode();
      result = 31 * result + (mySegment != null ? mySegment.hashCode() : 0);
      return result;
    }
  }
}
