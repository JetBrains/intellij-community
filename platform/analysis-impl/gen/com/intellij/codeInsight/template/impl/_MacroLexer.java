/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.codeInsight.template.impl;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_MacroLexer.flex</tt>
 */
class _MacroLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\6\2\7\1\11\4\0\1\12\1\13\1"+
    "\14\1\15\2\7\1\16\3\7\1\16\71\7\1\17\1\7\1\20\1\21\1\22\1\23\2\21\16\0\1\24"+
    "\1\25\1\26\1\27\2\7\1\30\11\7\1\31\21\7\1\32\1\33\24\7\1\6\3\7\1\16\1\34\1"+
    "\6\4\7\1\35\1\36\4\0\1\37\1\40\1\21\3\7\2\41\1\21\1\42\1\43\1\0\1\44\5\7\1"+
    "\45\3\0\1\46\1\47\13\7\1\50\1\37\1\51\1\52\1\0\1\53\1\21\1\54\1\55\3\7\3\0"+
    "\1\56\12\7\1\57\1\0\1\60\1\21\1\0\1\61\3\7\1\45\1\62\1\15\2\7\1\57\1\63\1"+
    "\64\1\65\2\21\3\7\1\66\1\7\1\41\6\21\2\7\1\24\1\67\2\21\1\70\5\0\1\71\6\7"+
    "\1\72\2\0\1\73\1\7\1\74\1\0\1\6\1\7\1\75\1\76\1\77\2\7\1\100\1\101\1\102\1"+
    "\103\1\104\1\54\1\105\1\74\1\0\1\106\1\107\1\110\1\111\1\77\2\7\1\100\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\0\1\121\1\21\1\110\1\31\1\30\2\7\1"+
    "\100\1\122\1\102\1\37\1\123\1\124\1\21\1\74\1\0\1\34\1\125\1\110\1\76\1\77"+
    "\2\7\1\100\1\122\1\102\1\103\1\115\1\120\1\105\1\74\1\0\1\34\1\21\1\126\1"+
    "\127\1\130\1\131\1\107\1\127\1\7\1\132\1\133\1\134\1\135\1\21\1\120\1\0\1"+
    "\21\1\34\1\136\1\24\1\100\2\7\1\100\1\7\1\137\1\140\1\134\1\141\1\41\1\74"+
    "\1\0\2\21\1\75\1\24\1\100\2\7\1\100\1\142\1\102\1\140\1\134\1\141\1\26\1\74"+
    "\1\0\1\143\1\21\1\136\1\24\1\100\4\7\1\144\1\140\1\145\1\146\1\35\1\74\1\0"+
    "\1\21\1\33\1\147\1\7\1\16\1\33\2\7\1\30\1\150\1\16\1\151\1\152\1\0\1\120\1"+
    "\0\1\153\1\21\1\6\5\7\1\154\1\155\1\156\1\157\1\0\1\160\4\21\1\161\1\162\1"+
    "\163\1\6\1\164\1\165\1\154\1\166\1\167\1\42\1\0\1\170\4\21\1\124\2\21\1\160"+
    "\1\0\1\160\1\171\1\172\1\7\1\6\3\7\1\22\1\36\1\0\1\140\1\173\1\0\1\36\3\0"+
    "\1\174\1\175\7\21\5\7\1\45\1\0\1\176\1\0\1\160\1\57\1\177\1\200\1\201\1\202"+
    "\1\7\1\203\1\204\1\0\1\42\4\7\1\31\1\14\5\7\1\205\51\7\1\130\1\16\1\130\5"+
    "\7\1\130\4\7\1\130\1\16\1\130\1\7\1\16\7\7\1\130\10\7\1\206\4\21\2\7\2\21"+
    "\12\7\2\67\1\6\114\7\1\76\2\7\1\6\2\7\1\41\11\7\1\127\1\7\1\124\1\7\1\24\1"+
    "\207\1\21\2\7\1\207\1\21\2\7\1\210\1\21\1\7\1\24\1\211\1\21\6\7\1\212\3\0"+
    "\1\213\1\214\1\0\1\160\3\21\1\215\1\0\1\160\13\7\1\21\1\216\4\7\1\217\10\7"+
    "\1\67\1\21\3\7\1\16\1\0\1\2\1\0\1\2\1\120\1\0\3\7\1\67\1\22\1\21\5\7\1\106"+
    "\3\7\1\20\1\0\1\160\4\21\2\7\1\156\1\2\6\7\1\173\1\157\3\0\1\103\1\0\1\160"+
    "\1\0\1\160\1\35\1\21\1\0\1\42\10\21\1\220\5\7\1\212\1\0\1\220\1\106\1\0\1"+
    "\160\1\21\1\221\1\2\1\21\1\222\3\7\1\73\1\201\1\0\1\61\4\7\1\57\1\0\1\2\1"+
    "\21\4\7\1\212\2\0\1\21\1\0\1\223\1\0\1\61\3\7\1\67\1\7\1\124\10\21\1\224\2"+
    "\0\1\225\1\226\1\160\30\7\7\0\1\227\42\7\2\67\4\7\2\67\1\7\1\230\3\7\1\67"+
    "\6\7\1\24\1\167\1\231\1\22\1\232\1\106\1\7\1\22\1\231\1\22\1\21\1\221\3\21"+
    "\1\233\1\21\1\35\1\124\1\21\1\234\1\21\1\140\1\0\1\34\1\35\2\21\1\7\1\22\4"+
    "\7\2\21\1\0\1\174\1\235\1\0\1\236\1\21\1\237\1\33\1\150\1\240\1\23\1\241\1"+
    "\7\1\242\1\243\1\244\2\21\5\7\1\124\116\21\5\7\1\16\5\7\1\16\20\7\1\22\1\245"+
    "\1\246\1\21\4\7\1\31\1\14\7\7\1\35\1\21\1\54\2\7\1\16\1\21\10\16\4\0\5\21"+
    "\1\35\72\21\1\243\3\21\1\6\1\203\1\240\1\22\1\6\11\7\1\16\1\247\1\6\12\7\1"+
    "\205\1\243\4\7\1\16\1\6\12\7\1\16\2\21\3\7\1\41\6\21\170\7\1\67\11\21\75\7"+
    "\1\41\2\21\21\7\1\22\10\21\5\7\1\67\41\7\1\22\2\7\1\0\1\246\2\21\5\7\1\156"+
    "\1\70\1\250\3\7\1\57\12\7\1\160\3\21\1\35\1\7\1\33\14\7\1\77\3\7\1\16\1\7"+
    "\7\21\1\35\1\7\1\251\1\252\2\7\1\45\2\21\1\124\6\7\1\106\1\21\1\61\5\7\1\212"+
    "\1\0\1\42\1\21\1\0\1\160\2\0\1\61\1\253\1\0\1\61\2\7\1\57\1\42\2\7\1\156\1"+
    "\0\1\2\1\21\3\7\1\22\1\71\5\7\1\45\1\0\1\236\1\35\1\0\1\160\1\254\1\7\1\0"+
    "\1\255\5\7\1\73\1\157\1\21\1\252\1\256\1\0\1\160\2\7\1\16\1\257\6\7\1\200"+
    "\1\260\1\217\2\21\1\261\1\7\1\45\1\262\1\21\3\263\1\21\2\16\5\7\1\205\1\67"+
    "\1\21\16\7\1\45\1\264\1\0\1\160\64\7\1\106\1\21\2\7\1\16\1\265\5\7\1\106\40"+
    "\21\55\7\1\67\15\7\1\20\4\21\1\16\1\21\1\265\1\266\1\7\1\100\1\16\1\167\1"+
    "\267\15\7\1\20\3\21\1\265\54\7\1\67\2\21\10\7\1\33\6\7\5\21\1\7\1\22\2\0\2"+
    "\21\2\0\1\107\2\21\1\243\3\21\1\34\1\24\20\7\1\270\1\234\1\21\1\0\1\160\1"+
    "\6\2\7\1\111\1\6\2\7\1\41\1\271\12\7\1\16\3\33\1\272\1\273\2\21\1\274\1\7"+
    "\1\142\2\7\1\16\2\7\1\275\1\7\1\67\1\7\1\67\4\21\17\7\1\41\10\21\6\7\1\22"+
    "\20\21\1\276\20\21\3\7\1\22\6\7\1\124\1\21\1\236\3\21\4\7\1\21\1\243\3\7\1"+
    "\41\4\7\1\57\1\277\3\7\1\67\4\7\1\106\1\7\1\240\5\21\23\7\1\67\1\0\1\160\4"+
    "\7\1\106\4\7\1\106\5\7\1\21\6\7\1\106\23\21\46\7\1\16\1\21\2\7\1\67\1\21\1"+
    "\7\23\21\1\67\1\100\4\7\1\31\1\300\2\7\1\67\1\21\2\7\1\16\1\21\3\7\1\16\10"+
    "\21\2\7\1\301\1\21\2\7\1\67\1\21\3\7\1\20\10\21\7\7\1\271\10\21\1\302\1\70"+
    "\1\142\1\6\2\7\1\106\1\114\4\21\3\7\1\22\3\7\1\22\4\21\1\7\1\6\2\7\1\303\3"+
    "\21\6\7\1\67\1\21\2\7\1\67\1\21\2\7\1\41\1\21\2\7\1\20\15\21\11\7\1\124\6"+
    "\21\6\7\1\41\1\21\6\7\1\41\41\21\1\222\6\7\1\0\1\157\3\21\1\120\1\0\1\21\1"+
    "\54\1\222\5\7\1\0\1\304\2\21\3\7\1\124\1\0\1\160\1\222\3\7\1\156\1\0\1\140"+
    "\1\0\2\21\4\7\1\305\1\21\1\222\5\7\1\45\1\0\1\306\1\307\1\0\1\310\4\21\2\7"+
    "\1\30\2\7\1\212\1\0\1\175\10\21\1\16\1\241\1\7\1\31\1\7\1\124\5\7\1\156\1"+
    "\0\1\277\1\0\1\160\1\136\1\76\1\77\2\7\1\100\1\122\1\102\1\103\1\115\1\135"+
    "\1\243\1\74\2\174\21\21\6\7\1\173\1\0\1\176\1\41\1\0\1\160\4\21\6\7\2\0\1"+
    "\311\1\21\1\0\1\160\24\21\5\7\1\156\1\42\1\0\1\236\2\21\1\256\4\21\6\7\2\0"+
    "\1\312\1\21\1\0\1\160\4\21\5\7\1\45\1\0\1\21\1\0\1\160\6\21\3\7\1\313\1\0"+
    "\1\2\1\0\1\160\54\21\10\7\1\0\1\160\1\21\1\35\40\21\1\73\1\222\4\7\1\45\1"+
    "\314\1\54\1\21\1\73\1\71\4\7\1\232\1\203\1\0\1\160\4\21\7\7\1\124\40\21\1"+
    "\7\1\100\3\7\1\156\1\157\1\0\1\124\1\21\1\0\1\160\2\21\1\33\3\7\1\315\2\0"+
    "\1\36\1\157\11\21\1\16\1\30\4\7\1\316\1\317\1\204\1\21\1\0\1\160\24\21\63"+
    "\7\1\20\14\21\15\7\1\16\2\21\30\7\1\106\27\21\5\7\1\16\72\21\10\7\1\16\67"+
    "\21\7\7\1\124\3\7\1\16\1\0\1\160\14\21\3\7\1\67\1\174\1\21\6\7\1\157\1\21"+
    "\1\106\1\21\1\0\1\160\1\265\2\7\1\243\2\7\56\21\10\7\1\22\1\21\1\73\4\0\1"+
    "\157\1\21\1\54\1\222\1\7\10\21\1\20\3\21\75\7\1\22\2\21\36\7\1\41\41\21\43"+
    "\7\1\16\12\21\61\7\1\106\40\21\15\7\1\41\1\7\1\22\1\7\1\124\1\7\1\320\1\2"+
    "\127\21\1\321\1\322\2\0\1\323\1\2\3\21\1\324\22\21\1\307\67\21\12\7\1\24\10"+
    "\7\1\24\1\325\1\326\1\7\1\327\1\142\7\7\1\31\1\330\2\24\3\7\1\331\1\167\1"+
    "\33\1\100\51\7\1\67\3\7\1\100\2\7\1\205\3\7\1\205\2\7\1\24\3\7\1\24\2\7\1"+
    "\16\3\7\1\16\3\7\1\100\3\7\1\100\2\7\1\205\1\332\14\0\1\157\1\221\5\0\1\174"+
    "\1\276\1\21\1\333\2\21\1\221\1\36\1\0\52\21\1\157\2\0\1\334\1\335\1\277\72"+
    "\21\30\7\1\22\1\21\1\157\5\21\10\7\1\212\1\277\1\0\1\160\24\21\1\142\3\7\1"+
    "\161\1\6\1\205\1\336\1\237\1\337\1\161\1\230\1\161\2\205\1\117\1\7\1\30\1"+
    "\7\1\106\1\340\1\30\1\7\1\106\50\21\32\7\1\16\5\21\106\7\1\22\1\21\33\7\1"+
    "\67\120\7\1\20\1\21\146\7\1\124\3\21\3\7\1\67\74\21\1\116\3\21\14\0\20\21"+
    "\36\0\2\21");

  /* The ZZ_CMAP_A table has 1800 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\2\1\3\1\6\1\0\1\3\1\6\6\2\4\0\1\3\1\0\1\4\1\0\1\1\3\0\1\7\1\10\2\0\1\11"+
    "\3\0\2\2\3\0\1\12\3\0\22\1\1\0\1\5\2\0\4\1\4\0\1\2\2\0\4\1\4\0\1\1\2\0\1\2"+
    "\7\0\1\1\4\0\1\1\5\0\7\1\1\0\2\1\4\0\4\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\13\1\1\0\3\1"+
    "\1\0\5\2\2\0\6\1\1\0\1\1\15\0\1\1\1\0\15\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2"+
    "\3\1\5\0\6\2\5\0\1\1\4\0\3\2\1\0\1\2\3\0\3\1\7\2\4\0\2\1\1\2\13\1\1\0\1\1"+
    "\7\2\2\1\2\2\1\0\4\2\2\1\2\2\3\1\2\0\1\1\7\0\1\2\1\1\1\2\6\1\3\2\2\0\11\1"+
    "\3\2\1\1\6\0\2\2\6\1\4\2\2\1\2\0\2\2\1\1\11\2\1\1\3\2\1\1\5\2\2\0\1\1\3\2"+
    "\4\0\6\1\6\0\10\2\6\1\3\2\1\1\2\2\1\1\7\2\2\1\2\2\2\0\2\2\1\1\3\2\1\0\10\1"+
    "\2\0\2\1\2\0\6\1\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\1"+
    "\1\5\0\2\1\1\0\5\1\7\0\2\1\4\0\3\2\1\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\2\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\4\2\3\1\1\2\2"+
    "\0\1\1\1\0\2\1\1\0\3\1\2\2\1\0\3\2\2\0\1\1\10\0\1\1\6\2\2\0\1\2\1\1\1\0\6"+
    "\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\4\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1"+
    "\6\0\5\2\1\0\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\1\0\4\1\1\0\3\1\1\0\2\1\5\0\3"+
    "\1\2\2\1\1\3\2\1\0\4\2\1\1\5\0\3\1\1\2\2\0\2\2\1\0\7\1\1\0\1\1\4\0\1\2\4\0"+
    "\6\2\1\0\1\2\3\0\2\2\4\0\1\1\1\2\2\1\7\2\4\0\10\1\10\2\1\0\2\2\7\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\3"+
    "\1\2\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0\2\2\2\0\4\1\5\0\1\2\1\0\1\2\1\0\1\2"+
    "\4\0\2\2\5\1\10\2\11\0\1\2\1\0\7\2\1\1\2\2\4\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2"+
    "\5\1\14\2\1\1\1\2\3\1\1\0\7\1\2\0\3\2\2\1\3\2\3\0\2\1\2\2\4\0\1\1\1\0\2\2"+
    "\4\0\4\1\10\2\3\0\1\1\3\0\2\1\1\2\5\0\4\2\1\0\5\1\2\2\2\1\1\2\1\1\5\0\5\2"+
    "\3\1\3\0\10\2\5\1\2\2\3\0\3\1\3\2\1\0\5\2\4\1\1\2\4\1\3\2\2\1\3\2\1\0\5\2"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0\6\1\2\0\2\1\2\0\5\2\5\0\1\1\4"+
    "\0\1\2\3\0\4\2\11\0\1\1\4\0\1\1\1\0\5\1\2\0\1\1\1\0\4\1\1\0\3\1\2\0\4\1\5"+
    "\0\5\1\4\0\1\1\4\0\4\1\3\2\2\1\5\0\2\2\2\0\3\1\6\2\1\0\3\1\1\2\3\1\1\2\4\1"+
    "\1\2\4\1\3\0\1\1\1\0\1\1\2\0\5\1\1\2\2\1\2\2\5\1\1\0\4\1\2\2\4\0\1\1\3\2\2"+
    "\1\1\2\5\1\2\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2\1\0\2\2\5\0\5\1\5\0\1\1"+
    "\1\2\3\1\1\0\2\1\1\0\7\1\2\0\1\2\6\0\2\1\2\0\3\1\3\0\2\1\3\0\2\1\2\0\3\2\4"+
    "\0\3\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\3\2\5\0\1\1\3\0\1\1\2\0\4\1\1\0\2\1\2\0"+
    "\1\1\3\2\1\0\2\2\1\0\5\1\2\2\1\0\3\2\2\0\1\2\2\0\3\1\1\2\2\0\1\1\1\0\1\2\4"+
    "\1\5\0\3\2\3\0\2\2\1\1\1\0\1\1\3\0\4\2\2\1\1\0\1\1\1\2\3\0\1\1\3\0\2\1\3\0"+
    "\5\2\1\1\4\2\3\0\6\2\1\1\6\2\3\0\1\2\1\0\2\2\1\0\1\2\2\1\3\0\2\2\6\0\5\2\3"+
    "\0\6\2\2\0\3\2\2\0\4\2\4\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1\1\1\0\6\1\2\0"+
    "\5\1\1\0\4\1\1\0\4\1\2\0\2\2\4\0\1\2\3\0\1\2\2\0\7\2\1\0\2\2\1\0\2\2\1\0\1"+
    "\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[11];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\13\0\26\0\41\0\54\0\13\0\13\0\13"+
    "\0\13\0\13\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[11];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\2\1\4\1\6"+
    "\1\7\1\10\1\11\14\0\2\3\13\0\1\4\2\0"+
    "\1\4\4\0\4\5\1\12\1\13\1\0\12\5\1\0"+
    "\4\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\5\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[11];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   public _MacroLexer() {
     this((java.io.Reader)null);
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _MacroLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 9: break;
          case 2: 
            { return MacroTokenType.IDENTIFIER;
            } 
            // fall through
          case 10: break;
          case 3: 
            { return MacroTokenType.WHITE_SPACE;
            } 
            // fall through
          case 11: break;
          case 4: 
            { return MacroTokenType.STRING_LITERAL;
            } 
            // fall through
          case 12: break;
          case 5: 
            { return MacroTokenType.LPAREN;
            } 
            // fall through
          case 13: break;
          case 6: 
            { return MacroTokenType.RPAREN;
            } 
            // fall through
          case 14: break;
          case 7: 
            { return MacroTokenType.COMMA;
            } 
            // fall through
          case 15: break;
          case 8: 
            { return MacroTokenType.EQ;
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
