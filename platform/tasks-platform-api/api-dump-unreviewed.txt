c:com.intellij.tasks.BranchInfo
- name:java.lang.String
- original:Z
- repository:java.lang.String
- <init>():V
- equals(java.lang.Object):Z
- s:fromTaskInfo(com.intellij.openapi.vcs.VcsTaskHandler$TaskInfo,Z):java.util.List
- hashCode():I
c:com.intellij.tasks.ChangeListInfo
- comment:java.lang.String
- id:java.lang.String
- name:java.lang.String
- <init>():V
- <init>(com.intellij.openapi.vcs.changes.LocalChangeList):V
- equals(java.lang.Object):Z
- hashCode():I
a:com.intellij.tasks.Comment
- sf:EMPTY_ARRAY:com.intellij.tasks.Comment[]
- <init>():V
- appendTo(java.lang.StringBuilder):V
- a:getAuthor():java.lang.String
- a:getDate():java.util.Date
- a:getText():java.lang.String
com.intellij.tasks.CommitPlaceholderProvider
- sf:EXTENSION_POINT_NAME:com.intellij.openapi.extensions.ExtensionPointName
- a:getPlaceholderDescription(java.lang.String):java.lang.String
- a:getPlaceholderValue(com.intellij.tasks.LocalTask,java.lang.String):java.lang.String
- a:getPlaceholders(com.intellij.tasks.TaskRepository):java.lang.String[]
f:com.intellij.tasks.CustomTaskState
- <init>():V
- <init>(java.lang.String,java.lang.String):V
- asPredefined():com.intellij.tasks.TaskState
- equals(java.lang.Object):Z
- s:fromPredefined(com.intellij.tasks.TaskState):com.intellij.tasks.CustomTaskState
- getId():java.lang.String
- getPresentableName():java.lang.String
- hashCode():I
- isPredefined():Z
- setId(java.lang.String):V
- setPredefined(Z):V
- setPresentableName(java.lang.String):V
a:com.intellij.tasks.LocalTask
- com.intellij.tasks.Task
- <init>():V
- a:addBranch(com.intellij.tasks.BranchInfo):V
- a:addChangelist(com.intellij.tasks.ChangeListInfo):V
- a:addWorkItem(com.intellij.tasks.timeTracking.model.WorkItem):V
- a:getBranches():java.util.List
- getBranches(Z):java.util.List
- a:getChangeLists():java.util.List
- a:getLastPost():java.util.Date
- a:getShelfName():java.lang.String
- a:getTimeSpentFromLastPost():J
- a:getTotalTimeSpent():J
- a:getWorkItems():java.util.List
- a:isActive():Z
- isDefault():Z
- a:isRunning():Z
- a:removeBranch(com.intellij.tasks.BranchInfo):V
- a:removeChangelist(com.intellij.tasks.ChangeListInfo):V
- a:setActive(Z):V
- a:setLastPost(java.util.Date):V
- a:setRunning(Z):V
- a:setShelfName(java.lang.String):V
- a:setUpdated(java.util.Date):V
- a:setWorkItems(java.util.List):V
- a:updateFromIssue(com.intellij.tasks.Task):V
a:com.intellij.tasks.Task
- sf:EMPTY_ARRAY:com.intellij.tasks.Task[]
- <init>():V
- f:equals(java.lang.Object):Z
- ps:extractNumberFromId(java.lang.String):java.lang.String
- ps:extractProjectFromId(java.lang.String):java.lang.String
- a:getComments():com.intellij.tasks.Comment[]
- a:getCreated():java.util.Date
- getCustomIcon():java.lang.String
- a:getDescription():java.lang.String
- a:getIcon():javax.swing.Icon
- a:getId():java.lang.String
- a:getIssueUrl():java.lang.String
- getNumber():java.lang.String
- getPresentableId():java.lang.String
- getPresentableName():java.lang.String
- getProject():java.lang.String
- getRepository():com.intellij.tasks.TaskRepository
- getState():com.intellij.tasks.TaskState
- a:getSummary():java.lang.String
- a:getType():com.intellij.tasks.TaskType
- a:getUpdated():java.util.Date
- f:hashCode():I
- a:isClosed():Z
- a:isIssue():Z
f:com.intellij.tasks.TaskApiBundle
- s:message(java.lang.String,java.lang.Object[]):java.lang.String
- s:messagePointer(java.lang.String,java.lang.Object[]):java.util.function.Supplier
com.intellij.tasks.TaskListener
- java.util.EventListener
- a:taskActivated(com.intellij.tasks.LocalTask):V
- a:taskAdded(com.intellij.tasks.LocalTask):V
- a:taskDeactivated(com.intellij.tasks.LocalTask):V
- a:taskRemoved(com.intellij.tasks.LocalTask):V
c:com.intellij.tasks.TaskListenerAdapter
- com.intellij.tasks.TaskListener
- <init>():V
- taskActivated(com.intellij.tasks.LocalTask):V
- taskAdded(com.intellij.tasks.LocalTask):V
- taskDeactivated(com.intellij.tasks.LocalTask):V
- taskRemoved(com.intellij.tasks.LocalTask):V
a:com.intellij.tasks.TaskManager
- <init>():V
- a:activateTask(com.intellij.tasks.Task,Z):com.intellij.tasks.LocalTask
- a:addTask(com.intellij.tasks.Task):com.intellij.tasks.LocalTask
- a:addTaskListener(com.intellij.tasks.TaskListener,com.intellij.openapi.Disposable):V
- a:createLocalTask(java.lang.String):com.intellij.tasks.LocalTask
- a:findTask(java.lang.String):com.intellij.tasks.LocalTask
- a:getActiveTask():com.intellij.tasks.LocalTask
- a:getActiveVcs():com.intellij.openapi.vcs.AbstractVcs
- a:getAllRepositories():com.intellij.tasks.TaskRepository[]
- a:getAssociatedTask(com.intellij.openapi.vcs.changes.LocalChangeList):com.intellij.tasks.LocalTask
- a:getCachedIssues():java.util.List
- a:getCachedIssues(Z):java.util.List
- a:getIssues(java.lang.String):java.util.List
- a:getIssues(java.lang.String,I,I,Z,com.intellij.openapi.progress.ProgressIndicator,Z):java.util.List
- a:getIssues(java.lang.String,Z):java.util.List
- a:getLocalTasks():java.util.List
- a:getLocalTasks(Z):java.util.List
- s:getManager(com.intellij.openapi.project.Project):com.intellij.tasks.TaskManager
- a:isLocallyClosed(com.intellij.tasks.LocalTask):Z
- a:isVcsEnabled():Z
- a:removeTask(com.intellij.tasks.LocalTask):V
- a:testConnection(com.intellij.tasks.TaskRepository):Z
- a:trackContext(com.intellij.openapi.vcs.changes.LocalChangeList):V
- a:updateIssues(java.lang.Runnable):V
e:com.intellij.tasks.TaskManager$VcsOperation
- java.lang.Enum
- sf:CREATE_BRANCH:com.intellij.tasks.TaskManager$VcsOperation
- sf:CREATE_CHANGELIST:com.intellij.tasks.TaskManager$VcsOperation
- sf:DO_NOTHING:com.intellij.tasks.TaskManager$VcsOperation
- s:valueOf(java.lang.String):com.intellij.tasks.TaskManager$VcsOperation
- s:values():com.intellij.tasks.TaskManager$VcsOperation[]
a:com.intellij.tasks.TaskRepository
- sf:BASIC_HTTP_AUTHORIZATION:I
- sf:LOGIN_ANONYMOUSLY:I
- sf:NATIVE_SEARCH:I
- psf:NO_FEATURES:I
- sf:STATE_UPDATING:I
- sf:TIME_MANAGEMENT:I
- sf:TIME_SPENT_PATTERN:java.util.regex.Pattern
- p:myCommitMessageFormat:java.lang.String
- p:myShouldFormatCommitMessage:Z
- <init>():V
- p:<init>(com.intellij.tasks.TaskRepository):V
- <init>(com.intellij.tasks.TaskRepositoryType):V
- a:clone():com.intellij.tasks.TaskRepository
- createCancellableConnection():com.intellij.tasks.TaskRepository$CancellableConnection
- equals(java.lang.Object):Z
- a:extractId(java.lang.String):java.lang.String
- a:findTask(java.lang.String):com.intellij.tasks.Task
- getAvailableTaskStates(com.intellij.tasks.Task):java.util.Set
- getComment():java.lang.String
- getCommitMessageFormat():java.lang.String
- p:getFeatures():I
- getIcon():javax.swing.Icon
- getIssues(java.lang.String,I,I,Z):com.intellij.tasks.Task[]
- getIssues(java.lang.String,I,I,Z,com.intellij.openapi.progress.ProgressIndicator):com.intellij.tasks.Task[]
- getIssues(java.lang.String,I,J):com.intellij.tasks.Task[]
- a:getPreferredCloseTaskState():com.intellij.tasks.CustomTaskState
- a:getPreferredOpenTaskState():com.intellij.tasks.CustomTaskState
- getPresentableName():java.lang.String
- f:getRepositoryType():com.intellij.tasks.TaskRepositoryType
- getTaskComment(com.intellij.tasks.Task):java.lang.String
- getUrl():java.lang.String
- initializeRepository():V
- isConfigured():Z
- isShared():Z
- isShouldFormatCommitMessage():Z
- isSupported(I):Z
- setCommitMessageFormat(java.lang.String):V
- a:setPreferredCloseTaskState(com.intellij.tasks.CustomTaskState):V
- a:setPreferredOpenTaskState(com.intellij.tasks.CustomTaskState):V
- f:setRepositoryType(com.intellij.tasks.TaskRepositoryType):V
- setShared(Z):V
- setShouldFormatCommitMessage(Z):V
- setTaskState(com.intellij.tasks.Task,com.intellij.tasks.CustomTaskState):V
- setTaskState(com.intellij.tasks.Task,com.intellij.tasks.TaskState):V
- setUrl(java.lang.String):V
- testConnection():V
- updateTimeSpent(com.intellij.tasks.LocalTask,java.lang.String,java.lang.String):V
a:com.intellij.tasks.TaskRepository$CancellableConnection
- java.util.concurrent.Callable
- <init>():V
- f:call():java.lang.Exception
- a:cancel():V
- pa:doTest():V
com.intellij.tasks.TaskRepositorySubtype
- a:createRepository():com.intellij.tasks.TaskRepository
- a:getIcon():javax.swing.Icon
- a:getName():java.lang.String
a:com.intellij.tasks.TaskRepositoryType
- com.intellij.tasks.TaskRepositorySubtype
- java.lang.Comparable
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- <init>():V
- s:addEPListChangeListener(com.intellij.openapi.Disposable,java.lang.Runnable):V
- compareTo(com.intellij.tasks.TaskRepositoryType):I
- a:createEditor(com.intellij.tasks.TaskRepository,com.intellij.openapi.project.Project,com.intellij.util.Consumer):com.intellij.tasks.config.TaskRepositoryEditor
- a:createRepository():com.intellij.tasks.TaskRepository
- createRepository(com.intellij.tasks.TaskRepositorySubtype):com.intellij.tasks.TaskRepository
- getAdvertiser():java.lang.String
- getAvailableSubtypes():java.util.List
- a:getIcon():javax.swing.Icon
- a:getName():java.lang.String
- getPossibleTaskStates():java.util.EnumSet
- a:getRepositoryClass():java.lang.Class
- s:getRepositoryClasses():java.util.List
- s:getRepositoryTypes():java.util.List
- getSortOrder():I
e:com.intellij.tasks.TaskState
- java.lang.Enum
- sf:IN_PROGRESS:com.intellij.tasks.TaskState
- sf:OPEN:com.intellij.tasks.TaskState
- sf:OTHER:com.intellij.tasks.TaskState
- sf:REOPENED:com.intellij.tasks.TaskState
- sf:RESOLVED:com.intellij.tasks.TaskState
- sf:SUBMITTED:com.intellij.tasks.TaskState
- getPresentableName():java.lang.String
- s:valueOf(java.lang.String):com.intellij.tasks.TaskState
- s:values():com.intellij.tasks.TaskState[]
e:com.intellij.tasks.TaskType
- java.lang.Enum
- sf:BUG:com.intellij.tasks.TaskType
- sf:EXCEPTION:com.intellij.tasks.TaskType
- sf:FEATURE:com.intellij.tasks.TaskType
- sf:OTHER:com.intellij.tasks.TaskType
- s:valueOf(java.lang.String):com.intellij.tasks.TaskType
- s:values():com.intellij.tasks.TaskType[]
a:com.intellij.tasks.config.TaskRepositoryEditor
- com.intellij.openapi.Disposable
- <init>():V
- a:createComponent():javax.swing.JComponent
- dispose():V
- getPreferredFocusedComponent():javax.swing.JComponent
a:com.intellij.tasks.context.WorkingContextProvider
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- <init>():V
- clearContext(com.intellij.openapi.project.Project):V
- a:getDescription():java.lang.String
- a:getId():java.lang.String
- a:loadContext(com.intellij.openapi.project.Project,org.jdom.Element):V
- a:saveContext(com.intellij.openapi.project.Project,org.jdom.Element):V
c:com.intellij.tasks.timeTracking.model.WorkItem
- duration:J
- from:java.util.Date
- <init>():V
- <init>(java.util.Date):V
