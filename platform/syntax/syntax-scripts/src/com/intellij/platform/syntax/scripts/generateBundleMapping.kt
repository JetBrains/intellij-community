// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
@file: ApiStatus.Experimental

package com.intellij.platform.syntax.scripts

import org.jetbrains.annotations.ApiStatus
import java.io.OutputStreamWriter
import java.nio.file.Path
import java.util.*
import kotlin.io.path.*
import kotlin.system.exitProcess

/**
 * Generates a Kotlin class from your .properties file. This file is necessary for non-JVM targets where Java PropertyResourceBundles are not available.
 */
fun main(args: Array<String>) {
  if (args.size != 3) {
    println("""
      |Please pass 3 arguments:
      |  1. the path to .properties file
      |  2. the path to the output file as arguments
      |  3. the package name to use
      |""".trimMargin())
    exitProcess(-1)
  }

  generateMapping(args[0], args[1], args[2])
}

fun generateMapping(
  properties: String,
  output: String,
  packageName: String,
) {
  val propertiesPath = Path(properties)
  if (!propertiesPath.exists()) {
    println(".properties file does not exist! Path: $propertiesPath")
    exitProcess(-1)
  }

  val outputPath = Path(output)
  if (!outputPath.exists()) {
    outputPath.createFile()
  }

  val mappings = loadMappings(propertiesPath)

  val fileName = outputPath.nameWithoutExtension
  outputPath.writer().use { writer ->
    writer.printClass(fileName, packageName, mappings, "$properties $output $packageName")
  }
}

private fun OutputStreamWriter.printClass(
  className: String,
  packageName: String,
  mappings: Map<String, String>,
  parametersString: String,
) {
  appendLine("package $packageName")
  appendLine()
  appendLine("// Generated by generateBundleMapping.kt")
  appendLine("// To regenerate the file, please run `GenerateBundleMapping` run configuration with the following parameters: ")
  appendLine("//   $parametersString ")
  appendLine("internal object $className {")
  appendLine("  val mappings: Map<String, String> = mapOf(")
  for ((key, value) in mappings.entries.sortedBy { it.key }) {
    val escapedValue = value
      .replace("\\", "\\\\")
      .replace("\n", "\\n")
      .replace("\r", "\\r")
      .replace("\t", "\\t")
    appendLine("    \"$key\" to \"$escapedValue\",")
  }
  appendLine("  )")
  appendLine('}')
}

private fun loadMappings(propertiesPath: Path): Map<String, String> {
  val properties = Properties()
  propertiesPath.inputStream().use { stream ->
    properties.load(stream)
  }

  return properties.entries.associate { (key, value) ->
    (key as String) to (value as String)
  }
}
