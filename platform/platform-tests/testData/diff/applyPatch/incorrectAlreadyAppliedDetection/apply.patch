--- before/ResolveCache.java	(revision 1)
+++ after/ResolveCache.java	Thu Feb 01 20:27:02 MSK 2007
@@ -5,23 +5,29 @@
 import com.intellij.psi.*;
 import com.intellij.psi.impl.PsiManagerImpl;
 import com.intellij.reference.SoftReference;
+import com.intellij.util.ConcurrencyUtil;
 import com.intellij.util.Function;
-import com.intellij.util.containers.WeakHashMap;
+import com.intellij.util.containers.ConcurrentWeakHashMap;
 
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.atomic.AtomicInteger;
 
 public class ResolveCache {
-  private static final Key<MapPair<PsiReference, SoftReference<ResolveResult[]>>> JAVA_RESOLVE_MAP = Key.create("ResolveCache.JAVA_RESOLVE_MAP");
+  private static final Key<MapPair<PsiPolyVariantReference, Reference<ResolveResult[]>>> JAVA_RESOLVE_MAP = Key.create("ResolveCache.JAVA_RESOLVE_MAP");
   private static final Key<MapPair<PsiReference, Reference<PsiElement>>> RESOLVE_MAP = Key.create("ResolveCache.RESOLVE_MAP");
-  private static final Key<MapPair<PsiReference, SoftReference<ResolveResult[]>>> JAVA_RESOLVE_MAP_INCOMPLETE = Key.create("ResolveCache.JAVA_RESOLVE_MAP_INCOMPLETE");
+  private static final Key<MapPair<PsiPolyVariantReference, Reference<ResolveResult[]>>> JAVA_RESOLVE_MAP_INCOMPLETE = Key.create("ResolveCache.JAVA_RESOLVE_MAP_INCOMPLETE");
   private static final Key<MapPair<PsiReference, Reference<PsiElement>>> RESOLVE_MAP_INCOMPLETE = Key.create("ResolveCache.RESOLVE_MAP_INCOMPLETE");
   private static final Key<List<Thread>> IS_BEING_RESOLVED_KEY = Key.create("ResolveCache.IS_BEING_RESOLVED_KEY");
   private static final Key<MapPair<PsiVariable, Object>> VAR_TO_CONST_VALUE_MAP_KEY = Key.create("ResolveCache.VAR_TO_CONST_VALUE_MAP_KEY");
 
   //store types for method call expressions, NB: this caching is semantical, without this captured wildcards won't work
-  private Map<PsiExpression, WeakReference<PsiType>> myCaclulatedlTypes;
+  private final ConcurrentWeakHashMap<PsiExpression, WeakReference<PsiType>> myCaclulatedlTypes = new ConcurrentWeakHashMap<PsiExpression, WeakReference<PsiType>>();
 
   private static final Object NULL = Key.create("NULL");
 
@@ -30,24 +36,25 @@
   private final Map<PsiVariable,Object> myVarToConstValueMap1;
   private final Map<PsiVariable,Object> myVarToConstValueMap2;
 
-  private final WeakHashMap[] myPolyVariantResolveMaps = new WeakHashMap[4];
-  private final WeakHashMap[] myResolveMaps = new WeakHashMap[4];
-  private int myClearCount = 0;
+  private final Map<PsiPolyVariantReference,Reference<ResolveResult[]>>[] myPolyVariantResolveMaps = new Map[4];
+  private final Map<PsiReference,Reference<PsiElement>>[] myResolveMaps = new Map[4];
+  private final AtomicInteger myClearCount = new AtomicInteger(0);
 
 
-  public static interface PolyVariantResolver {
-    ResolveResult[] resolve(PsiPolyVariantReference ref, boolean incompleteCode);
+  public static interface AbstractResolver<Ref,Result> {
+    Result resolve(Ref ref, boolean incompleteCode);
   }
+  public static interface PolyVariantResolver extends AbstractResolver<PsiPolyVariantReference,ResolveResult[]> {
+  }
 
-  public static interface Resolver{
-    PsiElement resolve(PsiReference ref, boolean incompleteCode);
+  public static interface Resolver extends AbstractResolver<PsiReference,PsiElement>{
   }
 
   public ResolveCache(PsiManagerImpl manager) {
     myManager = manager;
 
-    myVarToConstValueMap1 = Collections.synchronizedMap(getOrCreateWeakMap(myManager, VAR_TO_CONST_VALUE_MAP_KEY, true));
-    myVarToConstValueMap2 = Collections.synchronizedMap(getOrCreateWeakMap(myManager, VAR_TO_CONST_VALUE_MAP_KEY, false));
+    myVarToConstValueMap1 = getOrCreateWeakMap(myManager, VAR_TO_CONST_VALUE_MAP_KEY, true);
+    myVarToConstValueMap2 = getOrCreateWeakMap(myManager, VAR_TO_CONST_VALUE_MAP_KEY, false);
 
     myPolyVariantResolveMaps[0] = getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP, true);
     myPolyVariantResolveMaps[1] = getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP_INCOMPLETE, true);
@@ -60,200 +67,147 @@
     myResolveMaps[2] = getOrCreateWeakMap(myManager, RESOLVE_MAP, false);
     myResolveMaps[3] = getOrCreateWeakMap(myManager, RESOLVE_MAP_INCOMPLETE, false);
 
-    myCaclulatedlTypes = new WeakHashMap<PsiExpression, WeakReference<PsiType>>();
     myManager.registerRunnableToRunOnAnyChange(new Runnable() {
       public void run() {
-        synchronized (PsiLock.LOCK) {
-          myCaclulatedlTypes.clear();
-        }
+        myCaclulatedlTypes.clear();
+      }
-      }
     });
   }
 
   public PsiType getType(PsiExpression expr, Function<PsiExpression, PsiType> f) {
-    WeakReference<PsiType> ref;
-    synchronized (PsiLock.LOCK) {
-      ref = myCaclulatedlTypes.get(expr);
-    }
+    WeakReference<PsiType> ref = myCaclulatedlTypes.get(expr);
     PsiType type = ref == null ? null : ref.get();
     if (type == null) {
       type = f.fun(expr);
-      synchronized (PsiLock.LOCK) {
-        myCaclulatedlTypes.put(expr, new WeakReference<PsiType>(type));
+      WeakReference<PsiType> existingRef = ConcurrencyUtil.cacheOrGet(myCaclulatedlTypes, expr, new WeakReference<PsiType>(type));
+      PsiType existing = existingRef.get();
+      if (existing != null) type = existing;
-      }
+    }
-    }
-
+    assert type == null || type.isValid();
     return type;
   }
 
   public void clearCache() {
-    synchronized (PsiLock.LOCK) {
-      myClearCount++;
+    myClearCount.incrementAndGet();
-      getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP, true).clear();
-      getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP_INCOMPLETE, true).clear();
-      getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP, false).clear();
-      getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP_INCOMPLETE, false).clear();
-      getOrCreateWeakMap(myManager, RESOLVE_MAP, true).clear();
-      getOrCreateWeakMap(myManager, RESOLVE_MAP_INCOMPLETE, true).clear();
-      getOrCreateWeakMap(myManager, RESOLVE_MAP, false).clear();
-      getOrCreateWeakMap(myManager, RESOLVE_MAP_INCOMPLETE, false).clear();
-    }
+    getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP, true).clear();
+    getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP_INCOMPLETE, true).clear();
+    getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP, false).clear();
+    getOrCreateWeakMap(myManager, JAVA_RESOLVE_MAP_INCOMPLETE, false).clear();
+    getOrCreateWeakMap(myManager, RESOLVE_MAP, true).clear();
+    getOrCreateWeakMap(myManager, RESOLVE_MAP_INCOMPLETE, true).clear();
+    getOrCreateWeakMap(myManager, RESOLVE_MAP, false).clear();
+    getOrCreateWeakMap(myManager, RESOLVE_MAP_INCOMPLETE, false).clear();
+  }
-  }
 
-  public PsiElement resolveWithCaching(PsiReference ref,
-                                       Resolver resolver,
+  private <Ref extends PsiReference, Result> Result resolve(Ref ref,
+                                        AbstractResolver<Ref, Result> resolver,
+                                        Map<Ref,Reference<Result>>[] maps,
-                                       boolean needToPreventRecursion,
-                                       boolean incompleteCode) {
+                                        boolean needToPreventRecursion,
+                                        boolean incompleteCode) {
     ProgressManager.getInstance().checkCanceled();
 
-    int clearCountOnStart;
-    synchronized (PsiLock.LOCK) {
-      clearCountOnStart = myClearCount;
-    }
+    int clearCountOnStart = myClearCount.intValue();
 
     boolean physical = ref.getElement().isPhysical();
-    final Reference<PsiElement> cached = getCachedResolve(ref, physical, incompleteCode);
-    if (cached != null) return cached.get();
+    Result result = getCached(ref, maps, physical, incompleteCode);
+    if (result != null) {
+      return result;
+    }
-
+     
     if (incompleteCode) {
-      final PsiElement results = resolveWithCaching(ref, resolver, needToPreventRecursion, false);
-      if (results != null) {
-        setCachedResolve(ref, results, physical, true, clearCountOnStart);
-        return results;
+      result = resolve(ref, resolver, maps, needToPreventRecursion, false);
+      if (result != null && !(result instanceof Object[] && ((Object[])result).length == 0)) {
+        cache(ref, result, maps, physical, incompleteCode, clearCountOnStart);
+        return result;
       }
     }
 
-    if (!lockElement(ref, needToPreventRecursion)) return null;
-    PsiElement result = null;
+    if (needToPreventRecursion && !lockElement(ref)) return null;
     try {
       result = resolver.resolve(ref, incompleteCode);
     }
-    finally{
+    finally {
-      unlockElement(ref, needToPreventRecursion);
+      if (needToPreventRecursion) {
+        unlockElement(ref);
-    }
+      }
-
-    setCachedResolve(ref, result, physical, incompleteCode, clearCountOnStart);
+    }
+    cache(ref, result, maps, physical, incompleteCode, clearCountOnStart);
     return result;
   }
 
-  private static boolean lockElement(PsiReference ref, boolean doLock) {
-    if (doLock) {
+  public ResolveResult[] resolveWithCaching(PsiPolyVariantReference ref,
+                                            PolyVariantResolver resolver,
+                                            boolean needToPreventRecursion,
+                                            boolean incompleteCode) {
+    ResolveResult[] result = resolve(ref, resolver, myPolyVariantResolveMaps, needToPreventRecursion, incompleteCode);
+    return result == null ? JavaResolveResult.EMPTY_ARRAY : result;
+  }
+
+  public PsiElement resolveWithCaching(PsiReference ref,
+                                       Resolver resolver,
+                                       boolean needToPreventRecursion,
+                                       boolean incompleteCode) {
+    return resolve(ref, resolver, myResolveMaps, needToPreventRecursion, incompleteCode);
+  }
+
+  private static boolean lockElement(PsiReference ref) {
-      synchronized (IS_BEING_RESOLVED_KEY) {
-        PsiElement elt = ref.getElement();
+    synchronized (IS_BEING_RESOLVED_KEY) {
+      PsiElement elt = ref.getElement();
 
-        List<Thread> lockingThreads = elt.getUserData(IS_BEING_RESOLVED_KEY);
-        final Thread currentThread = Thread.currentThread();
-        if (lockingThreads == null) {
-          lockingThreads = new ArrayList<Thread>(1);
-          elt.putUserData(IS_BEING_RESOLVED_KEY, lockingThreads);
-        }
-        else {
-          if (lockingThreads.contains(currentThread)) return false;
-        }
-        lockingThreads.add(currentThread);
-      }
+      List<Thread> lockingThreads = elt.getUserData(IS_BEING_RESOLVED_KEY);
+      final Thread currentThread = Thread.currentThread();
+      if (lockingThreads == null) {
+        lockingThreads = new ArrayList<Thread>(1);
+        elt.putUserData(IS_BEING_RESOLVED_KEY, lockingThreads);
+      }
+      else {
+        if (lockingThreads.contains(currentThread)) return false;
+      }
+      lockingThreads.add(currentThread);
+    }
-    }
     return true;
   }
 
-  private static void unlockElement(PsiReference ref, boolean doLock) {
-    if (doLock) {
+  private static void unlockElement(PsiReference ref) {
-      synchronized (IS_BEING_RESOLVED_KEY) {
-        PsiElement elt = ref.getElement();
+    synchronized (IS_BEING_RESOLVED_KEY) {
+      PsiElement elt = ref.getElement();
 
-        List<Thread> lockingThreads = elt.getUserData(IS_BEING_RESOLVED_KEY);
-        if (lockingThreads == null) return;
-        final Thread currentThread = Thread.currentThread();
-        lockingThreads.remove(currentThread);
-        if (lockingThreads.isEmpty()) {
-          elt.putUserData(IS_BEING_RESOLVED_KEY, null);
-        }
-      }
-    }
+      List<Thread> lockingThreads = elt.getUserData(IS_BEING_RESOLVED_KEY);
+      if (lockingThreads == null) return;
+      final Thread currentThread = Thread.currentThread();
+      lockingThreads.remove(currentThread);
+      if (lockingThreads.isEmpty()) {
+        elt.putUserData(IS_BEING_RESOLVED_KEY, null);
+      }
+    }
+  }
-  }
 
-  private void setCachedResolve(PsiReference ref, PsiElement results, boolean physical, boolean incompleteCode, final int clearCountOnStart) {
-    synchronized (PsiLock.LOCK) {
-      if (clearCountOnStart != myClearCount && results != null) return;
-
-      int index = getIndex(physical, incompleteCode);
-      myResolveMaps[index].put(ref, new SoftReference<PsiElement>(results));
-    }
-  }
-
   //for Visual Fabrique
   public void clearResolveCaches(PsiReference ref) {
-    synchronized (PsiLock.LOCK) {
-      myClearCount++;
+    myClearCount.incrementAndGet();
-      final boolean physical = ref.getElement().isPhysical();
+    final boolean physical = ref.getElement().isPhysical();
-      setCachedPolyVariantResolve(ref, null, physical, false, myClearCount);
-      setCachedPolyVariantResolve(ref, null, physical, true, myClearCount);
+    if (ref instanceof PsiPolyVariantReference) {
+      cache((PsiPolyVariantReference)ref, null, myPolyVariantResolveMaps, physical, false, myClearCount.intValue());
+      cache((PsiPolyVariantReference)ref, null, myPolyVariantResolveMaps, physical, true, myClearCount.intValue());
     }
   }
 
-  private Reference<PsiElement> getCachedResolve(PsiReference ref, boolean physical, boolean incompleteCode) {
-    synchronized (PsiLock.LOCK) {
-      int index = getIndex(physical, incompleteCode);
-      final Reference<PsiElement> reference = (Reference<PsiElement>)myResolveMaps[index].get(ref);
-      if(reference == null) return null;
-      return reference;
-    }
-  }
 
-  public ResolveResult[] resolveWithCaching(PsiPolyVariantReference ref,
-                                            PolyVariantResolver resolver,
-                                            boolean needToPreventRecursion,
-                                            boolean incompleteCode) {
-    ProgressManager.getInstance().checkCanceled();
-
-    int clearCountOnStart;
-    synchronized (PsiLock.LOCK) {
-      clearCountOnStart = myClearCount;
-    }
-
-    boolean physical = ref.getElement().isPhysical();
-    final ResolveResult[] cached = getCachedPolyVariantResolve(ref, physical, incompleteCode);
-    if (cached != null) return cached;
-
-    if (incompleteCode) {
-      final ResolveResult[] results = resolveWithCaching(ref, resolver, needToPreventRecursion, false);
-      if (results != null && results.length > 0) {
-        setCachedPolyVariantResolve(ref, results, physical, true, clearCountOnStart);
-        return results;
-      }
-    }
-
-    if (!lockElement(ref, needToPreventRecursion)) return JavaResolveResult.EMPTY_ARRAY;
-    ResolveResult[] result;
-    try {
-      result = resolver.resolve(ref, incompleteCode);
-    } finally {
-      unlockElement(ref, needToPreventRecursion);
-    }
-
-    setCachedPolyVariantResolve(ref, result, physical, incompleteCode, clearCountOnStart);
-    return result;
-  }
-
   private static int getIndex(boolean physical, boolean ic){
     return (physical ? 0 : 1) << 1 | (ic ? 1 : 0);
   }
 
-  private void setCachedPolyVariantResolve(PsiReference ref, ResolveResult[] result, boolean physical, boolean incomplete, int clearCountOnStart){
-    synchronized (PsiLock.LOCK) {
-      if (clearCountOnStart != myClearCount && result != null) return;
-      int index = getIndex(physical, incomplete);
-      myPolyVariantResolveMaps[index].put(ref, new SoftReference<ResolveResult[]>(result));
-    }
-  }
-
-  private ResolveResult[] getCachedPolyVariantResolve(PsiReference ref, boolean physical, boolean ic){
-    synchronized (PsiLock.LOCK) {
+  private static <Ref,Result>Result getCached(Ref ref, Map<Ref,Reference<Result>>[] maps, boolean physical, boolean ic){
-      int index = getIndex(physical, ic);
+    int index = getIndex(physical, ic);
-      final Reference<ResolveResult[]> reference = (Reference<ResolveResult[]>)myPolyVariantResolveMaps[index].get(ref);
+    Reference<Result> reference = maps[index].get(ref);
-      if(reference == null) return null;
-      return reference.get();
-    }
+    if(reference == null) return null;
+    return reference.get();
+  }
+  private <Ref,Result> void cache(Ref ref, Result result, Map<Ref,Reference<Result>>[] maps, boolean physical, boolean incompleteCode, final int clearCountOnStart) {
+    if (clearCountOnStart != myClearCount.intValue() && result != null) return;
+
+    int index = getIndex(physical, incompleteCode);
+    maps[index].put(ref, new SoftReference<Result>(result));
   }
 
   public static interface ConstValueComputer{
@@ -274,44 +228,35 @@
     return result;
   }
 
-  public <K,V> WeakHashMap<K,V> getOrCreateWeakMap(final PsiManagerImpl manager, final Key<MapPair<K, V>> key, boolean forPhysical) {
+  public <K,V> ConcurrentMap<K,V> getOrCreateWeakMap(final PsiManagerImpl manager, final Key<MapPair<K, V>> key, boolean forPhysical) {
     MapPair<K, V> pair = manager.getUserData(key);
     if (pair == null){
       pair = new MapPair<K,V>();
-      manager.putUserData(key, pair);
+      pair = manager.putUserDataIfAbsent(key, pair);
 
       final MapPair<K, V> _pair = pair;
       manager.registerRunnableToRunOnChange(
         new Runnable() {
           public void run() {
-            synchronized (PsiLock.LOCK) {
-              myClearCount++;
+            myClearCount.incrementAndGet();
-              _pair.physicalMap.clear();
-            }
-          }
+            _pair.physicalMap.clear();
+          }
+        }
-        }
       );
       manager.registerRunnableToRunOnAnyChange(
         new Runnable() {
           public void run() {
-            synchronized (PsiLock.LOCK) {
-              myClearCount++;
+            myClearCount.incrementAndGet();
-              _pair.nonPhysicalMap.clear();
-            }
-          }
+            _pair.nonPhysicalMap.clear();
+          }
+        }
-        }
       );
     }
     return forPhysical ? pair.physicalMap : pair.nonPhysicalMap;
   }
 
   public static class MapPair<K,V>{
-    public WeakHashMap<K,V> physicalMap;
-    public WeakHashMap<K,V> nonPhysicalMap;
-
-    public MapPair() {
-      physicalMap = new WeakHashMap<K, V>();
-      nonPhysicalMap = new WeakHashMap<K, V>();
+    public final ConcurrentMap<K,V> physicalMap = new ConcurrentWeakHashMap<K, V>();
+    public final ConcurrentMap<K,V> nonPhysicalMap = new ConcurrentWeakHashMap<K, V>();
-    }
-  }
+  }
+}
\ No newline at end of file
-}
