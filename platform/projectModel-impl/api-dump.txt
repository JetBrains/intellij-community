f:com.intellij.application.options.PathMacroExpandableProtocolBean
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- protocol:java.lang.String
- <init>():V
f:com.intellij.application.options.PathMacrosCollector
- com.intellij.openapi.components.PathMacroMap
- sf:MACRO_FILTER_EXTENSION_POINT_NAME:com.intellij.openapi.extensions.ExtensionPointName
- sf:MACRO_PATTERN:java.util.regex.Pattern
- s:getMacroNames(org.jdom.Element):java.util.Set
- hashCode():I
- substitute(java.lang.String,Z):java.lang.String
- substituteRecursively(java.lang.String,Z):java.lang.CharSequence
f:com.intellij.application.options.ReplacePathToMacroMap
- com.intellij.openapi.components.PathMacroMap
- <init>():V
- <init>(com.intellij.application.options.ReplacePathToMacroMap):V
- addMacroReplacement(java.lang.String,java.lang.String):V
- addReplacement(java.lang.String,java.lang.String,Z):V
- equals(java.lang.Object):Z
- hashCode():I
- put(java.lang.String,java.lang.String):V
- substitute(java.lang.String,Z):java.lang.String
- substituteRecursively(java.lang.String,Z):java.lang.CharSequence
f:com.intellij.configurationStore.BundledSchemeEP
- <init>():V
- f:getPath():java.lang.String
- f:setPath(java.lang.String):V
f:com.intellij.configurationStore.InitializedSchemeWrapper
- com.intellij.configurationStore.SchemeWrapper
- <init>(com.intellij.openapi.options.Scheme,kotlin.jvm.functions.Function1):V
- writeScheme():org.jdom.Element
c:com.intellij.configurationStore.JbXmlOutputter
- sf:Companion:com.intellij.configurationStore.JbXmlOutputter$Companion
- <init>():V
- <init>(java.lang.String):V
- <init>(java.lang.String,com.intellij.openapi.util.JDOMUtil$ElementOutputFilter):V
- <init>(java.lang.String,com.intellij.openapi.util.JDOMUtil$ElementOutputFilter,com.intellij.application.options.ReplacePathToMacroMap):V
- <init>(java.lang.String,com.intellij.openapi.util.JDOMUtil$ElementOutputFilter,com.intellij.application.options.ReplacePathToMacroMap,com.intellij.openapi.application.PathMacroFilter):V
- <init>(java.lang.String,com.intellij.openapi.util.JDOMUtil$ElementOutputFilter,com.intellij.application.options.ReplacePathToMacroMap,com.intellij.openapi.application.PathMacroFilter,Z):V
- <init>(java.lang.String,com.intellij.openapi.util.JDOMUtil$ElementOutputFilter,com.intellij.application.options.ReplacePathToMacroMap,com.intellij.openapi.application.PathMacroFilter,Z,java.lang.String):V
- b:<init>(java.lang.String,com.intellij.openapi.util.JDOMUtil$ElementOutputFilter,com.intellij.application.options.ReplacePathToMacroMap,com.intellij.openapi.application.PathMacroFilter,Z,java.lang.String,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- sf:collapseMacrosAndWrite(org.jdom.Element,com.intellij.openapi.components.ComponentManager):java.lang.String
- f:output(org.jdom.DocType,java.io.Writer):V
- f:output(org.jdom.Document,java.io.Writer):V
- f:output(org.jdom.Element,java.io.Writer):V
- f:printElement(java.io.Writer,org.jdom.Element,I):V
- p:writeContent(java.io.Writer,org.jdom.Element,I,Z):Z
f:com.intellij.configurationStore.JbXmlOutputter$Companion
- f:collapseMacrosAndWrite(org.jdom.Element,com.intellij.openapi.components.ComponentManager):java.lang.String
- f:collapseMacrosAndWrite(org.jdom.Element,com.intellij.openapi.components.ComponentManager,java.io.Writer):V
- f:createOutputter(com.intellij.openapi.components.ComponentManager):com.intellij.configurationStore.JbXmlOutputter
- f:escapeElementEntities(java.lang.String):java.lang.String
a:com.intellij.configurationStore.LazySchemeProcessor
- com.intellij.openapi.options.SchemeProcessor
- <init>():V
- <init>(java.lang.String):V
- b:<init>(java.lang.String,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- a:createScheme(com.intellij.configurationStore.SchemeDataHolder,java.lang.String,kotlin.jvm.functions.Function1,Z):com.intellij.openapi.options.Scheme
- bs:createScheme$default(com.intellij.configurationStore.LazySchemeProcessor,com.intellij.configurationStore.SchemeDataHolder,java.lang.String,kotlin.jvm.functions.Function1,Z,I,java.lang.Object):com.intellij.openapi.options.Scheme
- getSchemeKey(java.util.function.Function,java.lang.String):java.lang.String
- isSchemeDefault(com.intellij.openapi.options.Scheme,J):Z
- isSchemeEqualToBundled(com.intellij.openapi.options.Scheme):Z
- isSchemeFile(java.lang.CharSequence):Z
- writeScheme(com.intellij.openapi.options.Scheme):org.jdom.Element
a:com.intellij.configurationStore.LazySchemeWrapper
- com.intellij.configurationStore.SchemeWrapper
- <init>(java.lang.String,com.intellij.configurationStore.SchemeDataHolder,kotlin.jvm.functions.Function1):V
- pf:getDataHolder():java.util.concurrent.atomic.AtomicReference
- pf:getWriter():kotlin.jvm.functions.Function1
- f:writeScheme():org.jdom.Element
com.intellij.configurationStore.SchemeContentChangedHandler
- a:schemeContentChanged(com.intellij.openapi.options.Scheme,java.lang.String,com.intellij.configurationStore.SchemeDataHolder):V
com.intellij.configurationStore.SchemeDataHolder
- a:read():org.jdom.Element
- updateDigest(java.lang.Object):V
- updateDigest(org.jdom.Element):V
com.intellij.configurationStore.SchemeExtensionProvider
- a:getSchemeExtension():java.lang.String
a:com.intellij.configurationStore.SchemeWrapper
- com.intellij.openapi.options.ExternalizableSchemeAdapter
- com.intellij.configurationStore.SerializableScheme
- <init>(java.lang.String):V
- pa:getLazyScheme():kotlin.Lazy
- f:getScheme():java.lang.Object
- getSchemeState():com.intellij.openapi.options.SchemeState
f:com.intellij.configurationStore.Scheme_implKt
- sf:getCURRENT_NAME_CONVERTER():kotlin.jvm.functions.Function1
- sf:getMODERN_NAME_CONVERTER():kotlin.jvm.functions.Function1
- sf:wrapState(org.jdom.Element,com.intellij.openapi.project.Project):org.jdom.Element
com.intellij.configurationStore.SerializableScheme
- getSchemeState():com.intellij.openapi.options.SchemeState
- a:writeScheme():org.jdom.Element
f:com.intellij.ide.projectView.impl.ProjectRootsUtil
- s:findExcludeFolder(com.intellij.openapi.module.Module,com.intellij.openapi.vfs.VirtualFile):com.intellij.openapi.roots.ExcludeFolder
- s:findUnloadedModuleByContentRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):java.lang.String
- s:findUnloadedModuleByFile(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):java.lang.String
- s:getModuleSourceRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):com.intellij.openapi.roots.SourceFolder
- s:isInSource(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):Z
- s:isInSource(com.intellij.psi.PsiDirectory):Z
- s:isInTestSource(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):Z
- s:isInTestSource(com.intellij.psi.PsiFile):Z
- s:isLibraryRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):Z
- s:isModuleContentRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):Z
- s:isModuleContentRoot(com.intellij.psi.PsiDirectory):Z
- s:isModuleSourceRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):Z
- s:isOutsideSourceRoot(com.intellij.psi.PsiFile):Z
- s:isProjectHome(com.intellij.psi.PsiDirectory):Z
- s:isSourceRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.project.Project):Z
- s:isSourceRoot(com.intellij.psi.PsiDirectory):Z
c:com.intellij.openapi.components.PathMacroManager
- com.intellij.openapi.components.PathMacroSubstitutor
- <init>(com.intellij.openapi.application.PathMacros):V
- collapsePath(java.lang.String,Z):java.lang.String
- collapsePaths(org.jdom.Element,Z):V
- s:collapsePaths(org.jdom.Element,Z,com.intellij.application.options.ReplacePathToMacroMap):V
- p:computeReplacePathMap():com.intellij.application.options.ReplacePathToMacroMap
- expandPath(java.lang.String):java.lang.String
- expandPaths(org.jdom.Element):V
- getExpandMacroMap():com.intellij.openapi.components.ExpandMacroToPathMap
- s:getInstance(com.intellij.openapi.components.ComponentManager):com.intellij.openapi.components.PathMacroManager
- getMacroFilter():com.intellij.openapi.application.PathMacroFilter
- f:getReplacePathMap():com.intellij.application.options.ReplacePathToMacroMap
- ps:pathsEqual(java.lang.String,java.lang.String):Z
com.intellij.openapi.components.PathMacroSubstitutor
- collapsePath(java.lang.String):java.lang.String
- a:collapsePath(java.lang.String,Z):java.lang.String
- collapsePaths(org.jdom.Element):V
- a:collapsePaths(org.jdom.Element,Z):V
- collapsePathsRecursively(java.lang.String):java.lang.String
- collapsePathsRecursively(org.jdom.Element):V
- a:expandPath(java.lang.String):java.lang.String
- a:expandPaths(org.jdom.Element):V
c:com.intellij.openapi.components.impl.ModulePathMacroManager
- com.intellij.openapi.components.PathMacroManager
- <init>(com.intellij.openapi.module.Module):V
- computeReplacePathMap():com.intellij.application.options.ReplacePathToMacroMap
- s:createInstance(java.util.function.Supplier,java.util.function.Supplier):com.intellij.openapi.components.impl.ModulePathMacroManager
- getExpandMacroMap():com.intellij.openapi.components.ExpandMacroToPathMap
c:com.intellij.openapi.components.impl.ProjectPathMacroManager
- com.intellij.openapi.components.PathMacroManager
- <init>(com.intellij.openapi.project.Project):V
- p:computeReplacePathMap():com.intellij.application.options.ReplacePathToMacroMap
- s:createInstance(java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier):com.intellij.openapi.components.impl.ProjectPathMacroManager
- getExpandMacroMap():com.intellij.openapi.components.ExpandMacroToPathMap
com.intellij.openapi.components.impl.stores.IProjectStore
- sf:COMPONENT_STORE_LOADING_ENABLED:com.intellij.openapi.util.Key
- a:getDirectoryStorePath():java.nio.file.Path
- a:getPresentableUrl():java.lang.String
- a:getProjectBasePath():java.nio.file.Path
- a:getProjectFilePath():java.nio.file.Path
- a:getProjectName():java.lang.String
- a:getProjectWorkspaceId():java.lang.String
- a:getStorageScheme():com.intellij.openapi.components.StorageScheme
- a:getWorkspacePath():java.nio.file.Path
- a:isProjectFile(com.intellij.openapi.vfs.VirtualFile):Z
a:com.intellij.openapi.module.ConfigurationErrorDescription
- p:<init>(java.lang.String,java.lang.String):V
- f:getDescription():java.lang.String
- f:getElementName():java.lang.String
- a:getErrorType():com.intellij.openapi.module.ConfigurationErrorType
- a:getIgnoreConfirmationMessage():java.lang.String
- getImplementationName():java.lang.String
- a:ignoreInvalidElement():V
- isValid():Z
a:com.intellij.openapi.module.ConfigurationErrorType
- <init>(Z):V
- f:canIgnore():Z
- a:getErrorText(I,java.lang.String):java.lang.String
- getFeatureType():java.lang.String
f:com.intellij.openapi.module.impl.ModuleGroupersKt
- sf:splitStringByDotsJoiningIncorrectIdentifiers(java.lang.String):kotlin.Pair
f:com.intellij.openapi.module.impl.ModulePathKt
- sf:getModuleNameByFilePath(java.lang.String):java.lang.String
a:com.intellij.openapi.options.BaseSchemeProcessor
- com.intellij.openapi.options.NonLazySchemeProcessor
- <init>():V
com.intellij.openapi.options.ExternalizableScheme
- com.intellij.openapi.options.Scheme
- a:setName(java.lang.String):V
a:com.intellij.openapi.options.ExternalizableSchemeAdapter
- com.intellij.openapi.options.ExternalizableScheme
- <init>():V
- getName():java.lang.String
- setName(java.lang.String):V
a:com.intellij.openapi.options.NonLazySchemeProcessor
- com.intellij.openapi.options.SchemeProcessor
- <init>():V
- a:readScheme(org.jdom.Element,Z):com.intellij.openapi.options.Scheme
a:com.intellij.openapi.options.SchemeManager
- <init>():V
- f:addScheme(java.lang.Object):V
- a:addScheme(java.lang.Object,Z):V
- a:findSchemeByName(java.lang.String):java.lang.Object
- a:getActiveScheme():java.lang.Object
- a:getAllSchemeNames():java.util.Collection
- a:getAllSchemes():java.util.List
- a:getCurrentSchemeName():java.lang.String
- a:getRootDirectory():java.io.File
- a:getSettingsCategory():com.intellij.openapi.components.SettingsCategory
- isEmpty():Z
- a:isMetadataEditable(java.lang.Object):Z
- a:loadSchemes():java.util.Collection
- f:reload():V
- a:reload(kotlin.jvm.functions.Function1):V
- a:removeScheme(java.lang.Object):Z
- a:removeScheme(java.lang.String):java.lang.Object
- a:save():V
- f:setCurrent(java.lang.Object):V
- f:setCurrent(java.lang.Object,Z):V
- setCurrent(java.lang.Object,Z,Z):V
- bs:setCurrent$default(com.intellij.openapi.options.SchemeManager,java.lang.Object,Z,Z,I,java.lang.Object):V
- a:setCurrentSchemeName(java.lang.String):V
- a:setCurrentSchemeName(java.lang.String,Z):V
- f:setSchemes(java.util.List):V
- f:setSchemes(java.util.List,java.lang.Object):V
- setSchemes(java.util.List,java.lang.Object,java.util.function.Predicate):V
- bs:setSchemes$default(com.intellij.openapi.options.SchemeManager,java.util.List,java.lang.Object,java.util.function.Predicate,I,java.lang.Object):V
a:com.intellij.openapi.options.SchemeManagerFactory
- sf:Companion:com.intellij.openapi.options.SchemeManagerFactory$Companion
- <init>():V
- <init>(com.intellij.openapi.project.Project):V
- b:<init>(com.intellij.openapi.project.Project,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- f:create(java.lang.String,com.intellij.openapi.options.SchemeProcessor):com.intellij.openapi.options.SchemeManager
- f:create(java.lang.String,com.intellij.openapi.options.SchemeProcessor,java.lang.String):com.intellij.openapi.options.SchemeManager
- f:create(java.lang.String,com.intellij.openapi.options.SchemeProcessor,java.lang.String,java.nio.file.Path):com.intellij.openapi.options.SchemeManager
- f:create(java.lang.String,com.intellij.openapi.options.SchemeProcessor,java.lang.String,java.nio.file.Path,com.intellij.openapi.components.SettingsCategory):com.intellij.openapi.options.SchemeManager
- bs:create$default(com.intellij.openapi.options.SchemeManagerFactory,java.lang.String,com.intellij.openapi.options.SchemeProcessor,java.lang.String,java.nio.file.Path,com.intellij.openapi.components.SettingsCategory,I,java.lang.Object):com.intellij.openapi.options.SchemeManager
- dispose(com.intellij.openapi.options.SchemeManager):V
- sf:getInstance():com.intellij.openapi.options.SchemeManagerFactory
- sf:getInstance(com.intellij.openapi.project.Project):com.intellij.openapi.options.SchemeManagerFactory
- p:getProject():com.intellij.openapi.project.Project
f:com.intellij.openapi.options.SchemeManagerFactory$Companion
- f:getInstance():com.intellij.openapi.options.SchemeManagerFactory
- f:getInstance(com.intellij.openapi.project.Project):com.intellij.openapi.options.SchemeManagerFactory
a:com.intellij.openapi.options.SchemeProcessor
- <init>():V
- beforeReloaded(com.intellij.openapi.options.SchemeManager):V
- getSchemeKey(com.intellij.openapi.options.Scheme):java.lang.String
- getState(com.intellij.openapi.options.Scheme):com.intellij.openapi.options.SchemeState
- isExternalizable(com.intellij.openapi.options.Scheme):Z
- onCurrentSchemeSwitched(com.intellij.openapi.options.Scheme,com.intellij.openapi.options.Scheme,Z):V
- onSchemeAdded(com.intellij.openapi.options.Scheme):V
- onSchemeDeleted(com.intellij.openapi.options.Scheme):V
- reloaded(com.intellij.openapi.options.SchemeManager,java.util.Collection):V
- a:writeScheme(com.intellij.openapi.options.Scheme):org.jdom.Parent
e:com.intellij.openapi.options.SchemeState
- java.lang.Enum
- sf:NON_PERSISTENT:com.intellij.openapi.options.SchemeState
- sf:POSSIBLY_CHANGED:com.intellij.openapi.options.SchemeState
- sf:UNCHANGED:com.intellij.openapi.options.SchemeState
- s:getEntries():kotlin.enums.EnumEntries
- s:valueOf(java.lang.String):com.intellij.openapi.options.SchemeState
- s:values():com.intellij.openapi.options.SchemeState[]
c:com.intellij.openapi.projectRoots.impl.ProjectJdkImpl
- com.intellij.openapi.Disposable
- com.intellij.openapi.projectRoots.Sdk
- com.intellij.openapi.projectRoots.SdkModificator
- com.intellij.openapi.util.UserDataHolderBase
- <init>(java.lang.String,com.intellij.openapi.projectRoots.SdkTypeId):V
- <init>(java.lang.String,com.intellij.openapi.projectRoots.SdkTypeId,java.lang.String,java.lang.String):V
- addRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.roots.OrderRootType):V
- addRoot(java.lang.String,com.intellij.openapi.roots.OrderRootType):V
- applyChangesWithoutWriteAction():V
- clone():com.intellij.openapi.projectRoots.impl.ProjectJdkImpl
- commitChanges():V
- dispose():V
- getHomeDirectory():com.intellij.openapi.vfs.VirtualFile
- getHomePath():java.lang.String
- getName():java.lang.String
- getRootProvider():com.intellij.openapi.roots.RootProvider
- getRoots(com.intellij.openapi.roots.OrderRootType):com.intellij.openapi.vfs.VirtualFile[]
- getSdkAdditionalData():com.intellij.openapi.projectRoots.SdkAdditionalData
- getSdkModificator():com.intellij.openapi.projectRoots.SdkModificator
- getSdkType():com.intellij.openapi.projectRoots.SdkTypeId
- getUrls(com.intellij.openapi.roots.OrderRootType):java.lang.String[]
- getVersionString():java.lang.String
- isWritable():Z
- readExternal(org.jdom.Element):V
- readExternal(org.jdom.Element,java.util.function.Function):V
- removeAllRoots():V
- removeRoot(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.roots.OrderRootType):V
- removeRoot(java.lang.String,com.intellij.openapi.roots.OrderRootType):V
- removeRoots(com.intellij.openapi.roots.OrderRootType):V
- f:resetVersionString():V
- setHomePath(java.lang.String):V
- setName(java.lang.String):V
- setSdkAdditionalData(com.intellij.openapi.projectRoots.SdkAdditionalData):V
- f:setVersionString(java.lang.String):V
- writeExternal(org.jdom.Element):V
f:com.intellij.openapi.projectRoots.impl.ProjectRootUtil
- s:getAllContentRoots(com.intellij.openapi.project.Project):com.intellij.psi.PsiDirectory[]
- s:getSourceRootDirectories(com.intellij.openapi.project.Project):com.intellij.psi.PsiDirectory[]
a:com.intellij.openapi.projectRoots.impl.SdkAdditionalDataBase
- com.intellij.openapi.projectRoots.SdkAdditionalData
- <init>():V
- pf:assertWritable():V
- pf:isWritable():Z
- f:markAsCommited():V
- pa:markInternalsAsCommited(java.lang.Throwable):V
c:com.intellij.openapi.roots.AnnotationOrderRootType
- com.intellij.openapi.roots.PersistentOrderRootType
- sf:ANNOTATIONS_ID:java.lang.String
- s:getFiles(com.intellij.openapi.roots.OrderEntry):com.intellij.openapi.vfs.VirtualFile[]
- s:getInstance():com.intellij.openapi.roots.OrderRootType
- skipWriteIfEmpty():Z
c:com.intellij.openapi.roots.JavaSyntheticLibrary
- com.intellij.openapi.roots.SyntheticLibrary
- <init>(java.lang.String,java.util.List,java.util.List,java.util.Set):V
c:com.intellij.openapi.roots.JavadocOrderRootType
- com.intellij.openapi.roots.PersistentOrderRootType
- s:getInstance():com.intellij.openapi.roots.OrderRootType
- s:getUrls(com.intellij.openapi.roots.OrderEntry):java.lang.String[]
a:com.intellij.openapi.roots.ModuleRootManagerEx
- com.intellij.openapi.roots.ModuleRootManager
- sf:MODULE_EXTENSION_NAME:com.intellij.openapi.extensions.ExtensionPointName
- <init>():V
- s:getInstanceEx(com.intellij.openapi.module.Module):com.intellij.openapi.roots.ModuleRootManagerEx
- a:getModificationCountForTests():J
com.intellij.openapi.roots.SingleFileSourcesTracker
- sf:Companion:com.intellij.openapi.roots.SingleFileSourcesTracker$Companion
- s:getInstance(com.intellij.openapi.project.Project):com.intellij.openapi.roots.SingleFileSourcesTracker
- a:getPackageNameForSingleFileSource(com.intellij.openapi.vfs.VirtualFile):java.lang.String
- a:getSourceDirectoryIfExists(com.intellij.openapi.vfs.VirtualFile):com.intellij.openapi.vfs.VirtualFile
- a:isSingleFileSource(com.intellij.openapi.vfs.VirtualFile):Z
- a:isSourceDirectoryInModule(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.module.Module):Z
f:com.intellij.openapi.roots.SingleFileSourcesTracker$Companion
- f:getInstance(com.intellij.openapi.project.Project):com.intellij.openapi.roots.SingleFileSourcesTracker
a:com.intellij.openapi.roots.TestModuleProperties
- s:getInstance(com.intellij.openapi.module.Module):com.intellij.openapi.roots.TestModuleProperties
- a:getProductionModule():com.intellij.openapi.module.Module
- a:getProductionModuleName():java.lang.String
- a:setProductionModuleName(java.lang.String):V
com.intellij.openapi.roots.impl.DirectoryIndexExcludePolicy
- getExcludeRootsForModule(com.intellij.openapi.roots.ModuleRootModel):com.intellij.openapi.vfs.pointers.VirtualFilePointer[]
- getExcludeSdkRootsStrategy():com.intellij.util.Function
- getExcludeUrlsForProject():java.lang.String[]
- s:getExtensions(com.intellij.openapi.extensions.AreaInstance):com.intellij.openapi.roots.impl.DirectoryIndexExcludePolicy[]
f:com.intellij.openapi.roots.impl.ModifiableModelCommitter
- s:multiCommit(java.util.Collection,com.intellij.openapi.module.ModifiableModuleModel):V
- s:multiCommit(com.intellij.openapi.roots.ModifiableRootModel[],com.intellij.openapi.module.ModifiableModuleModel):V
f:com.intellij.openapi.roots.impl.OrderEntryUtil
- s:addLibraryToRoots(com.intellij.openapi.module.Module,com.intellij.openapi.roots.libraries.Library):V
- s:addLibraryToRoots(com.intellij.openapi.module.Module,com.intellij.openapi.roots.libraries.Library,com.intellij.openapi.roots.DependencyScope,Z):V
- s:addLibraryToRoots(com.intellij.openapi.roots.LibraryOrderEntry,com.intellij.openapi.module.Module):V
- s:equals(com.intellij.openapi.roots.OrderEntry,com.intellij.openapi.roots.OrderEntry):Z
- s:equals(com.intellij.openapi.roots.libraries.Library,com.intellij.openapi.roots.libraries.Library):Z
- s:findJdkOrderEntry(com.intellij.openapi.roots.ModuleRootModel,com.intellij.openapi.projectRoots.Sdk):com.intellij.openapi.roots.JdkOrderEntry
- s:findLibraryOrderEntry(com.intellij.openapi.roots.ModuleRootModel,com.intellij.openapi.roots.libraries.Library):com.intellij.openapi.roots.LibraryOrderEntry
- s:findLibraryOrderEntry(com.intellij.openapi.roots.ModuleRootModel,java.lang.String):com.intellij.openapi.roots.LibraryOrderEntry
- s:findModuleOrderEntry(com.intellij.openapi.roots.ModuleRootModel,com.intellij.openapi.module.Module):com.intellij.openapi.roots.ModuleOrderEntry
- s:getModuleLibraries(com.intellij.openapi.roots.ModuleRootModel):java.util.List
- s:intersectScopes(com.intellij.openapi.roots.DependencyScope,com.intellij.openapi.roots.DependencyScope):com.intellij.openapi.roots.DependencyScope
- s:isModuleLibraryOrderEntry(com.intellij.openapi.roots.OrderEntry):Z
- s:processOrderEntries(com.intellij.openapi.module.Module,java.lang.Class,com.intellij.util.Processor):V
- s:replaceLibrary(com.intellij.openapi.roots.ModifiableRootModel,com.intellij.openapi.roots.libraries.Library,com.intellij.openapi.roots.libraries.Library):V
- s:replaceLibraryEntryByAdded(com.intellij.openapi.roots.ModifiableRootModel,com.intellij.openapi.roots.LibraryOrderEntry):V
c:com.intellij.openapi.roots.impl.ProjectFileIndexFacade
- com.intellij.openapi.roots.FileIndexFacade
- getModuleForFile(com.intellij.openapi.vfs.VirtualFile):com.intellij.openapi.module.Module
- getRootModificationTracker():com.intellij.openapi.util.ModificationTracker
- getUnloadedModuleDescriptions():java.util.Collection
- isExcludedFile(com.intellij.openapi.vfs.VirtualFile):Z
- isInContent(com.intellij.openapi.vfs.VirtualFile):Z
- isInLibrary(com.intellij.openapi.vfs.VirtualFile):Z
- isInLibraryClasses(com.intellij.openapi.vfs.VirtualFile):Z
- isInLibrarySource(com.intellij.openapi.vfs.VirtualFile):Z
- isInProjectScope(com.intellij.openapi.vfs.VirtualFile):Z
- isInSource(com.intellij.openapi.vfs.VirtualFile):Z
- isInSourceContent(com.intellij.openapi.vfs.VirtualFile):Z
- isUnderIgnored(com.intellij.openapi.vfs.VirtualFile):Z
- isValidAncestor(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.vfs.VirtualFile):Z
a:com.intellij.openapi.roots.impl.SdkFinder
- sf:EP_NAME:com.intellij.openapi.extensions.ExtensionPointName
- <init>():V
- findSdk(java.lang.String,java.lang.String):com.intellij.openapi.projectRoots.Sdk
f:com.intellij.openapi.roots.impl.libraries.LibraryTableTracker
- <init>():V
- assertDisposed():V
f:com.intellij.openapi.roots.impl.libraries.UnknownLibraryKind
- com.intellij.openapi.roots.libraries.PersistentLibraryKind
- createDefaultProperties():com.intellij.openapi.roots.impl.libraries.UnknownLibraryKind$UnknownLibraryProperties
- equals(java.lang.Object):Z
- s:getOrCreate(java.lang.String):com.intellij.openapi.roots.impl.libraries.UnknownLibraryKind
- hashCode():I
c:com.intellij.openapi.roots.impl.libraries.UnknownLibraryKind$UnknownLibraryProperties
- com.intellij.openapi.roots.libraries.LibraryProperties
- <init>():V
- equals(java.lang.Object):Z
- getConfiguration():org.jdom.Element
- getState():org.jdom.Element
- hashCode():I
- loadState(org.jdom.Element):V
- setConfiguration(org.jdom.Element):V
c:com.intellij.openapi.roots.libraries.DummyLibraryProperties
- com.intellij.openapi.roots.libraries.LibraryProperties
- sf:INSTANCE:com.intellij.openapi.roots.libraries.DummyLibraryProperties
- <init>():V
- equals(java.lang.Object):Z
- getState():java.lang.Object
- hashCode():I
- loadState(java.lang.Object):V
f:com.intellij.project.ProjectKt
- sf:getProjectStoreDirectory(com.intellij.openapi.vfs.VirtualFile):com.intellij.openapi.vfs.VirtualFile
- sf:getStateStore(com.intellij.openapi.project.Project):com.intellij.openapi.components.impl.stores.IProjectStore
- sf:isDirectoryBased(com.intellij.openapi.project.Project):Z
- sf:isEqualToProjectFileStorePath(com.intellij.openapi.project.Project,java.nio.file.Path,java.lang.String):Z
f:com.intellij.psi.presentation.java.SymbolPresentationUtil
- s:getFilePathPresentation(com.intellij.psi.PsiFile):java.lang.String
- s:getFilePathPresentation(com.intellij.psi.PsiFileSystemItem):java.lang.String
- s:getSymbolContainerText(com.intellij.psi.PsiElement):java.lang.String
- s:getSymbolPresentableText(com.intellij.psi.PsiElement):java.lang.String
f:com.intellij.util.modules.CircularModuleDependenciesDetector
- <init>():V
- s:addingDependencyFormsCircularity(com.intellij.openapi.module.Module,com.intellij.openapi.module.Module):com.intellij.openapi.util.Couple
f:com.intellij.workspaceModel.ide.NonPersistentEntitySource
- com.intellij.platform.workspace.storage.EntitySource
- sf:INSTANCE:com.intellij.workspaceModel.ide.NonPersistentEntitySource
f:com.intellij.workspaceModel.ide.VirtualFileUrlManagerUtil
- sf:isEqualOrParentOf(com.intellij.platform.workspace.storage.url.VirtualFileUrl,com.intellij.platform.workspace.storage.url.VirtualFileUrl):Z
- sf:toPath(com.intellij.platform.workspace.storage.url.VirtualFileUrl):java.nio.file.Path
com.intellij.workspaceModel.ide.impl.legacyBridge.library.LibraryBridge
- com.intellij.openapi.roots.impl.libraries.LibraryEx
- a:getLibraryId():com.intellij.platform.workspace.jps.entities.LibraryId
f:com.intellij.workspaceModel.ide.impl.legacyBridge.library.LibraryEntityUtils
- sf:findLibraryId(com.intellij.openapi.roots.libraries.Library):com.intellij.platform.workspace.jps.entities.LibraryId
f:com.intellij.workspaceModel.ide.impl.legacyBridge.module.ModuleEntityUtils
- sf:getModuleLevelLibraries(com.intellij.platform.workspace.jps.entities.ModuleEntity,com.intellij.platform.workspace.storage.EntityStorage):kotlin.sequences.Sequence
com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory
- sf:Companion:com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory$Companion
- a:createEntitySourceForModule(com.intellij.platform.workspace.storage.url.VirtualFileUrl,com.intellij.openapi.roots.ProjectModelExternalSource):com.intellij.platform.workspace.storage.EntitySource
- a:createEntitySourceForProjectLibrary(com.intellij.openapi.roots.ProjectModelExternalSource):com.intellij.platform.workspace.storage.EntitySource
f:com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory$Companion
- f:getInstance(com.intellij.openapi.project.Project):com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory
f:com.intellij.workspaceModel.ide.legacyBridge.LibraryBridgesKt
- sf:findLibraryEntity(com.intellij.openapi.roots.libraries.Library,com.intellij.platform.workspace.storage.EntityStorage):com.intellij.platform.workspace.jps.entities.LibraryEntity
f:com.intellij.workspaceModel.ide.legacyBridge.ModuleBridges
- sf:findModule(com.intellij.platform.workspace.jps.entities.ModuleEntity,com.intellij.platform.workspace.storage.EntityStorage):com.intellij.openapi.module.Module
- sf:findModuleEntity(com.intellij.openapi.module.Module,com.intellij.platform.workspace.storage.EntityStorage):com.intellij.platform.workspace.jps.entities.ModuleEntity
