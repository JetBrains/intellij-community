f:com.intellij.vcs.log.graph.GraphCommitImpl
- com.intellij.util.containers.ImmutableList
- com.intellij.vcs.log.graph.GraphCommit
- s:createCommit(java.lang.Object,java.util.List,J):com.intellij.vcs.log.graph.GraphCommit
- s:createIntCommit(I,java.util.List,J):com.intellij.vcs.log.graph.GraphCommit
- equals(java.lang.Object):Z
- get(I):java.lang.Object
- getId():java.lang.Object
- getParents():java.util.List
- getTimestamp():J
- hashCode():I
- size():I
- toString():java.lang.String
e:com.intellij.vcs.log.graph.api.EdgeFilter
- java.lang.Enum
- sf:ALL:com.intellij.vcs.log.graph.api.EdgeFilter
- sf:NORMAL_ALL:com.intellij.vcs.log.graph.api.EdgeFilter
- sf:NORMAL_DOWN:com.intellij.vcs.log.graph.api.EdgeFilter
- sf:NORMAL_UP:com.intellij.vcs.log.graph.api.EdgeFilter
- sf:SPECIAL:com.intellij.vcs.log.graph.api.EdgeFilter
- f:downNormal:Z
- f:special:Z
- f:upNormal:Z
- s:valueOf(java.lang.String):com.intellij.vcs.log.graph.api.EdgeFilter
- s:values():com.intellij.vcs.log.graph.api.EdgeFilter[]
com.intellij.vcs.log.graph.api.GraphLayout
- a:getHeadNodeIndex():java.util.List
- a:getLayoutIndex(I):I
- a:getOneOfHeadNodeIndex(I):I
com.intellij.vcs.log.graph.api.LinearGraph
- a:getAdjacentEdges(I,com.intellij.vcs.log.graph.api.EdgeFilter):java.util.List
- a:getGraphNode(I):com.intellij.vcs.log.graph.api.elements.GraphNode
- a:getNodeId(I):I
- a:getNodeIndex(I):java.lang.Integer
- a:nodesCount():I
com.intellij.vcs.log.graph.api.LiteLinearGraph
- a:getNodes(I,com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter):java.util.List
- a:nodesCount():I
e:com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter
- java.lang.Enum
- sf:ALL:com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter
- sf:DOWN:com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter
- sf:UP:com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter
- f:down:Z
- f:edgeFilter:com.intellij.vcs.log.graph.api.EdgeFilter
- f:up:Z
- s:filter(Z):com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter
- s:valueOf(java.lang.String):com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter
- s:values():com.intellij.vcs.log.graph.api.LiteLinearGraph$NodeFilter[]
f:com.intellij.vcs.log.graph.api.elements.GraphEdge
- com.intellij.vcs.log.graph.api.elements.GraphElement
- <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,com.intellij.vcs.log.graph.api.elements.GraphEdgeType):V
- s:createEdgeWithTargetId(I,java.lang.Integer,com.intellij.vcs.log.graph.api.elements.GraphEdgeType):com.intellij.vcs.log.graph.api.elements.GraphEdge
- s:createNormalEdge(I,I,com.intellij.vcs.log.graph.api.elements.GraphEdgeType):com.intellij.vcs.log.graph.api.elements.GraphEdge
- equals(java.lang.Object):Z
- getDownNodeIndex():java.lang.Integer
- getTargetId():java.lang.Integer
- getType():com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- getUpNodeIndex():java.lang.Integer
- hashCode():I
e:com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- java.lang.Enum
- sf:DOTTED:com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- sf:DOTTED_ARROW_DOWN:com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- sf:DOTTED_ARROW_UP:com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- sf:NOT_LOAD_COMMIT:com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- sf:USUAL:com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- isNormalEdge():Z
- s:valueOf(java.lang.String):com.intellij.vcs.log.graph.api.elements.GraphEdgeType
- s:values():com.intellij.vcs.log.graph.api.elements.GraphEdgeType[]
com.intellij.vcs.log.graph.api.elements.GraphElement
f:com.intellij.vcs.log.graph.api.elements.GraphNode
- com.intellij.vcs.log.graph.api.elements.GraphElement
- <init>(I):V
- <init>(I,com.intellij.vcs.log.graph.api.elements.GraphNodeType):V
- equals(java.lang.Object):Z
- getNodeIndex():I
- getType():com.intellij.vcs.log.graph.api.elements.GraphNodeType
- hashCode():I
e:com.intellij.vcs.log.graph.api.elements.GraphNodeType
- java.lang.Enum
- sf:NOT_LOAD_COMMIT:com.intellij.vcs.log.graph.api.elements.GraphNodeType
- sf:UNMATCHED:com.intellij.vcs.log.graph.api.elements.GraphNodeType
- sf:USUAL:com.intellij.vcs.log.graph.api.elements.GraphNodeType
- s:valueOf(java.lang.String):com.intellij.vcs.log.graph.api.elements.GraphNodeType
- s:values():com.intellij.vcs.log.graph.api.elements.GraphNodeType[]
com.intellij.vcs.log.graph.api.permanent.PermanentCommitsInfo
- a:convertToNodeIds(java.util.Collection):java.util.Set
- a:getCommitId(I):java.lang.Object
- a:getNodeId(java.lang.Object):I
- a:getTimestamp(I):J
com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo
- a:getBranchNodeIds():java.util.Set
- a:getLinearGraph():com.intellij.vcs.log.graph.api.LinearGraph
- a:getPermanentCommitsInfo():com.intellij.vcs.log.graph.api.permanent.PermanentCommitsInfo
- a:getPermanentGraphLayout():com.intellij.vcs.log.graph.api.GraphLayout
com.intellij.vcs.log.graph.api.printer.GraphColorGetter
- a:getNodeColor(I,I):I
com.intellij.vcs.log.graph.api.printer.GraphColorGetterFactory
- a:createColorGetter(com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo):com.intellij.vcs.log.graph.api.printer.GraphColorGetter
com.intellij.vcs.log.graph.api.printer.PrintElementGenerator
- a:getPrintElements(I):java.util.Collection
com.intellij.vcs.log.graph.api.printer.PrintElementPresentationManager
- a:getColorId(com.intellij.vcs.log.graph.api.elements.GraphElement):I
- a:isSelected(com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement):Z
f:com.intellij.vcs.log.graph.collapsing.BranchFilterController
- com.intellij.vcs.log.graph.impl.facade.CascadeController
- <init>(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set):V
- getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
c:com.intellij.vcs.log.graph.collapsing.CollapsedController
- com.intellij.vcs.log.graph.impl.facade.CascadeController
- <init>(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set):V
- p:convertToDelegate(com.intellij.vcs.log.graph.api.elements.GraphElement):com.intellij.vcs.log.graph.api.elements.GraphElement
- s:convertToDelegate(com.intellij.vcs.log.graph.api.elements.GraphElement,com.intellij.vcs.log.graph.collapsing.CollapsedGraph):com.intellij.vcs.log.graph.api.elements.GraphElement
- p:delegateGraphChanged(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- p:getCollapsedGraph():com.intellij.vcs.log.graph.collapsing.CollapsedGraph
- getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
- p:performAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
f:com.intellij.vcs.log.graph.collapsing.CollapsedGraph
- convertToDelegateNodeIndex(I):I
- getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
- getDelegatedGraph():com.intellij.vcs.log.graph.api.LinearGraph
- getMatchedNodeId():com.intellij.vcs.log.graph.utils.UnsignedBitSet
- isMyCollapsedEdge(I,I):Z
- isNodeVisible(I):Z
- s:newInstance(com.intellij.vcs.log.graph.api.LinearGraph,com.intellij.vcs.log.graph.utils.UnsignedBitSet):com.intellij.vcs.log.graph.collapsing.CollapsedGraph
- startModification():com.intellij.vcs.log.graph.collapsing.CollapsedGraph$Modification
- s:updateInstance(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,com.intellij.vcs.log.graph.api.LinearGraph):com.intellij.vcs.log.graph.collapsing.CollapsedGraph
c:com.intellij.vcs.log.graph.collapsing.CollapsedGraph$Modification
- <init>(com.intellij.vcs.log.graph.collapsing.CollapsedGraph):V
- apply():V
- convertToDelegateNodeIndex(I):I
- createEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):V
- hideNode(I):V
- removeAdditionalEdges():V
- removeEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):V
- resetNodesVisibility():V
- showNode(I):V
a:com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGenerator
- sf:Companion:com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGenerator$Companion
- pa:addDottedArrow(I,Z):V
- pa:addDottedEdge(I,I):V
- pa:hasDottedEdges(I,Z):Z
- pa:nodeIsVisible(I):Z
- sf:update(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,I,I):V
f:com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGenerator$Companion
- f:hideInplace(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,java.util.Set):V
- f:update(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,I,I):V
f:com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGeneratorImpl
- com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGenerator
- <init>(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,com.intellij.vcs.log.graph.collapsing.CollapsedGraph$Modification,I,I):V
f:com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGeneratorKt
c:com.intellij.vcs.log.graph.collapsing.EdgeStorage
- sf:NULL_ID:I
- <init>():V
- createEdge(I,I,com.intellij.vcs.log.graph.api.elements.GraphEdgeType):V
- getEdges(I):java.util.List
- getKnownIds():I[]
- removeAll():V
- removeEdge(I,I,com.intellij.vcs.log.graph.api.elements.GraphEdgeType):V
c:com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper
- <init>(com.intellij.vcs.log.graph.collapsing.EdgeStorage,com.intellij.vcs.log.graph.api.LinearGraph):V
- <init>(com.intellij.vcs.log.graph.collapsing.EdgeStorage,java.util.function.Function,java.util.function.Function):V
- createEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):V
- s:createSimpleEdgeStorage():com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper
- getAdjacentEdges(I,com.intellij.vcs.log.graph.api.EdgeFilter):java.util.List
- getEdges():java.util.Set
- hasEdge(I,I):Z
- removeAll():V
- removeEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):V
c:com.intellij.vcs.log.graph.collapsing.FragmentGenerator
- <init>(com.intellij.vcs.log.graph.api.LiteLinearGraph,com.intellij.openapi.util.Condition):V
- getGreenFragmentForCollapse(I,I):com.intellij.vcs.log.graph.collapsing.FragmentGenerator$GreenFragment
- getMiddleNodes(I,I,Z):java.util.Set
- getNearRedNode(I,I,Z):java.lang.Integer
f:com.intellij.vcs.log.graph.collapsing.FragmentGenerator$GreenFragment
- getDownRedNode():java.lang.Integer
- getMiddleGreenNodes():java.util.Set
- getUpRedNode():java.lang.Integer
f:com.intellij.vcs.log.graph.collapsing.InplaceFilterEdgesGenerator
- com.intellij.vcs.log.graph.collapsing.DottedFilterEdgesGenerator
- <init>(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,com.intellij.vcs.log.graph.collapsing.CollapsedGraph$Modification,java.util.Set):V
c:com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator
- <init>(com.intellij.vcs.log.graph.api.LiteLinearGraph,java.util.Set):V
- getDownFragment(I):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
- getLongDownFragment(I):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
- getLongFragment(com.intellij.vcs.log.graph.api.elements.GraphElement):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
- getPartLongFragment(com.intellij.vcs.log.graph.api.elements.GraphElement):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
- getRelativeFragment(com.intellij.vcs.log.graph.api.elements.GraphElement):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
- getUpFragment(I):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
c:com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
- f:downNodeIndex:I
- f:upNodeIndex:I
- <init>(I,I):V
- s:create(I,I):com.intellij.vcs.log.graph.collapsing.LinearFragmentGenerator$GraphFragment
c:com.intellij.vcs.log.graph.impl.facade.BaseController
- com.intellij.vcs.log.graph.impl.facade.LinearGraphController
- <init>(com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo):V
- getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
- performLinearGraphAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
a:com.intellij.vcs.log.graph.impl.facade.CascadeController
- com.intellij.vcs.log.graph.impl.facade.LinearGraphController
- sf:Companion:com.intellij.vcs.log.graph.impl.facade.CascadeController$Companion
- p:<init>(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo):V
- p:convertToDelegate(com.intellij.vcs.log.graph.api.elements.GraphElement):com.intellij.vcs.log.graph.api.elements.GraphElement
- pa:delegateGraphChanged(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- pf:getDelegateController():com.intellij.vcs.log.graph.impl.facade.LinearGraphController
- f:getPermanentGraphInfo():com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo
- pa:performAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- performLinearGraphAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
f:com.intellij.vcs.log.graph.impl.facade.CascadeController$Companion
f:com.intellij.vcs.log.graph.impl.facade.FilteredController
- com.intellij.vcs.log.graph.impl.facade.CascadeController
- sf:Companion:com.intellij.vcs.log.graph.impl.facade.FilteredController$Companion
- <init>(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,kotlin.jvm.functions.Function0):V
- f:getCollapsedGraph():com.intellij.vcs.log.graph.collapsing.CollapsedGraph
- getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
- performLinearGraphAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
f:com.intellij.vcs.log.graph.impl.facade.FilteredController$Companion
- f:create(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set,java.util.Set):com.intellij.vcs.log.graph.impl.facade.FilteredController
- bs:create$default(com.intellij.vcs.log.graph.impl.facade.FilteredController$Companion,com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set,java.util.Set,I,java.lang.Object):com.intellij.vcs.log.graph.impl.facade.FilteredController
f:com.intellij.vcs.log.graph.impl.facade.FirstParentController
- sf:INSTANCE:com.intellij.vcs.log.graph.impl.facade.FirstParentController
- f:buildCollapsedGraph(com.intellij.vcs.log.graph.api.LinearGraph,java.util.Set,java.util.Set):com.intellij.vcs.log.graph.collapsing.CollapsedGraph
- f:create(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set,java.util.Set):com.intellij.vcs.log.graph.impl.facade.FilteredController
- bs:create$default(com.intellij.vcs.log.graph.impl.facade.FirstParentController,com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set,java.util.Set,I,java.lang.Object):com.intellij.vcs.log.graph.impl.facade.FilteredController
com.intellij.vcs.log.graph.impl.facade.GraphChanges
- a:getChangedEdges():java.util.Collection
- a:getChangedNodes():java.util.Collection
com.intellij.vcs.log.graph.impl.facade.GraphChanges$Edge
- a:downNodeId():java.lang.Object
- a:removed():Z
- a:targetId():java.lang.Object
- a:upNodeId():java.lang.Object
c:com.intellij.vcs.log.graph.impl.facade.GraphChanges$EdgeImpl
- com.intellij.vcs.log.graph.impl.facade.GraphChanges$Edge
- <init>(java.lang.Object,java.lang.Object,java.lang.Object,Z):V
- downNodeId():java.lang.Object
- removed():Z
- targetId():java.lang.Object
- upNodeId():java.lang.Object
c:com.intellij.vcs.log.graph.impl.facade.GraphChanges$GraphChangesImpl
- com.intellij.vcs.log.graph.impl.facade.GraphChanges
- <init>(java.util.Collection,java.util.Collection):V
- getChangedEdges():java.util.Collection
- getChangedNodes():java.util.Collection
com.intellij.vcs.log.graph.impl.facade.GraphChanges$Node
- a:getNodeId():java.lang.Object
- a:removed():Z
c:com.intellij.vcs.log.graph.impl.facade.GraphChanges$NodeImpl
- com.intellij.vcs.log.graph.impl.facade.GraphChanges$Node
- <init>(java.lang.Object,Z):V
- getNodeId():java.lang.Object
- removed():Z
f:com.intellij.vcs.log.graph.impl.facade.GraphChangesUtil
- sf:SOME_CHANGES:com.intellij.vcs.log.graph.impl.facade.GraphChanges
- <init>():V
- s:edgeChanged(com.intellij.vcs.log.graph.api.elements.GraphEdge,com.intellij.vcs.log.graph.api.LinearGraph,Z):com.intellij.vcs.log.graph.impl.facade.GraphChanges$EdgeImpl
- s:edgesReplaced(java.util.Collection,java.util.Collection,com.intellij.vcs.log.graph.api.LinearGraph):com.intellij.vcs.log.graph.impl.facade.GraphChanges
f:com.intellij.vcs.log.graph.impl.facade.GraphModificationUtilKt
- sf:connectRows(com.intellij.vcs.log.graph.collapsing.CollapsedGraph$Modification,I,I):V
- sf:hideCommits(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,java.util.Set):Z
- sf:hideRow(com.intellij.vcs.log.graph.collapsing.CollapsedGraph$Modification,I):V
- sf:modify(com.intellij.vcs.log.graph.collapsing.CollapsedGraph,kotlin.jvm.functions.Function1):V
- sf:modifyGraph(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,kotlin.jvm.functions.Function1):Z
com.intellij.vcs.log.graph.impl.facade.LinearGraphController
- a:getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
- a:performLinearGraphAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction
- com.intellij.vcs.log.graph.actions.GraphAction
- a:getAffectedElement():com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
f:com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- <init>(com.intellij.vcs.log.graph.impl.facade.GraphChanges):V
- <init>(com.intellij.vcs.log.graph.impl.facade.GraphChanges,java.awt.Cursor,java.util.Set,java.lang.Runnable):V
- <init>(com.intellij.vcs.log.graph.impl.facade.GraphChanges,java.lang.Runnable):V
- b:<init>(com.intellij.vcs.log.graph.impl.facade.GraphChanges,java.lang.Runnable,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- <init>(java.awt.Cursor,java.util.Set):V
- f:component1():com.intellij.vcs.log.graph.impl.facade.GraphChanges
- f:component2():java.awt.Cursor
- f:component3():java.util.Set
- f:component4():java.lang.Runnable
- f:copy(com.intellij.vcs.log.graph.impl.facade.GraphChanges,java.awt.Cursor,java.util.Set,java.lang.Runnable):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- bs:copy$default(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer,com.intellij.vcs.log.graph.impl.facade.GraphChanges,java.awt.Cursor,java.util.Set,java.lang.Runnable,I,java.lang.Object):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- equals(java.lang.Object):Z
- f:getCursorToSet():java.awt.Cursor
- f:getGraphChanges():com.intellij.vcs.log.graph.impl.facade.GraphChanges
- f:getGraphUpdater():java.lang.Runnable
- f:getSelectedNodeIds():java.util.Set
- hashCode():I
- toString():java.lang.String
c:com.intellij.vcs.log.graph.impl.facade.LinearGraphWrapper
- com.intellij.vcs.log.graph.api.LinearGraph
- <init>(com.intellij.vcs.log.graph.api.LinearGraph):V
- <init>(com.intellij.vcs.log.graph.api.LinearGraph,com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper):V
- <init>(com.intellij.vcs.log.graph.api.LinearGraph,com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper,com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper):V
- b:<init>(com.intellij.vcs.log.graph.api.LinearGraph,com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper,com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- getAdjacentEdges(I,com.intellij.vcs.log.graph.api.EdgeFilter):java.util.List
- f:getDottedEdges():com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper
- f:getGraph():com.intellij.vcs.log.graph.api.LinearGraph
- getGraphNode(I):com.intellij.vcs.log.graph.api.elements.GraphNode
- f:getHiddenEdges():com.intellij.vcs.log.graph.collapsing.EdgeStorageWrapper
- getNodeId(I):I
- getNodeIndex(I):java.lang.Integer
- nodesCount():I
f:com.intellij.vcs.log.graph.impl.facade.PermanentGraphImpl
- com.intellij.vcs.log.graph.PermanentGraph
- com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo
- sf:Companion:com.intellij.vcs.log.graph.impl.facade.PermanentGraphImpl$Companion
- createVisibleGraph(com.intellij.vcs.log.graph.PermanentGraph$Options,java.util.Set,java.util.Set):com.intellij.vcs.log.graph.VisibleGraph
- f:createVisibleGraph(com.intellij.vcs.log.graph.PermanentGraph$Options,java.util.Set,java.util.Set,java.util.function.BiConsumer):com.intellij.vcs.log.graph.VisibleGraph
- getAllCommits():java.util.List
- getBranchNodeIds():java.util.Set
- getChildren(java.lang.Object):java.util.List
- getContainedInBranchCondition(java.util.Collection):java.util.function.Predicate
- getContainingBranches(java.lang.Object):java.util.Set
- getLinearGraph():com.intellij.vcs.log.graph.impl.permanent.PermanentLinearGraphImpl
- getPermanentCommitsInfo():com.intellij.vcs.log.graph.impl.permanent.PermanentCommitsInfoImpl
- getPermanentGraphLayout():com.intellij.vcs.log.graph.impl.permanent.GraphLayoutImpl
- sf:newInstance(java.util.List,com.intellij.vcs.log.graph.api.printer.GraphColorGetterFactory,java.util.Comparator,java.util.Set):com.intellij.vcs.log.graph.impl.facade.PermanentGraphImpl
f:com.intellij.vcs.log.graph.impl.facade.PermanentGraphImpl$Companion
- f:newInstance(java.util.List,com.intellij.vcs.log.graph.api.printer.GraphColorGetterFactory,java.util.Comparator,java.util.Set):com.intellij.vcs.log.graph.impl.facade.PermanentGraphImpl
f:com.intellij.vcs.log.graph.impl.facade.ReachableNodes
- <init>(com.intellij.vcs.log.graph.api.LiteLinearGraph):V
- f:getContainingBranches(I,java.util.Collection):java.util.Set
- f:walk(java.util.Collection,Z,kotlin.jvm.functions.Function1):V
- f:walkDown(java.util.Collection,java.util.function.Consumer):V
f:com.intellij.vcs.log.graph.impl.facade.SimpleGraphInfo
- com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo
- s:build(com.intellij.vcs.log.graph.api.LinearGraph,com.intellij.vcs.log.graph.api.GraphLayout,com.intellij.vcs.log.graph.api.permanent.PermanentCommitsInfo,I,java.util.Set,I,I):com.intellij.vcs.log.graph.impl.facade.SimpleGraphInfo
- getBranchNodeIds():java.util.Set
- getLinearGraph():com.intellij.vcs.log.graph.api.LinearGraph
- getPermanentCommitsInfo():com.intellij.vcs.log.graph.api.permanent.PermanentCommitsInfo
- getPermanentGraphLayout():com.intellij.vcs.log.graph.api.GraphLayout
f:com.intellij.vcs.log.graph.impl.facade.VisibleGraphImpl
- com.intellij.vcs.log.graph.VisibleGraph
- <init>(com.intellij.vcs.log.graph.impl.facade.LinearGraphController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,com.intellij.vcs.log.graph.api.printer.GraphColorGetter):V
- f:buildSimpleGraphInfo(I,I):com.intellij.vcs.log.graph.impl.facade.SimpleGraphInfo
- getActionController():com.intellij.vcs.log.graph.actions.ActionController
- f:getLinearGraph():com.intellij.vcs.log.graph.api.LinearGraph
- f:getPermanentGraph():com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo
- getRecommendedWidth():I
- getRowInfo(I):com.intellij.vcs.log.graph.RowInfo
- getVisibleCommitCount():I
- getVisibleRowIndex(java.lang.Object):java.lang.Integer
- toString():java.lang.String
- f:updatePrintElementGenerator():V
f:com.intellij.vcs.log.graph.impl.facade.VisibleGraphImpl$LinearGraphActionImpl
- com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction
- <init>(com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement,com.intellij.vcs.log.graph.actions.GraphAction$Type):V
- f:component1():com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
- f:component2():com.intellij.vcs.log.graph.actions.GraphAction$Type
- f:copy(com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement,com.intellij.vcs.log.graph.actions.GraphAction$Type):com.intellij.vcs.log.graph.impl.facade.VisibleGraphImpl$LinearGraphActionImpl
- bs:copy$default(com.intellij.vcs.log.graph.impl.facade.VisibleGraphImpl$LinearGraphActionImpl,com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement,com.intellij.vcs.log.graph.actions.GraphAction$Type,I,java.lang.Object):com.intellij.vcs.log.graph.impl.facade.VisibleGraphImpl$LinearGraphActionImpl
- equals(java.lang.Object):Z
- getAffectedElement():com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
- getType():com.intellij.vcs.log.graph.actions.GraphAction$Type
- hashCode():I
- toString():java.lang.String
f:com.intellij.vcs.log.graph.impl.facade.sort.SortChecker
- <init>():V
- s:checkLinearGraph(com.intellij.vcs.log.graph.api.LinearGraph):V
- s:findReversedEdge(com.intellij.vcs.log.graph.api.LinearGraph):com.intellij.openapi.util.Pair
com.intellij.vcs.log.graph.impl.facade.sort.SortIndexMap
- s:createFromSortedList(java.util.List):com.intellij.vcs.log.graph.impl.facade.sort.SortIndexMap
- a:getSortedIndex(I):I
- a:getUsualIndex(I):I
- a:size():I
c:com.intellij.vcs.log.graph.impl.facade.sort.SortedBaseController
- com.intellij.vcs.log.graph.impl.facade.LinearGraphController
- <init>(com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo,com.intellij.vcs.log.graph.impl.facade.sort.SortIndexMap):V
- getBekIntMap():com.intellij.vcs.log.graph.impl.facade.sort.SortIndexMap
- getCompiledGraph():com.intellij.vcs.log.graph.api.LinearGraph
- performLinearGraphAction(com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAction):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
c:com.intellij.vcs.log.graph.impl.facade.sort.SortedBaseController$SortedLinearGraph
- com.intellij.vcs.log.graph.api.LinearGraph
- <init>(com.intellij.vcs.log.graph.impl.facade.sort.SortIndexMap,com.intellij.vcs.log.graph.api.LinearGraph):V
- getAdjacentEdges(I,com.intellij.vcs.log.graph.api.EdgeFilter):java.util.List
- getGraphNode(I):com.intellij.vcs.log.graph.api.elements.GraphNode
- getNodeId(I):I
- getNodeIndex(I):java.lang.Integer
- nodesCount():I
f:com.intellij.vcs.log.graph.impl.facade.sort.bek.BekSorter
- <init>():V
- s:createBekMap(com.intellij.vcs.log.graph.api.LinearGraph,com.intellij.vcs.log.graph.impl.permanent.GraphLayoutImpl,com.intellij.vcs.log.graph.utils.TimestampGetter):com.intellij.vcs.log.graph.impl.facade.sort.SortIndexMap
f:com.intellij.vcs.log.graph.impl.permanent.DuplicateParentFixer
- <init>():V
- s:fixDuplicateParentCommits(java.util.List):java.util.AbstractList
f:com.intellij.vcs.log.graph.impl.permanent.GraphLayoutBuilder
- sf:INSTANCE:com.intellij.vcs.log.graph.impl.permanent.GraphLayoutBuilder
- sf:build(com.intellij.vcs.log.graph.api.LinearGraph,it.unimi.dsi.fastutil.ints.IntComparator):com.intellij.vcs.log.graph.impl.permanent.GraphLayoutImpl
- sf:build(com.intellij.vcs.log.graph.api.LinearGraph,java.util.Set,it.unimi.dsi.fastutil.ints.IntComparator):com.intellij.vcs.log.graph.impl.permanent.GraphLayoutImpl
f:com.intellij.vcs.log.graph.impl.permanent.GraphLayoutImpl
- com.intellij.vcs.log.graph.api.GraphLayout
- <init>(I[],it.unimi.dsi.fastutil.ints.IntList):V
- getHeadNodeIndex():it.unimi.dsi.fastutil.ints.IntList
- getLayoutIndex(I):I
- getOneOfHeadNodeIndex(I):I
f:com.intellij.vcs.log.graph.impl.permanent.GraphLayoutImplKt
f:com.intellij.vcs.log.graph.impl.permanent.PermanentCommitsInfoImpl
- com.intellij.vcs.log.graph.api.permanent.PermanentCommitsInfo
- sf:Companion:com.intellij.vcs.log.graph.impl.permanent.PermanentCommitsInfoImpl$Companion
- f:containsAll(java.util.Collection):Z
- f:convertToCommitIdList(java.util.Collection):java.util.List
- f:convertToCommitIdSet(java.util.Collection):java.util.Set
- convertToNodeIds(java.util.Collection):java.util.Set
- sf:createTimestampGetter(java.util.List):com.intellij.vcs.log.graph.utils.impl.IntTimestampGetter
- getCommitId(I):java.lang.Object
- getNodeId(java.lang.Object):I
- getTimestamp(I):J
- f:getTimestampGetter():com.intellij.vcs.log.graph.utils.TimestampGetter
- sf:newInstance(java.util.List,it.unimi.dsi.fastutil.ints.Int2ObjectMap):com.intellij.vcs.log.graph.impl.permanent.PermanentCommitsInfoImpl
f:com.intellij.vcs.log.graph.impl.permanent.PermanentCommitsInfoImpl$Companion
- f:createTimestampGetter(java.util.List):com.intellij.vcs.log.graph.utils.impl.IntTimestampGetter
- f:newInstance(java.util.List,it.unimi.dsi.fastutil.ints.Int2ObjectMap):com.intellij.vcs.log.graph.impl.permanent.PermanentCommitsInfoImpl
f:com.intellij.vcs.log.graph.impl.permanent.PermanentLinearGraphBuilder
- build():com.intellij.vcs.log.graph.impl.permanent.PermanentLinearGraphImpl
- build(java.util.function.Function):com.intellij.vcs.log.graph.impl.permanent.PermanentLinearGraphImpl
- s:newInstance(java.util.List):com.intellij.vcs.log.graph.impl.permanent.PermanentLinearGraphBuilder
c:com.intellij.vcs.log.graph.impl.permanent.PermanentLinearGraphImpl
- com.intellij.vcs.log.graph.api.LinearGraph
- getAdjacentEdges(I,com.intellij.vcs.log.graph.api.EdgeFilter):java.util.List
- getGraphNode(I):com.intellij.vcs.log.graph.api.elements.GraphNode
- getNodeId(I):I
- getNodeIndex(I):java.lang.Integer
- nodesCount():I
c:com.intellij.vcs.log.graph.impl.print.EdgesInRowGenerator
- <init>(com.intellij.vcs.log.graph.api.LinearGraph):V
- <init>(com.intellij.vcs.log.graph.api.LinearGraph,I):V
- getEdgesInRow(I):java.util.Set
- invalidate():V
f:com.intellij.vcs.log.graph.impl.print.GraphColorGetterByHeadFactory
- com.intellij.vcs.log.graph.api.printer.GraphColorGetterFactory
- <init>(com.intellij.vcs.log.graph.GraphColorManager):V
- createColorGetter(com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo):com.intellij.vcs.log.graph.api.printer.GraphColorGetter
f:com.intellij.vcs.log.graph.impl.print.GraphColorGetterByNodeFactory
- com.intellij.vcs.log.graph.api.printer.GraphColorGetterFactory
- <init>(kotlin.jvm.functions.Function2):V
- createColorGetter(com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo):com.intellij.vcs.log.graph.api.printer.GraphColorGetter
c:com.intellij.vcs.log.graph.impl.print.GraphElementComparatorByLayoutIndex
- java.util.Comparator
- <init>(java.util.function.Function):V
- compare(com.intellij.vcs.log.graph.api.elements.GraphElement,com.intellij.vcs.log.graph.api.elements.GraphElement):I
c:com.intellij.vcs.log.graph.impl.print.elements.EdgePrintElementImpl
- com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
- com.intellij.vcs.log.graph.EdgePrintElement
- <init>(I,I,I,com.intellij.vcs.log.graph.EdgePrintElement$Type,com.intellij.vcs.log.graph.api.elements.GraphEdge,Z,com.intellij.vcs.log.graph.api.printer.PrintElementPresentationManager):V
- s:convertToLineStyle(com.intellij.vcs.log.graph.api.elements.GraphEdgeType):com.intellij.vcs.log.graph.EdgePrintElement$LineStyle
- equals(java.lang.Object):Z
- getLineStyle():com.intellij.vcs.log.graph.EdgePrintElement$LineStyle
- getPositionInOtherRow():I
- getType():com.intellij.vcs.log.graph.EdgePrintElement$Type
- hasArrow():Z
- hashCode():I
a:com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
- com.intellij.vcs.log.graph.PrintElement
- pf:myGraphElement:com.intellij.vcs.log.graph.api.elements.GraphElement
- pf:myPositionInCurrentRow:I
- pf:myPresentationManager:com.intellij.vcs.log.graph.api.printer.PrintElementPresentationManager
- pf:myRowIndex:I
- p:<init>(I,I,com.intellij.vcs.log.graph.api.elements.GraphElement,com.intellij.vcs.log.graph.api.printer.PrintElementPresentationManager):V
- s:converted(com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement,com.intellij.vcs.log.graph.api.elements.GraphElement):com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
- getColorId():I
- getGraphElement():com.intellij.vcs.log.graph.api.elements.GraphElement
- getPositionInCurrentRow():I
- getRowIndex():I
- isSelected():Z
c:com.intellij.vcs.log.graph.impl.print.elements.SimplePrintElementImpl
- com.intellij.vcs.log.graph.impl.print.elements.PrintElementWithGraphElement
- com.intellij.vcs.log.graph.NodePrintElement
- <init>(I,I,com.intellij.vcs.log.graph.api.elements.GraphElement,com.intellij.vcs.log.graph.api.printer.PrintElementPresentationManager):V
- equals(java.lang.Object):Z
- hashCode():I
c:com.intellij.vcs.log.graph.impl.print.elements.TerminalEdgePrintElement
- com.intellij.vcs.log.graph.impl.print.elements.EdgePrintElementImpl
- <init>(I,I,com.intellij.vcs.log.graph.EdgePrintElement$Type,com.intellij.vcs.log.graph.api.elements.GraphEdge,com.intellij.vcs.log.graph.api.printer.PrintElementPresentationManager):V
f:com.intellij.vcs.log.graph.linearBek.LinearBekController
- com.intellij.vcs.log.graph.impl.facade.CascadeController
- sf:Companion:com.intellij.vcs.log.graph.linearBek.LinearBekController$Companion
- <init>(com.intellij.vcs.log.graph.impl.facade.sort.SortedBaseController,com.intellij.vcs.log.graph.api.permanent.PermanentGraphInfo):V
- getCompiledGraph():com.intellij.vcs.log.graph.linearBek.LinearBekGraph
f:com.intellij.vcs.log.graph.linearBek.LinearBekController$Companion
c:com.intellij.vcs.log.graph.linearBek.LinearBekGraph
- com.intellij.vcs.log.graph.impl.facade.LinearGraphWrapper
- <init>(com.intellij.vcs.log.graph.api.LinearGraph):V
- expandEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):java.util.Collection
c:com.intellij.vcs.log.graph.linearBek.LinearBekGraph$WorkingLinearBekGraph
- com.intellij.vcs.log.graph.linearBek.LinearBekGraph
- <init>(com.intellij.vcs.log.graph.linearBek.LinearBekGraph):V
- applyChanges():V
- getAddedEdges():java.util.Collection
- getRemovedEdges():java.util.Collection
c:com.intellij.vcs.log.graph.utils.BfsSearch
- com.intellij.vcs.log.graph.utils.BfsWalk
- <init>(I,com.intellij.vcs.log.graph.api.LiteLinearGraph,com.intellij.vcs.log.graph.utils.Flags,Z,I):V
- b:<init>(I,com.intellij.vcs.log.graph.api.LiteLinearGraph,com.intellij.vcs.log.graph.utils.Flags,Z,I,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- f:find(kotlin.jvm.functions.Function1):java.lang.Object
- f:getCount():I
- f:getResult():java.lang.Object
- isFinished():Z
- f:setCount(I):V
c:com.intellij.vcs.log.graph.utils.BfsWalk
- <init>(I,com.intellij.vcs.log.graph.api.LiteLinearGraph):V
- <init>(I,com.intellij.vcs.log.graph.api.LiteLinearGraph,com.intellij.vcs.log.graph.utils.Flags,Z):V
- b:<init>(I,com.intellij.vcs.log.graph.api.LiteLinearGraph,com.intellij.vcs.log.graph.utils.Flags,Z,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- f:currentNodes():java.util.Queue
- p:getQueue():java.util.Queue
- f:getStart():I
- isFinished():Z
- f:step(kotlin.jvm.functions.Function1):java.util.List
- bs:step$default(com.intellij.vcs.log.graph.utils.BfsWalk,kotlin.jvm.functions.Function1,I,java.lang.Object):java.util.List
- f:walk(kotlin.jvm.functions.Function1):V
- bs:walk$default(com.intellij.vcs.log.graph.utils.BfsWalk,kotlin.jvm.functions.Function1,I,java.lang.Object):V
f:com.intellij.vcs.log.graph.utils.Dfs
- sf:INSTANCE:com.intellij.vcs.log.graph.utils.Dfs
f:com.intellij.vcs.log.graph.utils.Dfs$NextNode
- sf:EXIT:I
- sf:INSTANCE:com.intellij.vcs.log.graph.utils.Dfs$NextNode
- sf:NODE_NOT_FOUND:I
f:com.intellij.vcs.log.graph.utils.DfsUtilKt
- sf:walk(I,kotlin.jvm.functions.Function1):V
f:com.intellij.vcs.log.graph.utils.DfsWalk
- <init>(java.util.Collection,com.intellij.vcs.log.graph.api.LinearGraph):V
- <init>(java.util.Collection,com.intellij.vcs.log.graph.api.LiteLinearGraph,com.intellij.vcs.log.graph.utils.Flags):V
- f:walk(Z,kotlin.jvm.functions.Function1):V
com.intellij.vcs.log.graph.utils.Flags
- a:get(I):Z
- a:set(I,Z):V
- a:setAll(Z):V
- a:size():I
f:com.intellij.vcs.log.graph.utils.GraphUtilKt
- sf:exclusiveNodes(com.intellij.vcs.log.graph.api.LinearGraph,I,kotlin.jvm.functions.Function1):it.unimi.dsi.fastutil.ints.IntSet
- sf:exclusiveNodes(com.intellij.vcs.log.graph.api.LiteLinearGraph,I,kotlin.jvm.functions.Function1):it.unimi.dsi.fastutil.ints.IntSet
- bs:exclusiveNodes$default(com.intellij.vcs.log.graph.api.LinearGraph,I,kotlin.jvm.functions.Function1,I,java.lang.Object):it.unimi.dsi.fastutil.ints.IntSet
- bs:exclusiveNodes$default(com.intellij.vcs.log.graph.api.LiteLinearGraph,I,kotlin.jvm.functions.Function1,I,java.lang.Object):it.unimi.dsi.fastutil.ints.IntSet
- sf:getCorrespondingParent(com.intellij.vcs.log.graph.api.LiteLinearGraph,I,I,com.intellij.vcs.log.graph.utils.Flags):I
- sf:isAncestor(com.intellij.vcs.log.graph.api.LiteLinearGraph,I,I):Z
- sf:subgraphDifference(com.intellij.vcs.log.graph.api.LinearGraph,I,I):it.unimi.dsi.fastutil.ints.IntSet
c:com.intellij.vcs.log.graph.utils.IntHashSetFlags
- com.intellij.vcs.log.graph.utils.Flags
- <init>(I):V
- get(I):Z
- f:getData():it.unimi.dsi.fastutil.ints.IntOpenHashSet
- set(I,Z):V
- setAll(Z):V
- size():I
f:com.intellij.vcs.log.graph.utils.IntIntMultiMap
- <init>():V
- clear():V
- containsKey(I):Z
- get(I):java.util.Collection
- getAsArray(I):I[]
- isEmpty():Z
- keys():I[]
- putValue(I,I):V
- remove(I,I):V
com.intellij.vcs.log.graph.utils.IntList
- a:get(I):I
- a:size():I
com.intellij.vcs.log.graph.utils.IntToIntMap
- a:getLongIndex(I):I
- a:getShortIndex(I):I
- a:longSize():I
- a:shortSize():I
f:com.intellij.vcs.log.graph.utils.LinearGraphUtils
- sf:DEFAULT_GRAPH_ANSWER:com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- <init>():V
- s:asLiteLinearGraph(com.intellij.vcs.log.graph.api.LinearGraph):com.intellij.vcs.log.graph.api.LiteLinearGraph
- s:asNormalEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):com.intellij.vcs.log.graph.utils.NormalEdge
- s:convertIdsToNodeIndexes(com.intellij.vcs.log.graph.api.LinearGraph,java.util.Collection):java.util.Set
- s:convertNodeIndexesToIds(com.intellij.vcs.log.graph.api.LinearGraph,java.util.Collection):java.util.Set
- s:createSelectedAnswer(com.intellij.vcs.log.graph.api.LinearGraph,java.util.Collection):com.intellij.vcs.log.graph.impl.facade.LinearGraphController$LinearGraphAnswer
- s:getCursor(Z):java.awt.Cursor
- s:getDownNodes(com.intellij.vcs.log.graph.api.LinearGraph,I):java.util.List
- s:getDownNodesIncludeNotLoad(com.intellij.vcs.log.graph.api.LinearGraph,I):java.util.List
- s:getEdge(com.intellij.vcs.log.graph.api.LinearGraph,I,I):com.intellij.vcs.log.graph.api.elements.GraphEdge
- s:getNotNullNodeIndex(com.intellij.vcs.log.graph.api.elements.GraphEdge):I
- s:getUpNodes(com.intellij.vcs.log.graph.api.LinearGraph,I):java.util.List
- s:intEqual(java.lang.Integer,I):Z
- s:isEdgeDown(com.intellij.vcs.log.graph.api.elements.GraphEdge,I):Z
- s:isEdgeUp(com.intellij.vcs.log.graph.api.elements.GraphEdge,I):Z
- s:isNormalEdge(com.intellij.vcs.log.graph.api.elements.GraphEdge):Z
c:com.intellij.vcs.log.graph.utils.NormalEdge
- f:down:I
- f:up:I
- <init>(I,I):V
- s:create(I,I):com.intellij.vcs.log.graph.utils.NormalEdge
- equals(java.lang.Object):Z
- getDown():I
- getUp():I
- hashCode():I
com.intellij.vcs.log.graph.utils.TimestampGetter
- a:getTimestamp(I):J
- a:size():I
c:com.intellij.vcs.log.graph.utils.UnsignedBitSet
- java.lang.Cloneable
- <init>():V
- <init>(java.util.BitSet,java.util.BitSet):V
- clone():com.intellij.vcs.log.graph.utils.UnsignedBitSet
- get(I):Z
- set(I,I,Z):V
- set(I,Z):V
com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- com.intellij.vcs.log.graph.utils.IntToIntMap
- a:update(I,I):V
a:com.intellij.vcs.log.graph.utils.impl.AbstractIntToIntMap
- com.intellij.vcs.log.graph.utils.IntToIntMap
- <init>():V
- p:checkLongIndex(I):V
- p:checkShortIndex(I):V
- p:checkUpdateParameters(I,I):V
- getShortIndex(I):I
c:com.intellij.vcs.log.graph.utils.impl.BitSetFlags
- com.intellij.vcs.log.graph.utils.Flags
- <init>(I):V
- <init>(I,Z):V
- equals(java.lang.Object):Z
- get(I):Z
- hashCode():I
- set(I,Z):V
- setAll(Z):V
- size():I
- toString():java.lang.String
f:com.intellij.vcs.log.graph.utils.impl.CompressedIntList
- com.intellij.vcs.log.graph.utils.IntList
- sf:DEFAULT_BLOCK_SIZE:I
- get(I):I
- s:newInstance(com.intellij.vcs.log.graph.utils.IntList,I):com.intellij.vcs.log.graph.utils.IntList
- s:newInstance(java.util.List):com.intellij.vcs.log.graph.utils.IntList
- s:newInstance(I[]):com.intellij.vcs.log.graph.utils.IntList
- s:newInstance(I[],I):com.intellij.vcs.log.graph.utils.IntList
- size():I
c:com.intellij.vcs.log.graph.utils.impl.FullIntList
- com.intellij.vcs.log.graph.utils.IntList
- <init>(I[]):V
- get(I):I
- s:newInstance(com.intellij.vcs.log.graph.utils.IntList):com.intellij.vcs.log.graph.utils.impl.FullIntList
- size():I
c:com.intellij.vcs.log.graph.utils.impl.IDIntToIntMap
- com.intellij.vcs.log.graph.utils.IntToIntMap
- sf:EMPTY:com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- <init>(I):V
- getLongIndex(I):I
- getShortIndex(I):I
- longSize():I
- shortSize():I
f:com.intellij.vcs.log.graph.utils.impl.IntTimestampGetter
- com.intellij.vcs.log.graph.utils.TimestampGetter
- getTimestamp(I):J
- s:newInstance(com.intellij.vcs.log.graph.utils.TimestampGetter):com.intellij.vcs.log.graph.utils.impl.IntTimestampGetter
- s:newInstance(com.intellij.vcs.log.graph.utils.TimestampGetter,I):com.intellij.vcs.log.graph.utils.impl.IntTimestampGetter
- size():I
f:com.intellij.vcs.log.graph.utils.impl.ListIntToIntMap
- com.intellij.vcs.log.graph.utils.impl.AbstractIntToIntMap
- com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- sf:DEFAULT_BLOCK_SIZE:I
- getLongIndex(I):I
- getShortIndex(I):I
- longSize():I
- s:newInstance(com.intellij.vcs.log.graph.utils.Flags):com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- s:newInstance(com.intellij.vcs.log.graph.utils.Flags,I):com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- s:newInstance(java.util.function.Predicate,I):com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- shortSize():I
- update(I,I):V
f:com.intellij.vcs.log.graph.utils.impl.PermanentListIntToIntMap
- com.intellij.vcs.log.graph.utils.impl.AbstractIntToIntMap
- com.intellij.vcs.log.graph.utils.IntToIntMap
- sf:DEFAULT_BLOCK_SIZE:I
- getLongIndex(I):I
- longSize():I
- s:newInstance(com.intellij.vcs.log.graph.utils.Flags,I):com.intellij.vcs.log.graph.utils.IntToIntMap
- s:newInstance(com.intellij.vcs.log.graph.utils.Flags,I,I):com.intellij.vcs.log.graph.utils.IntToIntMap
- shortSize():I
c:com.intellij.vcs.log.graph.utils.impl.PredicateFlags
- com.intellij.vcs.log.graph.utils.Flags
- <init>(java.util.function.Predicate,I):V
- get(I):Z
- set(I,Z):V
- setAll(Z):V
- size():I
f:com.intellij.vcs.log.graph.utils.impl.SmartDeltaCompressor
- com.intellij.vcs.log.graph.utils.IntList
- get(I):I
- s:newInstance(com.intellij.vcs.log.graph.utils.IntList):com.intellij.vcs.log.graph.utils.impl.SmartDeltaCompressor
- size():I
f:com.intellij.vcs.log.graph.utils.impl.TreeIntToIntMap
- com.intellij.vcs.log.graph.utils.impl.AbstractIntToIntMap
- com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- getLongIndex(I):I
- longSize():I
- s:newInstance(java.util.function.Predicate,I):com.intellij.vcs.log.graph.utils.UpdatableIntToIntMap
- shortSize():I
- update(I,I):V
