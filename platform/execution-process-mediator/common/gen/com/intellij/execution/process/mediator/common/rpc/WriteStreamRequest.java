// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processMediator.proto

package com.intellij.execution.process.mediator.common.rpc;

/**
 * Protobuf type {@code intellij.process.mediator.common.rpc.WriteStreamRequest}
 */
public final class WriteStreamRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:intellij.process.mediator.common.rpc.WriteStreamRequest)
    WriteStreamRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WriteStreamRequest.newBuilder() to construct.
  private WriteStreamRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WriteStreamRequest() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new WriteStreamRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.intellij.execution.process.mediator.common.rpc.ProcessMediatorProto.internal_static_intellij_process_mediator_common_rpc_WriteStreamRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.intellij.execution.process.mediator.common.rpc.ProcessMediatorProto.internal_static_intellij_process_mediator_common_rpc_WriteStreamRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.class, com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.Builder.class);
  }

  private int fileHandleOrBufferCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object fileHandleOrBuffer_;
  public enum FileHandleOrBufferCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    HANDLE(1),
    CHUNK(2),
    FILEHANDLEORBUFFER_NOT_SET(0);
    private final int value;
    private FileHandleOrBufferCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FileHandleOrBufferCase valueOf(int value) {
      return forNumber(value);
    }

    public static FileHandleOrBufferCase forNumber(int value) {
      switch (value) {
        case 1: return HANDLE;
        case 2: return CHUNK;
        case 0: return FILEHANDLEORBUFFER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public FileHandleOrBufferCase
  getFileHandleOrBufferCase() {
    return FileHandleOrBufferCase.forNumber(
        fileHandleOrBufferCase_);
  }

  public static final int HANDLE_FIELD_NUMBER = 1;
  /**
   * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
   * @return Whether the handle field is set.
   */
  @java.lang.Override
  public boolean hasHandle() {
    return fileHandleOrBufferCase_ == 1;
  }
  /**
   * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
   * @return The handle.
   */
  @java.lang.Override
  public com.intellij.execution.process.mediator.common.rpc.FileHandle getHandle() {
    if (fileHandleOrBufferCase_ == 1) {
       return (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_;
    }
    return com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance();
  }
  /**
   * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
   */
  @java.lang.Override
  public com.intellij.execution.process.mediator.common.rpc.FileHandleOrBuilder getHandleOrBuilder() {
    if (fileHandleOrBufferCase_ == 1) {
       return (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_;
    }
    return com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance();
  }

  public static final int CHUNK_FIELD_NUMBER = 2;
  /**
   * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
   * @return Whether the chunk field is set.
   */
  @java.lang.Override
  public boolean hasChunk() {
    return fileHandleOrBufferCase_ == 2;
  }
  /**
   * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
   * @return The chunk.
   */
  @java.lang.Override
  public com.intellij.execution.process.mediator.common.rpc.DataChunk getChunk() {
    if (fileHandleOrBufferCase_ == 2) {
       return (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_;
    }
    return com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance();
  }
  /**
   * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
   */
  @java.lang.Override
  public com.intellij.execution.process.mediator.common.rpc.DataChunkOrBuilder getChunkOrBuilder() {
    if (fileHandleOrBufferCase_ == 2) {
       return (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_;
    }
    return com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (fileHandleOrBufferCase_ == 1) {
      output.writeMessage(1, (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_);
    }
    if (fileHandleOrBufferCase_ == 2) {
      output.writeMessage(2, (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (fileHandleOrBufferCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_);
    }
    if (fileHandleOrBufferCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest)) {
      return super.equals(obj);
    }
    com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest other = (com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest) obj;

    if (!getFileHandleOrBufferCase().equals(other.getFileHandleOrBufferCase())) return false;
    switch (fileHandleOrBufferCase_) {
      case 1:
        if (!getHandle()
            .equals(other.getHandle())) return false;
        break;
      case 2:
        if (!getChunk()
            .equals(other.getChunk())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (fileHandleOrBufferCase_) {
      case 1:
        hash = (37 * hash) + HANDLE_FIELD_NUMBER;
        hash = (53 * hash) + getHandle().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CHUNK_FIELD_NUMBER;
        hash = (53 * hash) + getChunk().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code intellij.process.mediator.common.rpc.WriteStreamRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:intellij.process.mediator.common.rpc.WriteStreamRequest)
      com.intellij.execution.process.mediator.common.rpc.WriteStreamRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.intellij.execution.process.mediator.common.rpc.ProcessMediatorProto.internal_static_intellij_process_mediator_common_rpc_WriteStreamRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.intellij.execution.process.mediator.common.rpc.ProcessMediatorProto.internal_static_intellij_process_mediator_common_rpc_WriteStreamRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.class, com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.Builder.class);
    }

    // Construct using com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (handleBuilder_ != null) {
        handleBuilder_.clear();
      }
      if (chunkBuilder_ != null) {
        chunkBuilder_.clear();
      }
      fileHandleOrBufferCase_ = 0;
      fileHandleOrBuffer_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.intellij.execution.process.mediator.common.rpc.ProcessMediatorProto.internal_static_intellij_process_mediator_common_rpc_WriteStreamRequest_descriptor;
    }

    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest getDefaultInstanceForType() {
      return com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest build() {
      com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest buildPartial() {
      com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest result = new com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest result) {
      result.fileHandleOrBufferCase_ = fileHandleOrBufferCase_;
      result.fileHandleOrBuffer_ = this.fileHandleOrBuffer_;
      if (fileHandleOrBufferCase_ == 1 &&
          handleBuilder_ != null) {
        result.fileHandleOrBuffer_ = handleBuilder_.build();
      }
      if (fileHandleOrBufferCase_ == 2 &&
          chunkBuilder_ != null) {
        result.fileHandleOrBuffer_ = chunkBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest) {
        return mergeFrom((com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest other) {
      if (other == com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest.getDefaultInstance()) return this;
      switch (other.getFileHandleOrBufferCase()) {
        case HANDLE: {
          mergeHandle(other.getHandle());
          break;
        }
        case CHUNK: {
          mergeChunk(other.getChunk());
          break;
        }
        case FILEHANDLEORBUFFER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getHandleFieldBuilder().getBuilder(),
                  extensionRegistry);
              fileHandleOrBufferCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getChunkFieldBuilder().getBuilder(),
                  extensionRegistry);
              fileHandleOrBufferCase_ = 2;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int fileHandleOrBufferCase_ = 0;
    private java.lang.Object fileHandleOrBuffer_;
    public FileHandleOrBufferCase
        getFileHandleOrBufferCase() {
      return FileHandleOrBufferCase.forNumber(
          fileHandleOrBufferCase_);
    }

    public Builder clearFileHandleOrBuffer() {
      fileHandleOrBufferCase_ = 0;
      fileHandleOrBuffer_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellij.execution.process.mediator.common.rpc.FileHandle, com.intellij.execution.process.mediator.common.rpc.FileHandle.Builder, com.intellij.execution.process.mediator.common.rpc.FileHandleOrBuilder> handleBuilder_;
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     * @return Whether the handle field is set.
     */
    @java.lang.Override
    public boolean hasHandle() {
      return fileHandleOrBufferCase_ == 1;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     * @return The handle.
     */
    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.FileHandle getHandle() {
      if (handleBuilder_ == null) {
        if (fileHandleOrBufferCase_ == 1) {
          return (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_;
        }
        return com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance();
      } else {
        if (fileHandleOrBufferCase_ == 1) {
          return handleBuilder_.getMessage();
        }
        return com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance();
      }
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    public Builder setHandle(com.intellij.execution.process.mediator.common.rpc.FileHandle value) {
      if (handleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fileHandleOrBuffer_ = value;
        onChanged();
      } else {
        handleBuilder_.setMessage(value);
      }
      fileHandleOrBufferCase_ = 1;
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    public Builder setHandle(
        com.intellij.execution.process.mediator.common.rpc.FileHandle.Builder builderForValue) {
      if (handleBuilder_ == null) {
        fileHandleOrBuffer_ = builderForValue.build();
        onChanged();
      } else {
        handleBuilder_.setMessage(builderForValue.build());
      }
      fileHandleOrBufferCase_ = 1;
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    public Builder mergeHandle(com.intellij.execution.process.mediator.common.rpc.FileHandle value) {
      if (handleBuilder_ == null) {
        if (fileHandleOrBufferCase_ == 1 &&
            fileHandleOrBuffer_ != com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance()) {
          fileHandleOrBuffer_ = com.intellij.execution.process.mediator.common.rpc.FileHandle.newBuilder((com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_)
              .mergeFrom(value).buildPartial();
        } else {
          fileHandleOrBuffer_ = value;
        }
        onChanged();
      } else {
        if (fileHandleOrBufferCase_ == 1) {
          handleBuilder_.mergeFrom(value);
        } else {
          handleBuilder_.setMessage(value);
        }
      }
      fileHandleOrBufferCase_ = 1;
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    public Builder clearHandle() {
      if (handleBuilder_ == null) {
        if (fileHandleOrBufferCase_ == 1) {
          fileHandleOrBufferCase_ = 0;
          fileHandleOrBuffer_ = null;
          onChanged();
        }
      } else {
        if (fileHandleOrBufferCase_ == 1) {
          fileHandleOrBufferCase_ = 0;
          fileHandleOrBuffer_ = null;
        }
        handleBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    public com.intellij.execution.process.mediator.common.rpc.FileHandle.Builder getHandleBuilder() {
      return getHandleFieldBuilder().getBuilder();
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.FileHandleOrBuilder getHandleOrBuilder() {
      if ((fileHandleOrBufferCase_ == 1) && (handleBuilder_ != null)) {
        return handleBuilder_.getMessageOrBuilder();
      } else {
        if (fileHandleOrBufferCase_ == 1) {
          return (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_;
        }
        return com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance();
      }
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.FileHandle handle = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellij.execution.process.mediator.common.rpc.FileHandle, com.intellij.execution.process.mediator.common.rpc.FileHandle.Builder, com.intellij.execution.process.mediator.common.rpc.FileHandleOrBuilder> 
        getHandleFieldBuilder() {
      if (handleBuilder_ == null) {
        if (!(fileHandleOrBufferCase_ == 1)) {
          fileHandleOrBuffer_ = com.intellij.execution.process.mediator.common.rpc.FileHandle.getDefaultInstance();
        }
        handleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.intellij.execution.process.mediator.common.rpc.FileHandle, com.intellij.execution.process.mediator.common.rpc.FileHandle.Builder, com.intellij.execution.process.mediator.common.rpc.FileHandleOrBuilder>(
                (com.intellij.execution.process.mediator.common.rpc.FileHandle) fileHandleOrBuffer_,
                getParentForChildren(),
                isClean());
        fileHandleOrBuffer_ = null;
      }
      fileHandleOrBufferCase_ = 1;
      onChanged();
      return handleBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellij.execution.process.mediator.common.rpc.DataChunk, com.intellij.execution.process.mediator.common.rpc.DataChunk.Builder, com.intellij.execution.process.mediator.common.rpc.DataChunkOrBuilder> chunkBuilder_;
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     * @return Whether the chunk field is set.
     */
    @java.lang.Override
    public boolean hasChunk() {
      return fileHandleOrBufferCase_ == 2;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     * @return The chunk.
     */
    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.DataChunk getChunk() {
      if (chunkBuilder_ == null) {
        if (fileHandleOrBufferCase_ == 2) {
          return (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_;
        }
        return com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance();
      } else {
        if (fileHandleOrBufferCase_ == 2) {
          return chunkBuilder_.getMessage();
        }
        return com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance();
      }
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    public Builder setChunk(com.intellij.execution.process.mediator.common.rpc.DataChunk value) {
      if (chunkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fileHandleOrBuffer_ = value;
        onChanged();
      } else {
        chunkBuilder_.setMessage(value);
      }
      fileHandleOrBufferCase_ = 2;
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    public Builder setChunk(
        com.intellij.execution.process.mediator.common.rpc.DataChunk.Builder builderForValue) {
      if (chunkBuilder_ == null) {
        fileHandleOrBuffer_ = builderForValue.build();
        onChanged();
      } else {
        chunkBuilder_.setMessage(builderForValue.build());
      }
      fileHandleOrBufferCase_ = 2;
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    public Builder mergeChunk(com.intellij.execution.process.mediator.common.rpc.DataChunk value) {
      if (chunkBuilder_ == null) {
        if (fileHandleOrBufferCase_ == 2 &&
            fileHandleOrBuffer_ != com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance()) {
          fileHandleOrBuffer_ = com.intellij.execution.process.mediator.common.rpc.DataChunk.newBuilder((com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_)
              .mergeFrom(value).buildPartial();
        } else {
          fileHandleOrBuffer_ = value;
        }
        onChanged();
      } else {
        if (fileHandleOrBufferCase_ == 2) {
          chunkBuilder_.mergeFrom(value);
        } else {
          chunkBuilder_.setMessage(value);
        }
      }
      fileHandleOrBufferCase_ = 2;
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    public Builder clearChunk() {
      if (chunkBuilder_ == null) {
        if (fileHandleOrBufferCase_ == 2) {
          fileHandleOrBufferCase_ = 0;
          fileHandleOrBuffer_ = null;
          onChanged();
        }
      } else {
        if (fileHandleOrBufferCase_ == 2) {
          fileHandleOrBufferCase_ = 0;
          fileHandleOrBuffer_ = null;
        }
        chunkBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    public com.intellij.execution.process.mediator.common.rpc.DataChunk.Builder getChunkBuilder() {
      return getChunkFieldBuilder().getBuilder();
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    @java.lang.Override
    public com.intellij.execution.process.mediator.common.rpc.DataChunkOrBuilder getChunkOrBuilder() {
      if ((fileHandleOrBufferCase_ == 2) && (chunkBuilder_ != null)) {
        return chunkBuilder_.getMessageOrBuilder();
      } else {
        if (fileHandleOrBufferCase_ == 2) {
          return (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_;
        }
        return com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance();
      }
    }
    /**
     * <code>.intellij.process.mediator.common.rpc.DataChunk chunk = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.intellij.execution.process.mediator.common.rpc.DataChunk, com.intellij.execution.process.mediator.common.rpc.DataChunk.Builder, com.intellij.execution.process.mediator.common.rpc.DataChunkOrBuilder> 
        getChunkFieldBuilder() {
      if (chunkBuilder_ == null) {
        if (!(fileHandleOrBufferCase_ == 2)) {
          fileHandleOrBuffer_ = com.intellij.execution.process.mediator.common.rpc.DataChunk.getDefaultInstance();
        }
        chunkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.intellij.execution.process.mediator.common.rpc.DataChunk, com.intellij.execution.process.mediator.common.rpc.DataChunk.Builder, com.intellij.execution.process.mediator.common.rpc.DataChunkOrBuilder>(
                (com.intellij.execution.process.mediator.common.rpc.DataChunk) fileHandleOrBuffer_,
                getParentForChildren(),
                isClean());
        fileHandleOrBuffer_ = null;
      }
      fileHandleOrBufferCase_ = 2;
      onChanged();
      return chunkBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:intellij.process.mediator.common.rpc.WriteStreamRequest)
  }

  // @@protoc_insertion_point(class_scope:intellij.process.mediator.common.rpc.WriteStreamRequest)
  private static final com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest();
  }

  public static com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WriteStreamRequest>
      PARSER = new com.google.protobuf.AbstractParser<WriteStreamRequest>() {
    @java.lang.Override
    public WriteStreamRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WriteStreamRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WriteStreamRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.intellij.execution.process.mediator.common.rpc.WriteStreamRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

