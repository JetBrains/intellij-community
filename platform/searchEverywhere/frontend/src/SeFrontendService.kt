// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.package com.intellij.platform.searchEverywhere.frontendimport com.intellij.openapi.actionSystem.DataContextimport com.intellij.openapi.application.EDTimport com.intellij.openapi.components.Serviceimport com.intellij.openapi.project.Projectimport com.intellij.openapi.util.registry.Registryimport com.intellij.platform.kernel.withKernelimport com.intellij.platform.searchEverywhere.SeSessionEntityimport com.intellij.platform.searchEverywhere.api.SeTabProviderimport com.intellij.platform.searchEverywhere.frontend.ui.SePopupProviderimport com.intellij.platform.searchEverywhere.frontend.vm.SePopupVmimport com.intellij.platform.util.coroutines.childScopeimport fleet.kernel.changeimport fleet.kernel.sharedimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextimport org.jetbrains.annotations.ApiStatus@ApiStatus.Internal@Service(Service.Level.PROJECT)class SeFrontendService(val project: Project, val coroutineScope: CoroutineScope) {  fun showPopup(searchText: String? = null, dataContext: DataContext) {    coroutineScope.launch {      doShowPopup(searchText, dataContext)    }  }  private suspend fun doShowPopup(searchText: String?, dataContext: DataContext) {    val popupScope = coroutineScope.childScope("SearchEverywhereFrontendService scope")    val sessionRef = SeSessionEntity.createRef()    val tabs = SeTabProvider.EP_NAME.extensionList.map {      it.getTab(project, sessionRef, dataContext)    }    val popupVm = SePopupVm(popupScope, project, sessionRef, tabs, searchText) {      withKernel {        change {          shared {            sessionRef.derefOrNull()?.delete()          }        }      }    }    withContext(Dispatchers.EDT) {      SePopupProvider.getInstance().createPopup(popupVm, project).showCenteredInCurrentWindow(project)    }  }  companion object {    @JvmStatic    fun getInstance(project: Project): SeFrontendService = project.getService(SeFrontendService::class.java)    @JvmStatic    val isEnabled: Boolean      get() = Registry.`is`("search.everywhere.new.enabled", false)  }}