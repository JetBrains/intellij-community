// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.platform.ijent.fs

import com.intellij.openapi.util.NlsSafe
import org.jetbrains.annotations.Nls
import java.io.IOException

/**
 * [T] should not be `Unit`, throw a subclass of [IjentFsIOException] in such cases instead.
 */
sealed interface IjentFsResult<out T, E : IjentFsError> {
  interface Ok<out T, E : IjentFsError> : IjentFsResult<T, E> {
    val value: T
  }

  interface Error<T, E : IjentFsError> : IjentFsResult<T, E> {
    val error: E
  }
}

sealed interface IjentFsError {
  val where: IjentPath.Absolute

  /**
   * This error message is generated by the IJent server application.
   * It can be written either in English or in the language of the server's locale.
   * It may contain a text returned by the remote operating system.
   */
  val message: @NlsSafe String

  sealed interface Other : IjentFsError

  sealed interface DoesNotExist : IjentFsError
  sealed interface AlreadyExists : IjentFsError
  sealed interface PermissionDenied : IjentFsError
  sealed interface NotDirectory : IjentFsError
  sealed interface NotFile : IjentFsError
  sealed interface UnknownFile: IjentFsError
  sealed interface ReadOnlyFileSystem: IjentFsError
  sealed interface NameTooLong: IjentFsError
  sealed interface NotEnoughSpace: IjentFsError
  sealed interface DirNotEmpty: IjentFsError
}

/**
 * For cases when `Unit` should be returned, because there's no way to force checking the return result in Kotlin.
 */
sealed class IjentFsIOException(
  override val where: IjentPath.Absolute,
  val additionalMessage: @NlsSafe String,
) : IOException(), IjentFsError {
  override val message: String get() {
    // TODO i18n
    val prefix: @Nls String = when (this) {
      is IjentFsError.DoesNotExist -> "Does not exist"
      is IjentFsError.NotDirectory -> "Not a directory"
      is IjentFsError.NotFile -> "Not a file"
      is IjentFsError.PermissionDenied -> "Permission denied"
      is IjentFsError.AlreadyExists -> "File with this name already exists"
      is IjentFsError.ReadOnlyFileSystem -> "File system is read-only"
      is IjentFsError.Other -> "Unexpected rare error"
      is IjentFsError.DirNotEmpty -> "Directory is not empty"
      is IjentFsError.NameTooLong -> "Name is too long"
      is IjentFsError.NotEnoughSpace -> "Not enough space"
      is IjentOpenedFile.Writer.TruncateException.NegativeOffset -> "Offset is negative"
      is IjentOpenedFile.Writer.TruncateException.OffsetTooBig -> "Offset is too big"
      is IjentOpenedFile.Writer.TruncateException.UnknownFile -> "File is not opened"
      is IjentFileSystemApi.DeleteException.UnresolvedLink -> "Unresolved link"
    }
    return if (additionalMessage.isEmpty()) "$prefix: $where" else "$prefix: $where ($additionalMessage)"
  }
}