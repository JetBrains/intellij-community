### auto-generated section `build` start
load("@rules_java//java:defs.bzl", "java_library")
load("@community//:build/compiler-options.bzl", "create_kotlinc_options")
load("@rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")

java_library(
  name = "resources",
  resources = glob(["resources/**/*"], allow_empty = True, exclude = ["**/module-info.java"])
)

create_kotlinc_options(
  name = "custom",
  jvm_target = "11",
  x_optin = ["kotlinx.serialization.ExperimentalSerializationApi"]
)

kt_jvm_library(
  name = "diagnostic-telemetry-impl",
  module_name = "intellij.platform.diagnostic.telemetry.impl",
  visibility = ["//visibility:public"],
  srcs = glob(["src/**/*.kt", "src/**/*.java"], allow_empty = True, exclude = ["**/module-info.java"]),
  javac_opts = "//:j11",
  kotlinc_opts = ":custom",
  plugins = ["@libraries//:serialization_plugin"],
  deps = [
    "@libraries//:jackson-core",
    "@libraries//:opentelemetry-sdk",
    "@libraries//:opentelemetry-semconv",
    "@libraries//:kotlin-stdlib",
    "@libraries//:kotlinx-coroutines-core-jvm",
    "@libraries//:opentelemetry-extension-kotlin",
    "@community//platform/util",
    "@libraries//:opentelemetry-exporter-otlp-common",
    "@libraries//:HdrHistogram",
    "@community//platform/diagnostic/telemetry:diagnostic-telemetry",
    "@community//platform/core-impl",
    "@community//platform/util/http:util-http",
    "@libraries//:kotlinx-serialization-protobuf-jvm",
    "@libraries//:kotlinx-serialization-core-jvm",
    "@community//platform/diagnostic",
    "@community//platform/diagnostic/telemetry.exporters:diagnostic-telemetry-exporters",
    "@community//platform/util/coroutines:util-coroutines",
    "@community//platform/diagnostic/telemetry/rt:diagnostic-telemetry-rt",
    "@libraries//:guava",
  ],
  exports = [
    "@community//platform/diagnostic/telemetry.exporters:diagnostic-telemetry-exporters",
    "@community//platform/diagnostic/telemetry/rt:diagnostic-telemetry-rt",
  ],
  runtime_deps = [":resources"]
)
### auto-generated section `build` end