action.AddInlayInternalAction.Anonymous.description.remove.this.inlay=Remove this inlay
action.AddInlayInternalAction.Anonymous.text.remove=Remove
action.AnAction.description.load.all.files.content=Load All Files Content
action.AnAction.description.load.all.virtual.files.content=Load All VirtualFiles Content
action.AnAction.text.load.all.files.content=Load All Files Content
action.AnAction.text.load.all.virtual.files.content=Load All Files Content
action.Anonymous.text.clientproperties=ClientProperties
action.Anonymous.text.parents=Parents
action.Anonymous.text.refresh=Refresh
action.Anonymous.text.colorPicker=Color Key Picker
action.Anonymous.text.Accessible=Accessible
action.Anonymous.text.ShowAccessibilityIssues=Show Accessibility Issues
action.Anonymous.description.open.definition=Open the definition of the selected component
action.Anonymous.text.DataContext=Data Context
action.Anonymous.text.reset.statistics=Reset Statistics
action.presentation.FocusDebuggerAction.text.start.focus.debugger=Start Focus Debugger
action.presentation.FocusDebuggerAction.text.stop.focus.debugger=Stop Focus Debugger
action.presentation.FocusTracesAction.text.start.focus.tracing=Start Focus Tracing
action.presentation.FocusTracesAction.text.stop.focus.tracing=Stop Focus Tracing
action.presentation.ToggleLaggingModeAction.text.enter.lagging.mode=Enter Lagging Mode
action.presentation.ToggleLaggingModeAction.text.exit.lagging.mode=Exit Lagging Mode
action.Anonymous.description.ShowAccessibilityIssues=Highlights accessibility issues in the component tree. Select the property value in the table for more information.
enable.tremble.dumb.mode=Enter Tremble Dumb Mode
disable.tremble.dumb.mode=Exit Tremble Dumb Mode

tab.title.edt.utilization.chart=EDT Locks Utilization

ui.inspector.accessibility.audit.preview.tab.text=Value
ui.inspector.accessibility.audit.inspection.tab.text=Problem {0}
# These properties are used, see UiInspectorAccessibilityInspection.description
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleActionNotNullInspection.description=The AccessibleAction interface is expected to be implemented for the role "{0}". It allows assistive technologies such as screen readers and voice control to perform actions without interacting with the component directly. Typical examples of actions include clicking a button, activating a checkbox, or showing a context menu.\n\nHow to fix:\nEnsure the AccessibleContext of the component implements the AccessibleAction interface with all actions available for the component.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleEditableTextNotNullInspection.description=The AccessibleEditableText interface is expected to be implemented based on the accessible state "editable" and role "{0}". It allows assistive technologies such as screen readers and voice control to interact with the text component.\n\nHow to fix:\nEnsure the AccessibleContext of the component implements the AccessibleEditableText interface. If the component is not supposed to be editable, make sure the method AccessibleContext.getAccessibleStateSet() doesn\u2019t return AccessibleState.EDITABLE.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleTextNotNullInspection.description=The AccessibleText interface is expected to be implemented for the accessible role "{0}". It allows assistive technologies such as screen readers and voice control to access the text content of the component.\n\nHow to fix:\nEnsure the AccessibleContext of the component implements the AccessibleText interface. If the text component is a simple static text and not supposed to be interactive, consider changing the accessible role to "label" and provide the text content in accessible name.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleNameAndDescriptionNotEqualInspection.description=The accessible name and description properties shouldn't be equal to each other. The name is used to convey the main purpose of the component, while the description can be used for additional information like instructions or comments.\n\nHow to fix:\nIf accessible description duplicates the accessible name, and there is no additional information suitable for the description, leave only the name. Otherwise, split the text into two properties appropriately.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleNameNotEmptyForFocusableComponentsInspection.description=The accessible name shouldn't be empty for focusable components with the role "{0}". Otherwise, users of assistive technologies are unlikely to interact with them. For instance, screen reader users may not understand the purpose of this component, and voice control users won't be able to activate it using the name.\n\nHow to fix:\nThere are a few options:\n1. Set a name for the component by using the getAccessibleContext().setAccessibleName() method or override the getAccessibleName() method in the component\u2019s AccessibleContext.\n2. The accessible name can also be set implicitly by using JLabel.setLabelFor(Component) method, setting the tooltip or the text property of the component.\n3. If the component is purely decorative and there is no suitable accessible name for it, make sure it is not focusable and its accessible role correctly represents it.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleNameNotEmptyForIcon.description=Icons should have an accessible name that describes what it represents. This allows assistive technologies such as screen readers to properly convey the icon's meaning to users who can't see it visually.\n\nHow to fix:\nSet a descriptive accessible name for the icon using getAccessibleContext().setAccessibleName() method. If the icon is purely decorative and doesn't convey any information, the accessible name can be left empty.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleStateSetContainsFocusableInspection.description=The component is missing the "focusable" accessible state. Based on the accessible role "{0}", the component is expected to be keyboard-focusable to allow interacting with it for users who rely only on the keyboard to work with the IDE.\n\nHow to fix:\nEnsure the component is focusable by calling setFocusable(true) on the component and verifying that it can be reached using Tab/Shift-Tab navigation. If the component is not interactive and shouldn\u2019t be focusable, consider changing its accessible role to a non-interactive role that better represents its purpose, such as panel or label.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.AccessibleValueNotNullInspection.description=The AccessibleValue interface is expected to be implemented for the accessible role "{0}". It allows assistive technologies such as screen readers to determine and interact with the value of the component.\n\nHow to fix:\nEnsure the AccessibleContext of the component implements the AccessibleValue interface. For toggleable components like checkboxes or radio buttons, value 0 should be returned for the toggled off state, and 1 for the on state.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.ImplementsAccessibleInterfaceInspection.description=All UI components should implement the Accessible interface to provide accessibility metadata to assistive technologies such as screen readers and voice control.\n\nHow to fix:\nImplement the Accessible interface for the component and provide a proper AccessibleContext implementation that describes the component's role, state, and other properties. For purely decorative components (for example, separators), it is acceptable to not implement the Accessible interface, but still recommended.
# suppress inspection "UnusedProperty"
ui.inspector.accessibility.audit.ComponentWithIconHasNonDefaultAccessibleNameInspection.description=Components with icons should have accessible names that describe both the icon and the text content, instead of the text alone, except when the icon is purely decorative and doesn't convey any information.\n\nHow to fix:\nSet an accessible name that describes both the icon and text using getAccessibleContext().setAccessibleName() method or override getAccessibleName() of the component's AccessibleContext.

ui.inspector.accessibility.audit.tree.tooltip={0,choice,0#No accessibility issues|1#Accessibility issues: } {1, choice, 0#|1# 1 error|2#{1} errors} {2,choice,0#|1# 1 warning|2#, {2} warnings} {3,choice,0#|1# 1 recommendation|2#, {3} recommendations}
ui.inspector.accessibility.audit.table.property.name.tooltip=Select the value cell to see failed inspections
