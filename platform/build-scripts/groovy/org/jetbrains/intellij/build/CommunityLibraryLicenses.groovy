// Copyright 2000-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.jetbrains.intellij.build

import groovy.transform.CompileStatic

import static org.jetbrains.intellij.build.LibraryLicense.jetbrainsLibrary

/**
 * Defines information about licenses of libraries located in 'community', 'contrib' and 'android' repositories.
 */
@CompileStatic
class CommunityLibraryLicenses {
  @SuppressWarnings("SpellCheckingInspection")
  public static final List<LibraryLicense> LICENSES_LIST = [
    new LibraryLicense(name: "AAPT Protos", libraryName: "aapt-proto", url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "AhoCorasickDoubleArrayTrie", libraryName: "com.hankcs:aho-corasick-double-array-trie:1.2.2",
                       url: "https://github.com/hankcs/AhoCorasickDoubleArrayTrie").apache(),
    new LibraryLicense(name: "Am Instrument Data proto", libraryName: "libam-instrumentation-data-proto",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Amazon Ion Java", libraryName: "ion", url: "https://github.com/amzn/ion-java").apache(),
    new LibraryLicense(name: "Android AIA Protos", libraryName: "aia-proto", url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Analytics Crash", libraryName: "precompiled-analytics-crash",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Analytics Protos", libraryName: "studio-analytics-proto",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Analytics Shared", libraryName: "precompiled-analytics-shared",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Analytics Tracker", libraryName: "precompiled-analytics-tracker",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Annotations", libraryName: "precompiled-android-annotations",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Apk Analyzer", libraryName: "precompiled-analyzer",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Apk Binary Resources", libraryName: "precompiled-binary-resources",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Apk ZLib", libraryName: "apkzlib",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Archive Patcher (explainer)", libraryName: "explainer-27.1.1.0.jar",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Archive Patcher (generator)", libraryName: "generator-27.1.1.0.jar",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Archive Patcher (shared)", libraryName: "shared-27.1.1.0.jar",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Baksmali", libraryName: "baksmali", url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Builder Model", libraryName: "precompiled-builder-model",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Builder Test Api", libraryName: "precompiled-builder-test-api",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Chunkio", libraryName: "precompiled-chunkio",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Chunkio Processor", libraryName: "precompiled-chunkio-processor",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Common Library", libraryName: "precompiled-common",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Data Binding Base Library", libraryName: "precompiled-db-baseLibrary",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Data Binding Base Library Support", libraryName: "precompiled-db-baseLibrarySupport",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Data Binding Compiler", libraryName: "precompiled-db-compiler",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Data Binding Compiler Common", libraryName: "precompiled-db-compilerCommon",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Ddm Library", libraryName: "precompiled-ddmlib",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Deployer Library", libraryName: "precompiled-deployer",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android DEX library", libraryName: "dexlib2", url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android draw9patch library", libraryName: "precompiled-draw9patch",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android dvlib library", libraryName: "precompiled-dvlib", url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Emulator gRPC API", libraryName: "emulator-proto").apache(),
    new LibraryLicense(name: "Android Flags", libraryName: "precompiled-flags",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Gradle model", attachedTo: "intellij.android.core", version: "0.4-SNAPSHOT",
                       url: "https://android.googlesource.com/platform/tools/build/+/master/gradle-model/").apache(),
    new LibraryLicense(name: "Android Instant Apps SDK API", libraryName: "instantapps-api",
                       version: LibraryLicense.CUSTOM_REVISION).apache(),
    new LibraryLicense(name: "Android Jetifier Core", libraryName: "jetifier-core", url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Jimfs library", libraryName: "jimfs", url: "https://github.com/google/jimfs").apache(),
    new LibraryLicense(name: "Android Layout Api Library", libraryName: "precompiled-layoutlib-api",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Layout Inspector", libraryName: "precompiled-layoutinspector",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Layout Library",
                       libraryName: "org.jetbrains.intellij.deps.android.tools.base:jb-layoutlib-jdk11:27.1.1.0",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Layout Library (Native)", libraryName: "layoutlib_native",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android libwebp library", libraryName: "libwebp.jar",
                       url: "https://github.com/webmproject/libwebp",
                       version: LibraryLicense.CUSTOM_REVISION).apache(),
    new LibraryLicense(name: "Android Lint Api", libraryName: "precompiled-lint-api",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Lint Checks", libraryName: "precompiled-lint-checks",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Lint Model", libraryName: "precompiled-lint-model",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Manifest Merger", libraryName: "precompiled-manifest-merger",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android MLKit Common Library", libraryName: "precompiled-mlkit-common",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android ninepatch Library", libraryName: "precompiled-ninepatch",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Perf-Logger Library", libraryName: "precompiled-perf-logger",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Perflib Library", libraryName: "precompiled-perflib",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Pixelprobe Library", libraryName: "precompiled-pixelprobe",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Profiler", libraryName: "studio-grpc",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Repository", libraryName: "precompiled-repository",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android SDK's DX Tool", libraryName: "com.google.android.tools:dx:1.7",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Sdk Common", libraryName: "precompiled-sdk-common",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Sdk Lib", libraryName: "precompiled-sdklib",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android STracer", libraryName: "precompiled-tracer",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android USB Devices", libraryName: "precompiled-usb-devices",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Wizard Template", libraryName: "precompiled-wizardTemplate.impl",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Wizard Template Plugin", libraryName: "precompiled-wizardTemplate.plugin",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Android Zipflinger", libraryName: "precompiled-zipflinger",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "ANTLR 4 Runtime", libraryName: "antlr4-runtime",
                       url: "http://www.antlr.org", licenseUrl: "http://www.antlr.org/license.html").newBsd(),
    new LibraryLicense(name: "ANTLR 4 Runtime", libraryName: "antlr4-runtime-4.1.jar",
                       url: "http://www.antlr.org", licenseUrl: "http://www.antlr.org/license.html").newBsd(),
    new LibraryLicense(name: "ap-validation", libraryName: "ap-validation",
                       url: "https://github.com/JetBrains/ap-validation").apache(),
    new LibraryLicense(name: "Apache Ant", version: "1.9", libraryName: "Ant", url: "http://ant.apache.org/",
                       licenseUrl: "http://ant.apache.org/license.html").apache(),
    new LibraryLicense(name: "Apache Axis", libraryName: "axis-1.4", version: "1.4", url: "http://ws.apache.org/axis/").apache(),
    new LibraryLicense(name: "Apache Commons BeanUtils", libraryName: "commons-beanutils.jar", version: "1.6",
                       url: "http://commons.apache.org/beanutils/").apache(),
    new LibraryLicense(name: "Apache Commons CLI", libraryName: "commons-cli",
                       url: "http://commons.apache.org/cli/").apache(),
    new LibraryLicense(name: "Apache Commons Codec", libraryName: "commons-codec", url: "http://commons.apache.org/codec/").apache(),
    new LibraryLicense(name: "Apache Commons Collections", libraryName: "commons-collections",
                       url: "https://commons.apache.org/proper/commons-collections/").apache(),
    new LibraryLicense(name: "Apache Commons Compress", libraryName: "commons-compress",
                       url: "http://commons.apache.org/proper/commons-compress/").apache(),
    new LibraryLicense(name: "Apache Commons Discovery", libraryName: "commons-discovery", 
                       url: "http://jakarta.apache.org/commons/discovery/").apache(),
    new LibraryLicense(name: "Apache Commons HTTPClient", libraryName: "http-client-3.1", version: "3.1&nbsp; (with patch by JetBrains)",
                       url: "http://hc.apache.org/httpclient-3.x").apache(),
    new LibraryLicense(name: "Apache Commons Imaging (JetBrains's fork)", libraryName: "commons-imaging",
                       url: "https://github.com/JetBrains/intellij-deps-commons-imaging").apache(),
    new LibraryLicense(name: "Apache Commons IO", libraryName: "commons-io",
                       url: "http://commons.apache.org/io/").apache(),
    new LibraryLicense(name: "Apache Commons Lang", libraryName: "commons-lang",
                       url: "http://commons.apache.org/proper/commons-lang/").apache(),
    new LibraryLicense(name: "Apache Commons Lang", libraryName: "commons-lang3",
                       url: "http://commons.apache.org/proper/commons-lang/").apache(),
    new LibraryLicense(name: "Apache Commons Logging", libraryName: "commons-logging",
                       url: "http://commons.apache.org/logging/").apache(),
    new LibraryLicense(name: "Apache Commons Net", libraryName: "commons-net",
                       url: "http://commons.apache.org/net/").apache(),
    new LibraryLicense(name: "Apache Commons Text", libraryName: "org.apache.commons:commons-text:1.8",
                       url: "https://github.com/apache/commons-text").apache(),
    new LibraryLicense(name: "Apache Ivy", libraryName: "org.apache.ivy", url: "https://github.com/apache/ant-ivy").apache(),
    new LibraryLicense(name: "Apache Lucene",
                       libraryName: "lucene-core-2.4.1.jar", version: "2.4.1", url: "http://lucene.apache.org/java",
                       additionalLibraryNames: [
                         "org.apache.lucene:lucene-suggest:5.0.0",
                         "org.apache.lucene:lucene-codecs:5.0.0",
                         "org.apache.lucene:lucene-highlighter:5.0.0",
                         "org.apache.lucene:lucene-misc:5.0.0",
                         "org.apache.lucene:lucene-queryparser:5.0.0",
                         "org.apache.lucene:lucene-queries:5.0.0",
                         "org.apache.lucene:lucene-analyzers-common:5.0.0",
                         "org.apache.lucene:lucene-core:5.0.0"]).apache(),
    new LibraryLicense(name: "Arrow Annotations", libraryName: "arrow-annotations",
                       url: "https://arrow-kt.io/", licenseUrl: "https://github.com/arrow-kt/arrow-core/blob/master/LICENSE.md").apache(),
    new LibraryLicense(name: "Arrow Core Data", libraryName: "arrow-core-data",
                       url: "https://arrow-kt.io/", licenseUrl: "https://github.com/arrow-kt/arrow-core/blob/master/LICENSE.md").apache(),
    new LibraryLicense(name: "ASM (JetBrains's fork)", libraryName: "ASM",
                       url: "https://github.com/JetBrains/intellij-deps-asm",
                       licenseUrl: "https://github.com/JetBrains/intellij-deps-asm/blob/master/LICENSE.txt",
                       additionalLibraryNames: ["asm-capture"]).newBsd(),
    new LibraryLicense(name: "ASM Tools", libraryName: "asm-tools", url: "http://asm.objectweb.org/",
                       licenseUrl: "http://asm.objectweb.org/license.html",
                       version: LibraryLicense.CUSTOM_REVISION).newBsd(),
    new LibraryLicense(name: "AssertJ fluent assertions", libraryName: "assertJ", 
                       url: "http://joel-costigliola.github.io/assertj/").apache(),
    new LibraryLicense(name: "Automaton", libraryName: "automaton", url: "http://www.brics.dk/automaton/").simplifiedBsd(),
    new LibraryLicense(name: "batik", libraryName: "batik-transcoder", url: "https://xmlgraphics.apache.org/batik/").apache(),
    new LibraryLicense(name: "batik", libraryName: "batik-codec", url: "https://xmlgraphics.apache.org/batik/").apache(),
    new LibraryLicense(name: "blockmap", libraryName: "org.jetbrains.intellij:blockmap:1.0.2",
                       url: "https://bintray.com/jetbrains/intellij-third-party-dependencies/blockmap-library").apache(),
    new LibraryLicense(libraryName: "bouncy-castle-provider", url: "http://bouncycastle.org",
                       licenseUrl: "http://bouncycastle.org/licence.html").mit(),
    new LibraryLicense(name: "BridJ (NativeLibs4Java C/C++ Interop Layer)", libraryName: "com.nativelibs4java:bridj:0.7.0",
                       url: "http://code.google.com/p/bridj/").newBsd(),
    new LibraryLicense(name: "Byte Buddy agent", libraryName: "byte-buddy-agent",
                       url: "https://github.com/raphw/byte-buddy").apache(),
    new LibraryLicense(name: "caffeine", libraryName: "caffeine",
                       url: "https://github.com/ben-manes/caffeine",
                       licenseUrl: "https://github.com/ben-manes/caffeine/blob/master/LICENSE").apache(),
    new LibraryLicense(name: "CGLib", libraryName: "CGLIB", url: "http://cglib.sourceforge.net/").apache(),
    new LibraryLicense(name: "classgraph", libraryName: "classgraph",
                       url: "https://github.com/classgraph/classgraph",
                       licenseUrl: "https://github.com/codehaus/classworlds/blob/master/classworlds/LICENSE.txt").mit(),
    new LibraryLicense(name: "classworlds", libraryName: "Maven", transitiveDependency: true, version: "1.1", license: "codehaus",
                       url: "https://github.com/codehaus/classworlds",
                       licenseUrl: "https://github.com/codehaus/classworlds/blob/master/classworlds/LICENSE.txt"),
    new LibraryLicense(name: "Common Annotations for the JavaTM Platform API", libraryName: "javax.annotation-api",
                       url: "https://github.com/javaee/javax.annotation",
                       license: "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl: "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    // for compose-compiler-hosted module library in intellij.android.compose-ide-plugin
    new LibraryLicense(name: "Compose Compiler Hosted", libraryName: "compose-compiler-hosted").apache(),
    // For ADB wireless QR Code generation
    new LibraryLicense(name: "Core barcode encoding/decoding library", libraryName: "zxing-core").apache(),
    new LibraryLicense(name: "coverage-report", libraryName: "coverage-report",
                       url: "https://github.com/JetBrains/coverage-report").apache(),
    new LibraryLicense(name: "coverage.py", attachedTo: "intellij.python.helpers", version: "3.7.1",
                       url: "http://coverage.readthedocs.org/").apache(),
    new LibraryLicense(name: "Cucumber-Core", libraryName: "cucumber-core-1.2", url: "https://github.com/cucumber/cucumber-jvm/").mit(),
    new LibraryLicense(name: "Cucumber-Expressions", libraryName: "cucumber-expressions", 
                       url: "https://github.com/cucumber/cucumber/").mit(),
    new LibraryLicense(name: "Cucumber-Groovy", libraryName: "cucumber-groovy", url: "https://github.com/cucumber/cucumber-jvm/").mit(),
    new LibraryLicense(name: "Cucumber-Java", libraryName: "cucumber-java", url: "https://github.com/cucumber/cucumber-jvm/").mit(),
    new LibraryLicense(name: "Dart Analysis Server", attachedTo: "intellij.dart",
                       url: "https://github.com/dart-lang/eclipse3", version: LibraryLicense.CUSTOM_REVISION).eplV1(),
    new LibraryLicense(name: "Dart VM Service drivers", attachedTo: "intellij.dart",
                       licenseUrl: "https://github.com/dart-lang/vm_service_drivers/blob/master/LICENSE",
                       url: "https://github.com/dart-lang/vm_service_drivers",
                       version: LibraryLicense.CUSTOM_REVISION).newBsd(),
    new LibraryLicense(name: "dbus-java", libraryName: "dbus-java", license: "LGPL",
                       url: "https://mvnrepository.com/artifact/com.github.hypfvieh/dbus-java"),
    new LibraryLicense(name: "DecentXML", libraryName: "decentxml",
                       license: "New BSD License", licenseUrl: "http://www.opensource.org/licenses/bsd-license.php",
                       url: "https://code.google.com/p/decentxml"),
    new LibraryLicense(name: "directory-watcher", libraryName: "directory-watcher",
                       url: "https://github.com/gmethvin/directory-watcher/").apache(),
    new LibraryLicense(name: "docutils", attachedTo: "intellij.python.helpers", version: "0.8", license: "BSD",
                       url: "http://docutils.sourceforge.net/"),
    new LibraryLicense(libraryName: "DTDParser", version: "1.13", license: "LGPL", url: "http://sourceforge.net/projects/dtdparser/",
                       licenseUrl: "http://www.opensource.org/licenses/lgpl-2.1"),
    new LibraryLicense(name: "Eclipse JDT Core", attachedTo: "intellij.platform.jps.build", version: "4.2.1", license: "CPL 1.0",
                       url: "http://www.eclipse.org/jdt/core/index.php"),
    new LibraryLicense(name: "Eclipse Layout Kernel", libraryName: "eclipse-layout-kernel").eplV1(),
    new LibraryLicense(name: "EditorConfig Java Core", libraryName: "editorconfig-core-java.jar", version: "1.0",
                       url: "https://github.com/editorconfig/editorconfig-core-java/",
                       licenseUrl: "https://github.com/editorconfig/editorconfig-core-java/blob/master/LICENSE").apache(),
    new LibraryLicense(name: "emoji-java", libraryName: "com.vdurmont:emoji-java:5.1.1",
                       url: "https://github.com/vdurmont/emoji-java").mit(),
    new LibraryLicense(name: "entities",
                       url: "https://github.com/fb55/entities", attachedTo: "intellij.vuejs",
                       licenseUrl: "https://github.com/fb55/entities/blob/master/LICENSE",
                       version: LibraryLicense.CUSTOM_REVISION).simplifiedBsd(),
    new LibraryLicense(name: "epydoc", attachedTo: "intellij.python.helpers", version: "3.0.1",
                       url: "http://epydoc.sourceforge.net/").mit(),
    new LibraryLicense(name: "error-prone-annotations", libraryName: "error-prone-annotations",
                       url: "https://github.com/google/error-prone",
                       licenseUrl: "https://github.com/google/error-prone/blob/master/COPYING").apache(),
    new LibraryLicense(name: "fastutil", libraryName: "fastutil-min",
                       url: "https://github.com/vigna/fastutil", licenseUrl: "https://github.com/vigna/fastutil/blob/master/LICENSE-2.0").apache(),
    new LibraryLicense(name: "FiraCode", attachedTo: "intellij.platform.resources", version: "1.206", license: "OFL",
                       url: "https://github.com/tonsky/FiraCode/blob/master/LICENSE"),
    // for flatbuffers-java module library in android.sdktools.mlkit-common
    new LibraryLicense(name: "FlatBuffers Java API", libraryName: "flatbuffers-java",
                       url: "https://google.github.io/flatbuffers/").apache(),
    new LibraryLicense(name: "FreeMarker", attachedTo: "intellij.java.coverage", version: "2.3.30",
                       url: "https://freemarker.apache.org", licenseUrl: "https://freemarker.apache.org/docs/app_license.html").apache(),
    new LibraryLicense(name: "Gant", libraryName: "gant-groovy",
                       url: "https://github.com/codehaus/gant", licenseUrl: "https://github.com/codehaus/gant/blob/master/LICENCE.txt").apache(),
    new LibraryLicense(name: "gauge-java", libraryName: "com.thoughtworks.gauge:gauge-java:0.7.3",
                       licenseUrl: "https://raw.githubusercontent.com/getgauge/gauge-java/master/LICENSE.txt").apache(),
    new LibraryLicense(name: "Gherkin", libraryName: "gherkin",
                       licenseUrl: "https://github.com/cucumber/cucumber/blob/master/gherkin/LICENSE",
                       url: "https://github.com/cucumber/cucumber/tree/master/gherkin").mit(),
    new LibraryLicense(name: "Gherkin keywords", attachedTo: "intellij.gherkin", version: "2.12.2",
                       licenseUrl: "https://github.com/cucumber/cucumber/blob/master/gherkin/LICENSE",
                       url: "https://github.com/cucumber/cucumber/tree/master/gherkin").mit(),
    new LibraryLicense(name: "Google Auto Common Utilities", libraryName: "auto-common",
                       url: "https://github.com/google/auto/tree/master/common").apache(),
    new LibraryLicense(libraryName: "Gradle", url: "http://gradle.org/", licenseUrl: "http://gradle.org/license").apache(),
    new LibraryLicense(name: "Grazie Language Detector", libraryName: "tanvd.grazi:grazi-language-detector:0.1.13").apache(),
    new LibraryLicense(name: "Grazie SpellChecker", libraryName: "com.intellij.grazie:grazie-spellchecker:0.1.9").apache(),
    new LibraryLicense(name: "Groovy", libraryName: "org.codehaus.groovy:groovy", url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy Ant", libraryName: "org.codehaus.groovy:groovy-ant", url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy CLI Commons", libraryName: "org.codehaus.groovy:groovy-cli-commons",
                       url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy JSON", libraryName: "org.codehaus.groovy:groovy-json", url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy JSR-223", libraryName: "org.codehaus.groovy:groovy-jsr223", url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy NIO", libraryName: "org.codehaus.groovy:groovy-nio", url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy Templates", libraryName: "org.codehaus.groovy:groovy-templates",
                       url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "Groovy XML", libraryName: "org.codehaus.groovy:groovy-xml",
                       url: "https://groovy-lang.org/").apache(),
    new LibraryLicense(name: "gRPC Kotlin: Stub", libraryName: "grpc-kotlin-stub", url: "https://grpc.io/").apache(),
    new LibraryLicense(name: "gRPC: Core", libraryName: "grpc-core", url: "https://grpc.io/").apache(),
    new LibraryLicense(name: "gRPC: Netty Shaded", libraryName: "grpc-netty-shaded", url: "https://grpc.io/").apache(),
    new LibraryLicense(name: "gRPC: Protobuf", libraryName: "grpc-protobuf", url: "https://grpc.io/").apache(),
    new LibraryLicense(name: "gRPC: Stub", libraryName: "grpc-stub", url: "https://grpc.io/").apache(),
    new LibraryLicense(name: "Gson", libraryName: "gson", url: "http://code.google.com/p/google-gson/").apache(),
    new LibraryLicense(libraryName: "Guava", url: "http://code.google.com/p/guava-libraries/",
                       licenseUrl: "http://ant.apache.org/license.html").apache(),
    new LibraryLicense(name: "Hamcrest", libraryName: "hamcrest", url: "http://hamcrest.org/").newBsd(),
    new LibraryLicense(name: "HDR Histogram", libraryName: "HdrHistogram", license: "CC0 1.0 Universal",
                       licenseUrl: "https://creativecommons.org/publicdomain/zero/1.0/"),
    new LibraryLicense(name: "hppc", libraryName: "com.carrotsearch:hppc:0.8.1").apache(),
    new LibraryLicense(name: "htmlparser2",
                       url: "https://github.com/fb55/htmlparser2", attachedTo: "intellij.vuejs",
                       licenseUrl: "https://github.com/fb55/htmlparser2/blob/master/LICENSE",
                       version: LibraryLicense.CUSTOM_REVISION).mit(),
    new LibraryLicense(name: "HttpComponents HttpClient", libraryName: "http-client",
                       url: "http://hc.apache.org/httpcomponents-client-ga/index.html").apache(),
    new LibraryLicense(name: "HttpComponents HttpClient Fluent API", libraryName: "fluent-hc",
                       url: "http://hc.apache.org/httpcomponents-client-ga/index.html").apache(),
    new LibraryLicense(name: "Hunspell", libraryName: "com.gitlab.dumonts:hunspell:1.1.1", 
                       url: "https://gitlab.com/dumonts/hunspell-java").apache(),
    new LibraryLicense(name: "ICU4J", libraryName: "icu4j", license: "Unicode",
                       url: "http://site.icu-project.org/", licenseUrl: "http://www.unicode.org/copyright.html"),
    new LibraryLicense(name: "imgscalr", libraryName: "imgscalr", url: "https://github.com/thebuzzmedia/imgscalr").apache(),
    new LibraryLicense(name: "Inconsolata", attachedTo: "intellij.platform.resources", version: "001.010", license: "OFL",
                       url: "https://github.com/google/fonts/blob/master/ofl/inconsolata/OFL.txt"),
    new LibraryLicense(name: "Incremental DOM", attachedTo: "intellij.markdown", version: "0.7.0",
                       url: "https://github.com/google/incremental-dom/blob/master/LICENSE").apache(),
    new LibraryLicense(name: "indriya", libraryName: "tech.units:indriya:1.3",
                       url: "https://github.com/unitsofmeasurement/indriya",
                       licenseUrl: "https://github.com/unitsofmeasurement/indriya/blob/master/LICENSE").newBsd(),
    new LibraryLicense(name: "ini4j (JetBrains's fork)", libraryName: "ini4j",
                       url: "https://github.com/JetBrains/intellij-deps-ini4j").apache(),
    new LibraryLicense(name: "Instant run protos", libraryName: "deploy_java_proto",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Instant run version", libraryName: "libjava_version",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "ISO RELAX", libraryName: "isorelax", url: "http://sourceforge.net/projects/iso-relax/").mit(),
    new LibraryLicense(name: "Jackson", libraryName: "jackson", url: "https://github.com/FasterXML/jackson").apache(),
    new LibraryLicense(name: "Jackson Databind", libraryName: "jackson-databind",
                       url: "https://github.com/FasterXML/jackson-databind").apache(),
    new LibraryLicense(name: "Jackson Datatype Joda",
                       libraryName: "jackson-datatype-joda",
                       url: "https://github.com/FasterXML/jackson-datatype-joda").apache(),
    new LibraryLicense(name: "Jackson Module Kotlin", libraryName: "jackson-module-kotlin",
                       url: "https://github.com/FasterXML/jackson-module-kotlin").apache(),
    new LibraryLicense(name: "Jakarta ORO", libraryName: "OroMatcher",
                       url: "http://jakarta.apache.org/oro/", licenseUrl: "http://svn.apache.org/repos/asf/jakarta/oro/trunk/LICENSE").apache(),
    new LibraryLicense(libraryName: "Java Compatibility", license: "GPL 2.0 + Classpath",
                       url: "https://github.com/JetBrains/intellij-deps-java-compatibility",
                       licenseUrl: "https://raw.githubusercontent.com/JetBrains/intellij-deps-java-compatibility/master/LICENSE"),
    new LibraryLicense(name: "Java Poet", libraryName: "javapoet",
                       url: "https://github.com/square/javapoet").apache(),
    new LibraryLicense(name: "Java String Similarity", libraryName: "info.debatty:java-string-similarity:1.2.1",
                       licenseUrl: "https://github.com/tdebatty/java-string-similarity/blob/master/LICENSE.md",
                       url: "https://github.com/tdebatty/java-string-similarity").mit(),
    new LibraryLicense(name: "JavaBeans Activation Framework", libraryName: "javax.activation",
                       url: "https://github.com/javaee/activation",
                       license: "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl: "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    new LibraryLicense(name: "javawriter", attachedTo: "intellij.android.core",
                       url: "https://github.com/square/javawriter",
                       version: LibraryLicense.CUSTOM_REVISION).apache(),
    new LibraryLicense(name: "javax inject", libraryName: "javax-inject",
                       url: "http://code.google.com/p/atinject/").apache(),
    new LibraryLicense(name: "JAXB (Java Architecture for XML Binding) API", libraryName: "jaxb-api",
                       url: "https://github.com/javaee/jaxb-spec",
                       license: "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl: "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    new LibraryLicense(name: "JAXB (JSR 222) Reference Implementation", libraryName: "jaxb-runtime",
                       url: "https://github.com/javaee/jaxb-v2",
                       license: "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl: "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    new LibraryLicense(libraryName: "Jaxen", license: "modified Apache", url: "https://github.com/jaxen-xpath/jaxen",
                       licenseUrl: "https://github.com/jaxen-xpath/jaxen/blob/master/LICENSE.txt"),
    new LibraryLicense(name: "Jayway JsonPath", libraryName: "jsonpath",
                       url: "https://github.com/json-path/JsonPath",
                       licenseUrl: "https://github.com/json-path/JsonPath/blob/master/LICENSE").apache(),
    new LibraryLicense(libraryName: "jb-jdi", license: "GPL 2.0 + Classpath", url: "https://github.com/JetBrains/intellij-deps-jdi",
                       licenseUrl: "https://raw.githubusercontent.com/JetBrains/intellij-deps-jdi/master/LICENSE.txt"),
    new LibraryLicense(name: "JCEF", libraryName: "jcef", license: "Permissive",
                       licenseUrl: "https://bitbucket.org/chromiumembedded/java-cef/src/master/LICENSE.txt",
                       url: "https://bitbucket.org/chromiumembedded/java-cef"),
    new LibraryLicense(name: "JCIP Annotations", libraryName: "jcip", license: "Creative Commons Attribution License",
                       url: "http://www.jcip.net", licenseUrl: "http://creativecommons.org/licenses/by/2.5"),
    new LibraryLicense(name: "JCodings", libraryName: "joni", transitiveDependency: true, version: "1.0.44",
                       url: "https://github.com/jruby/jcodings", licenseUrl: "https://github.com/jruby/jcodings/blob/master/pom.xml").mit(),
    new LibraryLicense(name: "JDOM (JetBrains's fork)", libraryName: "JDOM", license: "modified Apache",
                       url: "https://github.com/JetBrains/intellij-deps-jdom",
                       licenseUrl: "https://github.com/JetBrains/intellij-deps-jdom/blob/master/LICENSE.txt"),
    new LibraryLicense(name: "JediTerm", libraryName: "jediterm-pty", license: "LGPL 3",
                       url: "https://github.com/JetBrains/jediterm",
                       licenseUrl: "https://github.com/JetBrains/jediterm/blob/master/LICENSE-LGPLv3.txt"),
    new LibraryLicense(name: "JetBrains Annotations", libraryName: "jetbrains-annotations",
                       url: "https://github.com/JetBrains/java-annotations").apache(),
    new LibraryLicense(name: "JetBrains Annotations for Java 5", libraryName: "jetbrains-annotations-java5",
                       url: "https://github.com/JetBrains/java-annotations").apache(),
    new LibraryLicense(name: "jetCheck", libraryName: "jetCheck", url: "https://github.com/JetBrains/jetCheck").apache(),
    new LibraryLicense(name: "JGit", libraryName: "jgit", version: "4.0", license: "Eclipse Distribution License 1.0",
                       licenseUrl: "http://www.eclipse.org/org/documents/edl-v10.php", url: "https://eclipse.org/jgit/"),
    new LibraryLicense(name: "JGoodies Common", libraryName: "jgoodies-common", 
                       url: "http://www.jgoodies.com/freeware/libraries/looks/").simplifiedBsd(),
    new LibraryLicense(name: "JGoodies Forms", libraryName: "jgoodies-forms",
                       url: "http://www.jgoodies.com/freeware/libraries/forms/").simplifiedBsd(),
    new LibraryLicense(name: "JNA (JetBrains's fork)", libraryName: "jna", license: "LGPL 2.1",
                       url: "https://github.com/JetBrains/intellij-deps-jna",
                       licenseUrl: "http://www.opensource.org/licenses/lgpl-2.1.php"),
    new LibraryLicense(name: "Joni", libraryName: "joni",
                       url: "https://github.com/jruby/joni", licenseUrl: "https://github.com/jruby/joni/blob/master/LICENSE").mit(),
    new LibraryLicense(name: "jps-javac-extension", libraryName: "jps-javac-extension",
                       url: "https://github.com/JetBrains/jps-javac-extension/",
                       licenseUrl: "https://github.com/JetBrains/jps-javac-extension/blob/master/LICENSE.txt").apache(),
    new LibraryLicense(name: "JSch", libraryName: "JSch", url: "http://www.jcraft.com/jsch/",
                       licenseUrl: "http://www.jcraft.com/jsch/LICENSE.txt").newBsd(),
    new LibraryLicense(name: "jsch-agent-proxy", libraryName: "jsch-agent-proxy",
                       url: "https://github.com/ymnk/jsch-agent-proxy",
                       licenseUrl: "https://github.com/ymnk/jsch-agent-proxy/blob/master/LICENSE.txt").newBsd(),
    new LibraryLicense(name: "jsch-agent-proxy-jsch", libraryName: "jsch-agent-proxy-jsch",
                       url: "https://github.com/ymnk/jsch-agent-proxy",
                       licenseUrl: "https://github.com/ymnk/jsch-agent-proxy/blob/master/LICENSE.txt").newBsd(),
    new LibraryLicense(name: "JSON", libraryName: "json.jar", license: "JSON License", licenseUrl: "http://www.json.org/license.html",
                       url: "http://www.json.org/", version: LibraryLicense.CUSTOM_REVISION),
    new LibraryLicense(name: "JSON in Java", libraryName: "org.json:json:20170516", license: "JSON License",
                       licenseUrl: "http://www.json.org/license.html", url: "https://github.com/stleary/JSON-java"),
    new LibraryLicense(name: "JSON Schema (schema.json)", attachedTo: "intellij.json", version: "draft-04",
                       url: "http://json-schema.org/draft-04/schema#").simplifiedBsd(),
    new LibraryLicense(name: "JSON Schema (schema06.json)", attachedTo: "intellij.json", version: "draft-06",
                       url: "http://json-schema.org/draft-06/schema#").simplifiedBsd(),
    new LibraryLicense(name: "JSON Schema (schema07.json)", attachedTo: "intellij.json", version: "draft-07",
                       url: "http://json-schema.org/draft-07/schema#").simplifiedBsd(),
    new LibraryLicense(name: "jsoup", libraryName: "jsoup", url: "http://jsoup.org", licenseUrl: "http://jsoup.org/license").mit(),
    new LibraryLicense(name: "jsr305", libraryName: "jsr305", url: "http://code.google.com/p/jsr-305/",
                       licenseUrl: "http://code.google.com/p/jsr-305/source/browse/trunk/ri/LICENSE").newBsd(),
    new LibraryLicense(name: "JUnit", libraryName: "JUnit3", license: "CPL 1.0", url: "http://junit.org/"),
    new LibraryLicense(name: "JUnit", libraryName: "JUnit4", license: "CPL 1.0", url: "http://junit.org/"),
    new LibraryLicense(name: "Juniversalchardet", libraryName: "juniversalchardet",
                       url: "https://code.google.com/archive/p/juniversalchardet",
                       license: "MPL 1.1", licenseUrl: "http://www.mozilla.org/MPL/MPL-1.1.html"),
    new LibraryLicense(name: "jzlib", libraryName: "jzlib", url: "http://www.jcraft.com/jzlib/",
                       licenseUrl: "http://www.jcraft.com/jzlib/LICENSE.txt").newBsd(),
    new LibraryLicense(name: "Kotlin Gradle Plugin Model", libraryName: "kotlin-gradle-plugin-model").apache(),
    new LibraryLicense(name: "Kotlin multiplatform / multi-format serialization",
                       libraryName: "kotlinx-serialization-core",
                       url: "https://github.com/Kotlin/kotlinx.serialization").apache(),
    new LibraryLicense(name: "Kotlin multiplatform / multi-format serialization",
                       libraryName: "kotlinx-serialization-json",
                       url: "https://github.com/Kotlin/kotlinx.serialization").apache(),
    new LibraryLicense(name: "Kotlin multiplatform / multi-format serialization",
                       libraryName: "kotlinx-serialization-protobuf",
                       url: "https://github.com/Kotlin/kotlinx.serialization").apache(),
    new LibraryLicense(name: "kotlinx.html", libraryName: "org.jetbrains.kotlinx:kotlinx-html-jvm:0.6.11",
                       licenseUrl: "https://github.com/Kotlin/kotlinx.html/blob/master/LICENSE",
                       url: "https://github.com/Kotlin/kotlinx.html").apache(),
    new LibraryLicense(name: "Kryo", libraryName: "Kryo",
                       url: "https://github.com/EsotericSoftware/kryo",
                       licenseUrl: "https://github.com/EsotericSoftware/kryo/blob/master/LICENSE.md").newBsd(),
    new LibraryLicense(name: "ktor-client-apache",
                       libraryName: "space-ktor-client-apache",
                       url: "https://github.com/ktorio/ktor").apache(),
    new LibraryLicense(name: "ktor-server-netty",
                       libraryName: "space-ktor-server-netty",
                       url: "https://github.com/ktorio/ktor").apache(),
    new LibraryLicense(name: "ktor-websockets",
                       libraryName: "ktor-websockets",
                       url: "https://github.com/ktorio/ktor").apache(),
    new LibraryLicense(name: "kXML2", libraryName: "kxml2", license: "BSD", url: "http://sourceforge.net/projects/kxml/"),
    new LibraryLicense(name: "Language Tool", libraryName: "org.languagetool:languagetool-core:5.2",
                       license: "LGPL 2.1",
                       licenseUrl: "http://www.gnu.org/licenses/lgpl-2.1.txt"),
    new LibraryLicense(name: "Language Tool (English)", libraryName: "org.languagetool:language-en:5.2",
                       license: "LGPL 2.1",
                       licenseUrl: "http://www.gnu.org/licenses/lgpl-2.1.txt"),
    new LibraryLicense(name: "Layout Inspector Protos", libraryName: "layoutinspector-proto",
                       url: "http://source.android.com/").apache(),
    new LibraryLicense(name: "Log4j", libraryName: "Log4J",
                       url: "http://logging.apache.org/log4j/1.2/index.html").apache(),
    new LibraryLicense(name: "lz4-java", libraryName: "lz4-java",
                       url: "https://github.com/lz4/lz4-java", licenseUrl: "https://github.com/lz4/lz4-java/blob/master/LICENSE.txt").apache(),
    new LibraryLicense(name: "markdown4j", libraryName: "markdown4j", url: "https://code.google.com/p/markdown4j/").newBsd(),
    new LibraryLicense(name: "MarkdownJ", libraryName: "markdownj", version: "0.4.2", url: "https://github.com/myabc/markdownj").newBsd(),
    new LibraryLicense(name: "MathJax", attachedTo: "intellij.python", version: "2.6.1",
                       url: "git://github.com/mathjax/MathJax", licenseUrl: "https://github.com/mathjax/MathJax/blob/master/LICENSE").apache(),
    new LibraryLicense(libraryName: "Maven", version: "2.2.1", url: "http://maven.apache.org/").apache(),
    new LibraryLicense(name: "maven-2.2.1-uber", version: "2.2.1", libraryName: "maven-2.2.1-uber.jar",
                       url: "http://maven.apache.org/").apache(),
    new LibraryLicense(name: "Maven Model", libraryName: "maven-model", url: "http://maven.apache.org/").apache(),
    new LibraryLicense(name: "Maven Resolver Provider",
                       url: "http://maven.apache.org/ref/3.6.1/maven-resolver-provider/", libraryName: "maven-resolver-provider",
                       additionalLibraryNames: ["org.apache.maven.resolver:maven-resolver-connector-basic",
                                                "org.apache.maven.resolver:maven-resolver-transport-http",
                                                "org.apache.maven.resolver:maven-resolver-transport-file"]).apache(),
    new LibraryLicense(name: "Maven3", attachedTo: "intellij.maven.server.m3.common",
                       additionalLibraryNames: ["org.apache.maven.shared:maven-dependency-tree:1.2", "org.apache.maven.archetype:archetype-common:2.2"],
                       version: "3.6.1", url: "http://maven.apache.org/").apache(),
    new LibraryLicense(name: "Memory File System", libraryName: "memoryfilesystem", 
                       url: "https://github.com/marschall/memoryfilesystem").mit(),
    new LibraryLicense(name: "mercurial_prompthooks", attachedTo: "intellij.vcs.hg", version: LibraryLicense.CUSTOM_REVISION,
                       license: "GPLv2 (used as hg extension called from hg executable)",
                       url: "https://github.com/willemv/mercurial_prompthooks",
                       licenseUrl: "https://github.com/willemv/mercurial_prompthooks/blob/master/LICENSE.txt"),
    new LibraryLicense(name: "Microba", libraryName: "microba", version: "0.4.2", url: "http://microba.sourceforge.net/",
                       licenseUrl: "http://microba.sourceforge.net/license.txt").newBsd(),
    new LibraryLicense(name: "MigLayout", libraryName: "miglayout-swing",
                       url: "http://www.miglayout.com/", licenseUrl: "http://www.miglayout.com/mavensite/license.html").newBsd(),
    new LibraryLicense(name: "minlog", libraryName: "Kryo", transitiveDependency: true, version: "1.2",
                       url: "https://github.com/EsotericSoftware/minlog").newBsd(),
    new LibraryLicense(name: "morfologik-fsa", libraryName: "org.carrot2:morfologik-fsa:2.1.7",
                       url: "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    new LibraryLicense(name: "morfologik-fsa-builders", libraryName: "org.carrot2:morfologik-fsa-builders:2.1.7",
                       url: "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    new LibraryLicense(name: "morfologik-speller", libraryName: "org.carrot2:morfologik-speller:2.1.7",
                       url: "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    new LibraryLicense(name: "morfologik-stemming", libraryName: "org.carrot2:morfologik-stemming:2.1.7",
                       url: "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    new LibraryLicense(name: "Moshi", libraryName: "moshi", url: "https://github.com/square/moshi").apache(),
    new LibraryLicense(libraryName: "NanoXML", license: "zlib/libpng",
                       url: "http://mvnrepository.com/artifact/be.cyberelf.nanoxml/nanoxml/2.2.3",
                       licenseUrl: "http://www.opensource.org/licenses/zlib-license.html"),
    new LibraryLicense(name: "nekohtml", libraryName: "nekohtml",
                       url: "http://nekohtml.sourceforge.net/").apache(),
    new LibraryLicense(name: "net.loomchild.segment", libraryName: "net.loomchild:segment:2.0.1",
                       url: "https://github.com/loomchild/segment",
                       licenseUrl: "https://github.com/loomchild/segment/blob/master/LICENSE.txt").mit(),
    new LibraryLicense(name: "netty-buffer", libraryName: "netty-buffer", url: "http://netty.io").apache(),
    new LibraryLicense(name: "netty-codec-http", libraryName: "netty-codec-http", url: "http://netty.io").apache(),
    new LibraryLicense(name: "netty-handler-proxy", libraryName: "netty-handler-proxy", url: "http://netty.io").apache(),
    new LibraryLicense(libraryName: "ngram-slp", url: "https://github.com/SLP-team/SLP-Core",
                       licenseUrl: "https://github.com/SLP-team/SLP-Core/blob/master/LICENSE").mit(),
    new LibraryLicense(name: "Objenesis", libraryName: "Objenesis", url: "http://objenesis.org/").apache(),
    new LibraryLicense(name: "Okio", libraryName: "okio", url: "https://github.com/square/okio").apache(),
    new LibraryLicense(name: "OWASP Java HTML Sanitizer", libraryName: "owasp-java-html-sanitizer",
                       url: "https://github.com/OWASP/java-html-sanitizer/",
                       licenseUrl: "https://github.com/OWASP/java-html-sanitizer/blob/master/COPYING").apache(),
    new LibraryLicense(name: "PEPK", libraryName: "pepk", url: "http://source.android.com/",
                       version: LibraryLicense.CUSTOM_REVISION).apache(),
    new LibraryLicense(name: "Perfetto protos", libraryName: "perfetto-proto").apache(),
    new LibraryLicense(name: "plexus-archiver", libraryName: "plexus-archiver",
                       url: "https://github.com/codehaus-plexus/plexus-archiver").apache(),
    new LibraryLicense(name: "plexus-classworlds", attachedTo: "intellij.maven.server.m30.impl", version: "2.4",
                       url: "https://github.com/codehaus-plexus/plexus-classworlds").apache(),
    new LibraryLicense(name: "Plexus Utils", libraryName: "plexus-utils",
                       url: "http://plexus.codehaus.org/plexus-utils").apache(),
    new LibraryLicense(name: "pockets", attachedTo: "intellij.python.helpers", version: "0.3.2",
                       url: "http://pockets.readthedocs.org/").newBsd(),
    new LibraryLicense(name: "Protocol Buffers", libraryName: "protobuf", url: "https://developers.google.com/protocol-buffers",
                       licenseUrl: "https://github.com/google/protobuf/blob/master/LICENSE").newBsd(),
    new LibraryLicense(name: "Protocol Buffers", libraryName: "protobuf-java6", url: "https://developers.google.com/protocol-buffers",
                       licenseUrl: "https://github.com/protocolbuffers/protobuf/blob/v3.5.1/LICENSE").newBsd(),
    new LibraryLicense(name: "Proxy Vole (JetBrains's fork)", libraryName: "proxy-vole",
                       url: "https://github.com/JetBrains/intellij-deps-proxy-vole",
                       licenseUrl: "https://github.com/MarkusBernhardt/proxy-vole/blob/master/LICENSE.md").apache(),
    new LibraryLicense(name: "pty4j", libraryName: "pty4j",
                       url: "https://github.com/JetBrains/pty4j").eplV1(),
    new LibraryLicense(name: "PureJavaComm", libraryName: "pty4j", transitiveDependency: true, version: "0.0.11.1",
                       url: "https://github.com/nyholku/purejavacomm",
                       licenseUrl: "https://github.com/nyholku/purejavacomm/blob/master/LICENSE.txt").newBsd(),
    new LibraryLicense(name: "pycodestyle.py", attachedTo: "intellij.python.helpers", version: "2.3.1",
                       url: "http://pycodestyle.readthedocs.io/").mit(),
    new LibraryLicense(name: "qdox-java-parser", libraryName: "qdox-java-parser",
                       url: "https://github.com/paul-hammant/qdox").apache(),
    new LibraryLicense(name: "R8 DEX shrinker", libraryName: "r8").newBsd(),
    new LibraryLicense(name: "Relax NG Object Model", libraryName: "rngom-20051226-patched.jar",
                       url: "https://github.com/kohsuke/rngom", version: LibraryLicense.CUSTOM_REVISION).mit(),
    new LibraryLicense(name: "Rhino JavaScript Engine", libraryName: "rhino", license: "MPL 1.1",
                       url: "http://www.mozilla.org/rhino/", licenseUrl: "http://www.mozilla.org/MPL/MPL-1.1.html"),
    new LibraryLicense(libraryName: "RMI Stubs",
                       url: "https://confluence.jetbrains.com/display/CONTEST/XSLT-Debugger",
                       version: LibraryLicense.CUSTOM_REVISION).apache(),
    new LibraryLicense(libraryName: "roaringBitmap", url: "https://github.com/RoaringBitmap/RoaringBitmap",
                       licenseUrl: "https://github.com/RoaringBitmap/RoaringBitmap/blob/master/LICENSE").apache(),
    new LibraryLicense(name: "Roboto", attachedTo: "intellij.platform.resources", version: "1.100141",
                       url: "https://github.com/google/roboto/blob/master/LICENSE").apache(),
    new LibraryLicense(libraryName: "sa-jdwp", license: "GPL 2.0 + Classpath", url: "https://github.com/JetBrains/jdk-sa-jdwp",
                       licenseUrl: "https://raw.githubusercontent.com/JetBrains/jdk-sa-jdwp/master/LICENSE.txt"),
    new LibraryLicense(libraryName: "Saxon-6.5.5", version: "6.5.5", license: "Mozilla Public License",
                       url: "http://saxon.sourceforge.net/",
                       licenseUrl: "http://www.mozilla.org/MPL/"),
    new LibraryLicense(libraryName: "Saxon-9HE", version: "9", license: "Mozilla Public License", url: "http://saxon.sourceforge.net/",
                       licenseUrl: "http://www.mozilla.org/MPL/"),
    new LibraryLicense(name: "six.py", attachedTo: "intellij.python.helpers", version: "1.9.0",
                       url: "http://pythonhosted.org/six/").mit(),
    new LibraryLicense(libraryName: "Slf4j", url: "http://slf4j.org/", licenseUrl: "http://slf4j.org/license.html").mit(),
    new LibraryLicense(name: "SnakeYAML", libraryName: "snakeyaml",
                       url: "https://bitbucket.org/asomov/snakeyaml").apache(),
    new LibraryLicense(name: "snakeyaml-engine", libraryName: "snakeyaml-engine",
                       url: "https://bitbucket.org/asomov/snakeyaml-engine/src").apache(),
    new LibraryLicense(name: "Sonatype Nexus: Indexer", attachedTo: "intellij.maven.server.m3.common", version: "3.0.4",
                       additionalLibraryNames: ["org.sonatype.nexus:nexus-indexer:3.0.4", "org.sonatype.nexus:nexus-indexer-artifact:1.0.1"],
                       url: "http://nexus.sonatype.org/").eplV1(),
    new LibraryLicense(name: "Sonatype Nexus: Indexer", libraryName: "nexus-indexer-1.2.3.jar", version: "1.2.3",
                       url: "http://nexus.sonatype.org/").eplV1(),
    new LibraryLicense(name: "SourceCodePro", attachedTo: "intellij.platform.resources", version: "2.010", license: "OFL",
                       url: "https://github.com/adobe-fonts/source-code-pro",
                       licenseUrl: "https://github.com/adobe-fonts/source-code-pro/blob/master/LICENSE.md"),
    new LibraryLicense(name: "Spantable", libraryName: "spantable.jar", version: "patched", license: "LGPL 2.1",
                       licenseUrl: "http://www.gnu.org/licenses/lgpl.html",
                       url: "https://android.googlesource.com/platform/prebuilts/tools/+/master/common/spantable/"),
    new LibraryLicense(name: "sphinxcontrib-napoleon", attachedTo: "intellij.python.helpers", version: "0.3.11",
                       url: "http://sphinxcontrib-napoleon.readthedocs.org/").simplifiedBsd(),
    new LibraryLicense(name: "SQLite Inspector Proto", libraryName: "sqlite-inspector-proto").apache(),
    new LibraryLicense(name: "ssh-nio-fs", libraryName: "ssh-nio-fs",
                       url: "https://github.com/JetBrains/intellij-deps-ssh-nio-fs",
                       licenseUrl: "https://github.com/JetBrains/intellij-deps-ssh-nio-fs/blob/master/LICENSE").mit(),
    new LibraryLicense(name: "StreamEx", libraryName: "StreamEx",
                       url: "https://github.com/amaembo/streamex").apache(),
    new LibraryLicense(name: "Studio Protobuf", libraryName: "studio-proto", license: "protobuf",
                       licenseUrl: "https://github.com/protocolbuffers/protobuf/blob/master/LICENSE"),
    new LibraryLicense(name: "swingx", libraryName: "swingx", license: "LGPL 2.1",
                       url: "http://java.net/downloads/swingx/", licenseUrl: "http://www.opensource.org/licenses/lgpl-2.1.php"),
    // for tensorflow-lite-metadata module library in android.sdktools.mlkit-common
    new LibraryLicense(name: "TensorFlow Lite Metadata Library", libraryName: "tensorflow-lite-metadata",
                       url: "https://tensorflow.org/lite").apache(),
    new LibraryLicense(libraryName: "TestNG", url: "http://testng.org/doc/",
                       licenseUrl: "https://github.com/cbeust/testng/blob/master/LICENSE.txt").apache(),
    new LibraryLicense(name: "Thrift", libraryName: "libthrift", url: "https://thrift.apache.org/").apache(),
    // for traceprocessor-proto module library in intellij.android.profilersAndroid
    new LibraryLicense(name: "TraceProcessor Daemon Protos", libraryName: "traceprocessor-proto").apache(),
    new LibraryLicense(name: "Transport Pipeline", libraryName: "transport-proto").apache(),
    new LibraryLicense(name: "Trove4j (JetBrains's fork)", libraryName: "Trove4j", license: "LGPL",
                       url: "https://github.com/JetBrains/intellij-deps-trove4j",
                       licenseUrl: "https://github.com/JetBrains/intellij-deps-trove4j/blob/master/LICENSE.txt"),
    new LibraryLicense(name: "TwelveMonkeys ImageIO", libraryName: "imageio-tiff",
                       url: "https://github.com/haraldk/TwelveMonkeys", licenseUrl: "https://github.com/haraldk/TwelveMonkeys#license").newBsd(),
    new LibraryLicense(name: "unit-api", libraryName: "javax.measure:unit-api:1.0",
                       url: "https://github.com/unitsofmeasurement/unit-api",
                       licenseUrl: "https://github.com/unitsofmeasurement/unit-api/blob/master/LICENSE").newBsd(),
    new LibraryLicense(name: "uom-lib-common", libraryName: "tech.uom.lib:uom-lib-common:1.1",
                       url: "https://github.com/unitsofmeasurement/uom-lib",
                       licenseUrl: "https://github.com/unitsofmeasurement/uom-lib/blob/master/LICENSE").newBsd(),
    new LibraryLicense(libraryName: "Velocity", url: "http://velocity.apache.org/").apache(),
    new LibraryLicense(name: "Visual Studio Code", attachedTo: "intellij.textmate", version: "1.33.1",
                       url: "https://github.com/Microsoft/vscode/",
                       licenseUrl: "https://github.com/Microsoft/vscode-react-native/blob/master/LICENSE.txt").mit(),
    new LibraryLicense(name: "weberknecht", libraryName: "weberknecht-0.1.5.jar", version: "0.1.5",
                       url: "https://github.com/pelotoncycle/weberknecht").apache(),
    new LibraryLicense(libraryName: "winp", url: "https://github.com/kohsuke/winp").mit(),
    new LibraryLicense(name: "Xalan", libraryName: "Xalan-2.7.2",
                       url: "http://xalan.apache.org/xalan-j/", licenseUrl: "http://xalan.apache.org/xalan-j/#license").apache(),
    new LibraryLicense(libraryName: "Xerces", url: "http://xerces.apache.org/xerces2-j/",
                       licenseUrl: "http://xerces.apache.org/xerces2-j/").apache(),
    new LibraryLicense(name: "Xerial SQLite JDBC", libraryName: "sqlite",
                       url: "https://github.com/xerial/sqlite-jdbc").apache(),
    new LibraryLicense(name: "xml-apis-ext", libraryName: "xml-apis-ext",
                       url: "http://xerces.apache.org/xml-commons/components/external").apache(),
    new LibraryLicense(name: "xml-resolver", libraryName: "xml-resolver",
                       url: "http://xml.apache.org/commons/components/resolver/").apache(),
    new LibraryLicense(name: "XMLBeans", libraryName: "XmlBeans",
                       url: "http://xmlbeans.apache.org/",
                       licenseUrl: "http://svn.jetbrains.org/idea/Trunk/bundled/WebServices/resources/lib/xmlbeans-2.3.0/xmlbeans.LICENSE").apache(),
    new LibraryLicense(name: "XmlRPC", libraryName: "XmlRPC",
                       url: "http://ws.apache.org/xmlrpc/xmlrpc2/", licenseUrl: "http://ws.apache.org/xmlrpc/xmlrpc2/license.html").apache(),
    new LibraryLicense(name: "XStream", libraryName: "XStream",
                       url: "https://x-stream.github.io/", licenseUrl: "https://x-stream.github.io/license.html").newBsd(),
    new LibraryLicense(name: "XZ for Java", libraryName: "xz", license: "Public Domain",
                       url: "http://tukaani.org/xz/java.html"),
    new LibraryLicense(name: "zip-signer", libraryName: "zip-signer",
                       url: "https://github.com/JetBrains/marketplace-zip-signer").apache(),
    new LibraryLicense(name: "Zstd-JNI", libraryName: "com.github.luben:zstd",
                       url: "https://raw.githubusercontent.com/luben/zstd-jni/master/LICENSE").simplifiedBsd(),

    jetbrainsLibrary("change-reminder-prediction-model"),
    jetbrainsLibrary("completion-log-events"),
    jetbrainsLibrary("completion-ranking-dart-exp"),
    jetbrainsLibrary("completion-ranking-go-exp"),
    jetbrainsLibrary("completion-ranking-java"),
    jetbrainsLibrary("completion-ranking-java-exp"),
    jetbrainsLibrary("completion-ranking-java-exp-no-pos"),
    jetbrainsLibrary("completion-ranking-js-exp"),
    jetbrainsLibrary("completion-ranking-kotlin-exp"),
    jetbrainsLibrary("completion-ranking-php-exp"),
    jetbrainsLibrary("completion-ranking-python"),
    jetbrainsLibrary("completion-ranking-python-exp"),
    jetbrainsLibrary("completion-ranking-ruby-exp"),
    jetbrainsLibrary("completion-ranking-rust-exp"),
    jetbrainsLibrary("completion-ranking-scala-exp"),
    jetbrainsLibrary("completion-ranking-swift-exp"),
    jetbrainsLibrary("completion-ranking-typescript-exp"),
    jetbrainsLibrary("debugger-memory-agent"),
    jetbrainsLibrary("file-prediction-model"),
    jetbrainsLibrary("intellij-coverage"),
    jetbrainsLibrary("intellij-markdown"),
    jetbrainsLibrary("intellij-test-discovery"),
    jetbrainsLibrary("jps-build-script-dependencies-bootstrap"),
    jetbrainsLibrary("kotlin-reflect"),
    jetbrainsLibrary("kotlin-script-runtime"),
    jetbrainsLibrary("kotlin-scripting"),
    jetbrainsLibrary("kotlin-scripting-common"),
    jetbrainsLibrary("kotlin-scripting-dependencies"),
    jetbrainsLibrary("kotlin-scripting-jvm"),
    jetbrainsLibrary("kotlin-stdlib-jdk8"),
    jetbrainsLibrary("kotlin-test"),
    jetbrainsLibrary("kotlinx-coroutines-guava"),
    jetbrainsLibrary("kotlinx-coroutines-jdk8"),
    jetbrainsLibrary("kotlinx-coroutines-slf4j"),
    jetbrainsLibrary("ml-completion-prev-exprs-models"),
    jetbrainsLibrary("precompiled_jshell-frontend"),
    jetbrainsLibrary("rd-core"),
    jetbrainsLibrary("rd-framework"),
    jetbrainsLibrary("rd-swing"),
    jetbrainsLibrary("rd-text"),
    jetbrainsLibrary("space-idea-sdk"),
    jetbrainsLibrary("tcServiceMessages"),
    jetbrainsLibrary("tips-idea-ce"),
    jetbrainsLibrary("tips-pycharm-community"),
  ] as List<LibraryLicense>
}
