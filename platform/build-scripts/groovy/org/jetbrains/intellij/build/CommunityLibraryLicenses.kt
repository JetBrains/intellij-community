// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
@file:Suppress("ReplaceJavaStaticMethodWithKotlinAnalog")

package org.jetbrains.intellij.build

import org.jetbrains.intellij.build.LibraryLicense.Companion.jetbrainsLibrary

/**
 * Defines information about licenses of libraries located in 'community', 'contrib' and 'android' repositories.
 */
object CommunityLibraryLicenses {
  @JvmStatic
  @SuppressWarnings("SpellCheckingInspection")
  val LICENSES_LIST: List<LibraryLicense> = java.util.List.of(
    LibraryLicense(name = "A fast Java JSON schema validator", libraryName = "json-schema-validator",
                   url = "https://github.com/networknt/json-schema-validator").apache(),
    LibraryLicense(name = "aalto-xml", libraryName = "aalto-xml", url = "https://github.com/FasterXML/aalto-xml/").apache(),
    LibraryLicense(name = "AAPT Protos", libraryName = "aapt-proto", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "AhoCorasickDoubleArrayTrie", libraryName = "com.hankcs:aho-corasick-double-array-trie",
                   url = "https://github.com/hankcs/AhoCorasickDoubleArrayTrie").apache(),
    LibraryLicense(name = "Am Instrument Data proto", libraryName = "libam-instrumentation-data-proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Amazon Ion Java", libraryName = "ion", url = "https://github.com/amzn/ion-java").apache(),
    LibraryLicense(name = "android-test-plugin-host-device-info-proto", libraryName = "android-test-plugin-host-device-info-proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "android-test-plugin-host-retention-proto", libraryName = "libstudio.android-test-plugin-host-retention-proto",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "android-test-plugin-result-listener-gradle-proto", libraryName = "libstudio.android-test-plugin-result-listener-gradle-proto",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android ADB Lib", libraryName = "precompiled-adblib", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android AIA Protos", libraryName = "aia-proto", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Analytics Crash", libraryName = "precompiled-analytics-crash",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Analytics Protos", libraryName = "studio-analytics-proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Analytics Shared", libraryName = "precompiled-analytics-shared",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Analytics Tracker", libraryName = "precompiled-analytics-tracker",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Annotations", libraryName = "precompiled-android-annotations",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Apk Analyzer", libraryName = "precompiled-analyzer",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Apk Binary Resources", libraryName = "precompiled-binary-resources",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Apk ZLib", libraryName = "apkzlib",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android App Inspector (Background Task, proto)", libraryName = "background-inspector-proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android App Inspector (Network, proto)", libraryName = "network_inspector_java_proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Archive Patcher (explainer)", libraryName = "explainer",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Archive Patcher (generator)", libraryName = "generator",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Archive Patcher (shared)", libraryName = "shared",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Baksmali", libraryName = "baksmali", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Builder Model", libraryName = "precompiled-builder-model",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Chunkio", libraryName = "precompiled-chunkio",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Common Library", libraryName = "precompiled-common",
                   url = "https://source.android.com/").apache(),
    // for android-core-proto module library in intellij.android.core
    LibraryLicense(name = "Android Core Protos", libraryName = "libandroid-core-proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Data Binding Base Library", libraryName = "precompiled-db-baseLibrary",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Data Binding Base Library Support", libraryName = "precompiled-db-baseLibrarySupport",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Data Binding Compiler", libraryName = "precompiled-db-compiler",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Data Binding Compiler Common", libraryName = "precompiled-db-compilerCommon",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Ddm libapp-processes-proto", libraryName = "libapp-processes-proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Ddm Library", libraryName = "precompiled-ddmlib",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Deployer Library", libraryName = "precompiled-deployer",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Deployer Library (libjava_sites)", libraryName = "libjava_sites",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android DEX library", libraryName = "dexlib2", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android draw9patch library", libraryName = "precompiled-draw9patch",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android dvlib library", libraryName = "precompiled-dvlib", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Dynamic Layout Inspector", libraryName = "precompiled-dynamic-layout-inspector.common",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Emulator gRPC API", url = "https://source.android.com/", libraryName = "emulator-proto").apache(),
    LibraryLicense(name = "Android Flags", libraryName = "precompiled-flags",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Gradle model", attachedTo = "intellij.android.core", version = "0.4-SNAPSHOT",
                   url = "https://android.googlesource.com/platform/tools/build/+/master/gradle-model/").apache(),
    LibraryLicense(name = "Android Instant Apps SDK API", url = "https://source.android.com/", libraryName = "instantapps-api",
                   version = LibraryLicense.CUSTOM_REVISION).apache(),
    LibraryLicense(name = "Android Jetifier Core", libraryName = "jetifier-core", url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Jimfs library", libraryName = "jimfs", url = "https://github.com/google/jimfs").apache(),
    LibraryLicense(name = "Android Layout Api Library", libraryName = "precompiled-layoutlib-api",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Layout Inspector", libraryName = "precompiled-layoutinspector",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Layout Inspector (Compose Proto)", libraryName = "layout_inspector_compose_java_proto",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Layout Inspector (Skia Proto)", libraryName = "layoutinspector-skia-proto",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Layout Inspector (Snapshot Proto)", libraryName = "layout_inspector_snapshot_java_proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Layout Inspector (View Proto)", libraryName = "layout_inspector_view_java_proto",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Layout Library", libraryName = "layoutlib",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android libwebp library", libraryName = "libwebp.jar",
                   url = "https://github.com/webmproject/libwebp",
                   version = LibraryLicense.CUSTOM_REVISION).apache(),
    LibraryLicense(name = "Android Lint Api", libraryName = "precompiled-lint-api",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Lint Checks", libraryName = "precompiled-lint-checks",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Lint Model", libraryName = "precompiled-lint-model",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Manifest Merger", libraryName = "precompiled-manifest-merger",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Manifest Parser", libraryName = "precompiled-manifest-parser",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android MLKit Common Library", libraryName = "precompiled-mlkit-common",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android ninepatch Library", libraryName = "precompiled-ninepatch",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Perf-Logger Library", libraryName = "precompiled-perf-logger",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Perflib Library", libraryName = "precompiled-perflib",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Pixelprobe Library", libraryName = "precompiled-pixelprobe",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Profiler", libraryName = "studio-grpc",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Repository", libraryName = "precompiled-repository",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Resource Repository", libraryName = "precompiled-resource-repository",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Sdk Common", libraryName = "precompiled-sdk-common",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Sdk Lib", libraryName = "precompiled-sdklib",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android STracer", libraryName = "precompiled-tracer",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android USB Devices", libraryName = "precompiled-usb-devices",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Wizard Template", libraryName = "precompiled-wizardTemplate.impl",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Wizard Template Plugin", libraryName = "precompiled-wizardTemplate.plugin",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Android Zipflinger", libraryName = "precompiled-zipflinger",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "AndroidX Compose Compiler (Hosted)", libraryName = "compiler-hosted-1.1.0-SNAPSHOT.jar", version = "1.1.0-SNAPSHOT",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "AndroidX Test Library", libraryName = "utp-core-proto",
                   url = "https://source.android.com/").apache(),
    // for androidx-test-core-proto module library in intellij.android.core
    LibraryLicense(name = "AndroidX Test Library core protos", libraryName = "androidx-test-core-proto",
                       url = "https://source.android.com/").apache(),
    LibraryLicense(name = "ANTLR 4.5", libraryName = "compilerCommon.antlr.shaded",
                       url = "https://www.antlr.org", licenseUrl = "https://www.antlr.org/license.html").newBsd(),
    LibraryLicense(name = "ANTLR 4.5 Runtime", libraryName = "compilerCommon.antlr_runtime.shaded",
                       url = "https://www.antlr.org", licenseUrl = "https://www.antlr.org/license.html").newBsd(),
    LibraryLicense(name = "ANTLR 4.9 Runtime", libraryName = "antlr4-runtime-4.9",
                   url = "https://www.antlr.org", licenseUrl = "https://www.antlr.org/license.html").newBsd(),
    LibraryLicense(name = "ap-validation", libraryName = "ap-validation",
                   url = "https://github.com/JetBrains/ap-validation").apache(),
    LibraryLicense(name = "Apache Ant", version = "1.9", libraryName = "Ant", url = "https://ant.apache.org/",
                   licenseUrl = "https://ant.apache.org/license.html").apache(),
    LibraryLicense(name = "Apache Axis", libraryName = "axis-1.4", version = "1.4", url = "https://ws.apache.org/axis/").apache(),
    LibraryLicense(name = "Apache Commons BeanUtils", libraryName = "commons-beanutils.jar", version = "1.6",
                   url = "https://commons.apache.org/beanutils/").apache(),
    LibraryLicense(name = "Apache Commons CLI", libraryName = "commons-cli",
                   url = "https://commons.apache.org/cli/").apache(),
    LibraryLicense(name = "Apache Commons Codec", libraryName = "commons-codec", url = "https://commons.apache.org/codec/").apache(),
    LibraryLicense(name = "Apache Commons Collections", libraryName = "commons-collections",
                   url = "https://commons.apache.org/proper/commons-collections/").apache(),
    LibraryLicense(name = "Apache Commons Compress", libraryName = "commons-compress",
                   url = "https://commons.apache.org/proper/commons-compress/").apache(),
    LibraryLicense(name = "Apache Commons Discovery", libraryName = "commons-discovery",
                   url = "https://jakarta.apache.org/commons/discovery/").apache(),
    LibraryLicense(name = "Apache Commons HTTPClient", libraryName = "http-client-3.1", version = "3.1&nbsp; (with patch by JetBrains)",
                   url = "https://hc.apache.org/httpclient-3.x").apache(),
    LibraryLicense(name = "Apache Commons Imaging (JetBrains's fork)", libraryName = "commons-imaging",
                   url = "https://github.com/JetBrains/intellij-deps-commons-imaging").apache(),
    LibraryLicense(name = "Apache Commons IO", libraryName = "commons-io",
                   url = "https://commons.apache.org/io/").apache(),
    LibraryLicense(name = "Apache Commons Lang", libraryName = "commons-lang",
                   url = "https://commons.apache.org/proper/commons-lang/").apache(),
    LibraryLicense(name = "Apache Commons Lang", libraryName = "commons-lang3",
                   url = "https://commons.apache.org/proper/commons-lang/").apache(),
    LibraryLicense(name = "Apache Commons Logging", libraryName = "commons-logging",
                   url = "https://commons.apache.org/logging/").apache(),
    LibraryLicense(name = "Apache Commons Net", libraryName = "commons-net",
                   url = "https://commons.apache.org/net/").apache(),
    LibraryLicense(name = "Apache Commons Text", libraryName = "org.apache.commons:commons-text:1.8",
                   url = "https://github.com/apache/commons-text").apache(),
    LibraryLicense(name = "Apache Ivy", libraryName = "org.apache.ivy", url = "https://github.com/apache/ant-ivy").apache(),
    LibraryLicense(name = "Apache Lucene",
                   libraryName = "lucene-core", url = "https://lucene.apache.org/java",
                   additionalLibraryNames = listOf(
                     "lucene-suggest",
                     "lucene-memory",
                     "lucene-sandbox",
                     "lucene-codecs",
                     "lucene-highlighter",
                     "lucene-queryparser",
                     "lucene-queries",
                     "lucene-analyzers-common",
                     "org.apache.lucene:lucene-core:2.4.1"
                   )).apache(),
    LibraryLicense(name = "Apache Tuweni-Toml", libraryName = "tuweni-toml",
                   url = "https://github.com/apache/incubator-tuweni/tree/main/toml").apache(),
    LibraryLicense(name = "ASM (JetBrains's fork)", libraryName = "ASM",
                   url = "https://github.com/JetBrains/intellij-deps-asm",
                   licenseUrl = "https://github.com/JetBrains/intellij-deps-asm/blob/master/LICENSE.txt",
                   additionalLibraryNames = listOf("asm-capture")).newBsd(),
    LibraryLicense(name = "ASM Tools", libraryName = "asm-tools", url = "https://asm.ow2.io",
                   licenseUrl = "https://asm.ow2.io/license.html").newBsd(),
    LibraryLicense(name = "AssertJ fluent assertions", libraryName = "assertJ",
                   url = "https://joel-costigliola.github.io/assertj/").apache(),
    LibraryLicense(name = "AssertJ Swing", libraryName = "assertj-swing",
                   url = "https://github.com/assertj/assertj-swing").apache(),
    LibraryLicense(name = "Automaton", libraryName = "automaton", url = "https://www.brics.dk/automaton/").simplifiedBsd(),
    LibraryLicense(name = "batik", libraryName = "batik-transcoder", url = "https://xmlgraphics.apache.org/batik/").apache(),
    LibraryLicense(name = "batik", libraryName = "batik-codec", url = "https://xmlgraphics.apache.org/batik/").apache(),
    LibraryLicense(libraryName = "blockmap",
                   url = "https://github.com/JetBrains/plugin-blockmap-patches").apache(),
    LibraryLicense(libraryName = "bouncy-castle-provider", url = "https://bouncycastle.org",
                   licenseUrl = "https://bouncycastle.org/licence.html").mit(),
    LibraryLicense(name = "Byte Buddy agent", libraryName = "byte-buddy-agent",
                   url = "https://github.com/raphw/byte-buddy").apache(),
    LibraryLicense(name = "caffeine", libraryName = "caffeine",
                   url = "https://github.com/ben-manes/caffeine",
                   licenseUrl = "https://github.com/ben-manes/caffeine/blob/master/LICENSE").apache(),
    LibraryLicense(name = "CGLib", libraryName = "CGLIB", url = "https://cglib.sourceforge.net/").apache(),
    LibraryLicense(name = "classgraph", libraryName = "classgraph",
                   url = "https://github.com/classgraph/classgraph",
                   licenseUrl = "https://github.com/codehaus/classworlds/blob/master/classworlds/LICENSE.txt").mit(),
    LibraryLicense(name = "classworlds", libraryName = "Maven", transitiveDependency = true, version = "1.1", license = "codehaus",
                   url = "https://github.com/codehaus/classworlds",
                   licenseUrl = "https://github.com/codehaus/classworlds/blob/master/classworlds/LICENSE.txt"),
    LibraryLicense(name = "Common Annotations for the JavaTM Platform API", libraryName = "javax.annotation-api",
                   url = "https://github.com/javaee/javax.annotation",
                   license = "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl = "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    // for ui-animation-tooling-internal module library in intellij.android.compose-designer
    LibraryLicense(name = "Compose Animation Tooling", libraryName = "ui-animation-tooling-internal", version = "0.1.0-SNAPSHOT",
                   url = "https://source.android.com/").apache(),
    // For ADB wireless QR Code generation
    LibraryLicense(name = "Core barcode encoding/decoding library", url = "https://github.com/zxing/zxing/tree/master/core",
                   libraryName = "zxing-core").apache(),
    LibraryLicense(name = "coverage-report", libraryName = "coverage-report",
                   url = "https://github.com/JetBrains/coverage-report").apache(),
    LibraryLicense(name = "coverage.py", attachedTo = "intellij.python", version = "4.2.0",
                   url = "https://coverage.readthedocs.io/",
                   licenseUrl = "https://github.com/nedbat/coveragepy/blob/master/LICENSE.txt").apache(),
    LibraryLicense(name = "Cucumber-Core", libraryName = "cucumber-core-1.2", url = "https://github.com/cucumber/cucumber-jvm/").mit(),
    LibraryLicense(name = "Cucumber-Expressions", libraryName = "cucumber-expressions",
                   url = "https://github.com/cucumber/cucumber/").mit(),
    LibraryLicense(name = "Cucumber-Groovy", libraryName = "cucumber-groovy", url = "https://github.com/cucumber/cucumber-jvm/").mit(),
    LibraryLicense(name = "Cucumber-Java", libraryName = "cucumber-java", url = "https://github.com/cucumber/cucumber-jvm/").mit(),
    LibraryLicense(name = "Dart Analysis Server", attachedTo = "intellij.dart",
                   url = "https://github.com/dart-lang/eclipse3", version = LibraryLicense.CUSTOM_REVISION).eplV1(),
    LibraryLicense(name = "Dart VM Service drivers", attachedTo = "intellij.dart",
                   licenseUrl = "https://github.com/dart-lang/vm_service_drivers/blob/master/LICENSE",
                   url = "https://github.com/dart-lang/vm_service_drivers",
                   version = LibraryLicense.CUSTOM_REVISION).newBsd(),
    LibraryLicense(name = "dbus-java", libraryName = "dbus-java", license = "LGPL",
                   url = "https://mvnrepository.com/artifact/com.github.hypfvieh/dbus-java"),
    LibraryLicense(name = "DecentXML", libraryName = "decentxml",
                   url = "https://code.google.com/p/decentxml").newBsd(),
    LibraryLicense(name = "docutils", attachedTo = "intellij.python", version = "0.12", license = "BSD",
                   url = "https://docutils.sourceforge.io/"),
    LibraryLicense(libraryName = "DTDParser", version = "1.13", license = "LGPL", url = "https://sourceforge.net/projects/dtdparser/",
                   licenseUrl = "https://www.opensource.org/licenses/lgpl-2.1"),
    LibraryLicense(name = "Eclipse JDT Core", attachedTo = "intellij.platform.jps.build", version = "4.2.1", license = "CPL 1.0",
                   url = "https://www.eclipse.org/jdt/core/index.php"),
    LibraryLicense(name = "Eclipse Layout Kernel", url = "https://www.eclipse.org/elk/", libraryName = "eclipse-layout-kernel").eplV1(),
    LibraryLicense(name = "EditorConfig Java Core", libraryName = "editorconfig-core-java.jar", version = "1.0",
                   url = "https://github.com/editorconfig/editorconfig-core-java/",
                   licenseUrl = "https://github.com/editorconfig/editorconfig-core-java/blob/master/LICENSE").apache(),
    LibraryLicense(name = "emoji-java", libraryName = "com.vdurmont:emoji-java",
                   url = "https://github.com/vdurmont/emoji-java").mit(),
    LibraryLicense(name = "entities",
                   url = "https://github.com/fb55/entities", attachedTo = "intellij.vuejs",
                   licenseUrl = "https://github.com/fb55/entities/blob/master/LICENSE",
                   version = LibraryLicense.CUSTOM_REVISION).simplifiedBsd(),
    LibraryLicense(name = "epydoc", attachedTo = "intellij.python", version = "3.0.1",
                   url = "https://epydoc.sourceforge.net/").mit(),
    LibraryLicense(name = "error-prone-annotations", libraryName = "error-prone-annotations",
                   url = "https://github.com/google/error-prone",
                   licenseUrl = "https://github.com/google/error-prone/blob/master/COPYING").apache(),
    LibraryLicense(name = "fastutil", libraryName = "fastutil-min",
                   url = "https://github.com/vigna/fastutil",
                   licenseUrl = "https://github.com/vigna/fastutil/blob/master/LICENSE-2.0").apache(),
    LibraryLicense(name = "FiraCode", attachedTo = "intellij.platform.resources", version = "1.206", license = "OFL",
                   url = "https://github.com/tonsky/FiraCode", licenseUrl = "https://github.com/tonsky/FiraCode/blob/master/LICENSE"),
    // for flatbuffers-java module library in android.sdktools.mlkit-common
    LibraryLicense(name = "FlatBuffers Java API", libraryName = "flatbuffers-java",
                   url = "https://google.github.io/flatbuffers/").apache(),
    LibraryLicense(name = "FreeMarker", attachedTo = "intellij.java.coverage", version = "2.3.30",
                   url = "https://freemarker.apache.org", licenseUrl = "https://freemarker.apache.org/docs/app_license.html").apache(),
    LibraryLicense(name = "gauge-java", libraryName = "com.thoughtworks.gauge:gauge-java",
                   url = "https://github.com/getgauge/gauge-java/",
                   licenseUrl = "https://raw.githubusercontent.com/getgauge/gauge-java/master/LICENSE.txt").apache(),
    LibraryLicense(name = "Gherkin", libraryName = "gherkin",
                   licenseUrl = "https://github.com/cucumber/cucumber/blob/master/gherkin/LICENSE",
                   url = "https://github.com/cucumber/cucumber/tree/master/gherkin").mit(),
    LibraryLicense(name = "Gherkin keywords", attachedTo = "intellij.gherkin", version = "2.12.2",
                   licenseUrl = "https://github.com/cucumber/cucumber/blob/master/gherkin/LICENSE",
                   url = "https://github.com/cucumber/cucumber/tree/master/gherkin").mit(),
    LibraryLicense(name = "Google Auto Common Utilities", libraryName = "auto-common",
                   url = "https://github.com/google/auto/tree/master/common").apache(),
    LibraryLicense(name = "Google Drive API V3", libraryName = "google.apis.api.services.drive",
                   url = "https://github.com/googleapis/google-api-java-client-services/tree/master/clients/google-api-services-drive/v3",
                   licenseUrl = "https://github.com/googleapis/google-api-java-client-services/blob/master/LICENSE").apache(),
    LibraryLicense(libraryName = "Gradle", url = "https://gradle.org/", licenseUrl = "https://gradle.org/license").apache(),
    LibraryLicense(name = "Grazie AI", libraryName = "ai.grazie.spell.gec.local.engine",
                   url = "https://packages.jetbrains.team/maven/p/grazi/grazie-platform-public/",
                   additionalLibraryNames = listOf("ai.grazie.nlp.patterns",
                                                   "ai.grazie.nlp.phonetics",
                                                   "ai.grazie.nlp.common",
                                                   "ai.grazie.nlp.langs",
                                                   "ai.grazie.nlp.similarity",
                                                   "ai.grazie.nlp-tokenizer",
                                                   "ai.grazie.nlp.detect",
                                                   "ai.grazie.nlp.stemmer",
                                                   "ai.grazie.nlp.tokenizer",
                                                   "ai.grazie.utils.common",
                                                   "ai.grazie.utils.json",
                                                   "ai.grazie.model.gec",
                                                   "ai.grazie.model.text",
                                                   "ai.grazie.spell.hunspell.en")).apache(),
    LibraryLicense(name = "Groovy", libraryName = "org.codehaus.groovy:groovy", url = "https://groovy-lang.org/").apache(),
    LibraryLicense(name = "Groovy Ant", libraryName = "org.codehaus.groovy:groovy-ant", url = "https://groovy-lang.org/").apache(),
    LibraryLicense(name = "Groovy JSON", libraryName = "org.codehaus.groovy:groovy-json", url = "https://groovy-lang.org/").apache(),
    LibraryLicense(name = "Groovy JSR-223", libraryName = "org.codehaus.groovy:groovy-jsr223", url = "https://groovy-lang.org/").apache(),
    LibraryLicense(name = "Groovy Templates", libraryName = "org.codehaus.groovy:groovy-templates",
                   url = "https://groovy-lang.org/").apache(),
    LibraryLicense(name = "Groovy XML", libraryName = "org.codehaus.groovy:groovy-xml",
                   url = "https://groovy-lang.org/").apache(),
    LibraryLicense(name = "gRPC Kotlin: Stub", libraryName = "grpc-kotlin-stub", url = "https://grpc.io/").apache(),
    LibraryLicense(name = "gRPC: Core", libraryName = "grpc-core", url = "https://grpc.io/").apache(),
    LibraryLicense(name = "gRPC: Netty Shaded", libraryName = "grpc-netty-shaded", url = "https://grpc.io/").apache(),
    LibraryLicense(name = "gRPC: Protobuf", libraryName = "grpc-protobuf", url = "https://grpc.io/").apache(),
    LibraryLicense(name = "gRPC: Stub", libraryName = "grpc-stub", url = "https://grpc.io/").apache(),
    LibraryLicense(name = "Gson", libraryName = "gson", url = "https://code.google.com/p/google-gson/").apache(),
    LibraryLicense(libraryName = "Guava", url = "https://github.com/google/guava",
                   licenseUrl = "https://github.com/google/guava/blob/master/COPYING").apache(),
    LibraryLicense(name = "Hamcrest", libraryName = "hamcrest", url = "https://hamcrest.org/").newBsd(),
    LibraryLicense(name = "HDR Histogram", libraryName = "HdrHistogram", license = "CC0 1.0 Universal",
                   url = "https://github.com/HdrHistogram/HdrHistogram",
                   licenseUrl = "https://github.com/HdrHistogram/HdrHistogram/blob/master/LICENSE.txt"),
    LibraryLicense(name = "hppc", url = "https://github.com/carrotsearch/hppc", libraryName = "com.carrotsearch:hppc").apache(),
    LibraryLicense(name = "htmlparser2",
                   url = "https://github.com/fb55/htmlparser2", attachedTo = "intellij.vuejs",
                   licenseUrl = "https://github.com/fb55/htmlparser2/blob/master/LICENSE",
                   version = LibraryLicense.CUSTOM_REVISION).mit(),
    LibraryLicense(name = "HttpComponents HttpClient", libraryName = "http-client",
                   url = "https://hc.apache.org/httpcomponents-client-ga/index.html").apache(),
    LibraryLicense(name = "HttpComponents HttpClient Fluent API", libraryName = "fluent-hc",
                   url = "https://hc.apache.org/httpcomponents-client-ga/index.html").apache(),
    LibraryLicense(name = "ICU4J", libraryName = "icu4j", license = "Unicode",
                   url = "https://site.icu-project.org/", licenseUrl = "https://www.unicode.org/copyright.html"),
    LibraryLicense(name = "imgscalr", libraryName = "imgscalr", url = "https://github.com/thebuzzmedia/imgscalr").apache(),
    LibraryLicense(name = "Inconsolata", attachedTo = "intellij.platform.resources", version = "001.010", license = "OFL",
                   url = "https://github.com/google/fonts/tree/main/ofl/inconsolata",
                   licenseUrl = "https://github.com/google/fonts/blob/master/ofl/inconsolata/OFL.txt"),
    LibraryLicense(name = "Incremental DOM", attachedTo = "intellij.markdown", version = "0.7.0",
                   url = "https://github.com/google/incremental-dom").apache(),
    LibraryLicense(name = "indriya", libraryName = "tech.units:indriya:1.3",
                   url = "https://github.com/unitsofmeasurement/indriya",
                   licenseUrl = "https://github.com/unitsofmeasurement/indriya/blob/master/LICENSE").newBsd(),
    LibraryLicense(name = "ini4j (JetBrains's fork)", libraryName = "ini4j",
                   url = "https://github.com/JetBrains/intellij-deps-ini4j").apache(),
    LibraryLicense(name = "Instant run protos", libraryName = "deploy_java_proto",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "Instant run version", libraryName = "libjava_version",
                   url = "https://source.android.com/").apache(),
    LibraryLicense(name = "ISO RELAX", libraryName = "isorelax", url = "https://sourceforge.net/projects/iso-relax/").mit(),
    LibraryLicense(name = "Jackson", libraryName = "jackson", url = "https://github.com/FasterXML/jackson").apache(),
    LibraryLicense(name = "jackson-jr-objects", libraryName = "jackson-jr-objects",
                   url = "https://github.com/FasterXML/jackson-jr").apache(),
    LibraryLicense(name = "Jackson Databind", libraryName = "jackson-databind",
                   url = "https://github.com/FasterXML/jackson-databind").apache(),
    LibraryLicense(name = "Jackson Module Kotlin", libraryName = "jackson-module-kotlin",
                   url = "https://github.com/FasterXML/jackson-module-kotlin").apache(),
    LibraryLicense(name = "JaCoCo", libraryName = "JaCoCo", url = "https://www.eclemma.org/jacoco/").eplV1(),
    LibraryLicense(name = "Jakarta ORO", libraryName = "OroMatcher",
                   url = "https://jakarta.apache.org/oro/",
                   licenseUrl = "https://svn.apache.org/repos/asf/jakarta/oro/trunk/LICENSE").apache(),
    LibraryLicense(name = "Jarchivelib", libraryName = "rauschig.jarchivelib",
                   url = "https://github.com/thrau/jarchivelib").apache(),
    LibraryLicense(libraryName = "Java Compatibility", license = "GPL 2.0 + Classpath",
                   url = "https://github.com/JetBrains/intellij-deps-java-compatibility",
                   licenseUrl = "https://raw.githubusercontent.com/JetBrains/intellij-deps-java-compatibility/master/LICENSE"),
    LibraryLicense(name = "Java Native Runtime Constants", libraryName = "github.jnr.constants",
                   url = "https://github.com/jnr/jnr-constants").apache(),
    LibraryLicense(name = "Java Poet", libraryName = "javapoet",
                   url = "https://github.com/square/javapoet").apache(),
    LibraryLicense(name = "Java Server Pages (JSP) for Visual Studio Code", attachedTo = "intellij.textmate", version = "0.0.3",
                   url = "https://github.com/pthorsson/vscode-jsp",
                   licenseUrl = "https://github.com/pthorsson/vscode-jsp/blob/master/LICENSE").mit(),
    LibraryLicense(name = "Java Simple Serial Connector", libraryName = "io.github.java.native.jssc",
                   url = "https://github.com/java-native/jssc", license = "LGPL 3.0", licenseUrl = "https://github.com/java-native/jssc/blob/master/LICENSE.txt"),
    LibraryLicense(name = "Java String Similarity", libraryName = "java-string-similarity",
                   licenseUrl = "https://github.com/tdebatty/java-string-similarity/blob/master/LICENSE.md",
                   url = "https://github.com/tdebatty/java-string-similarity").mit(),
    LibraryLicense(name = "JavaBeans Activation Framework", libraryName = "javax.activation",
                   url = "https://github.com/javaee/activation",
                   license = "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl = "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    LibraryLicense(name = "javaslang", libraryName = "javaslang", url = "https://javaslang.io/").apache(),
    LibraryLicense(name = "javawriter", attachedTo = "intellij.android.core",
                   url = "https://github.com/square/javawriter",
                   version = LibraryLicense.CUSTOM_REVISION).apache(),
    LibraryLicense(name = "javax inject", libraryName = "javax-inject",
                   url = "https://code.google.com/p/atinject/").apache(),
    LibraryLicense(name = "JAXB (Java Architecture for XML Binding) API", libraryName = "jaxb-api",
                   url = "https://github.com/javaee/jaxb-spec",
                   license = "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl = "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    LibraryLicense(name = "JAXB (JSR 222) Reference Implementation", libraryName = "jaxb-runtime",
                   url = "https://github.com/javaee/jaxb-v2",
                   license = "CDDL 1.1 / GPL 2.0 + Classpath", licenseUrl = "https://oss.oracle.com/licenses/CDDL+GPL-1.1"),
    LibraryLicense(libraryName = "Jaxen", license = "modified Apache", url = "https://github.com/jaxen-xpath/jaxen",
                   licenseUrl = "https://github.com/jaxen-xpath/jaxen/blob/master/LICENSE.txt"),
    LibraryLicense(name = "Jayway JsonPath", libraryName = "jsonpath",
                   url = "https://github.com/json-path/JsonPath",
                   licenseUrl = "https://github.com/json-path/JsonPath/blob/master/LICENSE").apache(),
    LibraryLicense(libraryName = "jb-jdi", license = "GPL 2.0 + Classpath", url = "https://github.com/JetBrains/intellij-deps-jdi",
                   licenseUrl = "https://raw.githubusercontent.com/JetBrains/intellij-deps-jdi/master/LICENSE.txt"),
    LibraryLicense(name = "JCEF", libraryName = "jcef", license = "BSD 3-Clause",
                   licenseUrl = "https://bitbucket.org/chromiumembedded/java-cef/src/master/LICENSE.txt",
                   url = "https://bitbucket.org/chromiumembedded/java-cef"),
    LibraryLicense(name = "JCIP Annotations", libraryName = "jcip", license = "Creative Commons Attribution License",
                   url = "https://www.jcip.net", licenseUrl = "https://creativecommons.org/licenses/by/2.5"),
    LibraryLicense(name = "JCodings", libraryName = "joni", transitiveDependency = true, version = "1.0.55",
                   url = "https://github.com/jruby/jcodings", licenseUrl = "https://github.com/jruby/jcodings/blob/master/pom.xml").mit(),
    LibraryLicense(name = "JediTerm", libraryName = "jediterm-pty", license = "LGPL 3",
                   url = "https://github.com/JetBrains/jediterm",
                   licenseUrl = "https://github.com/JetBrains/jediterm/blob/master/LICENSE-LGPLv3.txt"),
    LibraryLicense(name = "JediTerm Type Ahead", libraryName = "jediterm-typeahead", license = "LGPL 3",
                   url = "https://github.com/JetBrains/jediterm",
                   licenseUrl = "https://github.com/JetBrains/jediterm/blob/master/LICENSE-LGPLv3.txt"),
    LibraryLicense(name = "JetBrains Annotations", libraryName = "jetbrains-annotations",
                   url = "https://github.com/JetBrains/java-annotations").apache(),
    LibraryLicense(name = "JetBrains Annotations for Java 5", libraryName = "jetbrains-annotations-java5",
                   url = "https://github.com/JetBrains/java-annotations").apache(),
    LibraryLicense(name = "JetBrains Runtime", attachedTo = "intellij.platform.ide.impl", version = "11",
                   license = "GNU General Public License, version 2, with the Classpath Exception",
                   url = "https://github.com/JetBrains/JetBrainsRuntime",
                   licenseUrl = "https://github.com/JetBrains/JetBrainsRuntime/blob/master/LICENSE"),
    LibraryLicense(name = "JetBrains Runtime API", libraryName = "jbr-api",
                   url = "https://github.com/JetBrains/JetBrainsRuntime").apache(),
    LibraryLicense(name = "jetCheck", libraryName = "jetCheck", url = "https://github.com/JetBrains/jetCheck").apache(),
    LibraryLicense(name = "JGit", libraryName = "JGit", license = "Eclipse Distribution License 1.0",
                   licenseUrl = "https://www.eclipse.org/org/documents/edl-v10.php", url = "https://www.eclipse.org/jgit/"),
    LibraryLicense(name = "JGit (develar's fork)", libraryName = "jgit-develar", version = "4.0",
                   license = "Eclipse Distribution License 1.0",
                   licenseUrl = "https://www.eclipse.org/org/documents/edl-v10.php", url = "https://github.com/develar/jgit"),
    LibraryLicense(name = "JGoodies Common", libraryName = "jgoodies-common",
                   url = "https://www.jgoodies.com/freeware/libraries/looks/").simplifiedBsd(),
    LibraryLicense(name = "JGoodies Forms", libraryName = "jgoodies-forms",
                   url = "https://www.jgoodies.com/freeware/libraries/forms/").simplifiedBsd(),
    LibraryLicense(name = "JNA", libraryName = "jna", license = "LGPL 2.1",
                   url = "https://github.com/java-native-access/jna",
                   licenseUrl = "https://www.opensource.org/licenses/lgpl-2.1.php"),
    LibraryLicense(name = "JNR-FFI", libraryName = "github.jnr.ffi", url = "https://github.com/jnr/jnr-ffi").apache(),
    LibraryLicense(name = "jnr-unixsocket", libraryName = "github.jnr.unixsocket", url = "https://github.com/jnr/jnr-unixsocket").apache(),
    LibraryLicense(name = "Joni", libraryName = "joni",
                   url = "https://github.com/jruby/joni", licenseUrl = "https://github.com/jruby/joni/blob/master/LICENSE").mit(),
    LibraryLicense(name = "jps-javac-extension", libraryName = "jps-javac-extension",
                   url = "https://github.com/JetBrains/jps-javac-extension/",
                   licenseUrl = "https://github.com/JetBrains/jps-javac-extension/blob/master/LICENSE.txt").apache(),
    LibraryLicense(name = "JSch", libraryName = "JSch", url = "https://www.jcraft.com/jsch/",
                   licenseUrl = "https://www.jcraft.com/jsch/LICENSE.txt").newBsd(),
    LibraryLicense(name = "jsch-agent-proxy", libraryName = "jsch-agent-proxy",
                   url = "https://github.com/ymnk/jsch-agent-proxy",
                   licenseUrl = "https://github.com/ymnk/jsch-agent-proxy/blob/master/LICENSE.txt").newBsd(),
    LibraryLicense(name = "JSON", libraryName = "json.jar", license = "JSON License", licenseUrl = "https://www.json.org/license.html",
                   url = "https://www.json.org/", version = LibraryLicense.CUSTOM_REVISION),
    LibraryLicense(name = "JSON in Java", libraryName = "org.json:json:20170516", license = "JSON License",
                   licenseUrl = "https://www.json.org/license.html", url = "https://github.com/stleary/JSON-java"),
    LibraryLicense(name = "JSON Schema (schema.json)", attachedTo = "intellij.json", version = "draft-04",
                   url = "https://json-schema.org/draft-04/schema#").simplifiedBsd(),
    LibraryLicense(name = "JSON Schema (schema06.json)", attachedTo = "intellij.json", version = "draft-06",
                   url = "https://json-schema.org/draft-06/schema#").simplifiedBsd(),
    LibraryLicense(name = "JSON Schema (schema07.json)", attachedTo = "intellij.json", version = "draft-07",
                   url = "https://json-schema.org/draft-07/schema#").simplifiedBsd(),
    LibraryLicense(name = "jsoup", libraryName = "jsoup", url = "https://jsoup.org", licenseUrl = "https://jsoup.org/license").mit(),
    LibraryLicense(name = "jsr305", libraryName = "jsr305", url = "https://code.google.com/p/jsr-305/",
                   licenseUrl = "https://code.google.com/p/jsr-305/source/browse/trunk/ri/LICENSE").newBsd(),
    LibraryLicense(name = "JUnit", libraryName = "JUnit3", license = "CPL 1.0", url = "https://junit.org/"),
    LibraryLicense(name = "JUnit", libraryName = "JUnit4", url = "https://junit.org/").eplV1(),
    LibraryLicense(name = "JUnit5", libraryName = "JUnit5", url = "https://junit.org/junit5/").eplV2(),
    LibraryLicense(name = "JUnit5Jupiter", libraryName = "JUnit5Jupiter", url = "https://junit.org/junit5/").eplV2(),
    LibraryLicense(name = "JUnit5Launcher", libraryName = "JUnit5Launcher", url = "https://junit.org/junit5/").eplV2(),
    LibraryLicense(name = "JUnit5Vintage", libraryName = "JUnit5Vintage", url = "https://junit.org/junit5/").eplV2(),
    LibraryLicense(name = "Juniversalchardet", libraryName = "juniversalchardet",
                   url = "https://code.google.com/archive/p/juniversalchardet",
                   license = "MPL 1.1", licenseUrl = "https://www.mozilla.org/MPL/MPL-1.1.html"),
    LibraryLicense(name = "jzlib", libraryName = "jzlib", url = "https://www.jcraft.com/jzlib/",
                   licenseUrl = "https://www.jcraft.com/jzlib/LICENSE.txt").newBsd(),
    LibraryLicense(name = "Kodein-DI", libraryName = "kodein-di-jvm",
                   url = "https://github.com/Kodein-Framework/Kodein-DI/blob/master/LICENSE.txt").mit(),
    LibraryLicense(name = "Kotlin Coroutines for Guava", libraryName = "kotlinx-coroutines-guava",
                   url = "https://github.com/Kotlin/kotlinx.coroutines").apache(),
    LibraryLicense(name = "Kotlin Coroutines for JDK 8", libraryName = "kotlinx-coroutines-jdk8",
                   url = "https://github.com/Kotlin/kotlinx.coroutines").apache(),
    LibraryLicense(name = "Kotlin Coroutines for Slf4j", libraryName = "kotlinx-coroutines-slf4j",
                   url = "https://github.com/Kotlin/kotlinx.coroutines").apache(),
    LibraryLicense(name = "Kotlin multiplatform / multi-format serialization",
                   libraryName = "kotlinx-serialization-core",
                   url = "https://github.com/Kotlin/kotlinx.serialization").apache(),
    LibraryLicense(name = "Kotlin multiplatform / multi-format serialization",
                   libraryName = "kotlinx-serialization-json",
                   url = "https://github.com/Kotlin/kotlinx.serialization").apache(),
    LibraryLicense(name = "Kotlin multiplatform / multi-format serialization",
                   libraryName = "kotlinx-serialization-protobuf",
                   url = "https://github.com/Kotlin/kotlinx.serialization").apache(),
    LibraryLicense(name = "Kotlin reflection library",
                   libraryName = "kotlin-reflect",
                   url = "https://github.com/JetBrains/kotlin").apache(),
    LibraryLicense(name = "Kotlin Standard Library for JDK 8",
                   libraryName = "kotlin-stdlib-jdk8",
                   url = "https://github.com/JetBrains/kotlin").apache(),
    LibraryLicense(name = "kotlinx-datetime",
                   libraryName = "kotlinx-datetime",
                   url = "https://github.com/Kotlin/kotlinx-datetime").apache(),
    LibraryLicense(name = "kotlinx-datetime-jvm",
                   libraryName = "kotlinx-datetime-jvm",
                   url = "https://github.com/Kotlin/kotlinx-datetime").apache(),
    LibraryLicense(name = "kotlinx.html", libraryName = "kotlinx-html-jvm",
                   licenseUrl = "https://github.com/Kotlin/kotlinx.html/blob/master/LICENSE",
                   url = "https://github.com/Kotlin/kotlinx.html").apache(),
    LibraryLicense(name = "Kryo", libraryName = "Kryo",
                   url = "https://github.com/EsotericSoftware/kryo",
                   licenseUrl = "https://github.com/EsotericSoftware/kryo/blob/master/LICENSE.md").newBsd(),
    LibraryLicense(name = "Kryo5", libraryName = "Kryo5",
                   url = "https://github.com/EsotericSoftware/kryo",
                   licenseUrl = "https://github.com/EsotericSoftware/kryo/blob/master/LICENSE.md").newBsd(),
    LibraryLicense(name = "kXML2", libraryName = "kxml2", license = "BSD", url = "https://sourceforge.net/projects/kxml/"),
    LibraryLicense(name = "Language Tool", libraryName = "org.languagetool:languagetool-core:5.7",
                   url = "https://github.com/languagetool-org/languagetool",
                   license = "LGPL 2.1",
                   licenseUrl = "https://www.gnu.org/licenses/lgpl-2.1.txt"),
    LibraryLicense(name = "Language Tool (English)", libraryName = "org.languagetool:language-en:5.7",
                   url = "https://github.com/languagetool-org/languagetool",
                   license = "LGPL 2.1",
                   licenseUrl = "https://www.gnu.org/licenses/lgpl-2.1.txt"),
    LibraryLicense(name = "Log4j", libraryName = "Log4J",
                   url = "https://www.slf4j.org/legacy.html#log4j-over-slf4j").apache(),
    LibraryLicense(name = "lz4-java", libraryName = "lz4-java",
                   url = "https://github.com/lz4/lz4-java",
                   licenseUrl = "https://github.com/lz4/lz4-java/blob/master/LICENSE.txt").apache(),
    LibraryLicense(name = "markdown4j", libraryName = "markdown4j", url = "https://code.google.com/p/markdown4j/").newBsd(),
    LibraryLicense(name = "MarkdownJ", libraryName = "markdownj", version = "0.4.2", url = "https://github.com/myabc/markdownj").newBsd(),
    LibraryLicense(name = "MathJax", attachedTo = "intellij.python", version = "2.6.1",
                   url = "git://github.com/mathjax/MathJax",
                   licenseUrl = "https://github.com/mathjax/MathJax/blob/master/LICENSE").apache(),
    LibraryLicense(libraryName = "Maven", version = "2.2.1", url = "https://maven.apache.org/").apache(),
    LibraryLicense(name = "maven-2.2.1-uber", version = "2.2.1", libraryName = "maven-2.2.1-uber.jar",
                   url = "https://maven.apache.org/").apache(),
    LibraryLicense(name = "Maven Model", libraryName = "maven-model", url = "https://maven.apache.org/").apache(),
    LibraryLicense(name = "Maven Resolver Provider",
                   url = "https://maven.apache.org/ref/3.6.1/maven-resolver-provider/", libraryName = "maven-resolver-provider",
                   additionalLibraryNames = listOf("org.apache.maven.resolver:maven-resolver-connector-basic",
                                                   "org.apache.maven.resolver:maven-resolver-transport-http",
                                                   "org.apache.maven.resolver:maven-resolver-transport-file")).apache(),
    LibraryLicense(name = "Maven Wrapper", libraryName = "io.takari.maven.wrapper",
                   url = "https://github.com/takari/maven-wrapper").apache(),
    LibraryLicense(name = "Maven3", attachedTo = "intellij.maven.server.m3.common",
                   additionalLibraryNames = listOf("org.apache.maven.shared:maven-dependency-tree:1.2",
                                                   "org.apache.maven.archetype:archetype-common:2.2"),
                   version = "3.6.1", url = "https://maven.apache.org/").apache(),
    LibraryLicense(name = "Memory File System", libraryName = "memoryfilesystem",
                   url = "https://github.com/marschall/memoryfilesystem").mit(),
    LibraryLicense(name = "mercurial_prompthooks", attachedTo = "intellij.vcs.hg", version = LibraryLicense.CUSTOM_REVISION,
                   license = "GPLv2 (used as hg extension called from hg executable)",
                   url = "https://github.com/willemv/mercurial_prompthooks",
                   licenseUrl = "https://github.com/willemv/mercurial_prompthooks/blob/master/LICENSE.txt"),
    LibraryLicense(name = "Microba", libraryName = "microba", version = "0.4.2", url = "https://microba.sourceforge.net/",
                   licenseUrl = "https://microba.sourceforge.net/license.txt").newBsd(),
    LibraryLicense(name = "MigLayout", libraryName = "miglayout-swing",
                   url = "https://www.miglayout.com/", licenseUrl = "https://www.miglayout.com/mavensite/license.html").newBsd(),
    LibraryLicense(name = "minlog", libraryName = "Kryo", transitiveDependency = true, version = "1.2",
                   url = "https://github.com/EsotericSoftware/minlog").newBsd(),
    LibraryLicense(name = "morfologik-fsa", libraryName = "org.carrot2:morfologik-fsa:2.1.7",
                   url = "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    LibraryLicense(name = "morfologik-fsa-builders", libraryName = "org.carrot2:morfologik-fsa-builders:2.1.7",
                   url = "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    LibraryLicense(name = "morfologik-speller", libraryName = "org.carrot2:morfologik-speller:2.1.7",
                   url = "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    LibraryLicense(name = "morfologik-stemming", libraryName = "org.carrot2:morfologik-stemming:2.1.7",
                   url = "https://github.com/morfologik/morfologik-stemming").simplifiedBsd(),
    LibraryLicense(name = "Moshi", libraryName = "moshi", url = "https://github.com/square/moshi").apache(),
    LibraryLicense(libraryName = "NanoXML", license = "zlib/libpng",
                   url = "https://mvnrepository.com/artifact/be.cyberelf.nanoxml/nanoxml/2.2.3",
                   licenseUrl = "https://www.opensource.org/licenses/zlib-license.html"),
    LibraryLicense(name = "net.loomchild.segment", libraryName = "net.loomchild:segment:2.0.1",
                   url = "https://github.com/loomchild/segment",
                   licenseUrl = "https://github.com/loomchild/segment/blob/master/LICENSE.txt").mit(),
    LibraryLicense(name = "netty-buffer", libraryName = "netty-buffer", url = "https://netty.io").apache(),
    LibraryLicense(name = "netty-codec-http", libraryName = "netty-codec-http", url = "https://netty.io").apache(),
    LibraryLicense(name = "netty-handler-proxy", libraryName = "netty-handler-proxy", url = "https://netty.io").apache(),
    LibraryLicense(libraryName = "ngram-slp", url = "https://github.com/SLP-team/SLP-Core",
                   licenseUrl = "https://github.com/SLP-team/SLP-Core/blob/master/LICENSE").mit(),
    LibraryLicense(name = "Objenesis", libraryName = "Objenesis", url = "https://objenesis.org/").apache(),
    LibraryLicense(name = "OkHttp", libraryName = "okhttp", url = "https://square.github.io/okhttp/").apache(),
    LibraryLicense(name = "Okio", libraryName = "okio", url = "https://github.com/square/okio").apache(),
    LibraryLicense(libraryName = "opentelemetry", url = "https://opentelemetry.io/").apache(),
    LibraryLicense(libraryName = "opentelemetry-exporter-otlp", url = "https://opentelemetry.io/").apache(),
    LibraryLicense(libraryName = "opentest4j", url = "https://github.com/ota4j-team/opentest4j").apache(),
    LibraryLicense(name = "Package Search API Models", libraryName = "package-search-api-models",
                   url = "https://github.com/JetBrains/package-search-api-models", version = "2.2.8").apache(),
    LibraryLicense(name = "Package Search Version Utils", libraryName = "package-search-version-utils",
                   url = "https://github.com/JetBrains/package-search-version-utils", version = "1.0.1").apache(),
    LibraryLicense(name = "PEPK", libraryName = "pepk", url = "https://source.android.com/",
                   version = LibraryLicense.CUSTOM_REVISION).apache(),
    LibraryLicense(name = "Perfetto protos", libraryName = "perfetto-proto", url = "https://source.android.com").apache(),
    LibraryLicense(name = "pip", attachedTo = "intellij.python", version = "20.3.4",
                   url = "https://pip.pypa.io/",
                   licenseUrl = "https://github.com/pypa/pip/blob/main/LICENSE.txt").mit(),
    LibraryLicense(name = "plexus-archiver", libraryName = "plexus-archiver",
                   url = "https://github.com/codehaus-plexus/plexus-archiver").apache(),
    LibraryLicense(name = "plexus-classworlds", attachedTo = "intellij.maven.server.m30.impl", version = "2.4",
                   url = "https://github.com/codehaus-plexus/plexus-classworlds").apache(),
    LibraryLicense(name = "Plexus Utils", libraryName = "plexus-utils",
                   url = "https://plexus.codehaus.org/plexus-utils").apache(),
    LibraryLicense(name = "PLY", attachedTo = "intellij.python", version = "3.7",
                   url = "https://www.dabeaz.com/ply/").newBsd(),
    LibraryLicense(name = "pockets", attachedTo = "intellij.python", version = "0.9.1",
                   url = "https://pockets.readthedocs.io/",
                   licenseUrl = "https://github.com/RobRuana/pockets/blob/master/LICENSE").newBsd(),
    LibraryLicense(name = "Protocol Buffers", libraryName = "protobuf", url = "https://developers.google.com/protocol-buffers",
                   licenseUrl = "https://github.com/google/protobuf/blob/master/LICENSE").newBsd(),
    LibraryLicense(name = "Protocol Buffers", libraryName = "protobuf-java6", url = "https://developers.google.com/protocol-buffers",
                   licenseUrl = "https://github.com/protocolbuffers/protobuf/blob/v3.5.1/LICENSE").newBsd(),
    LibraryLicense(name = "Proxy Vole (JetBrains's fork)", libraryName = "proxy-vole",
                   url = "https://github.com/JetBrains/intellij-deps-proxy-vole",
                   licenseUrl = "https://github.com/MarkusBernhardt/proxy-vole/blob/master/LICENSE.md").apache(),
    LibraryLicense(name = "pty4j", libraryName = "pty4j",
                   url = "https://github.com/JetBrains/pty4j").eplV1(),
    LibraryLicense(name = "PureJavaComm", libraryName = "pty4j", transitiveDependency = true, version = "0.0.11.1",
                   url = "https://github.com/nyholku/purejavacomm",
                   licenseUrl = "https://github.com/nyholku/purejavacomm/blob/master/LICENSE.txt").newBsd(),
    LibraryLicense(name = "pycodestyle", attachedTo = "intellij.python", version = "2.8.0",
                   url = "https://pycodestyle.pycqa.org/",
                   licenseUrl = "https://github.com/PyCQA/pycodestyle/blob/main/LICENSE").mit(),
    LibraryLicense(name = "pyparsing", attachedTo = "intellij.python", version = "1.5.6",
                   url = "https://github.com/pyparsing/pyparsing/",
                   licenseUrl = "https://github.com/pyparsing/pyparsing/blob/master/LICENSE").mit(),
    LibraryLicense(name = "qdox-java-parser", libraryName = "qdox-java-parser",
                   url = "https://github.com/paul-hammant/qdox").apache(),
    LibraryLicense(name = "R8 DEX shrinker", libraryName = "jb-r8", url = "https://r8.googlesource.com/r8").newBsd(),
    LibraryLicense(name = "Relax NG Object Model", libraryName = "rngom-20051226-patched.jar",
                   url = "https://github.com/kohsuke/rngom", version = LibraryLicense.CUSTOM_REVISION).mit(),
    LibraryLicense(name = "Rhino JavaScript Engine", libraryName = "rhino", license = "MPL 1.1",
                   url = "https://www.mozilla.org/rhino/", licenseUrl = "https://www.mozilla.org/MPL/MPL-1.1.html"),
    LibraryLicense(name = "Roboto", attachedTo = "intellij.platform.resources", version = "1.100141",
                   url = "https://github.com/googlefonts/roboto",
                   licenseUrl = "https://github.com/google/roboto/blob/master/LICENSE").apache(),
    LibraryLicense(name = "roman", attachedTo = "intellij.python", version = "1.4.0",
                   url = "https://docutils.sourceforge.io/docutils/utils/roman.py",
                   license = "Python 2.1.1 license",
                   licenseUrl = "https://www.python.org/download/releases/2.1.1/license/"),
    LibraryLicense(libraryName = "sa-jdwp", license = "GPL 2.0 + Classpath", url = "https://github.com/JetBrains/jdk-sa-jdwp",
                   licenseUrl = "https://raw.githubusercontent.com/JetBrains/jdk-sa-jdwp/master/LICENSE.txt"),
    LibraryLicense(libraryName = "Saxon-6.5.5", version = "6.5.5", license = "Mozilla Public License",
                   url = "https://saxon.sourceforge.net/",
                   licenseUrl = "https://www.mozilla.org/MPL/"),
    LibraryLicense(libraryName = "Saxon-9HE", version = "9", license = "Mozilla Public License", url = "https://saxon.sourceforge.net/",
                   licenseUrl = "https://www.mozilla.org/MPL/"),
    LibraryLicense(name = "setuptools", attachedTo = "intellij.python", version = "44.1.1",
                   url = "https://setuptools.pypa.io/",
                   licenseUrl = "https://github.com/pypa/setuptools/blob/main/LICENSE").mit(),
    LibraryLicense(name = "six.py", attachedTo = "intellij.python", version = "1.9.0",
                   url = "https://six.readthedocs.io/",
                   licenseUrl = "https://github.com/benjaminp/six/blob/master/LICENSE").mit(),
    LibraryLicense(libraryName = "Slf4j", url = "https://slf4j.org/", licenseUrl = "https://slf4j.org/license.html").mit(),
    LibraryLicense(libraryName = "slf4j-jdk14", url = "https://slf4j.org/", licenseUrl = "https://slf4j.org/license.html").mit(),
    LibraryLicense(name = "SnakeYAML", libraryName = "snakeyaml",
                   url = "https://bitbucket.org/asomov/snakeyaml").apache(),
    LibraryLicense(name = "snakeyaml-engine", libraryName = "snakeyaml-engine",
                   url = "https://bitbucket.org/asomov/snakeyaml-engine/src").apache(),
    LibraryLicense(name = "Sonatype Nexus: Indexer", attachedTo = "intellij.maven.server.m3.common", version = "3.0.4",
                   additionalLibraryNames = listOf("org.sonatype.nexus:nexus-indexer:3.0.4",
                                                   "org.sonatype.nexus:nexus-indexer-artifact:1.0.1"),
                   url = "https://nexus.sonatype.org/").eplV1(),
    LibraryLicense(name = "Sonatype Nexus: Indexer", libraryName = "nexus-indexer-1.2.3.jar", version = "1.2.3",
                   url = "https://nexus.sonatype.org/").eplV1(),
    LibraryLicense(name = "SourceCodePro", attachedTo = "intellij.platform.resources", version = "2.010", license = "OFL",
                       url = "https://github.com/adobe-fonts/source-code-pro",
                       licenseUrl = "https://github.com/adobe-fonts/source-code-pro/blob/master/LICENSE.md"),
    LibraryLicense(name = "Spantable", libraryName = "spantable", version = "patched", license = "LGPL 2.1",
                       licenseUrl = "https://www.gnu.org/licenses/lgpl.html",
                       url = "https://android.googlesource.com/platform/prebuilts/tools/+/master/common/spantable/"),
    LibraryLicense(name = "sphinxcontrib-napoleon", attachedTo = "intellij.python", version = "0.7",
                   url = "https://sphinxcontrib-napoleon.readthedocs.io/",
                   licenseUrl = "https://github.com/sphinx-contrib/napoleon/blob/master/LICENSE").simplifiedBsd(),
    LibraryLicense(name = "SQLite Inspector Proto", libraryName = "sqlite-inspector-proto",
                   url = "https://source.android.com").apache(),
    LibraryLicense(name = "ssh-nio-fs", libraryName = "ssh-nio-fs",
                   url = "https://github.com/JetBrains/intellij-deps-ssh-nio-fs",
                   licenseUrl = "https://github.com/JetBrains/intellij-deps-ssh-nio-fs/blob/master/LICENSE").mit(),
    LibraryLicense(name = "SSHJ",
                   libraryName = "SSHJ",
                   licenseUrl = "https://github.com/hierynomus/sshj/blob/master/LICENSE",
                   url = "https://github.com/hierynomus/sshj").apache(),
    LibraryLicense(name = "StreamEx", libraryName = "StreamEx",
                   url = "https://github.com/amaembo/streamex").apache(),
    LibraryLicense(name = "Studio Protobuf", libraryName = "studio-proto", license = "protobuf",
                   url = "https://github.com/protocolbuffers/protobuf",
                   licenseUrl = "https://github.com/protocolbuffers/protobuf/blob/master/LICENSE"),
    LibraryLicense(name = "swingx", libraryName = "swingx", license = "LGPL 2.1",
                   url = "https://java.net/downloads/swingx/", licenseUrl = "https://www.opensource.org/licenses/lgpl-2.1.php"),
    // for tensorflow-lite-metadata module library in android.sdktools.mlkit-common
    LibraryLicense(name = "TensorFlow Lite Metadata Library", libraryName = "tensorflow-lite-metadata",
                   url = "https://tensorflow.org/lite").apache(),
    LibraryLicense(libraryName = "TestNG", url = "https://testng.org/doc/",
                   licenseUrl = "https://github.com/cbeust/testng/blob/master/LICENSE.txt").apache(),
    LibraryLicense(name = "Thrift", libraryName = "libthrift", url = "https://thrift.apache.org/").apache(),
    LibraryLicense(name = "thriftpy2", attachedTo = "intellij.python", version = "0.4.13",
                   url = "https://github.com/Thriftpy/thriftpy2/",
                   licenseUrl = "https://github.com/Thriftpy/thriftpy2/blob/master/LICENSE").mit(),
    // for traceprocessor-proto module library in intellij.android.profilersAndroid
    LibraryLicense(name = "TraceProcessor Daemon Protos", libraryName = "traceprocessor-proto",
                   url = "https://source.android.com").apache(),
    LibraryLicense(name = "Transport Pipeline", libraryName = "transport-proto",
                   url = "https://source.android.com").apache(),
    LibraryLicense(name = "Trove4j (JetBrains's fork)", libraryName = "Trove4j", license = "LGPL",
                   url = "https://github.com/JetBrains/intellij-deps-trove4j",
                   licenseUrl = "https://github.com/JetBrains/intellij-deps-trove4j/blob/master/LICENSE.txt"),
    LibraryLicense(name = "TwelveMonkeys ImageIO", libraryName = "imageio-tiff",
                   url = "https://github.com/haraldk/TwelveMonkeys",
                   licenseUrl = "https://github.com/haraldk/TwelveMonkeys#license").newBsd(),
    LibraryLicense(name = "Typeshed", attachedTo = "intellij.python", version = LibraryLicense.CUSTOM_REVISION,
                   url = "https://github.com/python/typeshed",
                   licenseUrl = "https://github.com/python/typeshed/blob/master/LICENSE").apache(),
    LibraryLicense(name = "unit-api", libraryName = "javax.measure:unit-api:1.0",
                   url = "https://github.com/unitsofmeasurement/unit-api",
                   licenseUrl = "https://github.com/unitsofmeasurement/unit-api/blob/master/LICENSE").newBsd(),
    LibraryLicense(name = "uom-lib-common", libraryName = "tech.uom.lib:uom-lib-common:1.1",
                   url = "https://github.com/unitsofmeasurement/uom-lib",
                   licenseUrl = "https://github.com/unitsofmeasurement/uom-lib/blob/master/LICENSE").newBsd(),
    LibraryLicense(libraryName = "Velocity", url = "https://velocity.apache.org/").apache(),
    LibraryLicense(name = "virtualenv", attachedTo = "intellij.python", version = "20.13.0",
                   url = "https://virtualenv.pypa.io/",
                   licenseUrl = "https://github.com/pypa/virtualenv/blob/main/LICENSE").mit(),
    LibraryLicense(name = "Visual Studio Code", attachedTo = "intellij.textmate", version = "1.33.1",
                   url = "https://github.com/Microsoft/vscode/",
                   licenseUrl = "https://github.com/Microsoft/vscode-react-native/blob/master/LICENSE.txt").mit(),
    LibraryLicense(name = "weberknecht", libraryName = "weberknecht-0.1.5.jar", version = "0.1.5",
                   url = "https://github.com/pelotoncycle/weberknecht").apache(),
    LibraryLicense(libraryName = "winp", url = "https://github.com/kohsuke/winp").mit(),
    // for workmanager-inspector-proto module library in intellij.android.app-inspection.inspectors.workmanager.model
    LibraryLicense(name = "WorkManager Inspector Proto", libraryName = "workmanager-inspector-proto",
                   url = "https://source.android.com").apache(),
    LibraryLicense(name = "Xalan", libraryName = "Xalan-2.7.2",
                   url = "https://xalan.apache.org/xalan-j/", licenseUrl = "https://xalan.apache.org/xalan-j/#license").apache(),
    LibraryLicense(libraryName = "Xerces", url = "https://xerces.apache.org/xerces2-j/",
                   licenseUrl = "https://xerces.apache.org/xerces2-j/").apache(),
    LibraryLicense(name = "Xerial SQLite JDBC", libraryName = "sqlite",
                   url = "https://github.com/xerial/sqlite-jdbc").apache(),
    LibraryLicense(name = "xml-apis-ext", libraryName = "xml-apis-ext",
                   url = "https://xerces.apache.org/xml-commons/components/external").apache(),
    LibraryLicense(name = "xml-resolver", libraryName = "xml-resolver",
                   url = "https://xml.apache.org/commons/components/resolver/").apache(),
    LibraryLicense(name = "XMLBeans", libraryName = "XmlBeans",
                   url = "https://xmlbeans.apache.org/",
                   licenseUrl = "https://svn.jetbrains.org/idea/Trunk/bundled/WebServices/resources/lib/xmlbeans-2.3.0/xmlbeans.LICENSE").apache(),
    LibraryLicense(name = "XmlRPC", libraryName = "XmlRPC",
                   url = "https://ws.apache.org/xmlrpc/xmlrpc2/",
                   licenseUrl = "https://ws.apache.org/xmlrpc/xmlrpc2/license.html").apache(),
    LibraryLicense(name = "XSLT Debugger RMI Stubs",
                   libraryName = "RMI Stubs",
                   url = "https://confluence.jetbrains.com/display/CONTEST/XSLT-Debugger",
                   version = LibraryLicense.CUSTOM_REVISION).apache(),
    LibraryLicense(name = "XStream", libraryName = "XStream",
                   url = "https://x-stream.github.io/", licenseUrl = "https://x-stream.github.io/license.html").newBsd(),
    LibraryLicense(name = "XZ for Java", libraryName = "xz", license = "Public Domain",
                   url = "https://tukaani.org/xz/java.html",
                   licenseUrl = "https://git.tukaani.org/?p=xz-java.git;a=blob;f=COPYING;h=8dd17645c4610c3d5eed9bcdd2699ecfac00406b;hb=refs/heads/master"),
    LibraryLicense(name = "zip-signer", libraryName = "zip-signer",
                   url = "https://github.com/JetBrains/marketplace-zip-signer").apache(),
    LibraryLicense(name = "zstd-jni", libraryName = "zstd-jni",
                   url = "https://github.com/luben/zstd-jni",
                   license = "BSD",
                   licenseUrl = "https://github.com/luben/zstd-jni/blob/master/LICENSE"),
    jetbrainsLibrary("change-reminder-prediction-model"),
    jetbrainsLibrary("cloud-config-client"),
    jetbrainsLibrary("completion-log-events"),
    jetbrainsLibrary("completion-ranking-cpp-exp"),
    jetbrainsLibrary("completion-ranking-dart-exp"),
    jetbrainsLibrary("completion-ranking-go-exp"),
    jetbrainsLibrary("completion-ranking-java"),
    jetbrainsLibrary("completion-ranking-java-exp"),
    jetbrainsLibrary("completion-ranking-java-exp2"),
    jetbrainsLibrary("completion-ranking-js-exp"),
    jetbrainsLibrary("completion-ranking-kotlin"),
    jetbrainsLibrary("completion-ranking-kotlin-exp"),
    jetbrainsLibrary("completion-ranking-php-exp"),
    jetbrainsLibrary("completion-ranking-python"),
    jetbrainsLibrary("completion-ranking-python-exp"),
    jetbrainsLibrary("completion-ranking-ruby-exp"),
    jetbrainsLibrary("completion-ranking-rust-exp"),
    jetbrainsLibrary("completion-ranking-scala-exp"),
    jetbrainsLibrary("completion-ranking-swift-exp"),
    jetbrainsLibrary("completion-ranking-typescript-exp"),
    jetbrainsLibrary("debugger-memory-agent"),
    jetbrainsLibrary("file-prediction-model"),
    jetbrainsLibrary("find-action-model"),
    jetbrainsLibrary("find-action-model-experimental"),
    jetbrainsLibrary("find-file-model"),
    jetbrainsLibrary("git-learning-project"),
    jetbrainsLibrary("intellij-coverage"),
    jetbrainsLibrary("intellij-test-discovery"),
    jetbrainsLibrary("intellij.remoterobot.ide.launcher"),
    jetbrainsLibrary("intellij.remoterobot.remote.fixtures"),
    jetbrainsLibrary("intellij.remoterobot.remote.robot"),
    jetbrainsLibrary("intellij.remoterobot.robot.server"),
    jetbrainsLibrary("jetbrains.markdown.jvm"),
    jetbrainsLibrary("jetbrains.research.refactorinsight.kotlin.impl"),
    jetbrainsLibrary("jshell-frontend"),
    jetbrainsLibrary("jvm-native-trusted-roots"),
    jetbrainsLibrary("kotlin-gradle-plugin-idea"),
    jetbrainsLibrary("kotlin-gradle-plugin-idea-proto"),
    jetbrainsLibrary("kotlin-script-runtime"),
    jetbrainsLibrary("kotlin-test"),
    jetbrainsLibrary("kotlin-tooling-core"),
    jetbrainsLibrary("kotlinc.allopen-compiler-plugin"),
    jetbrainsLibrary("kotlinc.analysis-api-providers"),
    jetbrainsLibrary("kotlinc.analysis-project-structure"),
    jetbrainsLibrary("kotlinc.android-extensions-compiler-plugin"),
    jetbrainsLibrary("kotlinc.high-level-api"),
    jetbrainsLibrary("kotlinc.high-level-api-fe10"),
    jetbrainsLibrary("kotlinc.high-level-api-fir"),
    jetbrainsLibrary("kotlinc.high-level-api-fir-tests"),
    jetbrainsLibrary("kotlinc.high-level-api-impl-base"),
    jetbrainsLibrary("kotlinc.high-level-api-impl-base-tests"),
    jetbrainsLibrary("kotlinc.incremental-compilation-impl-tests"),
    jetbrainsLibrary("kotlinc.kotlin-backend-native"),
    jetbrainsLibrary("kotlinc.kotlin-build-common-tests"),
    jetbrainsLibrary("kotlinc.kotlin-compiler-cli"),
    jetbrainsLibrary("kotlinc.kotlin-compiler-common"),
    jetbrainsLibrary("kotlinc.kotlin-compiler-fe10"),
    jetbrainsLibrary("kotlinc.kotlin-compiler-fir"),
    jetbrainsLibrary("kotlinc.kotlin-compiler-ir"),
    jetbrainsLibrary("kotlinc.kotlin-compiler-tests"),
    jetbrainsLibrary("kotlinc.kotlin-dist"),
    jetbrainsLibrary("kotlinc.kotlin-gradle-statistics"),
    jetbrainsLibrary("kotlinc.kotlin-jps-common"),
    jetbrainsLibrary("kotlinc.kotlin-jps-plugin-classpath"),
    jetbrainsLibrary("kotlinc.kotlin-reflect"),
    jetbrainsLibrary("kotlinc.kotlin-script-runtime"),
    jetbrainsLibrary("kotlinc.kotlin-scripting-common"),
    jetbrainsLibrary("kotlinc.kotlin-scripting-compiler-impl"),
    jetbrainsLibrary("kotlinc.kotlin-scripting-jvm"),
    jetbrainsLibrary("kotlinc.kotlin-stdlib"),
    jetbrainsLibrary("kotlinc.kotlin-stdlib-minimal-for-test"),
    jetbrainsLibrary("kotlinc.kotlinx-serialization-compiler-plugin"),
    jetbrainsLibrary("kotlinc.lombok-compiler-plugin"),
    jetbrainsLibrary("kotlinc.low-level-api-fir"),
    jetbrainsLibrary("kotlinc.noarg-compiler-plugin"),
    jetbrainsLibrary("kotlinc.parcelize-compiler-plugin"),
    jetbrainsLibrary("kotlinc.sam-with-receiver-compiler-plugin"),
    jetbrainsLibrary("kotlinc.symbol-light-classes"),
    jetbrainsLibrary("kotlinx-collections-immutable-jvm"),
    jetbrainsLibrary("kotlinx.kotlinx-serialization-compiler-plugin-for-compilation"),
    jetbrainsLibrary("ktor-network-tls"),
    jetbrainsLibrary("ml-completion-prev-exprs-models"),
    jetbrainsLibrary("rd-core"),
    jetbrainsLibrary("rd-framework"),
    jetbrainsLibrary("rd-swing"),
    jetbrainsLibrary("rd-text"),
    jetbrainsLibrary("tcServiceMessages"),
    jetbrainsLibrary("tips-idea-ce"),
    jetbrainsLibrary("tips-pycharm-community"),
  )
}
