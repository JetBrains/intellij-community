<idea-plugin>
  <!--suppress PluginXmlDynamicPlugin -->
  <application-components>
    <component>
      <interface-class>com.intellij.openapi.command.undo.UndoManager</interface-class>
      <implementation-class>com.intellij.openapi.command.impl.UndoManagerImpl</implementation-class>
    </component>
  </application-components>

  <!--suppress PluginXmlDynamicPlugin -->
  <project-components>
    <component>
      <interface-class>com.intellij.openapi.command.undo.UndoManager</interface-class>
      <implementation-class>com.intellij.openapi.command.impl.UndoManagerImpl</implementation-class>
    </component>

    <component>
      <interface-class>com.intellij.openapi.roots.ProjectRootManager</interface-class>
      <implementation-class>com.intellij.openapi.roots.impl.ProjectRootManagerComponent</implementation-class>
      <loadForDefaultProject/>
    </component>

    <component>
      <interface-class>com.intellij.openapi.module.ModuleManager</interface-class>
      <implementation-class>com.intellij.openapi.module.impl.ModuleManagerComponent</implementation-class>
      <loadForDefaultProject/>
    </component>
    <component>
      <interface-class>com.intellij.openapi.module.impl.ExternalModuleListStorage</interface-class>
      <implementation-class>com.intellij.openapi.module.impl.ExternalModuleListStorageImpl</implementation-class>
      <loadForDefaultProject/>
    </component>

    <component>
      <interface-class>com.intellij.openapi.fileEditor.FileEditorManager</interface-class>
      <implementation-class>com.intellij.openapi.fileEditor.impl.PsiAwareFileEditorManagerImpl</implementation-class>
      <!--suppress PluginXmlValidity -->
      <headless-implementation-class>com.intellij.openapi.fileEditor.impl.TestEditorManagerImpl</headless-implementation-class>
    </component>

    <component>
      <interface-class>com.intellij.problems.WolfTheProblemSolver</interface-class>
      <implementation-class>com.intellij.codeInsight.problems.WolfTheProblemSolverImpl</implementation-class>
      <headless-implementation-class>com.intellij.codeInsight.problems.MockWolfTheProblemSolver</headless-implementation-class>
    </component>

    <component>
      <interface-class>com.intellij.codeInsight.daemon.DaemonCodeAnalyzer</interface-class>
      <implementation-class>com.intellij.codeInsight.daemon.impl.DaemonCodeAnalyzerImpl</implementation-class>
      <loadForDefaultProject/>
    </component>
    <component>
      <interface-class>com.intellij.openapi.roots.impl.PushedFilePropertiesUpdater</interface-class>
      <implementation-class>com.intellij.openapi.roots.impl.PushedFilePropertiesUpdaterImpl</implementation-class>
    </component>

    <component>
      <interface-class>com.intellij.facet.pointers.FacetPointersManager</interface-class>
      <implementation-class>com.intellij.facet.impl.pointers.FacetPointersManagerImpl</implementation-class>
    </component>
  </project-components>

  <extensionPoints>
    <!-- only bundled plugin can define extension -->
    <!--suppress PluginXmlDynamicPlugin -->
    <extensionPoint name="registerToolWindowTaskProvider" interface="com.intellij.openapi.wm.impl.RegisterToolWindowTaskProvider"/>
  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">
    <applicationService serviceInterface="com.intellij.ide.ui.LafManager"
                        serviceImplementation="com.intellij.ide.ui.laf.LafManagerImpl"
                        headlessImplementation="com.intellij.ide.ui.laf.HeadlessLafManagerImpl" preload="true" order="first"/>

    <applicationService serviceInterface="com.intellij.openapi.wm.WindowManager"
                        serviceImplementation="com.intellij.openapi.wm.impl.WindowManagerImpl"
                        headlessImplementation="com.intellij.openapi.wm.impl.TestWindowManager" preload="notHeadless"/>
    <applicationService serviceInterface="com.intellij.openapi.wm.IdeFocusManager"
                        serviceImplementation="com.intellij.openapi.wm.impl.FocusManagerImpl"
                        headlessImplementation="com.intellij.openapi.wm.impl.IdeFocusManagerHeadless" preload="notHeadless"/>

    <applicationService serviceImplementation="com.intellij.ide.IdeTooltipManager" preload="notHeadless"/>

    <applicationService serviceInterface="com.intellij.openapi.actionSystem.ActionManager"
                        serviceImplementation="com.intellij.openapi.actionSystem.impl.ActionManagerImpl"/>
    <applicationService serviceInterface="com.intellij.ide.DataManager"
                        serviceImplementation="com.intellij.ide.impl.DataManagerImpl"
                        testServiceImplementation="com.intellij.ide.impl.HeadlessDataManager"/>
    <postStartupActivity implementation="com.intellij.openapi.wm.impl.LibraryDependentToolWindowManager"/>

    <projectService serviceInterface="com.intellij.openapi.wm.ToolWindowManager"
                    serviceImplementation="com.intellij.openapi.wm.impl.ToolWindowManagerImpl"
                    headlessImplementation="com.intellij.openapi.wm.impl.ToolWindowHeadlessManagerImpl" preload="notHeadless"/>

    <applicationService serviceImplementation="com.intellij.openapi.keymap.impl.ModifierKeyDoubleClickHandler" preload="await"/>
    <projectService serviceInterface="com.intellij.openapi.fileEditor.ex.IdeDocumentHistory"
                    serviceImplementation="com.intellij.openapi.fileEditor.impl.IdeDocumentHistoryImpl" preload="await"/>

    <applicationService serviceImplementation="com.intellij.ide.actionMacro.ActionMacroManager"/>
    <!--suppress PluginXmlDynamicPlugin -->
    <actionConfigurationCustomizer implementation="com.intellij.ide.actionMacro.ActionMacroManager$MyActionTuner"/>

    <projectService serviceImplementation="com.intellij.codeInsight.daemon.impl.DaemonListeners" preload="await"/>
    <projectService serviceImplementation="com.intellij.codeInsight.navigation.CtrlMouseHandler" preload="await"/>
    <projectService serviceImplementation="com.intellij.psi.search.scope.packageSet.UpdatingScopeOnProjectStructureChangeListener"
                    preload="await"/>
    <startupActivity implementation="com.intellij.codeInsight.actions.ReaderModeEditorSettingsListener"/>
  </extensions>

  <!--suppress PluginXmlDynamicPlugin -->
  <module-components>
    <component>
      <interface-class>com.intellij.openapi.roots.ModuleRootManager</interface-class>
      <implementation-class>com.intellij.openapi.roots.impl.ModuleRootManagerComponent</implementation-class>
    </component>
    <component>
      <interface-class>com.intellij.facet.FacetManager</interface-class>
      <implementation-class>com.intellij.facet.FacetManagerImpl</implementation-class>
    </component>
  </module-components>

  <applicationListeners>
    <listener class="com.intellij.openapi.editor.impl.VisibleEditorsTracker$MyCommandListener"
              topic="com.intellij.openapi.command.CommandListener"/>
    <listener class="com.intellij.util.gist.GistManagerImpl$MyBulkFileListener" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
    <listener class="com.intellij.ide.RecentProjectsManagerBase$MyAppLifecycleListener" topic="com.intellij.ide.AppLifecycleListener"
              activeInHeadlessMode="false"/>
    <listener class="com.intellij.ide.RecentProjectsManagerBase$MyProjectListener"
              topic="com.intellij.openapi.project.ProjectManagerListener" activeInHeadlessMode="false"/>
    <listener class="com.intellij.openapi.wm.impl.WindowDressing" topic="com.intellij.openapi.project.ProjectManagerListener"
              activeInHeadlessMode="false"/>
    <listener class="com.intellij.openapi.wm.impl.WindowDressing" topic="com.intellij.ide.lightEdit.LightEditServiceListener"
              activeInHeadlessMode="false"/>
    <listener class="com.intellij.openapi.editor.impl.EditorLastActionTracker$MyAnActionListener"
              topic="com.intellij.openapi.actionSystem.ex.AnActionListener"/>
    <listener class="com.intellij.diagnostic.IdeaFreezeReporter" topic="com.intellij.diagnostic.IdePerformanceListener"
              activeInTestMode="false" activeInHeadlessMode="false"/>

    <listener class="com.intellij.notification.impl.NotificationsManagerImpl$MyNotificationListener"
              topic="com.intellij.notification.Notifications"/>
    <listener class="com.intellij.notification.EventLog$MyNotificationListener" topic="com.intellij.notification.Notifications"/>
    <listener class="com.intellij.notification.impl.NotificationsConfigurationImpl$MyNotificationListener"
              topic="com.intellij.notification.Notifications"/>

    <listener class="com.intellij.internal.statistic.collectors.fus.fileTypes.FileTypeUsageCounterCollector$MyAnActionListener"
              topic="com.intellij.openapi.actionSystem.ex.AnActionListener"/>
    <listener class="com.intellij.internal.statistic.EventLogApplicationLifecycleListener" topic="com.intellij.ide.AppLifecycleListener"
              activeInHeadlessMode="true" activeInTestMode="false"/>
    <listener class="com.intellij.internal.statistic.local.ActionsLocalSummaryListener"
              topic="com.intellij.openapi.actionSystem.ex.AnActionListener"/>

    <listener class="com.intellij.ide.GeneratedSourceFileChangeTrackerImpl$MyProjectManagerListener"
              topic="com.intellij.openapi.project.ProjectManagerListener"/>

    <listener class="com.intellij.notification.impl.MacEventReader" topic="com.intellij.notification.Notifications" os="mac"
              activeInHeadlessMode="false"/>
    <listener class="com.intellij.notification.impl.NotificationsBeeper" topic="com.intellij.notification.Notifications"
              activeInHeadlessMode="false"/>

    <listener class="com.intellij.internal.performance.LatenciometerListener"
              topic="com.intellij.openapi.editor.actionSystem.LatencyListener"/>

    <listener class="com.intellij.openapi.vfs.newvfs.impl.CachedFileType$PsiListener"
              topic="com.intellij.psi.util.PsiModificationTracker$Listener"/>
    <listener class="com.intellij.openapi.vfs.newvfs.impl.CachedFileType$ReparseListener"
              topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
  </applicationListeners>
  <projectListeners>
    <listener class="com.intellij.execution.lineMarker.RunnableStatusListener"
              topic="com.intellij.codeInsight.daemon.DaemonCodeAnalyzer$DaemonListener"/>
    <listener class="com.intellij.internal.statistic.collectors.fus.fileTypes.FileTypeUsageService$MyBeforeFileEditorManagerListener"
              topic="com.intellij.openapi.fileEditor.FileEditorManagerListener$Before"/>
    <listener class="com.intellij.internal.statistic.collectors.fus.fileTypes.FileTypeUsageService$MyFileEditorManagerListener"
              topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"/>

    <!-- another one for project level -->
    <listener class="com.intellij.notification.impl.MacEventReader" topic="com.intellij.notification.Notifications" os="mac"
              activeInHeadlessMode="false"/>
    <listener class="com.intellij.notification.impl.NotificationsBeeper" topic="com.intellij.notification.Notifications"
              activeInHeadlessMode="false"/>
    <listener class="com.intellij.codeInsight.editorActions.ReaderModeFileEditorListener"
              topic="com.intellij.openapi.fileEditor.FileEditorManagerListener" activeInHeadlessMode="false"/>
    <listener class="com.intellij.codeInsight.actions.ReaderModeSettingsListener"
              topic="com.intellij.codeInsight.actions.ReaderModeListener" activeInHeadlessMode="false"/>
  </projectListeners>
</idea-plugin>
