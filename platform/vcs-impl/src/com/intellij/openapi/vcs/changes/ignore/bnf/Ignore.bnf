  {
    parserClass               = "com.intellij.openapi.vcs.changes.ignore.parser.IgnoreParser"
    extends                   = "com.intellij.openapi.vcs.changes.ignore.psi.IgnoreElementImpl"

    psiClassPrefix            = "Ignore"
    psiImplClassSuffix        = "Impl"
    psiPackage                = "com.intellij.openapi.vcs.changes.ignore.psi"
    psiImplPackage            = "com.intellij.openapi.vcs.changes.ignore.psi.impl"

    elementTypeHolderClass    = "com.intellij.openapi.vcs.changes.ignore.psi.IgnoreTypes"
    elementTypeClass          = "com.intellij.openapi.vcs.changes.ignore.psi.IgnoreElementType"
    tokenTypeClass            = "com.intellij.openapi.vcs.changes.ignore.psi.IgnoreTokenType"

    tokens = [
      CRLF                    = "regexp:[\s\r\n]+"
      HEADER                  = "regexp:###.*"
      SECTION                 = "regexp:##.*"
      COMMENT                 = "regexp:#.*"
      BRACKET_LEFT            = "regexp:(?!\\\[)\["
      BRACKET_RIGHT           = "regexp:(?!\\\])\]"
      SLASH                   = "/"
      SYNTAX_KEY              = "syntax:"
      VALUE                   = "regexp:(?![!#\s])(?![\[\]])(?:(?:\\[\[\]])|(?:\/\/)|[^\[\]\/\s])+"
    ]

    name("ENTRY.*")           = "entry"
    mixin("ENTRY")            = "com.intellij.openapi.vcs.changes.ignore.psi.impl.IgnoreEntryExtImpl"
    implements("ENTRY")       = "com.intellij.openapi.vcs.changes.ignore.psi.IgnoreEntryBase"
  }

  ignoreFile           ::= item_ *
  private item_           ::= HEADER | SECTION | COMMENT | SYNTAX | ENTRY_DIRECTORY | ENTRY_FILE | CRLF
  NEGATION                ::= "!"
  SYNTAX                  ::= SYNTAX_KEY CRLF * VALUE

  ENTRY_FILE              ::= NEGATION ? SLASH ? <<list_macro value_>>        { extends = "ENTRY" }
  ENTRY_DIRECTORY         ::= NEGATION ? SLASH ? <<list_macro value_>> SLASH  { extends = "ENTRY_FILE" }
  ENTRY                   ::= NEGATION ? SLASH ? <<list_macro value_>>

  private meta bvalue_    ::= BRACKET_LEFT ( VALUE SLASH ? ) + BRACKET_RIGHT  { pin = "BRACKET_LEFT" }
  private meta value_     ::= bvalue_ | VALUE
  private meta list_macro ::= <<p>> + (SLASH <<p>> +) *
