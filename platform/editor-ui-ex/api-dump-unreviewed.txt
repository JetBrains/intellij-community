f:com.intellij.application.options.EditorFontsConstants
- s:checkAndFixEditorFontSize(F):F
- s:checkAndFixEditorFontSize(I):I
- s:checkAndFixEditorLineSpacing(F):F
- s:getDefaultEditorFontSize():I
- s:getDefaultEditorLineSpacing():F
- s:getMaxEditorFontSize():I
- s:getMaxEditorLineSpacing():F
- s:getMinEditorFontSize():I
- s:getMinEditorLineSpacing():F
a:com.intellij.codeStyle.AbstractConvertLineSeparatorsAction
- com.intellij.openapi.actionSystem.AnAction
- com.intellij.ide.lightEdit.LightEditCompatible
- com.intellij.openapi.project.DumbAware
- p:<init>(java.lang.String,java.lang.String):V
- p:<init>(java.util.function.Supplier,com.intellij.util.LineSeparator):V
- actionPerformed(com.intellij.openapi.actionSystem.AnActionEvent):V
- s:changeLineSeparators(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile,java.lang.String):V
- getActionUpdateThread():com.intellij.openapi.actionSystem.ActionUpdateThread
- s:shouldProcess(com.intellij.openapi.vfs.VirtualFile):Z
- update(com.intellij.openapi.actionSystem.AnActionEvent):V
c:com.intellij.ide.todo.TodoConfiguration
- com.intellij.openapi.components.PersistentStateComponent
- sf:PROPERTY_CHANGE:com.intellij.util.messages.Topic
- sf:PROP_MULTILINE:java.lang.String
- sf:PROP_TODO_FILTERS:java.lang.String
- sf:PROP_TODO_PATTERNS:java.lang.String
- <init>():V
- colorSettingsChanged():V
- p:getDefaultPatterns():com.intellij.psi.search.TodoPattern[]
- getIndexPatterns():com.intellij.psi.search.IndexPattern[]
- s:getInstance():com.intellij.ide.todo.TodoConfiguration
- getState():org.jdom.Element
- getTodoFilter(java.lang.String):com.intellij.ide.todo.TodoFilter
- getTodoFilters():com.intellij.ide.todo.TodoFilter[]
- getTodoPatterns():com.intellij.psi.search.TodoPattern[]
- isMultiLine():Z
- loadState(org.jdom.Element):V
- resetToDefaultTodoPatterns():V
- setMultiLine(Z):V
- setTodoFilters(com.intellij.ide.todo.TodoFilter[]):V
- setTodoPatterns(com.intellij.psi.search.TodoPattern[]):V
f:com.intellij.ide.todo.TodoIndexPatternProvider
- com.intellij.psi.search.IndexPatternProvider
- <init>():V
- getIndexPatterns():com.intellij.psi.search.IndexPattern[]
- s:getInstance():com.intellij.ide.todo.TodoIndexPatternProvider
com.intellij.injected.editor.EditorWindow
- com.intellij.openapi.editor.Editor
- com.intellij.openapi.util.UserDataHolderEx
- a:getDelegate():com.intellij.openapi.editor.Editor
- a:getDocument():com.intellij.injected.editor.DocumentWindow
- a:getInjectedFile():com.intellij.psi.PsiFile
- a:hostToInjected(com.intellij.openapi.editor.LogicalPosition):com.intellij.openapi.editor.LogicalPosition
- a:injectedToHost(com.intellij.openapi.editor.LogicalPosition):com.intellij.openapi.editor.LogicalPosition
- a:isValid():Z
c:com.intellij.injected.editor.MarkupModelWindow
- com.intellij.openapi.util.UserDataHolderBase
- com.intellij.openapi.editor.ex.MarkupModelEx
- <init>(com.intellij.openapi.editor.ex.MarkupModelEx,com.intellij.injected.editor.DocumentWindow):V
- addLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.markup.RangeHighlighter
- addLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.markup.RangeHighlighter
- addMarkupModelListener(com.intellij.openapi.Disposable,com.intellij.openapi.editor.impl.event.MarkupModelListener):V
- addPersistentLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addPersistentLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addRangeHighlighter(I,I,I,com.intellij.openapi.editor.markup.TextAttributes,com.intellij.openapi.editor.markup.HighlighterTargetArea):com.intellij.openapi.editor.markup.RangeHighlighter
- addRangeHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea):com.intellij.openapi.editor.markup.RangeHighlighter
- addRangeHighlighterAndChangeAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea,Z,com.intellij.util.Consumer):com.intellij.openapi.editor.ex.RangeHighlighterEx
- changeAttributesInBatch(com.intellij.openapi.editor.ex.RangeHighlighterEx,com.intellij.util.Consumer):V
- containsHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):Z
- dispose():V
- getAllHighlighters():com.intellij.openapi.editor.markup.RangeHighlighter[]
- getDocument():com.intellij.openapi.editor.Document
- overlappingIterator(I,I):com.intellij.openapi.editor.ex.MarkupIterator
- processRangeHighlightersOutside(I,I,com.intellij.util.Processor):Z
- processRangeHighlightersOverlappingWith(I,I,com.intellij.util.Processor):Z
- removeAllHighlighters():V
- removeHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):V
- setRangeHighlighterAttributes(com.intellij.openapi.editor.markup.RangeHighlighter,com.intellij.openapi.editor.markup.TextAttributes):V
a:com.intellij.openapi.editor.colors.impl.AbstractColorsScheme
- com.intellij.openapi.editor.colors.impl.EditorFontCacheImpl
- com.intellij.configurationStore.SerializableScheme
- com.intellij.openapi.editor.colors.EditorColorsScheme
- sf:CURR_VERSION:I
- sf:INHERITED_ATTRS_MARKER:com.intellij.openapi.editor.markup.TextAttributes
- sf:INHERITED_COLOR_MARKER:java.awt.Color
- sf:META_INFO_ORIGINAL:java.lang.String
- sf:META_INFO_PLUGIN_ID:java.lang.String
- sf:NAME_ATTR:java.lang.String
- sf:NAME_BUNDLE_PROPERTY:java.lang.String
- sf:NAME_KEY_PROPERTY:java.lang.String
- sf:NULL_COLOR_MARKER:java.awt.Color
- s:getSchemeById:java.util.function.Function
- p:parentScheme:com.intellij.openapi.editor.colors.EditorColorsScheme
- <init>():V
- p:<init>(com.intellij.openapi.editor.colors.EditorColorsScheme):V
- ps:areDelegatingOrEqual(com.intellij.openapi.editor.colors.FontPreferences,com.intellij.openapi.editor.colors.FontPreferences):Z
- p:attributesEqual(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme,Z):Z
- canBeDeleted():Z
- a:clone():java.lang.Object
- p:colorsEqual(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme,java.util.function.Predicate):Z
- ps:colorsEqual(java.awt.Color,java.awt.Color):Z
- copyTo(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme):V
- getColorKeys():java.util.Set
- getConsoleFontName():java.lang.String
- getConsoleFontPreferences():com.intellij.openapi.editor.colors.FontPreferences
- getConsoleFontSize():I
- getConsoleFontSize2D():F
- getConsoleLineSpacing():F
- getDefaultBackground():java.awt.Color
- getDefaultForeground():java.awt.Color
- getDirectlyDefinedAttributes():java.util.Map
- getDirectlyDefinedAttributes(com.intellij.openapi.editor.colors.TextAttributesKey):com.intellij.openapi.editor.markup.TextAttributes
- getDirectlyDefinedColor(com.intellij.openapi.editor.colors.ColorKey):java.awt.Color
- getDirectlyDefinedColors():java.util.Map
- getDisplayName():java.lang.String
- getEditorFontName():java.lang.String
- getEditorFontSize():I
- getEditorFontSize2D():F
- p:getFallbackAttributes(com.intellij.openapi.editor.colors.TextAttributesKey):com.intellij.openapi.editor.markup.TextAttributes
- p:getFallbackColor(com.intellij.openapi.editor.colors.ColorKey):java.awt.Color
- getFont(com.intellij.openapi.editor.colors.EditorFontType):java.awt.Font
- p:getFontCacheScheme():com.intellij.openapi.editor.colors.EditorColorsScheme
- getFontPreferences():com.intellij.openapi.editor.colors.FontPreferences
- getLineSpacing():F
- p:getLocalizedName():java.lang.String
- getMetaProperties():java.util.Properties
- getName():java.lang.String
- getOriginal():com.intellij.openapi.editor.colors.impl.AbstractColorsScheme
- getParentScheme():com.intellij.openapi.editor.colors.EditorColorsScheme
- a:getSchemeState():com.intellij.openapi.options.SchemeState
- p:initFonts():V
- isUseAppFontPreferencesInEditor():Z
- isUseEditorFontPreferencesInConsole():Z
- isUseLigatures():Z
- a:isVisible():Z
- s:isVisible(com.intellij.openapi.editor.colors.EditorColorsScheme):Z
- optimizeAttributeMap():V
- readAttributes(org.jdom.Element):V
- readColors(org.jdom.Element):V
- readExternal(org.jdom.Element):V
- setCanBeDeleted(Z):V
- setConsoleFontName(java.lang.String):V
- setConsoleFontPreferences(com.intellij.openapi.editor.colors.FontPreferences):V
- setConsoleFontSize(F):V
- setConsoleFontSize(I):V
- setConsoleLineSpacing(F):V
- setDefaultMetaInfo(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme):V
- setEditorFontName(java.lang.String):V
- setEditorFontSize(F):V
- setEditorFontSize(I):V
- setFontPreferences(com.intellij.openapi.editor.colors.FontPreferences):V
- setLineSpacing(F):V
- setName(java.lang.String):V
- setParent(com.intellij.openapi.editor.colors.EditorColorsScheme):V
- setSaveNeeded(Z):V
- setUseAppFontPreferencesInEditor():V
- setUseEditorFontPreferencesInConsole():V
- setUseLigatures(Z):V
- settingsEqual(java.lang.Object):Z
- settingsEqual(java.lang.Object,java.util.function.Predicate):Z
- settingsEqual(java.lang.Object,java.util.function.Predicate,Z):Z
- settingsEqual(java.lang.Object,java.util.function.Predicate,Z,Z):Z
- toString():java.lang.String
- writeExternal(org.jdom.Element):V
- writeScheme():org.jdom.Element
f:com.intellij.openapi.editor.colors.impl.AppConsoleFontOptions
- com.intellij.openapi.editor.colors.impl.AppFontOptions
- <init>():V
- getFontPreferences():com.intellij.openapi.editor.colors.FontPreferences
- s:getInstance():com.intellij.openapi.editor.colors.impl.AppConsoleFontOptions
- isUseEditorFont():Z
- loadState(com.intellij.openapi.editor.colors.impl.AppConsoleFontOptions$ConsoleFontState):V
- setUseEditorFont(Z):V
f:com.intellij.openapi.editor.colors.impl.AppEditorFontOptions
- com.intellij.openapi.editor.colors.impl.AppFontOptions
- sf:STORAGE_NAME:java.lang.String
- <init>():V
- s:getInstance():com.intellij.openapi.editor.colors.impl.AppEditorFontOptions
c:com.intellij.openapi.editor.colors.impl.AppEditorFontOptions$PersistentFontPreferences
- FONT_BOLD_SUB_FAMILY:java.lang.String
- FONT_FAMILY:java.lang.String
- FONT_REGULAR_SUB_FAMILY:java.lang.String
- FONT_SCALE:F
- FONT_SIZE:I
- FONT_SIZE_2D:F
- LINE_SPACING:F
- SECONDARY_FONT_FAMILY:java.lang.String
- USE_LIGATURES:Z
- VERSION:I
- p:<init>():V
- <init>(com.intellij.openapi.editor.colors.FontPreferences):V
- ps:getDefaultState():com.intellij.openapi.editor.colors.impl.AppEditorFontOptions$PersistentFontPreferences
a:com.intellij.openapi.editor.colors.impl.AppFontOptions
- com.intellij.openapi.components.PersistentStateComponentWithModificationTracker
- psf:CURR_FONT_PREF_VERSION:I
- pf:myTracker:com.intellij.openapi.util.SimpleModificationTracker
- <init>():V
- pa:createFontState(com.intellij.openapi.editor.colors.FontPreferences):com.intellij.openapi.editor.colors.impl.AppEditorFontOptions$PersistentFontPreferences
- getFontPreferences():com.intellij.openapi.editor.colors.FontPreferences
- getState():com.intellij.openapi.editor.colors.impl.AppEditorFontOptions$PersistentFontPreferences
- getStateModificationCount():J
- s:initDefaults(com.intellij.openapi.editor.colors.ModifiableFontPreferences):V
- loadState(com.intellij.openapi.editor.colors.impl.AppEditorFontOptions$PersistentFontPreferences):V
- update(com.intellij.openapi.editor.colors.FontPreferences):V
c:com.intellij.openapi.editor.colors.impl.DefaultColorsScheme
- com.intellij.openapi.editor.colors.impl.AbstractColorsScheme
- <init>():V
- clone():java.lang.Object
- getAttributes(com.intellij.openapi.editor.colors.TextAttributesKey):com.intellij.openapi.editor.markup.TextAttributes
- getAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,Z):com.intellij.openapi.editor.markup.TextAttributes
- getColor(com.intellij.openapi.editor.colors.ColorKey):java.awt.Color
- getColor(com.intellij.openapi.editor.colors.ColorKey,Z):java.awt.Color
- getEditableCopyName():java.lang.String
- p:getKeyDefaults(com.intellij.openapi.editor.colors.TextAttributesKey):com.intellij.openapi.editor.markup.TextAttributes
- getName():java.lang.String
- getSchemeState():com.intellij.openapi.options.SchemeState
- hasEditableCopy():Z
- isReadOnly():Z
- isVisible():Z
- readExternal(org.jdom.Element):V
- setAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,com.intellij.openapi.editor.markup.TextAttributes):V
- setColor(com.intellij.openapi.editor.colors.ColorKey,java.awt.Color):V
c:com.intellij.openapi.editor.colors.impl.EditorColorsSchemeImpl
- com.intellij.openapi.editor.colors.impl.AbstractColorsScheme
- com.intellij.openapi.options.ExternalizableScheme
- <init>(com.intellij.openapi.editor.colors.EditorColorsScheme):V
- p:attributesEqual(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme,Z):Z
- clone():java.lang.Object
- p:colorsEqual(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme,java.util.function.Predicate):Z
- copyTo(com.intellij.openapi.editor.colors.impl.AbstractColorsScheme):V
- getAttributes(com.intellij.openapi.editor.colors.TextAttributesKey):com.intellij.openapi.editor.markup.TextAttributes
- getAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,Z):com.intellij.openapi.editor.markup.TextAttributes
- getColor(com.intellij.openapi.editor.colors.ColorKey):java.awt.Color
- getSchemeState():com.intellij.openapi.options.SchemeState
- isReadOnly():Z
- isVisible():Z
- setAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,com.intellij.openapi.editor.markup.TextAttributes):V
- setColor(com.intellij.openapi.editor.colors.ColorKey,java.awt.Color):V
- setSaveNeeded(Z):V
- setVisible(Z):V
c:com.intellij.openapi.editor.colors.impl.EditorFontCacheImpl
- com.intellij.openapi.editor.colors.EditorFontCache
- <init>():V
- s:deriveFontWithLigatures(java.awt.Font,Z):java.awt.Font
- getFont(com.intellij.openapi.editor.colors.EditorFontType):java.awt.Font
- p:getFontCacheScheme():com.intellij.openapi.editor.colors.EditorColorsScheme
- reset():V
f:com.intellij.openapi.editor.colors.impl.EmptyColorScheme
- com.intellij.openapi.editor.colors.impl.DefaultColorsScheme
- sf:INSTANCE:com.intellij.openapi.editor.colors.impl.EmptyColorScheme
- sf:NAME:java.lang.String
- getName():java.lang.String
- hasEditableCopy():Z
c:com.intellij.openapi.editor.colors.impl.FontPreferencesImpl
- com.intellij.openapi.editor.colors.ModifiableFontPreferences
- <init>():V
- addChangeListener(javax.swing.event.ChangeListener):V
- addChangeListener(javax.swing.event.ChangeListener,com.intellij.openapi.Disposable):V
- addFontFamily(java.lang.String):V
- clear():V
- clearFonts():V
- copyTo(com.intellij.openapi.editor.colors.FontPreferences):V
- equals(java.lang.Object):Z
- getBoldSubFamily():java.lang.String
- getEffectiveFontFamilies():java.util.List
- getFontFamily():java.lang.String
- getLineSpacing():F
- getRealFontFamilies():java.util.List
- getRegularSubFamily():java.lang.String
- getSize(java.lang.String):I
- getSize2D(java.lang.String):F
- hasSize(java.lang.String):Z
- hashCode():I
- register(java.lang.String,F):V
- register(java.lang.String,I):V
- resetFontSizes():V
- setBoldSubFamily(java.lang.String):V
- setEffectiveFontFamilies(java.util.List):V
- setFontSize(java.lang.String,F):V
- setFontSize(java.lang.String,I):V
- setLineSpacing(F):V
- setRealFontFamilies(java.util.List):V
- setRegularSubFamily(java.lang.String):V
- setSize(java.lang.String,F):V
- setSize(java.lang.String,I):V
- setTemplateFontSize(F):V
- setTemplateFontSize(I):V
- setUseLigatures(Z):V
- toString():java.lang.String
- useLigatures():Z
com.intellij.openapi.editor.colors.impl.ReadOnlyColorsScheme
com.intellij.openapi.editor.ex.MarkupModelEx
- com.intellij.openapi.editor.markup.MarkupModel
- a:addMarkupModelListener(com.intellij.openapi.Disposable,com.intellij.openapi.editor.impl.event.MarkupModelListener):V
- a:addPersistentLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.ex.RangeHighlighterEx
- a:addPersistentLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addRangeHighlighterAndChangeAttributes(I,I,I,com.intellij.openapi.editor.markup.TextAttributes,com.intellij.openapi.editor.markup.HighlighterTargetArea,Z,com.intellij.util.Consumer):com.intellij.openapi.editor.ex.RangeHighlighterEx
- a:addRangeHighlighterAndChangeAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea,Z,com.intellij.util.Consumer):com.intellij.openapi.editor.ex.RangeHighlighterEx
- a:changeAttributesInBatch(com.intellij.openapi.editor.ex.RangeHighlighterEx,com.intellij.util.Consumer):V
- a:containsHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):Z
- a:dispose():V
- a:overlappingIterator(I,I):com.intellij.openapi.editor.ex.MarkupIterator
- a:processRangeHighlightersOutside(I,I,com.intellij.util.Processor):Z
- a:processRangeHighlightersOverlappingWith(I,I,com.intellij.util.Processor):Z
- a:setRangeHighlighterAttributes(com.intellij.openapi.editor.markup.RangeHighlighter,com.intellij.openapi.editor.markup.TextAttributes):V
com.intellij.openapi.editor.ex.RangeHighlighterEx
- com.intellij.openapi.editor.ex.RangeMarkerEx
- com.intellij.openapi.editor.markup.RangeHighlighter
- sf:BY_AFFECTED_START_OFFSET:java.util.Comparator
- sf:EMPTY_ARRAY:com.intellij.openapi.editor.ex.RangeHighlighterEx[]
- copyFrom(com.intellij.openapi.editor.ex.RangeHighlighterEx):V
- a:getAffectedAreaEndOffset():I
- a:getAffectedAreaStartOffset():I
- a:isAfterEndOfLine():Z
- isPersistent():Z
- isRenderedInGutter():Z
- a:isVisibleIfFolded():Z
- a:setAfterEndOfLine(Z):V
- a:setTextAttributes(com.intellij.openapi.editor.markup.TextAttributes):V
- a:setVisibleIfFolded(Z):V
*f:com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint
- <init>(java.lang.String,com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition):V
- f:getActionId():java.lang.String
- f:getCondition():com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition
*e:com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition
- java.lang.Enum
- sf:CaretInside:com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition
- sf:CaretOnEnd:com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition
- sf:CaretOnStart:com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition
- b:<init>(java.lang.String,I,kotlin.jvm.internal.DefaultConstructorMarker):V
- s:getEntries():kotlin.enums.EnumEntries
- isAvailable(I,com.intellij.openapi.editor.RangeMarker):Z
- s:valueOf(java.lang.String):com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition
- s:values():com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint$AvailabilityCondition[]
f:com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHintKt
- *sf:addActionAvailabilityHint(com.intellij.openapi.editor.Inlay,com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint[]):V
- *sf:addActionAvailabilityHint(com.intellij.openapi.editor.RangeMarker,com.intellij.openapi.editor.ex.util.EditorActionAvailabilityHint[]):V
- *sf:clearAvailabilityHints(com.intellij.openapi.editor.Inlay):V
- *sf:clearAvailabilityHints(com.intellij.openapi.editor.markup.RangeHighlighter):V
c:com.intellij.openapi.editor.ex.util.HighlighterIteratorWrapper
- com.intellij.openapi.editor.highlighter.HighlighterIterator
- <init>(com.intellij.openapi.editor.highlighter.HighlighterIterator):V
- advance():V
- atEnd():Z
- getDocument():com.intellij.openapi.editor.Document
- getEnd():I
- getStart():I
- getTextAttributes():com.intellij.openapi.editor.markup.TextAttributes
- getTextAttributesKeys():com.intellij.openapi.editor.colors.TextAttributesKey[]
- getTokenType():com.intellij.psi.tree.IElementType
- retreat():V
c:com.intellij.openapi.editor.ex.util.LayerDescriptor
- <init>(com.intellij.openapi.fileTypes.SyntaxHighlighter,java.lang.String):V
- <init>(com.intellij.openapi.fileTypes.SyntaxHighlighter,java.lang.String,com.intellij.openapi.editor.colors.TextAttributesKey):V
com.intellij.openapi.editor.ex.util.LayeredHighlighterIterator
- com.intellij.openapi.editor.highlighter.HighlighterIterator
- a:getActiveSyntaxHighlighter():com.intellij.openapi.fileTypes.SyntaxHighlighter
c:com.intellij.openapi.editor.ex.util.LayeredLexerEditorHighlighter
- com.intellij.openapi.editor.ex.util.LexerEditorHighlighter
- <init>(com.intellij.openapi.fileTypes.SyntaxHighlighter,com.intellij.openapi.editor.colors.EditorColorsScheme):V
- createBaseIterator(I):com.intellij.openapi.editor.highlighter.HighlighterIterator
- createIterator(I):com.intellij.openapi.editor.highlighter.HighlighterIterator
- p:createSegments():com.intellij.openapi.editor.ex.util.SegmentArrayWithData
- p:createTokenProcessor(I,com.intellij.openapi.editor.ex.util.SegmentArrayWithData,java.lang.CharSequence):com.intellij.openapi.editor.ex.util.LexerEditorHighlighter$TokenProcessor
- documentChanged(com.intellij.openapi.editor.event.DocumentEvent):V
- getSegments():com.intellij.openapi.editor.ex.util.LayeredLexerEditorHighlighter$MappingSegments
- p:hasAdditionalData(I):Z
- registerLayer(com.intellij.psi.tree.IElementType,com.intellij.openapi.editor.ex.util.LayerDescriptor):V
- setColorScheme(com.intellij.openapi.editor.colors.EditorColorsScheme):V
- setText(java.lang.CharSequence):V
- toString():java.lang.String
- p:unregisterLayer(com.intellij.psi.tree.IElementType):V
- p:updateLayers():Z
- p:updateLayers(com.intellij.openapi.editor.event.DocumentEvent):Z
c:com.intellij.openapi.editor.ex.util.LexerEditorHighlighter
- com.intellij.openapi.editor.ex.PrioritizedDocumentListener
- com.intellij.openapi.editor.highlighter.EditorHighlighter
- p:myText:java.lang.CharSequence
- <init>(com.intellij.openapi.fileTypes.SyntaxHighlighter,com.intellij.openapi.editor.colors.EditorColorsScheme):V
- f:checkContentIsEqualTo(java.lang.CharSequence):Z
- createIterator(I):com.intellij.openapi.editor.highlighter.HighlighterIterator
- p:createSegments():com.intellij.openapi.editor.ex.util.SegmentArrayWithData
- p:createStorage():com.intellij.openapi.editor.ex.util.DataStorage
- p:createTokenProcessor(I,com.intellij.openapi.editor.ex.util.SegmentArrayWithData,java.lang.CharSequence):com.intellij.openapi.editor.ex.util.LexerEditorHighlighter$TokenProcessor
- documentChanged(com.intellij.openapi.editor.event.DocumentEvent):V
- getAttributesForPreviousAndTypedChars(com.intellij.openapi.editor.Document,I,C):java.util.List
- getClient():com.intellij.openapi.editor.highlighter.HighlighterClient
- pf:getDocument():com.intellij.openapi.editor.Document
- p:getLexer():com.intellij.lexer.Lexer
- getPriority():I
- getScheme():com.intellij.openapi.editor.colors.EditorColorsScheme
- getSegments():com.intellij.openapi.editor.ex.util.SegmentArrayWithData
- getSyntaxHighlighter():com.intellij.openapi.fileTypes.SyntaxHighlighter
- p:hasAdditionalData(I):Z
- isPlain():Z
- isValid():Z
- setColorScheme(com.intellij.openapi.editor.colors.EditorColorsScheme):V
- setEditor(com.intellij.openapi.editor.highlighter.HighlighterClient):V
- setText(java.lang.CharSequence):V
- toString():java.lang.String
c:com.intellij.openapi.editor.ex.util.LexerEditorHighlighter$HighlighterIteratorImpl
- com.intellij.openapi.editor.highlighter.HighlighterIterator
- advance():V
- atEnd():Z
- currentIndex():I
- getClient():com.intellij.openapi.editor.highlighter.HighlighterClient
- getDocument():com.intellij.openapi.editor.Document
- getEnd():I
- getStart():I
- getTextAttributes():com.intellij.openapi.editor.markup.TextAttributes
- getTextAttributesKeys():com.intellij.openapi.editor.colors.TextAttributesKey[]
- getTokenType():com.intellij.psi.tree.IElementType
- retreat():V
f:com.intellij.openapi.editor.ex.util.LexerEditorHighlighter$InvalidStateException
- java.lang.RuntimeException
- com.intellij.openapi.diagnostic.ExceptionWithAttachments
- getAttachments():com.intellij.openapi.diagnostic.Attachment[]
p:com.intellij.openapi.editor.ex.util.LexerEditorHighlighter$TokenProcessor
- a:addToken(I,I,I,I,com.intellij.psi.tree.IElementType):V
- finish():V
c:com.intellij.openapi.editor.ex.util.LimitedRangeHighlighterIterator
- com.intellij.openapi.editor.ex.util.HighlighterIteratorWrapper
- atEnd():Z
- getEnd():I
- getStart():I
c:com.intellij.openapi.editor.ex.util.ValidatingLexerWrapper
- com.intellij.lexer.Lexer
- <init>(com.intellij.lexer.Lexer):V
- advance():V
- getBufferEnd():I
- getBufferSequence():java.lang.CharSequence
- getCurrentPosition():com.intellij.lexer.LexerPosition
- getState():I
- getTokenEnd():I
- getTokenSequence():java.lang.CharSequence
- getTokenStart():I
- getTokenText():java.lang.String
- getTokenType():com.intellij.psi.tree.IElementType
- restore(com.intellij.lexer.LexerPosition):V
- start(java.lang.CharSequence,I,I,I):V
f:com.intellij.openapi.editor.highlighter.EditorHighlighterFactoryImpl
- com.intellij.openapi.editor.highlighter.EditorHighlighterFactory
- <init>():V
- createEditorHighlighter(com.intellij.openapi.editor.colors.EditorColorsScheme,java.lang.String,com.intellij.openapi.project.Project):com.intellij.openapi.editor.highlighter.EditorHighlighter
- createEditorHighlighter(com.intellij.openapi.fileTypes.FileType,com.intellij.openapi.editor.colors.EditorColorsScheme,com.intellij.openapi.project.Project):com.intellij.openapi.editor.highlighter.EditorHighlighter
- createEditorHighlighter(com.intellij.openapi.fileTypes.SyntaxHighlighter,com.intellij.openapi.editor.colors.EditorColorsScheme):com.intellij.openapi.editor.highlighter.EditorHighlighter
- createEditorHighlighter(com.intellij.openapi.project.Project,com.intellij.openapi.fileTypes.FileType):com.intellij.openapi.editor.highlighter.EditorHighlighter
- createEditorHighlighter(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile):com.intellij.openapi.editor.highlighter.EditorHighlighter
- createEditorHighlighter(com.intellij.openapi.project.Project,java.lang.String):com.intellij.openapi.editor.highlighter.EditorHighlighter
- createEditorHighlighter(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.editor.colors.EditorColorsScheme,com.intellij.openapi.project.Project):com.intellij.openapi.editor.highlighter.EditorHighlighter
f:com.intellij.openapi.editor.impl.DocumentMarkupModel
- s:forDocument(com.intellij.openapi.editor.Document,com.intellij.openapi.project.Project,Z):com.intellij.openapi.editor.markup.MarkupModel
- *s:getExistingMarkupModels(com.intellij.openapi.editor.Document):java.util.List
f:com.intellij.openapi.editor.impl.DocumentMarkupModelManager
- <init>(com.intellij.openapi.project.Project):V
- s:getInstance(com.intellij.openapi.project.Project):com.intellij.openapi.editor.impl.DocumentMarkupModelManager
- isDisposed():Z
- registerDocument(com.intellij.openapi.editor.Document):V
f:com.intellij.openapi.editor.impl.EmptyMarkupModel
- com.intellij.openapi.editor.ex.MarkupModelEx
- <init>(com.intellij.openapi.editor.Document):V
- addLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.markup.RangeHighlighter
- addLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.markup.RangeHighlighter
- addMarkupModelListener(com.intellij.openapi.Disposable,com.intellij.openapi.editor.impl.event.MarkupModelListener):V
- addPersistentLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addPersistentLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addRangeHighlighter(I,I,I,com.intellij.openapi.editor.markup.TextAttributes,com.intellij.openapi.editor.markup.HighlighterTargetArea):com.intellij.openapi.editor.markup.RangeHighlighter
- addRangeHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea):com.intellij.openapi.editor.markup.RangeHighlighter
- addRangeHighlighterAndChangeAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea,Z,com.intellij.util.Consumer):com.intellij.openapi.editor.ex.RangeHighlighterEx
- changeAttributesInBatch(com.intellij.openapi.editor.ex.RangeHighlighterEx,com.intellij.util.Consumer):V
- containsHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):Z
- dispose():V
- getAllHighlighters():com.intellij.openapi.editor.markup.RangeHighlighter[]
- getDocument():com.intellij.openapi.editor.Document
- getUserData(com.intellij.openapi.util.Key):java.lang.Object
- overlappingIterator(I,I):com.intellij.openapi.editor.ex.MarkupIterator
- processRangeHighlightersOutside(I,I,com.intellij.util.Processor):Z
- processRangeHighlightersOverlappingWith(I,I,com.intellij.util.Processor):Z
- putUserData(com.intellij.openapi.util.Key,java.lang.Object):V
- removeAllHighlighters():V
- removeHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):V
- setRangeHighlighterAttributes(com.intellij.openapi.editor.markup.RangeHighlighter,com.intellij.openapi.editor.markup.TextAttributes):V
f:com.intellij.openapi.editor.impl.EmptySoftWrapModel
- com.intellij.openapi.editor.SoftWrapModel
- <init>():V
- beforeDocumentChangeAtCaret():V
- getSoftWrap(I):com.intellij.openapi.editor.SoftWrap
- getSoftWrapsForLine(I):java.util.List
- getSoftWrapsForRange(I,I):java.util.List
- isInsideOrBeforeSoftWrap(com.intellij.openapi.editor.VisualPosition):Z
- isInsideSoftWrap(com.intellij.openapi.editor.VisualPosition):Z
- isSoftWrappingEnabled():Z
- isVisible(com.intellij.openapi.editor.SoftWrap):Z
- release():V
f:com.intellij.openapi.editor.impl.FilteringMarkupIterator
- com.intellij.openapi.editor.ex.MarkupIterator
- <init>(com.intellij.openapi.editor.ex.MarkupIterator,java.util.function.Predicate):V
- dispose():V
- hasNext():Z
- next():java.lang.Object
- peek():java.lang.Object
c:com.intellij.openapi.editor.impl.FontFamilyDescriptor
- s:create(java.lang.String,java.lang.String):com.intellij.openapi.editor.impl.FontFamilyDescriptor
- getFamily():java.lang.String
- getSubfamily():java.lang.String
c:com.intellij.openapi.editor.impl.FontFamilyService
- <init>():V
- s:getAvailableFamilies():java.util.List
- p:getAvailableFamiliesImpl():java.util.List
- s:getDescriptorByFont(java.awt.Font):com.intellij.openapi.editor.impl.FontFamilyDescriptor
- p:getDescriptorByFontImpl(java.awt.Font):com.intellij.openapi.editor.impl.FontFamilyDescriptor
- s:getFont(java.lang.String,java.lang.String,F):java.awt.Font
- s:getFont(java.lang.String,java.lang.String,I):java.awt.Font
- s:getFont(java.lang.String,java.lang.String,java.lang.String,I):java.awt.Font
- s:getFont(java.lang.String,java.lang.String,java.lang.String,I,F):java.awt.Font
- s:getFont(java.lang.String,java.lang.String,java.lang.String,I,I):java.awt.Font
- s:getFontByDescriptor(com.intellij.openapi.editor.impl.FontFamilyDescriptor):java.awt.Font
- p:getFontByDescriptorImpl(com.intellij.openapi.editor.impl.FontFamilyDescriptor):java.awt.Font
- p:getFontImpl(java.lang.String,java.lang.String,java.lang.String,I):java.awt.Font
- s:getRecommendedBoldSubFamily(java.lang.String,java.lang.String):java.lang.String
- p:getRecommendedBoldSubFamilyImpl(java.lang.String,java.lang.String):java.lang.String
- s:getRecommendedSubFamily(java.lang.String):java.lang.String
- p:getRecommendedSubFamilyImpl(java.lang.String):java.lang.String
- s:getSubFamilies(java.lang.String):java.util.List
- p:getSubFamiliesImpl(java.lang.String):java.util.List
- s:isMonospaced(java.lang.String):Z
- p:isMonospacedImpl(java.lang.String):Z
- s:isServiceSupported():Z
- p:isSupportedImpl():Z
- s:migrateFontSetting(java.lang.String):java.lang.String[]
- p:migrateFontSettingImpl(java.lang.String):java.lang.String[]
c:com.intellij.openapi.editor.impl.ImaginaryCaret
- com.intellij.openapi.util.UserDataHolderBase
- com.intellij.openapi.editor.Caret
- <init>(com.intellij.openapi.editor.impl.ImaginaryCaretModel):V
- clone(Z):com.intellij.openapi.editor.Caret
- dispose():V
- getCaretModel():com.intellij.openapi.editor.CaretModel
- getEditor():com.intellij.openapi.editor.impl.ImaginaryEditor
- getLeadSelectionOffset():I
- getLeadSelectionPosition():com.intellij.openapi.editor.VisualPosition
- getLogicalPosition():com.intellij.openapi.editor.LogicalPosition
- getOffset():I
- getSelectedText():java.lang.String
- getSelectionEnd():I
- getSelectionEndPosition():com.intellij.openapi.editor.VisualPosition
- getSelectionStart():I
- getSelectionStartPosition():com.intellij.openapi.editor.VisualPosition
- getVisualAttributes():com.intellij.openapi.editor.CaretVisualAttributes
- getVisualLineEnd():I
- getVisualLineStart():I
- getVisualPosition():com.intellij.openapi.editor.VisualPosition
- hasSelection():Z
- isAtBidiRunBoundary():Z
- isAtRtlLocation():Z
- isUpToDate():Z
- isValid():Z
- moveCaretRelatively(I,I,Z,Z):V
- moveToLogicalPosition(com.intellij.openapi.editor.LogicalPosition):V
- moveToOffset(I):V
- moveToOffset(I,Z):V
- moveToVisualPosition(com.intellij.openapi.editor.VisualPosition):V
- removeSelection():V
- selectLineAtCaret():V
- selectWordAtCaret(Z):V
- setSelection(I,I):V
- setSelection(I,I,Z):V
- setSelection(I,com.intellij.openapi.editor.VisualPosition,I):V
- setSelection(com.intellij.openapi.editor.VisualPosition,I,com.intellij.openapi.editor.VisualPosition,I):V
- setSelection(com.intellij.openapi.editor.VisualPosition,I,com.intellij.openapi.editor.VisualPosition,I,Z):V
- setVisualAttributes(com.intellij.openapi.editor.CaretVisualAttributes):V
c:com.intellij.openapi.editor.impl.ImaginaryCaretModel
- com.intellij.openapi.editor.CaretModel
- <init>(com.intellij.openapi.editor.impl.ImaginaryEditor):V
- addCaret(com.intellij.openapi.editor.LogicalPosition,Z):com.intellij.openapi.editor.Caret
- addCaret(com.intellij.openapi.editor.VisualPosition,Z):com.intellij.openapi.editor.Caret
- addCaretActionListener(com.intellij.openapi.editor.CaretActionListener,com.intellij.openapi.Disposable):V
- addCaretListener(com.intellij.openapi.editor.event.CaretListener):V
- getAllCarets():java.util.List
- getCaretAt(com.intellij.openapi.editor.VisualPosition):com.intellij.openapi.editor.Caret
- getCaretCount():I
- getCaretsAndSelections():java.util.List
- getCurrentCaret():com.intellij.openapi.editor.Caret
- p:getEditor():com.intellij.openapi.editor.impl.ImaginaryEditor
- getMaxCaretCount():I
- getPrimaryCaret():com.intellij.openapi.editor.Caret
- getTextAttributes():com.intellij.openapi.editor.markup.TextAttributes
- p:notImplemented():java.lang.RuntimeException
- removeCaret(com.intellij.openapi.editor.Caret):Z
- removeCaretListener(com.intellij.openapi.editor.event.CaretListener):V
- removeSecondaryCarets():V
- runBatchCaretOperation(java.lang.Runnable):V
- runForEachCaret(com.intellij.openapi.editor.CaretAction):V
- runForEachCaret(com.intellij.openapi.editor.CaretAction,Z):V
- setCaretsAndSelections(java.util.List):V
- setCaretsAndSelections(java.util.List,Z):V
- supportsMultipleCarets():Z
c:com.intellij.openapi.editor.impl.ImaginaryEditor
- com.intellij.openapi.util.UserDataHolderBase
- com.intellij.openapi.editor.Editor
- <init>(com.intellij.openapi.project.Project,com.intellij.openapi.editor.Document):V
- addEditorMouseListener(com.intellij.openapi.editor.event.EditorMouseListener):V
- addEditorMouseMotionListener(com.intellij.openapi.editor.event.EditorMouseMotionListener):V
- getCaretModel():com.intellij.openapi.editor.CaretModel
- getColorsScheme():com.intellij.openapi.editor.colors.EditorColorsScheme
- getComponent():javax.swing.JComponent
- getContentComponent():javax.swing.JComponent
- getDocument():com.intellij.openapi.editor.Document
- getEditorKind():com.intellij.openapi.editor.EditorKind
- getFoldingModel():com.intellij.openapi.editor.FoldingModel
- getGutter():com.intellij.openapi.editor.EditorGutter
- getHeaderComponent():javax.swing.JComponent
- getIndentsModel():com.intellij.openapi.editor.IndentsModel
- getInlayModel():com.intellij.openapi.editor.InlayModel
- getInsets():java.awt.Insets
- getLineHeight():I
- getMarkupModel():com.intellij.openapi.editor.markup.MarkupModel
- getMouseEventArea(java.awt.event.MouseEvent):com.intellij.openapi.editor.event.EditorMouseEventArea
- getProject():com.intellij.openapi.project.Project
- getScrollingModel():com.intellij.openapi.editor.ScrollingModel
- getSelectionModel():com.intellij.openapi.editor.SelectionModel
- getSettings():com.intellij.openapi.editor.EditorSettings
- getSoftWrapModel():com.intellij.openapi.editor.SoftWrapModel
- hasHeaderComponent():Z
- isColumnMode():Z
- isDisposed():Z
- isInsertMode():Z
- isOneLineMode():Z
- isViewer():Z
- logicalPositionToOffset(com.intellij.openapi.editor.LogicalPosition):I
- logicalPositionToXY(com.intellij.openapi.editor.LogicalPosition):java.awt.Point
- logicalToVisualPosition(com.intellij.openapi.editor.LogicalPosition):com.intellij.openapi.editor.VisualPosition
- p:notImplemented():java.lang.RuntimeException
- offsetToLogicalPosition(I):com.intellij.openapi.editor.LogicalPosition
- offsetToVisualPosition(I):com.intellij.openapi.editor.VisualPosition
- offsetToVisualPosition(I,Z,Z):com.intellij.openapi.editor.VisualPosition
- removeEditorMouseListener(com.intellij.openapi.editor.event.EditorMouseListener):V
- removeEditorMouseMotionListener(com.intellij.openapi.editor.event.EditorMouseMotionListener):V
- setBorder(javax.swing.border.Border):V
- setHeaderComponent(javax.swing.JComponent):V
- visualPositionToPoint2D(com.intellij.openapi.editor.VisualPosition):java.awt.geom.Point2D
- visualPositionToXY(com.intellij.openapi.editor.VisualPosition):java.awt.Point
- visualToLogicalPosition(com.intellij.openapi.editor.VisualPosition):com.intellij.openapi.editor.LogicalPosition
- xyToLogicalPosition(java.awt.Point):com.intellij.openapi.editor.LogicalPosition
- xyToVisualPosition(java.awt.Point):com.intellij.openapi.editor.VisualPosition
- xyToVisualPosition(java.awt.geom.Point2D):com.intellij.openapi.editor.VisualPosition
c:com.intellij.openapi.editor.impl.ImaginaryScrollingModel
- com.intellij.openapi.editor.ScrollingModel
- <init>(com.intellij.openapi.editor.impl.ImaginaryEditor):V
- addVisibleAreaListener(com.intellij.openapi.editor.event.VisibleAreaListener):V
- disableAnimation():V
- enableAnimation():V
- p:getEditor():com.intellij.openapi.editor.impl.ImaginaryEditor
- getHorizontalScrollOffset():I
- getVerticalScrollOffset():I
- getVisibleArea():java.awt.Rectangle
- getVisibleAreaOnScrollingFinished():java.awt.Rectangle
- removeVisibleAreaListener(com.intellij.openapi.editor.event.VisibleAreaListener):V
- runActionOnScrollingFinished(java.lang.Runnable):V
- scroll(I,I):V
- scrollHorizontally(I):V
- scrollTo(com.intellij.openapi.editor.LogicalPosition,com.intellij.openapi.editor.ScrollType):V
- scrollToCaret(com.intellij.openapi.editor.ScrollType):V
- scrollVertically(I):V
c:com.intellij.openapi.editor.impl.ImaginarySelectionModel
- com.intellij.openapi.editor.SelectionModel
- <init>(com.intellij.openapi.editor.impl.ImaginaryEditor):V
- addSelectionListener(com.intellij.openapi.editor.event.SelectionListener):V
- copySelectionToClipboard():V
- getBlockSelectionEnds():I[]
- getBlockSelectionStarts():I[]
- getEditor():com.intellij.openapi.editor.Editor
- getSelectedText(Z):java.lang.String
- getTextAttributes():com.intellij.openapi.editor.markup.TextAttributes
- removeSelectionListener(com.intellij.openapi.editor.event.SelectionListener):V
- setBlockSelection(com.intellij.openapi.editor.LogicalPosition,com.intellij.openapi.editor.LogicalPosition):V
c:com.intellij.openapi.editor.impl.MarkupModelImpl
- com.intellij.openapi.util.UserDataHolderBase
- com.intellij.openapi.editor.ex.MarkupModelEx
- addLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.markup.RangeHighlighter
- addLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.markup.RangeHighlighter
- addMarkupModelListener(com.intellij.openapi.Disposable,com.intellij.openapi.editor.impl.event.MarkupModelListener):V
- addPersistentLineHighlighter(I,I,com.intellij.openapi.editor.markup.TextAttributes):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addPersistentLineHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I):com.intellij.openapi.editor.ex.RangeHighlighterEx
- addRangeHighlighter(I,I,I,com.intellij.openapi.editor.markup.TextAttributes,com.intellij.openapi.editor.markup.HighlighterTargetArea):com.intellij.openapi.editor.markup.RangeHighlighter
- addRangeHighlighter(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea):com.intellij.openapi.editor.markup.RangeHighlighter
- addRangeHighlighter(com.intellij.openapi.editor.ex.RangeHighlighterEx,I,I,Z,Z,I):V
- addRangeHighlighterAndChangeAttributes(com.intellij.openapi.editor.colors.TextAttributesKey,I,I,I,com.intellij.openapi.editor.markup.HighlighterTargetArea,Z,com.intellij.util.Consumer):com.intellij.openapi.editor.ex.RangeHighlighterEx
- changeAttributesInBatch(com.intellij.openapi.editor.ex.RangeHighlighterEx,com.intellij.util.Consumer):V
- containsHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):Z
- dispose():V
- fireAttributesChanged(com.intellij.openapi.editor.ex.RangeHighlighterEx,Z,Z):V
- getAllHighlighters():com.intellij.openapi.editor.markup.RangeHighlighter[]
- getDocument():com.intellij.openapi.editor.Document
- overlappingIterator(I,I):com.intellij.openapi.editor.ex.MarkupIterator
- processRangeHighlightersOutside(I,I,com.intellij.util.Processor):Z
- processRangeHighlightersOverlappingWith(I,I,com.intellij.util.Processor):Z
- removeAllHighlighters():V
- removeHighlighter(com.intellij.openapi.editor.markup.RangeHighlighter):V
- s:roundToLineBoundaries(com.intellij.openapi.editor.Document,I,I):com.intellij.openapi.util.TextRange
- setRangeHighlighterAttributes(com.intellij.openapi.editor.markup.RangeHighlighter,com.intellij.openapi.editor.markup.TextAttributes):V
- toString():java.lang.String
com.intellij.openapi.editor.impl.event.MarkupModelListener
- java.util.EventListener
- sf:EMPTY_ARRAY:com.intellij.openapi.editor.impl.event.MarkupModelListener[]
- afterAdded(com.intellij.openapi.editor.ex.RangeHighlighterEx):V
- afterRemoved(com.intellij.openapi.editor.ex.RangeHighlighterEx):V
- attributesChanged(com.intellij.openapi.editor.ex.RangeHighlighterEx,Z,Z):V
- attributesChanged(com.intellij.openapi.editor.ex.RangeHighlighterEx,Z,Z,Z):V
- beforeRemoved(com.intellij.openapi.editor.ex.RangeHighlighterEx):V
c:com.intellij.psi.impl.search.IndexPatternSearcher
- com.intellij.openapi.application.QueryExecutorBase
- ps:executeImpl(com.intellij.psi.search.searches.IndexPatternSearch$SearchParameters,com.intellij.util.Processor):V
- processQuery(com.intellij.psi.search.searches.IndexPatternSearch$SearchParameters,com.intellij.util.Processor):V
c:com.intellij.psi.impl.search.LexerEditorHighlighterLexer
- com.intellij.lexer.LexerBase
- <init>(com.intellij.openapi.editor.highlighter.EditorHighlighter,Z):V
- advance():V
- getBufferEnd():I
- getBufferSequence():java.lang.CharSequence
- getHighlighterIterator():com.intellij.openapi.editor.highlighter.HighlighterIterator
- getState():I
- getTokenEnd():I
- getTokenStart():I
- getTokenType():com.intellij.psi.tree.IElementType
- resetPosition(I):V
- start(java.lang.CharSequence,I,I,I):V
c:com.intellij.psi.impl.search.LightIndexPatternSearch
- com.intellij.util.QueryFactory
- sf:SEARCH:com.intellij.psi.impl.search.LightIndexPatternSearch
- <init>():V
c:com.intellij.psi.impl.search.LightIndexPatternSearcher
- com.intellij.psi.impl.search.IndexPatternSearcher
- <init>():V
- processQuery(com.intellij.psi.search.searches.IndexPatternSearch$SearchParameters,com.intellij.util.Processor):V
c:com.intellij.psi.impl.search.PsiTodoSearchHelperImpl
- com.intellij.psi.search.PsiTodoSearchHelper
- <init>(com.intellij.openapi.project.Project):V
- findFilesWithTodoItems():com.intellij.psi.PsiFile[]
- findTodoItems(com.intellij.psi.PsiFile):com.intellij.psi.search.TodoItem[]
- findTodoItems(com.intellij.psi.PsiFile,I,I):com.intellij.psi.search.TodoItem[]
- findTodoItemsLight(com.intellij.psi.PsiFile):com.intellij.psi.search.TodoItem[]
- findTodoItemsLight(com.intellij.psi.PsiFile,I,I):com.intellij.psi.search.TodoItem[]
- getTodoItemsCount(com.intellij.psi.PsiFile):I
- getTodoItemsCount(com.intellij.psi.PsiFile,com.intellij.psi.search.TodoPattern):I
- processFilesWithTodoItems(com.intellij.util.Processor):Z
- shouldHighlightInEditor(com.intellij.psi.PsiFile):Z
