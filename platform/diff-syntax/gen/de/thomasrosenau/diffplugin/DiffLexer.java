/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 Copyright 2020 Thomas Rosenau

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

package de.thomasrosenau.diffplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.thomasrosenau.diffplugin.psi.DiffTypes.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a>
 * from the specification file <tt>src/main/java/de/thomasrosenau/diffplugin/lexer/Diff.flex</tt>
 */

public class DiffLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int GIT_HEAD = 2;
  public static final int CONTEXT = 4;
  public static final int UNIFIED = 6;
  public static final int NORMAL = 8;
  public static final int GIT_BODY = 10;
  public static final int GIT_BINARY = 12;
  public static final int UNIFIED_BETWEEN_LABELS = 14;
  public static final int GIT_BODY_BETWEEN_LABELS = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  0,  2,  0,  3,  0,  4,  0,  5,  0,  6,  0,  7,  0,  8, 
     0, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\12\0\1\2\2\5\1\1\22\0\1\12\1\15\10\0\1\13\1\16\1\4\1\14\1\22\1\0\12\3\2\0"+
    "\1\40\1\0\1\37\1\0\1\36\5\0\1\6\1\23\1\0\1\24\12\0\1\25\7\0\1\41\4\0\1\30"+
    "\1\26\1\34\1\17\1\0\1\21\1\0\1\35\1\20\3\0\1\11\1\27\1\10\1\32\1\0\1\7\1\0"+
    "\1\33\4\0\1\31\13\0\1\5\242\0\2\5\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\2\1\1\2\16\1\1\3\1\4\1\5\2\1"+
    "\1\6\1\7\1\1\1\4\10\1\1\0\3\10\12\0"+
    "\1\10\2\0\1\11\1\0\1\12\1\0\1\13\1\14"+
    "\1\10\1\3\1\4\1\10\2\4\1\10\1\5\2\0"+
    "\1\10\1\6\1\10\1\7\2\0\1\4\2\0\3\15"+
    "\7\0\1\16\10\0\3\17\2\0\1\10\1\11\1\0"+
    "\1\10\1\12\1\0\1\10\1\13\1\10\1\14\1\4"+
    "\3\0\2\4\1\0\1\20\6\0\3\21\2\22\1\0"+
    "\1\22\2\23\1\0\1\23\4\0\1\24\3\25\5\0"+
    "\1\4\1\0\1\10\3\26\1\0\1\25\1\4\2\0"+
    "\1\25\4\0\1\27\1\30\1\0\1\31\3\0\1\10"+
    "\1\0\1\10\2\0\1\10\5\0\1\10\1\4\2\0"+
    "\1\4\5\0\1\10\1\0\1\10\1\0\1\10\3\32"+
    "\3\33\1\0\1\10\3\34\1\0\1\10\3\0\3\35"+
    "\2\0\1\33\1\0\3\36\1\34\1\0\1\36\1\15"+
    "\1\0\3\37\3\40\3\41\1\42\1\43\3\44\1\45"+
    "\3\46\3\0\1\47\3\0\1\50\2\0\1\51\1\52"+
    "\1\53\1\54\1\55\3\0\3\56\6\0\1\57\10\0"+
    "\3\60\1\0\3\61\2\0\1\62\1\0\1\63\13\0"+
    "\3\64\2\0\4\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0154\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u0572\0\u0594\0\u0198\0\u05b6\0\u0154\0\u0198"+
    "\0\u01ba\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792"+
    "\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u0154\0\u083c\0\u085e\0\u0154"+
    "\0\u0880\0\u08a2\0\u0154\0\u08c4\0\u08e6\0\u0908\0\u0154\0\u092a"+
    "\0\u0154\0\u0462\0\u094c\0\u096e\0\u0990\0\u04c8\0\u09b2\0\u0154"+
    "\0\u04c8\0\u04ea\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e"+
    "\0\u0154\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c"+
    "\0\u0b8e\0\u0bb0\0\u0154\0\u06e8\0\u0bd2\0\u0bf4\0\u0c16\0\u0154"+
    "\0\u0c38\0\u0c5a\0\u0154\0\u0c7c\0\u0c9e\0\u0154\0\u0cc0\0\u0154"+
    "\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\u0154"+
    "\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0154"+
    "\0\u0198\0\u0ebe\0\u0154\0\u0ee0\0\u0198\0\u0f02\0\u0154\0\u0f24"+
    "\0\u0198\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0154\0\u0fce\0\u0154"+
    "\0\u0198\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc"+
    "\0\u10bc\0\u10de\0\u0154\0\u0198\0\u1100\0\u083c\0\u1122\0\u1144"+
    "\0\u1166\0\u04c8\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u0154\0\u0154"+
    "\0\u1210\0\u0154\0\u1232\0\u1254\0\u1276\0\u1276\0\u1298\0\u1298"+
    "\0\u12ba\0\u12dc\0\u12dc\0\u12fe\0\u1320\0\u1342\0\u1364\0\u1386"+
    "\0\u1364\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452\0\u1474"+
    "\0\u1496\0\u14b8\0\u14b8\0\u14da\0\u14da\0\u14fc\0\u14fc\0\u151e"+
    "\0\u0154\0\u1276\0\u1540\0\u0154\0\u1298\0\u1562\0\u1562\0\u1584"+
    "\0\u0154\0\u12dc\0\u15a6\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e"+
    "\0\u0154\0\u1364\0\u1650\0\u1672\0\u13a8\0\u1694\0\u16b6\0\u0154"+
    "\0\u0198\0\u140e\0\u16d8\0\u04c8\0\u15a6\0\u16fa\0\u171c\0\u0154"+
    "\0\u14b8\0\u173e\0\u0154\0\u14da\0\u1760\0\u0154\0\u14fc\0\u0154"+
    "\0\u0154\0\u1782\0\u0154\0\u1562\0\u0154\0\u17a4\0\u0154\0\u15a6"+
    "\0\u17c6\0\u17e8\0\u180a\0\u0154\0\u182c\0\u184e\0\u1870\0\u0154"+
    "\0\u1892\0\u18b4\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u18d6"+
    "\0\u18f8\0\u191a\0\u193c\0\u0154\0\u10bc\0\u195e\0\u1980\0\u19a2"+
    "\0\u19c4\0\u19e6\0\u1a08\0\u0154\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90"+
    "\0\u1ab2\0\u1ad4\0\u1af6\0\u1b18\0\u1b3a\0\u0154\0\u0198\0\u1b5c"+
    "\0\u1b7e\0\u0154\0\u1364\0\u1ba0\0\u1bc2\0\u0154\0\u1be4\0\u0154"+
    "\0\u1c06\0\u1c28\0\u1c4a\0\u1c6c\0\u1c8e\0\u1cb0\0\u1cd2\0\u1cf4"+
    "\0\u1d16\0\u1d38\0\u1d5a\0\u1d7c\0\u0154\0\u0198\0\u1d9e\0\u1dc0"+
    "\0\u1de2\0\u0154\0\u0198\0\u04c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\37\13\1\16\1\14\1\15\1\17"+
    "\2\16\1\20\4\16\1\21\1\22\2\16\1\23\21\16"+
    "\1\24\1\16\1\14\1\15\11\16\1\25\2\16\1\26"+
    "\21\16\1\24\1\16\1\14\1\15\7\16\1\27\1\30"+
    "\1\31\1\32\1\33\1\23\21\16\1\24\1\16\1\14"+
    "\1\15\7\16\1\34\1\16\1\35\1\16\1\36\1\23"+
    "\16\16\1\37\2\16\1\24\1\16\1\14\1\15\1\17"+
    "\10\16\1\40\2\16\1\23\17\16\1\41\1\42\1\24"+
    "\1\16\1\14\1\15\1\43\6\16\1\34\1\16\1\44"+
    "\1\16\1\36\1\26\3\16\1\45\12\16\1\37\2\16"+
    "\1\24\1\46\1\14\1\15\1\47\10\46\1\50\2\46"+
    "\1\51\3\46\1\52\16\46\1\16\1\14\1\15\13\16"+
    "\1\53\1\23\21\16\1\24\1\16\1\14\1\15\13\16"+
    "\1\54\1\23\21\16\1\24\44\0\1\15\37\0\1\55"+
    "\1\56\1\57\2\55\1\60\35\55\1\56\1\57\1\61"+
    "\1\62\1\60\11\55\1\63\10\55\1\64\3\55\1\65"+
    "\6\55\1\56\1\57\2\55\1\60\1\55\1\66\33\55"+
    "\1\56\1\57\2\55\1\60\5\55\1\67\27\55\1\56"+
    "\1\57\2\55\1\60\6\55\1\70\26\55\1\56\1\57"+
    "\2\55\1\60\12\55\1\71\21\55\1\72\1\56\1\57"+
    "\2\72\1\73\34\72\1\55\1\56\1\57\2\55\1\60"+
    "\6\55\1\74\26\55\1\56\1\57\2\55\1\60\12\55"+
    "\1\75\22\55\1\56\1\57\2\55\1\60\4\55\1\76"+
    "\30\55\1\56\1\57\2\55\1\60\5\55\1\77\27\55"+
    "\1\56\1\57\2\55\1\60\4\55\1\100\1\55\1\101"+
    "\26\55\1\56\1\57\2\55\1\60\4\55\1\102\30\55"+
    "\1\56\1\57\2\55\1\60\4\55\1\103\27\55\1\34"+
    "\1\104\1\105\37\34\1\106\1\107\1\110\11\106\1\111"+
    "\25\106\1\36\1\112\1\113\37\36\1\55\1\56\1\57"+
    "\2\55\1\60\30\55\1\114\4\55\1\56\1\57\2\55"+
    "\1\60\6\55\1\115\25\55\1\41\1\116\1\117\37\41"+
    "\1\42\1\120\1\121\37\42\1\55\1\56\1\57\1\122"+
    "\1\55\1\60\14\55\1\123\17\55\1\106\1\107\1\110"+
    "\11\106\1\124\25\106\1\55\1\56\1\57\2\55\1\60"+
    "\16\55\1\125\15\55\1\126\1\127\1\130\2\126\1\131"+
    "\35\126\1\127\1\130\1\132\1\126\1\131\14\126\1\133"+
    "\20\126\1\127\1\130\2\126\1\131\6\126\1\134\26\126"+
    "\1\127\1\130\2\126\1\131\12\126\1\135\22\126\1\127"+
    "\1\130\2\126\1\131\16\126\1\136\15\126\1\55\1\56"+
    "\1\57\2\55\1\60\10\55\1\137\24\55\1\56\1\57"+
    "\2\55\1\60\10\55\1\140\23\55\2\0\1\141\37\0"+
    "\1\55\1\56\1\57\1\142\1\55\1\60\35\55\1\56"+
    "\1\57\1\143\1\55\1\60\35\55\1\56\1\57\1\144"+
    "\1\55\1\60\35\55\1\56\1\57\1\145\1\55\1\60"+
    "\35\55\1\56\1\57\2\55\1\60\2\55\1\146\32\55"+
    "\1\56\1\57\2\55\1\60\5\55\1\147\27\55\1\56"+
    "\1\57\2\55\1\60\6\55\1\150\26\55\1\56\1\57"+
    "\2\55\1\60\13\55\1\151\20\55\1\72\1\152\1\153"+
    "\2\72\1\154\34\72\1\55\1\56\1\57\2\55\1\60"+
    "\6\55\1\155\26\55\1\56\1\57\2\55\1\60\13\55"+
    "\1\156\20\55\1\76\1\157\1\160\37\76\1\55\1\56"+
    "\1\57\2\55\1\60\5\55\1\161\26\55\1\100\1\162"+
    "\1\163\37\100\1\55\1\56\1\57\2\55\1\60\6\55"+
    "\1\164\25\55\1\102\1\165\1\166\37\102\1\103\1\167"+
    "\1\170\37\103\2\0\1\105\37\0\1\106\1\107\1\110"+
    "\37\106\2\0\1\110\37\0\1\106\1\107\1\110\11\106"+
    "\1\171\25\106\2\0\1\113\37\0\1\55\1\56\1\57"+
    "\2\55\1\60\4\55\1\172\30\55\1\56\1\57\2\55"+
    "\1\60\6\55\1\173\25\55\2\0\1\117\41\0\1\121"+
    "\37\0\1\55\1\56\1\57\1\174\1\55\1\60\34\55"+
    "\1\106\1\107\1\110\7\106\1\175\1\106\1\176\25\106"+
    "\1\55\1\56\1\57\2\55\1\60\17\55\1\177\14\55"+
    "\2\0\1\200\37\0\1\126\1\127\1\130\1\201\1\126"+
    "\1\131\35\126\1\127\1\130\2\126\1\131\4\126\1\202"+
    "\30\126\1\127\1\130\2\126\1\131\13\126\1\203\21\126"+
    "\1\127\1\130\2\126\1\131\17\126\1\204\14\126\1\55"+
    "\1\56\1\57\2\55\1\60\10\55\1\205\24\55\1\56"+
    "\1\57\2\55\1\60\10\55\1\206\24\55\1\56\1\57"+
    "\1\142\1\55\1\60\11\55\1\63\14\55\1\65\6\55"+
    "\1\207\1\210\1\143\1\55\1\211\35\55\1\212\1\213"+
    "\1\144\1\214\1\215\35\55\1\216\1\217\1\145\1\220"+
    "\1\221\35\55\1\56\1\57\2\55\1\60\3\55\1\222"+
    "\31\55\1\56\1\57\2\55\1\60\4\55\1\223\30\55"+
    "\1\56\1\57\2\55\1\60\4\55\1\224\30\55\1\56"+
    "\1\57\2\55\1\60\13\55\1\225\20\55\2\0\1\226"+
    "\37\0\1\55\1\227\1\230\2\55\1\231\4\55\1\232"+
    "\30\55\1\56\1\57\2\55\1\60\13\55\1\233\20\55"+
    "\2\0\1\160\37\0\1\55\1\56\1\57\2\55\1\60"+
    "\4\55\1\234\1\235\26\55\2\0\1\163\37\0\1\55"+
    "\1\56\1\57\2\55\1\60\4\55\1\236\27\55\2\0"+
    "\1\166\41\0\1\170\37\0\1\106\1\107\1\110\7\106"+
    "\1\237\27\106\1\240\1\56\1\57\2\240\1\241\34\240"+
    "\1\55\1\242\1\243\2\55\1\244\35\55\1\56\1\57"+
    "\1\174\1\55\1\60\14\55\1\245\17\55\1\106\1\227"+
    "\1\230\2\106\1\246\35\106\1\107\1\110\7\106\1\247"+
    "\27\106\1\55\1\56\1\57\2\55\1\60\4\55\1\250"+
    "\27\55\1\126\1\127\1\130\1\201\1\126\1\131\14\126"+
    "\1\251\20\126\1\227\1\230\2\126\1\252\35\126\1\127"+
    "\1\130\2\126\1\131\13\126\1\253\21\126\1\127\1\130"+
    "\2\126\1\131\4\126\1\254\27\126\1\55\1\56\1\57"+
    "\2\55\1\60\4\55\1\255\30\55\1\56\1\57\2\55"+
    "\1\60\4\55\1\256\27\55\2\0\1\257\41\0\1\260"+
    "\37\0\1\55\1\56\1\57\1\261\1\55\1\60\34\55"+
    "\2\0\1\262\37\0\1\55\1\56\1\57\1\263\1\55"+
    "\1\60\35\55\1\56\1\57\2\55\1\60\4\55\1\264"+
    "\27\55\1\265\1\56\1\57\2\265\1\266\34\265\1\267"+
    "\1\56\1\57\2\267\1\270\34\267\1\55\1\56\1\57"+
    "\2\55\1\60\4\55\1\271\27\55\2\0\1\230\37\0"+
    "\1\272\1\56\1\57\2\272\1\273\34\272\1\55\1\56"+
    "\1\57\2\55\1\60\4\55\1\274\30\55\1\56\1\57"+
    "\1\275\1\55\1\60\35\55\1\56\1\57\2\55\1\60"+
    "\5\55\1\276\26\55\1\277\1\56\1\57\1\300\1\277"+
    "\1\301\34\277\1\302\1\107\1\110\37\302\1\240\1\56"+
    "\1\57\2\240\1\241\4\240\1\303\27\240\2\0\1\243"+
    "\37\0\1\55\1\56\1\57\1\304\1\55\1\60\34\55"+
    "\1\305\1\107\1\110\37\305\1\55\1\56\1\57\2\55"+
    "\1\60\20\55\1\306\13\55\1\126\1\127\1\130\1\307"+
    "\1\126\1\131\35\126\1\127\1\130\2\126\1\131\4\126"+
    "\1\310\30\126\1\127\1\130\2\126\1\131\20\126\1\311"+
    "\13\126\1\312\1\56\1\57\2\312\1\313\34\312\1\314"+
    "\1\56\1\57\2\314\1\315\34\314\1\55\1\212\1\213"+
    "\1\261\1\55\1\215\35\55\1\216\1\217\1\263\1\55"+
    "\1\221\34\55\1\316\1\56\1\57\2\316\1\317\34\316"+
    "\1\265\1\320\1\321\2\265\1\322\34\265\1\267\1\323"+
    "\1\324\2\267\1\325\34\267\1\326\1\56\1\57\2\326"+
    "\1\327\34\326\1\272\1\330\1\331\2\272\1\332\34\272"+
    "\1\333\1\56\1\57\2\333\1\334\34\333\1\55\1\56"+
    "\1\57\1\275\1\335\1\60\4\55\1\336\30\55\1\56"+
    "\1\57\2\55\1\60\5\55\1\337\26\55\1\277\1\340"+
    "\1\341\2\277\1\342\35\277\1\340\1\341\1\300\1\343"+
    "\1\342\4\277\1\344\27\277\1\302\1\323\1\324\2\302"+
    "\1\345\34\302\1\240\1\56\1\57\2\240\1\241\4\240"+
    "\1\303\23\240\1\346\3\240\1\55\1\347\1\350\1\304"+
    "\1\55\1\351\34\55\1\305\1\330\1\331\2\305\1\352"+
    "\34\305\1\55\1\56\1\57\2\55\1\60\12\55\1\353"+
    "\21\55\1\126\1\347\1\350\1\307\1\126\1\354\34\126"+
    "\1\333\1\127\1\130\2\333\1\355\34\333\1\126\1\127"+
    "\1\130\2\126\1\131\12\126\1\356\21\126\1\312\1\357"+
    "\1\360\2\312\1\361\34\312\1\314\1\362\1\363\2\314"+
    "\1\364\34\314\1\316\1\365\1\366\2\316\1\367\34\316"+
    "\2\0\1\370\41\0\1\371\37\0\1\326\1\372\1\373"+
    "\2\326\1\374\34\326\2\0\1\375\37\0\1\333\1\376"+
    "\1\377\2\333\1\u0100\34\333\1\55\1\56\1\57\1\u0101"+
    "\1\55\1\60\35\55\1\56\1\57\2\55\1\60\5\55"+
    "\1\u0102\27\55\1\56\1\57\2\55\1\60\5\55\1\u0103"+
    "\26\55\2\0\1\u0104\37\0\1\277\1\340\1\341\1\u0105"+
    "\1\277\1\342\35\277\1\340\1\341\2\277\1\342\6\277"+
    "\1\u0106\25\277\1\240\1\56\1\57\2\240\1\241\4\240"+
    "\1\303\23\240\1\u0107\3\240\2\0\1\u0108\37\0\1\55"+
    "\1\56\1\57\2\55\1\60\21\55\1\u0109\12\55\1\126"+
    "\1\127\1\130\2\126\1\131\21\126\1\u010a\12\126\2\0"+
    "\1\u010b\41\0\1\u010c\41\0\1\u010d\41\0\1\u010e\41\0"+
    "\1\u010f\37\0\1\55\1\56\1\57\1\u0101\1\55\1\60"+
    "\4\55\1\336\30\55\1\56\1\57\2\55\1\60\5\55"+
    "\1\u0110\27\55\1\56\1\57\2\55\1\60\5\55\1\u0111"+
    "\26\55\1\277\1\340\1\341\1\u0105\1\277\1\342\4\277"+
    "\1\344\30\277\1\340\1\341\2\277\1\342\6\277\1\u0112"+
    "\25\277\1\240\1\u0113\1\u0114\2\240\1\u0115\4\240\1\u0116"+
    "\27\240\1\55\1\56\1\57\2\55\1\60\22\55\1\u0117"+
    "\11\55\1\126\1\127\1\130\2\126\1\131\22\126\1\u0118"+
    "\11\126\1\55\1\56\1\57\2\55\1\60\5\55\1\u0119"+
    "\27\55\1\56\1\57\2\55\1\60\5\55\1\u011a\26\55"+
    "\1\277\1\340\1\341\2\277\1\342\6\277\1\u011b\25\277"+
    "\2\0\1\u011c\37\0\1\u011d\1\56\1\57\2\u011d\1\241"+
    "\34\u011d\1\55\1\56\1\57\2\55\1\60\1\55\1\u011e"+
    "\32\55\1\126\1\127\1\130\2\126\1\131\1\126\1\u011f"+
    "\32\126\1\55\1\56\1\57\2\55\1\60\5\55\1\u0120"+
    "\27\55\1\56\1\57\2\55\1\60\5\55\1\u0121\26\55"+
    "\1\277\1\340\1\341\2\277\1\342\6\277\1\u0122\25\277"+
    "\1\u011d\1\u0113\1\u0114\2\u011d\1\u0115\34\u011d\1\55\1\56"+
    "\1\57\2\55\1\60\23\55\1\u0123\10\55\1\126\1\127"+
    "\1\130\2\126\1\131\23\126\1\u0124\10\126\1\55\1\u0125"+
    "\1\u0126\2\55\1\u0127\35\55\1\56\1\57\2\55\1\60"+
    "\5\55\1\u0128\26\55\1\277\1\u0129\1\u012a\2\277\1\u012b"+
    "\34\277\1\55\1\56\1\57\2\55\1\60\4\55\1\u012c"+
    "\27\55\1\126\1\127\1\130\2\126\1\131\4\126\1\u012d"+
    "\27\126\2\0\1\u012e\37\0\1\55\1\56\1\57\2\55"+
    "\1\60\5\55\1\u012f\26\55\2\0\1\u0130\37\0\1\55"+
    "\1\56\1\57\2\55\1\60\24\55\1\u0131\7\55\1\126"+
    "\1\127\1\130\2\126\1\131\24\126\1\u0132\7\126\1\55"+
    "\1\56\1\57\2\55\1\60\5\55\1\u0133\27\55\1\56"+
    "\1\57\2\55\1\60\22\55\1\u0134\11\55\1\126\1\127"+
    "\1\130\2\126\1\131\22\126\1\u0135\11\126\1\55\1\56"+
    "\1\57\2\55\1\60\5\55\1\u0136\27\55\1\56\1\57"+
    "\2\55\1\60\25\55\1\u0137\6\55\1\126\1\127\1\130"+
    "\2\126\1\131\25\126\1\u0138\6\126\1\55\1\56\1\57"+
    "\2\55\1\60\5\55\1\u0139\27\55\1\56\1\57\2\55"+
    "\1\60\26\55\1\u013a\5\55\1\126\1\127\1\130\2\126"+
    "\1\131\26\126\1\u013b\5\126\1\55\1\u013c\1\u013d\2\55"+
    "\1\u013e\35\55\1\56\1\57\2\55\1\60\27\55\1\u013f"+
    "\4\55\1\126\1\127\1\130\2\126\1\131\27\126\1\u0140"+
    "\4\126\2\0\1\u013d\37\0\1\55\1\u0141\1\u0142\2\55"+
    "\1\u0143\34\55\1\126\1\u0141\1\u0142\2\126\1\u0144\34\126"+
    "\2\0\1\u0142\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\37\1\1\0\1\1\1\11"+
    "\1\1\12\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\11\2\1\1\11\2\1\1\11\2\0\1\1"+
    "\1\11\1\1\1\11\2\0\1\1\2\0\1\1\1\11"+
    "\1\1\7\0\1\11\10\0\1\1\1\11\1\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\11\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\3\0\2\1\1\0\1\11\6\0"+
    "\1\1\1\11\2\1\1\11\1\0\2\1\1\11\1\0"+
    "\1\1\4\0\1\11\1\1\1\11\1\1\5\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\0\2\1\2\0\1\1"+
    "\4\0\2\11\1\0\1\11\3\0\1\1\1\0\1\1"+
    "\2\0\1\1\5\0\2\1\2\0\1\1\5\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\2\1\1\11\1\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\3\0\1\1"+
    "\1\11\1\1\2\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\2\1\1\0\1\1\1\11\2\1\1\11\2\1"+
    "\1\11\1\1\2\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\3\0\1\11\3\0\1\11\2\0\5\11"+
    "\3\0\1\1\1\11\1\1\6\0\1\11\10\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\2\0\1\11"+
    "\1\0\1\11\13\0\1\1\1\11\1\1\2\0\1\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DiffLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return UNIFIED_COMMON_LINE;
            } 
            // fall through
          case 56: break;
          case 4: 
            { return UNIFIED_DELETED_LINE;
            } 
            // fall through
          case 57: break;
          case 5: 
            { return UNIFIED_INSERTED_LINE;
            } 
            // fall through
          case 58: break;
          case 6: 
            { return NORMAL_TO_LINE;
            } 
            // fall through
          case 59: break;
          case 7: 
            { return NORMAL_FROM_LINE;
            } 
            // fall through
          case 60: break;
          case 8: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return OTHER;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return CONTEXT_COMMON_LINE;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return CONTEXT_DELETED_LINE;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return CONTEXT_CHANGED_LINE;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return CONTEXT_INSERTED_LINE;
            } 
            // fall through
          case 65: break;
          case 13: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return GIT_BINARY_PATCH_CONTENT;
            } 
            // fall through
          case 66: break;
          case 14: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return OTHER;
            } 
            // fall through
          case 67: break;
          case 15: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return EOL_HINT;
            } 
            // fall through
          case 68: break;
          case 16: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return GIT_BINARY_PATCH_CONTENT;
            } 
            // fall through
          case 69: break;
          case 17: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(NORMAL); return NORMAL_DELETE_COMMAND;
            } 
            // fall through
          case 70: break;
          case 18: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(NORMAL); return NORMAL_ADD_COMMAND;
            } 
            // fall through
          case 71: break;
          case 19: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(NORMAL); return NORMAL_CHANGE_COMMAND;
            } 
            // fall through
          case 72: break;
          case 20: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return EOL_HINT;
            } 
            // fall through
          case 73: break;
          case 21: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return GIT_SEPARATOR;
            } 
            // fall through
          case 74: break;
          case 22: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return NORMAL_SEPARATOR;
            } 
            // fall through
          case 75: break;
          case 23: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(NORMAL); return NORMAL_DELETE_COMMAND;
            } 
            // fall through
          case 76: break;
          case 24: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(NORMAL); return NORMAL_ADD_COMMAND;
            } 
            // fall through
          case 77: break;
          case 25: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(NORMAL); return NORMAL_CHANGE_COMMAND;
            } 
            // fall through
          case 78: break;
          case 26: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(CONTEXT); return CONTEXT_FROM_LABEL;
            } 
            // fall through
          case 79: break;
          case 27: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(UNIFIED_BETWEEN_LABELS); return UNIFIED_FROM_LABEL;
            } 
            // fall through
          case 80: break;
          case 28: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(GIT_BODY_BETWEEN_LABELS); return UNIFIED_FROM_LABEL;
            } 
            // fall through
          case 81: break;
          case 29: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CONTEXT_TO_LABEL;
            } 
            // fall through
          case 82: break;
          case 30: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return GIT_VERSION_NUMBER;
            } 
            // fall through
          case 83: break;
          case 31: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(UNIFIED); return UNIFIED_TO_LABEL;
            } 
            // fall through
          case 84: break;
          case 32: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(GIT_BODY); return UNIFIED_TO_LABEL;
            } 
            // fall through
          case 85: break;
          case 33: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(GIT_HEAD); return GIT_FIRST_LINE;
            } 
            // fall through
          case 86: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(CONTEXT); return CONTEXT_FROM_LABEL;
            } 
            // fall through
          case 87: break;
          case 35: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(UNIFIED_BETWEEN_LABELS); return UNIFIED_FROM_LABEL;
            } 
            // fall through
          case 88: break;
          case 36: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return COMMAND;
            } 
            // fall through
          case 89: break;
          case 37: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(GIT_BODY_BETWEEN_LABELS); return UNIFIED_FROM_LABEL;
            } 
            // fall through
          case 90: break;
          case 38: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(GIT_BODY); return COMMAND;
            } 
            // fall through
          case 91: break;
          case 39: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return CONTEXT_TO_LABEL;
            } 
            // fall through
          case 92: break;
          case 40: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return GIT_VERSION_NUMBER;
            } 
            // fall through
          case 93: break;
          case 41: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(UNIFIED); return UNIFIED_TO_LABEL;
            } 
            // fall through
          case 94: break;
          case 42: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(GIT_BODY); return UNIFIED_TO_LABEL;
            } 
            // fall through
          case 95: break;
          case 43: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(GIT_HEAD); return GIT_FIRST_LINE;
            } 
            // fall through
          case 96: break;
          case 44: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return COMMAND;
            } 
            // fall through
          case 97: break;
          case 45: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yybegin(GIT_BODY); return COMMAND;
            } 
            // fall through
          case 98: break;
          case 46: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return UNIFIED_LINE_NUMBERS;
            } 
            // fall through
          case 99: break;
          case 47: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return UNIFIED_LINE_NUMBERS;
            } 
            // fall through
          case 100: break;
          case 48: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CONTEXT_FROM_LINE_NUMBERS;
            } 
            // fall through
          case 101: break;
          case 49: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CONTEXT_TO_LINE_NUMBERS;
            } 
            // fall through
          case 102: break;
          case 50: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return CONTEXT_FROM_LINE_NUMBERS;
            } 
            // fall through
          case 103: break;
          case 51: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return CONTEXT_TO_LINE_NUMBERS;
            } 
            // fall through
          case 104: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 15);
            { return CONTEXT_HUNK_SEPARATOR;
            } 
            // fall through
          case 105: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 16);
            { yybegin(GIT_BINARY); return GIT_BINARY_PATCH_HEADER;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
