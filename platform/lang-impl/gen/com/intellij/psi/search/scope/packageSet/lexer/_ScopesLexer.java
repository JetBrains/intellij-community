/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.psi.search.scope.packageSet.lexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_ScopesLexer.flex</tt>
 */
class _ScopesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14752 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\7\2\10\1\12\4\0\1\13\1\14"+
    "\1\15\1\16\2\10\1\17\3\10\1\17\71\10\1\20\1\10\1\21\1\22\1\23\1\24\2\22\16"+
    "\0\1\25\1\13\1\26\1\27\2\10\1\30\11\10\1\31\21\10\1\32\1\33\23\10\1\22\1\7"+
    "\3\10\1\17\1\34\1\7\4\10\1\35\1\36\4\0\1\37\1\40\1\22\3\10\2\41\1\22\1\42"+
    "\1\43\1\0\1\44\5\10\1\45\3\0\1\46\1\47\13\10\1\50\1\37\1\51\1\52\1\0\1\53"+
    "\1\22\1\54\1\55\3\10\3\0\1\56\12\10\1\57\1\0\1\60\1\22\1\0\1\61\3\10\1\45"+
    "\1\62\1\16\2\10\1\57\1\63\1\64\1\65\2\22\3\10\1\66\10\22\1\67\1\23\6\22\1"+
    "\70\2\0\1\71\1\72\6\10\1\73\2\0\1\74\1\10\1\75\1\0\2\7\1\76\1\77\1\100\2\10"+
    "\1\67\1\101\1\102\1\103\1\104\1\54\1\105\1\75\1\0\1\106\1\43\1\76\1\107\1"+
    "\100\2\10\1\67\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\0\1\117\1\22\1"+
    "\76\1\31\1\30\2\10\1\67\1\120\1\102\1\37\1\121\1\122\1\22\1\75\1\0\1\34\1"+
    "\22\1\76\1\77\1\100\2\10\1\67\1\120\1\102\1\103\1\113\1\116\1\105\1\75\1\0"+
    "\1\34\1\22\1\123\1\124\1\125\1\126\1\127\1\124\1\10\1\130\1\131\1\132\1\133"+
    "\1\22\1\116\1\0\1\22\1\34\1\76\1\25\1\67\2\10\1\67\1\134\1\135\1\136\1\132"+
    "\1\137\1\21\1\75\1\0\2\22\1\140\1\25\1\67\2\10\1\67\1\134\1\102\1\136\1\132"+
    "\1\137\1\26\1\75\1\0\1\141\1\22\1\140\1\25\1\67\4\10\1\142\1\136\1\143\1\54"+
    "\1\22\1\75\1\0\1\22\1\33\1\140\1\10\1\17\1\33\2\10\1\30\1\144\1\17\1\145\1"+
    "\146\1\0\2\22\1\147\1\22\1\7\5\10\1\150\1\151\1\152\1\71\1\0\1\153\4\22\1"+
    "\154\1\155\1\156\1\7\1\157\1\160\1\150\1\161\1\162\1\163\1\0\1\164\4\22\1"+
    "\122\2\22\1\153\1\0\1\153\1\165\1\166\1\10\1\7\3\10\1\23\1\36\1\0\1\136\1"+
    "\167\1\0\1\36\3\0\1\42\1\170\7\22\5\10\1\45\1\0\1\171\1\0\1\153\1\57\1\172"+
    "\1\173\1\174\1\175\1\10\1\176\1\177\1\0\1\163\4\10\1\31\1\15\5\10\1\200\51"+
    "\10\1\125\1\17\1\125\5\10\1\125\4\10\1\125\1\17\1\125\1\10\1\17\7\10\1\125"+
    "\10\10\1\201\4\22\2\10\2\22\12\10\1\23\1\22\1\7\114\10\1\77\2\10\1\7\2\10"+
    "\1\41\11\10\1\124\1\122\1\22\1\10\1\25\1\202\1\22\2\10\1\202\1\22\2\10\1\203"+
    "\1\22\1\10\1\25\1\204\1\22\6\10\1\205\3\0\1\206\1\207\1\0\1\153\3\22\1\210"+
    "\1\0\1\153\13\10\1\22\5\10\1\211\10\10\1\212\1\22\3\10\1\23\1\0\1\2\1\0\1"+
    "\2\1\116\1\0\3\10\1\212\1\23\1\22\5\10\1\106\2\0\1\47\1\153\1\0\1\153\4\22"+
    "\2\10\1\152\1\2\6\10\1\167\1\71\3\0\1\103\1\0\1\153\1\0\1\153\1\35\13\22\1"+
    "\213\5\10\1\205\1\0\1\213\1\106\1\0\1\153\1\22\1\214\1\2\1\22\1\215\3\10\1"+
    "\74\1\174\1\0\1\61\4\10\1\57\1\0\1\2\1\22\4\10\1\205\2\0\1\22\1\0\1\216\1"+
    "\0\1\61\3\10\1\212\12\22\1\217\2\0\1\220\1\221\1\22\30\10\4\0\1\71\2\22\1"+
    "\70\42\10\2\212\4\10\2\212\1\10\1\222\3\10\1\212\6\10\1\25\1\162\1\223\1\23"+
    "\1\224\1\106\1\10\1\23\1\223\1\23\1\22\1\214\3\22\1\225\1\22\1\35\1\122\1"+
    "\22\1\226\1\22\1\42\1\227\1\34\1\35\2\22\1\10\1\23\3\10\1\41\2\22\1\0\1\42"+
    "\1\230\1\0\1\231\1\22\1\232\1\33\1\144\1\233\1\24\1\234\1\10\1\235\1\236\1"+
    "\237\2\22\5\10\1\122\116\22\5\10\1\17\5\10\1\17\20\10\1\23\1\240\1\241\1\22"+
    "\4\10\1\31\1\15\7\10\1\35\1\22\1\54\2\10\1\17\1\22\10\17\4\0\5\22\1\35\72"+
    "\22\1\236\3\22\1\7\1\176\1\233\1\23\1\7\11\10\1\17\1\242\1\7\12\10\1\200\1"+
    "\236\4\10\1\212\1\7\12\10\1\17\2\22\3\10\1\41\6\22\170\10\1\212\11\22\71\10"+
    "\1\23\6\22\21\10\1\23\10\22\5\10\1\212\41\10\1\23\2\10\1\0\1\241\2\22\5\10"+
    "\1\152\1\70\1\243\3\10\1\54\12\10\1\153\3\22\1\35\1\10\1\33\14\10\1\244\1"+
    "\106\1\22\1\10\1\41\11\22\1\10\1\245\1\246\2\10\1\45\2\22\1\122\6\10\1\106"+
    "\1\22\1\61\5\10\1\205\1\0\1\42\1\22\1\0\1\153\2\0\1\61\1\43\1\0\1\61\2\10"+
    "\1\57\1\163\2\10\1\152\1\0\1\2\1\22\3\10\1\23\1\72\5\10\1\45\1\0\1\231\1\35"+
    "\1\0\1\153\4\22\5\10\1\74\1\71\1\22\1\246\1\247\1\0\1\153\2\10\1\17\1\250"+
    "\6\10\1\173\1\251\1\211\2\22\1\252\1\10\1\45\1\253\1\22\3\254\1\22\2\17\22"+
    "\22\4\10\1\45\1\255\1\0\1\153\64\10\1\106\1\22\2\10\1\17\1\256\5\10\1\106"+
    "\40\22\55\10\1\212\15\10\1\21\4\22\1\17\1\22\1\256\1\257\1\10\1\67\1\17\1"+
    "\162\1\260\15\10\1\21\3\22\1\256\54\10\1\212\2\22\10\10\1\33\6\10\5\22\1\10"+
    "\1\23\2\0\2\22\1\71\1\22\1\127\2\22\1\236\3\22\1\34\1\25\20\10\1\261\1\226"+
    "\1\22\1\0\1\153\1\7\2\10\1\107\1\7\2\10\1\41\1\262\12\10\1\17\3\33\1\263\1"+
    "\264\2\22\1\265\1\10\1\134\2\10\1\17\2\10\1\266\1\10\1\212\1\10\1\212\4\22"+
    "\17\10\1\41\10\22\6\10\1\23\20\22\1\267\20\22\3\10\1\23\6\10\1\122\5\22\3"+
    "\10\1\17\2\22\3\10\1\41\6\22\3\10\1\212\4\10\1\106\1\10\1\233\5\22\23\10\1"+
    "\212\1\0\1\153\52\22\1\212\1\67\4\10\1\31\1\270\2\10\1\212\25\22\2\10\1\212"+
    "\1\22\3\10\1\21\10\22\7\10\1\262\10\22\1\271\1\70\1\134\1\7\2\10\1\106\1\112"+
    "\4\22\3\10\1\23\20\22\6\10\1\212\1\22\2\10\1\212\1\22\2\10\1\41\21\22\11\10"+
    "\1\122\66\22\1\215\6\10\1\0\1\71\3\22\1\116\1\0\2\22\1\215\5\10\1\0\1\272"+
    "\2\22\3\10\1\122\1\0\1\153\1\215\3\10\1\152\1\0\1\136\1\0\10\22\1\215\5\10"+
    "\1\45\1\0\1\273\1\22\1\0\1\153\24\22\5\10\1\45\1\0\1\22\1\0\1\153\46\22\55"+
    "\10\1\17\22\22\14\10\1\41\63\22\5\10\1\17\72\22\7\10\1\122\130\22\10\10\1"+
    "\23\1\22\1\74\4\0\1\71\1\22\1\54\1\215\1\10\14\22\1\21\153\22\1\274\1\275"+
    "\2\0\1\276\1\2\3\22\1\277\22\22\1\300\67\22\12\10\1\25\10\10\1\25\1\301\1"+
    "\302\1\10\1\303\1\134\7\10\1\31\1\304\2\25\3\10\1\305\1\162\1\33\1\67\51\10"+
    "\1\212\3\10\1\67\2\10\1\200\3\10\1\200\2\10\1\25\3\10\1\25\2\10\1\17\3\10"+
    "\1\17\3\10\1\67\3\10\1\67\2\10\1\200\1\306\6\0\1\134\3\10\1\154\1\7\1\200"+
    "\1\307\1\232\1\310\1\154\1\222\1\154\2\200\1\115\1\10\1\30\1\10\1\106\1\311"+
    "\1\30\1\10\1\106\50\22\32\10\1\17\5\22\106\10\1\23\1\22\33\10\1\212\74\22"+
    "\1\114\3\22\14\0\20\22\36\0\2\22");

  /* The ZZ_CMAP_A table has 1616 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\2\2\3\1\0\2\3\6\2\4\0\1\3\1\7\1\0\1\22\1\1\1\0\1\6\1\0\1\14\1\15\1\20"+
    "\2\0\1\10\1\16\1\21\12\4\1\17\6\0\22\1\1\12\1\0\1\13\1\0\4\1\1\0\1\5\1\0\1"+
    "\11\1\2\2\0\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0\1\1\5\0\7\1\1\0\2\1\4\0\4\1\16"+
    "\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0"+
    "\13\1\1\0\3\1\1\0\5\2\2\0\6\1\1\0\1\1\15\0\1\1\1\0\15\2\1\0\1\2\1\0\2\2\1"+
    "\0\2\2\1\0\1\2\3\1\5\0\5\2\6\0\1\1\4\0\3\2\5\0\3\1\7\2\4\0\2\1\1\2\13\1\1"+
    "\0\1\1\7\2\2\1\2\2\1\0\4\2\2\1\2\2\3\1\2\0\1\1\7\0\1\2\1\1\1\2\6\1\3\2\2\0"+
    "\11\1\3\2\1\1\6\0\2\2\6\1\4\2\2\1\2\0\2\2\1\1\11\2\1\1\3\2\1\1\5\2\2\0\1\1"+
    "\3\2\4\0\1\1\1\0\6\1\4\0\13\2\1\0\4\2\6\1\3\2\1\1\2\2\1\1\7\2\2\1\2\2\2\0"+
    "\2\2\1\0\3\2\1\0\10\1\2\0\2\1\2\0\6\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0"+
    "\2\2\2\0\3\2\1\1\5\0\2\1\1\0\5\1\4\0\3\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\2"+
    "\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\4\2\3\1\1\2\2\0"+
    "\1\1\1\0\2\1\1\0\3\1\2\2\1\0\3\2\2\0\1\1\11\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0"+
    "\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1"+
    "\1\6\0\1\2\4\1\1\0\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\3\0\2\2\1\0\3\1\1\0\2\1"+
    "\5\0\3\1\2\0\1\1\3\2\1\0\4\2\1\1\1\0\4\1\1\0\1\1\4\0\1\2\4\0\6\2\1\0\1\2\3"+
    "\0\2\2\4\0\1\1\1\2\2\1\7\2\4\0\10\1\3\2\7\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2"+
    "\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\3\1\2\2\1\0\2\2\1\1\2\0"+
    "\5\1\1\0\1\1\1\0\6\2\2\0\2\2\2\0\4\1\5\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2\5\1\3"+
    "\2\6\0\1\2\1\0\7\2\1\1\2\2\4\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2\5\1\14\2\1\1\1"+
    "\2\3\1\1\0\7\1\2\0\3\2\2\1\3\2\3\0\2\1\2\2\4\0\1\1\1\0\2\2\4\0\4\1\10\2\3"+
    "\0\1\1\3\0\2\1\1\2\5\0\3\2\2\0\1\1\1\2\1\1\5\0\6\1\2\0\5\2\3\1\3\0\10\2\5"+
    "\1\2\2\3\0\3\1\3\2\1\0\5\2\4\1\1\2\4\1\3\2\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\3\1\1\0\6\1\2\0\2\1\2\0\5\2\5\0\1\1\5\0\6\2\1\0\1\2\3\0\4\2\11\0"+
    "\1\1\4\0\1\1\1\0\5\1\2\0\1\1\1\0\4\1\1\0\3\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\4"+
    "\1\3\2\2\1\5\0\2\2\2\0\3\1\6\2\1\0\2\1\2\0\4\1\1\0\2\1\1\2\3\1\1\2\4\1\1\2"+
    "\10\1\2\2\4\0\1\1\1\2\4\0\1\2\5\1\2\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2"+
    "\1\0\2\2\5\0\5\1\5\0\1\1\1\2\3\1\1\0\2\1\1\0\7\1\2\0\1\2\6\0\2\1\2\0\3\1\3"+
    "\0\2\1\3\0\2\1\2\0\3\2\4\0\3\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\1\1\3\0\1\1\2\0"+
    "\2\1\3\2\1\0\2\2\1\0\3\2\2\0\1\2\2\0\1\2\4\1\10\0\5\2\3\0\6\2\2\0\3\2\2\0"+
    "\4\2\4\0\3\2\5\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1\1\1\0\6\1\2\0\5\1\1\0\4"+
    "\1\1\0\4\1\2\0\2\2\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[21];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\23\0\46\0\71\0\114\0\137\0\162\0\23"+
    "\0\23\0\23\0\23\0\23\0\23\0\23\0\23\0\23"+
    "\0\23\0\23\0\23\0\23\0\23";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[21];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\24\0\2\3\1\0\1\3\21\0"+
    "\1\4\23\0\1\5\23\0\1\24\23\0\1\25\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\16\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[21];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ScopesLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ScopesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ScopeTokenTypes.BAD_CHARACTER;
            }
          case 19: break;
          case 2: 
            { return ScopeTokenTypes.IDENTIFIER;
            }
          case 20: break;
          case 3: 
            { return ScopeTokenTypes.WHITE_SPACE;
            }
          case 21: break;
          case 4: 
            { return ScopeTokenTypes.INTEGER_LITERAL;
            }
          case 22: break;
          case 5: 
            { return ScopeTokenTypes.EXCL;
            }
          case 23: break;
          case 6: 
            { return ScopeTokenTypes.MINUS;
            }
          case 24: break;
          case 7: 
            { return ScopeTokenTypes.TILDE;
            }
          case 25: break;
          case 8: 
            { return ScopeTokenTypes.LBRACKET;
            }
          case 26: break;
          case 9: 
            { return ScopeTokenTypes.RBRACKET;
            }
          case 27: break;
          case 10: 
            { return ScopeTokenTypes.LPARENTH;
            }
          case 28: break;
          case 11: 
            { return ScopeTokenTypes.RPARENTH;
            }
          case 29: break;
          case 12: 
            { return ScopeTokenTypes.DOT;
            }
          case 30: break;
          case 13: 
            { return ScopeTokenTypes.COLON;
            }
          case 31: break;
          case 14: 
            { return ScopeTokenTypes.ASTERISK;
            }
          case 32: break;
          case 15: 
            { return ScopeTokenTypes.DIV;
            }
          case 33: break;
          case 16: 
            { return ScopeTokenTypes.SHARP;
            }
          case 34: break;
          case 17: 
            { return ScopeTokenTypes.OROR;
            }
          case 35: break;
          case 18: 
            { return ScopeTokenTypes.ANDAND;
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
