<idea-plugin>
  <dependencies>
    <module name="intellij.platform.backend"/>
    <module name="intellij.platform.polySymbols"/>
  </dependencies>

  <extensionPoints>
    <extensionPoint qualifiedName="com.intellij.polySymbols.psiReferenceProvider"
                    beanClass="com.intellij.polySymbols.references.impl.PsiPolySymbolReferenceProviderBean"
                    dynamic="true">
      <with attribute="hostElementClass" implements="com.intellij.model.psi.PsiExternalReferenceHost"/>
      <with attribute="implementationClass" implements="com.intellij.polySymbols.references.PsiPolySymbolReferenceProvider"/>
    </extensionPoint>
    <extensionPoint qualifiedName="com.intellij.polySymbols.psiSourcedSymbolProvider"
                    interface="com.intellij.polySymbols.search.PsiSourcedPolySymbolProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="com.intellij.polySymbols.psiSourcedSymbol"
                    beanClass="com.intellij.polySymbols.search.impl.PolySymbolPsiSourcedSymbolHostClassEP"
                    dynamic="true"/>
    <extensionPoint qualifiedName="com.intellij.polySymbols.inspectionToolMapping"
                    beanClass="com.intellij.polySymbols.inspections.impl.PolySymbolInspectionToolMappingEP"
                    dynamic="true"/>
    <extensionPoint qualifiedName="com.intellij.polySymbols.problemQuickFixProvider"
                    interface="com.intellij.polySymbols.inspections.PolySymbolProblemQuickFixProvider"
                    dynamic="true"/>
    <extensionPoint qualifiedName="com.intellij.polySymbols.codeCompletionItemCustomizer"
                    interface="com.intellij.polySymbols.completion.PolySymbolCodeCompletionItemCustomizer"
                    dynamic="true"/>
  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">
    <annotator language="PolySymbolEnabledLanguage"
               implementationClass="com.intellij.polySymbols.highlighting.impl.PolySymbolHighlightingAnnotator"/>
    <psi.declarationProvider implementation="com.intellij.polySymbols.declarations.impl.PolySymbolDeclarationProviderDelegate"/>

    <!--suppress PluginXmlRegistrationCheck -->
    <psi.symbolReferenceProvider hostElementClass="com.intellij.model.psi.PsiExternalReferenceHost"
                                 hostLanguage="PolySymbolEnabledLanguage"
                                 implementationClass="com.intellij.polySymbols.references.impl.PsiPolySymbolReferenceProviderImpl"
                                 targetClass="com.intellij.polySymbols.PolySymbol"
                                 referenceClass="com.intellij.polySymbols.references.PolySymbolReference"/>

    <referencesSearch implementation="com.intellij.polySymbols.search.PsiSourcedPolySymbolReferenceSearcher"/>
    <refactoring.helper implementation="com.intellij.polySymbols.refactoring.PsiSourcedPolySymbolRefactoringHelper"/>
    <renameHandler implementation="com.intellij.polySymbols.refactoring.PsiSourcedPolySymbolRenameHandler"/>

    <rename.symbolRenameTargetFactory implementation="com.intellij.polySymbols.refactoring.PolySymbolRenameTargetFactory"/>
    <lang.symbolSearchTarget forClass="com.intellij.polySymbols.PolySymbol"
                             implementationClass="com.intellij.polySymbols.search.PolySymbolSearchTargetFactory"/>

    <searcher forClass="com.intellij.find.usages.api.UsageSearchParameters"
              implementationClass="com.intellij.polySymbols.search.PolySymbolUsageSearcher"/>
    <searcher forClass="com.intellij.refactoring.rename.api.RenameUsageSearchParameters"
              implementationClass="com.intellij.polySymbols.refactoring.PolySymbolRenameUsageSearcher"/>

    <platform.backend.documentation.targetProvider
      implementation="com.intellij.polySymbols.documentation.PolySymbolDocumentationTargetProvider"/>
  </extensions>
</idea-plugin>