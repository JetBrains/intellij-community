{
  "$schema": "../../web-types-gen/resources/web-types.json",
  "framework": "vue",
  "name": "vue",
  "version": "3.0.0",
  "js-types-syntax": "typescript",
  "description-markup": "markdown",
  "framework-config": {
    "enable-when": {
      "node-packages": [
        "vue",
        "@vue/cli"
      ],
      "file-extensions": [
        "vue"
      ],
      "ide-libraries": [
        "vue"
      ]
    }
  },
  "contributions": {
    "html": {
      "attributes": [
        {
          "name": "Vue directive",
          "description": "Directives are special attributes with the `v-` prefix. Directive attribute values are expected to be a single JavaScript expression (with the exception of `v-for` and `v-on`). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes.",
          "doc-url": "https://v3.vuejs.org/guide/template-syntax.html#directives",
          "virtual": true,
          "value": {
            "kind": "expression",
            "parser": "vue:expression",
            "type": "any",
            "required": true
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "items": "/html/vue-directives",
            "template": [
              "v-",
              "#item:Vue directive",
              {
                "delegate": "argument",
                "template": [
                  ":",
                  "#...",
                  "#item:argument"
                ],
                "required": false,
                "proximity": 1,
                "repeat": false
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "v-on alias",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n`v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-on",
          "virtual": true,
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "proximity": -100,
            "delegate": "/html/vue-directives/on",
            "template": [
              "@",
              "$...",
              {
                "delegate": "argument",
                "required": true,
                "repeat": false
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        }
      ],
      "vue-directives": [
        {
          "name": "on",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n`v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-on",
          "attribute-value": {
            "parser": "vue:on",
            "type": "void"
          },
          "argument": {
            "name": "event name",
            "description": "Optional event name",
            "pattern": {
              "items": [
                "/js/events"
              ]
            }
          },
          "modifiers": [
            {
              "name": "stop",
              "description": "Call `event.stopPropagation()`."
            },
            {
              "name": "prevent",
              "description": "Call `event.preventDefault()`."
            },
            {
              "name": "capture",
              "description": "Add event listener in capture mode."
            },
            {
              "name": "self",
              "description": "Only trigger handler if event was dispatched from this element."
            },
            {
              "name": "once",
              "description": "Trigger handler at most once."
            },
            {
              "name": "passive",
              "description": "attaches a DOM event with `{ passive: true }`."
            }
          ],
          "js": {
            "events": [
              {
                "name": "Mouse button event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "click",
                    "dblclick",
                    "mousedown",
                    "mouseup"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "left",
                      "description": "Only trigger handler for left button mouse events."
                    },
                    {
                      "name": "right",
                      "description": "Only trigger handler for right button mouse events."
                    },
                    {
                      "name": "middle",
                      "description": "Only trigger handler for middle button mouse events."
                    }
                  ]
                }
              },
              {
                "name": "Key event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "keydown",
                    "keypress",
                    "keyup"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "Key alias",
                      "pattern": {
                        "or": [
                          "enter",
                          "tab",
                          "delete",
                          "esc",
                          "space",
                          "up",
                          "down",
                          "left",
                          "right"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "System event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "keydown",
                    "keypress",
                    "keyup",
                    "click",
                    "contextmenu",
                    "dblclick",
                    "mousedown",
                    "mouseenter",
                    "mouseleave",
                    "mousemove",
                    "mouseout",
                    "mouseover",
                    "mouseup",
                    "show",
                    "drag",
                    "dragend",
                    "dragenter",
                    "dragleave",
                    "dragover",
                    "dragstart",
                    "drop"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "System modifier key",
                      "description": "Triggers mouse or keyboard event listeners only when the modifier key is pressed.",
                      "pattern": {
                        "or": [
                          "ctrl",
                          "alt",
                          "shift",
                          "meta"
                        ]
                      }
                    },
                    {
                      "name": "exact",
                      "description": "Allows control of the exact combination of system modifiers needed to trigger an event."
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
}
