syntax = "proto3";

package intellij.process.mediator.rpc;

import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "com.intellij.execution.process.mediator.rpc";
option java_outer_classname = "ProcessMediatorProto";

service Daemon {
  rpc AdjustQuota (QuotaOptions) returns (google.protobuf.Empty);
  rpc ListenQuotaStateUpdates (google.protobuf.Empty) returns (stream QuotaState);
  rpc Shutdown (google.protobuf.Empty) returns (google.protobuf.Empty);
}

// exchanged on startup before gRPC is up and running
message Handshake {
  uint32 port = 1;
  bytes token = 2;
  uint64 pid = 3;
}

message QuotaState {
  QuotaOptions quota_options = 1;

  oneof StateOneof {
    google.protobuf.Empty state_new = 2;
    QuotaStateActive state_active = 3;
    google.protobuf.Empty state_expired = 4;
  }
}

message QuotaStateActive {
  int64 elapsed_ms = 1;
}

message QuotaOptions {
  int64 time_limit_ms = 1;
  bool is_refreshable = 2;
}

service ProcessManager {
  // The resulting server stream emit a single element on start, and doesn't end until the client closes the RPC,
  // which defines the lifetime of the handle.
  rpc OpenHandle (google.protobuf.Empty) returns (stream OpenHandleReply);

  rpc CreateProcess (CreateProcessRequest) returns (CreateProcessReply);
  rpc DestroyProcess (DestroyProcessRequest) returns (google.protobuf.Empty);
  rpc AwaitTermination (AwaitTerminationRequest) returns (AwaitTerminationReply);

  rpc WriteStream (stream WriteStreamRequest) returns (stream google.protobuf.Empty);
  rpc ReadStream (ReadStreamRequest) returns (stream DataChunk);
}

message OpenHandleReply {
  uint64 handle_id = 1;
}

message CreateProcessRequest {
  uint64 handle_id = 1;
  CommandLine command_line = 2;
}

message CreateProcessReply {
  uint64 pid = 1;
}

message DestroyProcessRequest {
  uint64 handle_id = 1;
  bool force = 2;
  bool destroy_group = 3;
}

message AwaitTerminationRequest {
  uint64 handle_id = 1;
}

message AwaitTerminationReply {
  uint32 exit_code = 1;
}

message FileHandle {
  uint64 handle_id = 1;
  uint32 fd = 2;
}

message DataChunk {
  bytes buffer = 1;
}

message ReadStreamRequest {
  FileHandle handle = 1;
}

message WriteStreamRequest {
  oneof FileHandleOrBuffer {
    FileHandle handle = 1;
    DataChunk chunk = 2;
  }
}

message CommandLine {
  repeated string command = 1;
  string working_dir = 2;
  string in_file = 3;
  string out_file = 4;
  string err_file = 5;
  bool redirect_error_stream = 6;
  map<string, string> environ = 7;
}
