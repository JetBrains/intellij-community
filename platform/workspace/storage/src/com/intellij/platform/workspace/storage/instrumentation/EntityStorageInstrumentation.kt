// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.platform.workspace.storage.instrumentation

import com.intellij.platform.workspace.storage.*
import com.intellij.platform.workspace.storage.impl.ConnectionId
import com.intellij.platform.workspace.storage.impl.EntityId

/**
 * Instrumentation level of the storage.
 *
 * This level of function contains the functionality that should be publicly available, but not the part of the common storage API.
 *
 * For example, entity implementations may use some advanced functionality of the storage (e.g. get entities by reference).
 */
@EntityStorageInstrumentationApi
interface EntityStorageInstrumentation : EntityStorage {
  /**
   * Create entity using [newInstance] function.
   * In some implementations of the storage ([EntityStorageSnapshot]), the entity is cached and the new instance is created only once.
   */
  fun <T: WorkspaceEntity> initializeEntity(entityId: EntityId, newInstance: (() -> T)): T
  fun <T : WorkspaceEntity> resolveReference(reference: EntityReference<T>): T?

  fun getOneChild(connectionId: ConnectionId, parent: WorkspaceEntity): WorkspaceEntity?
  fun getManyChildren(connectionId: ConnectionId, parent: WorkspaceEntity): Sequence<WorkspaceEntity>

  fun getParent(connectionId: ConnectionId, child: WorkspaceEntity): WorkspaceEntity?
}

@EntityStorageInstrumentationApi
interface EntityStorageSnapshotInstrumentation : EntityStorageSnapshot, EntityStorageInstrumentation

@EntityStorageInstrumentationApi
interface MutableEntityStorageInstrumentation : MutableEntityStorage, EntityStorageInstrumentation


/**
 * Annotation mark for internal level of the entity storage API
 *
 * Interfaces or methods that are marked with this annotation are intended to be used only in specific cases.
 * The regular usage of the entity storage should not access this API.
 *
 * Examples of code where the marked classes are used:
 * - Entities implementations use instrumentation API to communicate with the storage.
 * - [EntityReference] resolves the entity using the internal API.
 *
 * The API itself can't be marked as internal as it's used from external code that is generated by entity generator.
 */
@RequiresOptIn("This is an internal entity storage API and it's usage requires an explicit opt-in")
@Retention(AnnotationRetention.BINARY)
@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY)
annotation class EntityStorageInstrumentationApi

@EntityStorageInstrumentationApi
internal val EntityStorage.instrumentation: EntityStorageInstrumentation
  get() = this as EntityStorageInstrumentation
