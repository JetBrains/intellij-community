// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.platform.workspace.storage

import com.intellij.openapi.util.NlsSafe
import com.intellij.platform.workspace.storage.annotations.Abstract

/**
 * A base class for typed hierarchical entity IDs.
 * ID is supposed to be based on names specified by a user in the UI or in configuration files, not on some autogenerated IDs.
 * [SymbolicEntityId] for an entity may include a reference to [SymbolicEntityId] of its parent entity if it's needed to make them unique.
 * For example, [ModuleId][com.intellij.platform.workspace.jps.entities.ModuleId] includes only name of the module, but 
 * [FacetId][com.intellij.platform.workspace.jps.entities.FacetId] includes name of the facet and reference to 
 * [ModuleId][com.intellij.platform.workspace.jps.entities.ModuleId] of the module the facet belongs to.
 * 
 * To specify a [SymbolicEntityId] for an entity, the entity interface must extend [WorkspaceEntityWithSymbolicId] and provide an 
 * implementation of its [symbolicId][WorkspaceEntityWithSymbolicId.symbolicId] property which returns an instance of the corresponding
 * class. 
 * [E] type parameter of the returned instance must be equal to the entity interface.
 * 
 * A specific implementation of [SymbolicEntityId] may be used in properties of [an entity][WorkspaceEntity] to create a symbolic link to 
 * an entity of the corresponding type. 
 * Note that unlike parent-child "hard" links, symbolic links aren't guaranteed to be resolvable.
 * When a linked entity is removed, the entity referring to it doesn't change, and the ID will resolve to `null`.
 * However, if after modification of an entity its [symbolicId][WorkspaceEntityWithSymbolicId.symbolicId] changes, properties of all other 
 * entities which contain a value equal to the previous ID, are automatically replaced with the new ID. 
 * 
 * The storage maintains an index, which can be used to quickly find all entities referring to a given entity via symbolic links, see 
 * [EntityStorage.referrers] function.
 * 
 * An implementation must be a data class which contains read-only properties of the following types:
 * * primitive types,
 * * String,
 * * enum,
 * * another data class with properties of the allowed types;
 * * sealed abstract class where all implementations satisfy these requirements.
 */
interface SymbolicEntityId<out E : WorkspaceEntityWithSymbolicId> {
  /** Text which can be shown in an error message if id cannot be resolved */
  val presentableName: @NlsSafe String

  /**
   * Returns an entity which [symbolicId][WorkspaceEntityWithSymbolicId.symbolicId] property is equal to `this` instance or `null` if there
   * is no such entity.
   */
  fun resolve(storage: EntityStorage): E? = storage.resolve(this)

  /**
   * Returns string representation of ID which may be used for debugging or logging purposes only.
   * Usually, there is no need to override this method explicitly, since the compiler automatically generates its implementation for data 
   * classes.
   */
  override fun toString(): String
}

/**
 * A base interface for entities which have a symbolic ID. 
 * IDs must be unique within the storage, an attempt to add an entity which [symbolicId] is equal to the one of an existing entity will fail
 * with exception.
 */
@Abstract
interface WorkspaceEntityWithSymbolicId : WorkspaceEntity {
  /**
   * Returns an ID for this entity. 
   * This property must be overridden by a specific entity interface and compute the ID based on other properties of the entity in its getter.
   */
  val symbolicId: SymbolicEntityId<WorkspaceEntityWithSymbolicId>
}
