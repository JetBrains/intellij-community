package com.intellij.workspaceModel.codegen.impl.metadata.model

import com.intellij.workspaceModel.codegen.impl.writer.*

/**
 * This file is generated by com.intellij.platform.workspace.storage.metadata.utils.ConstructorsGenerator.kt.
 *
 * It is used during MetadataStorageImpl generation to initialize metadata of all types in the current package.
 * To do it, metadata classes constructors are inserted as a string in generated file.
 */

internal fun getCollectionConstructor(any: Any?): String {
  if (any is Map.Entry<*, *>) {
    return "${getCollectionConstructor(any.key)} to ${getCollectionConstructor(any.value)}"
  }
  if (any is Iterable<*>) {
    val constructor = when (any) {
      is List<*> -> "listOf"
      is Set<*> -> "setOf"
      else -> "mapOf"
    }
    return "$constructor(${any.joinToString(",\n") { getCollectionConstructor(it) }})"
  }
  return any.toString()
}

internal fun getEntityMetadataConstructor(fqName: String, entityDataFqName: String, supertypes: List<String>, properties: List<String>, extProperties: List<String>, isAbstract: Boolean): String {
  return "$EntityMetadata(fqName = $fqName, entityDataFqName = $entityDataFqName, supertypes = ${getCollectionConstructor(supertypes)}, properties = ${getCollectionConstructor(properties)}, extProperties = ${getCollectionConstructor(extProperties)}, isAbstract = $isAbstract)"
}

internal fun getClassMetadataConstructor(fqName: String, properties: List<String>, supertypes: List<String>): String {
  return "$ClassMetadata(fqName = $fqName, properties = ${getCollectionConstructor(properties)}, supertypes = ${getCollectionConstructor(supertypes)})"
}

internal fun getObjectMetadataConstructor(fqName: String, properties: List<String>, supertypes: List<String>): String {
  return "$ObjectMetadata(fqName = $fqName, properties = ${getCollectionConstructor(properties)}, supertypes = ${getCollectionConstructor(supertypes)})"
}

internal fun getEnumClassMetadataConstructor(fqName: String, properties: List<String>, supertypes: List<String>, values: List<String>): String {
  return "$EnumClassMetadata(fqName = $fqName, properties = ${getCollectionConstructor(properties)}, supertypes = ${getCollectionConstructor(supertypes)}, values = ${getCollectionConstructor(values)})"
}

internal fun getKnownClassConstructor(fqName: String): String {
  return "$KnownClass(fqName = $fqName)"
}

internal fun getAbstractClassMetadataConstructor(fqName: String, subclasses: List<String>, supertypes: List<String>): String {
  return "$AbstractClassMetadata(fqName = $fqName, subclasses = ${getCollectionConstructor(subclasses)}, supertypes = ${getCollectionConstructor(supertypes)})"
}

internal fun getOwnPropertyMetadataConstructor(isComputable: Boolean, isKey: Boolean, isOpen: Boolean, name: String, valueType: String, withDefault: Boolean): String {
  return "$OwnPropertyMetadata(isComputable = $isComputable, isKey = $isKey, isOpen = $isOpen, name = $name, valueType = $valueType, withDefault = $withDefault)"
}

internal fun getExtPropertyMetadataConstructor(isComputable: Boolean, isOpen: Boolean, name: String, receiverFqn: String, valueType: String, withDefault: Boolean): String {
  return "$ExtPropertyMetadata(isComputable = $isComputable, isOpen = $isOpen, name = $name, receiverFqn = $receiverFqn, valueType = $valueType, withDefault = $withDefault)"
}

internal fun getParameterizedTypeConstructor(generics: List<String>, primitive: String): String {
  return "$ParameterizedType(generics = ${getCollectionConstructor(generics)}, primitive = $primitive)"
}

internal fun getPrimitiveTypeConstructor(isNullable: Boolean, type: String): String {
  return "$PrimitiveType(isNullable = $isNullable, type = $type)"
}

internal fun getCustomTypeConstructor(isNullable: Boolean, typeMetadata: String): String {
  return "$CustomType(isNullable = $isNullable, typeMetadata = $typeMetadata)"
}

internal fun getEntityReferenceConstructor(connectionType: String, entityFqName: String, isChild: Boolean, isNullable: Boolean): String {
  return "$EntityReference(connectionType = $connectionType, entityFqName = $entityFqName, isChild = $isChild, isNullable = $isNullable)"
}

