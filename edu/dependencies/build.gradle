/*
 * Copyright 2000-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
}


apply plugin: 'idea'
apply plugin: 'base'
idea {
  module {
    inheritOutputDirs true
  }
}


group 'com.jetbrains.edu.dependencies'
version '1.0'

repositories {
  maven { url 'http://plugins.jetbrains.com/maven/' }
}

configurations {
  eduPlugin
  scalaPlugin
}

def EduToolsPluginId = "com.jetbrains.edu"
def EduToolsPluginName = "EduTools"

def ScalaPluginId = "org.intellij.scala"
def ScalaPluginName = "Scala"

dependencies {
  eduPlugin "com.jetbrains.plugins:$EduToolsPluginId:$EduToolsPluginVersion@zip"
  scalaPlugin "com.jetbrains.plugins:$ScalaPluginId:$ScalaPluginVersion@zip"
}

task setupEduToolsPlugin(dependsOn: configurations.eduPlugin, type: Sync) {
  from fileTree(configurations.eduPlugin.singleFile)
  into "${project.buildDir}/$EduToolsPluginName/"
  rename { String fileName ->
    fileName.replace(EduToolsPluginId, EduToolsPluginName) }
}

task deployEduToolsPlugin(dependsOn: setupEduToolsPlugin, type: Sync) {
  from zipTree("${project.buildDir}/$EduToolsPluginName/$EduToolsPluginName-${EduToolsPluginVersion}.zip")
  into "${System.getProperty("idea.config.path")}/plugins/"
  preserve {
    exclude "$EduToolsPluginName/**"
  }
}

task setupScalaPlugin(dependsOn: configurations.scalaPlugin, type: Sync) {
  from fileTree(configurations.scalaPlugin.singleFile)
  into "${project.buildDir}/$ScalaPluginName/"
  rename { String fileName ->
    fileName.replace(ScalaPluginId, ScalaPluginName) }
}

task deployScalaPlugin(dependsOn: setupScalaPlugin, type: Sync) {
  from zipTree("${project.buildDir}/$ScalaPluginName/$ScalaPluginName-${ScalaPluginVersion}.zip")
  into "${System.getProperty("idea.config.path")}/plugins/"
  preserve {
    exclude "$ScalaPluginName/**"
  }
}