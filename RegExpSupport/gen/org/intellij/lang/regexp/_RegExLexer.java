/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.regexp;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.StringEscapesTokenTypes;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayList;
import java.util.EnumSet;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>regexp-lexer.flex</tt>
 */
class _RegExLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED = 2;
  public static final int EMBRACED = 4;
  public static final int CLASS1 = 6;
  public static final int NEGATE_CLASS1 = 8;
  public static final int CLASS2 = 10;
  public static final int PROP = 12;
  public static final int OPTIONS = 14;
  public static final int COMMENT = 16;
  public static final int NAMED_GROUP = 18;
  public static final int QUOTED_NAMED_GROUP = 20;
  public static final int PY_NAMED_GROUP_REF = 22;
  public static final int PY_COND_REF = 24;
  public static final int BRACKET_EXPRESSION = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\25\1\30\4\13\1\30\1\142\1\143\1\16\1\13\1\16\1\13"+
    "\1\16\1\143\1\71\3\13\1\144\1\1\1\145\1\114\2\1\1\114\5\13\1\27\2\13\1\146"+
    "\4\13\1\40\1\13\1\147\2\1\1\65\1\13\1\150\1\47\2\13\1\151\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\152\5\1\1\107\2\13\1\144\1\153\1\114"+
    "\2\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\144\1\1\1\156\1\42\1\13\1"+
    "\150\6\1\1\157\1\160\14\13\4\1\21\13\1\140\2\13\1\140\1\161\1\13\1\150\3\13"+
    "\1\162\1\163\1\164\1\124\1\163\2\1\1\165\4\1\1\166\1\1\1\124\6\1\1\167\1\170"+
    "\1\171\1\172\1\173\3\1\1\174\147\1\2\13\1\147\2\13\1\147\10\13\1\175\1\176"+
    "\2\13\1\132\3\13\1\177\1\1\1\13\1\112\4\200\4\1\1\105\35\1\1\201\2\1\1\202"+
    "\1\25\4\13\1\203\1\25\4\13\1\133\1\107\1\13\1\150\1\25\4\13\1\147\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\150\20\13\1\124\1\13\1\204\1\1\2\13\1\147\1\105\1\13\1\150\4\13\1\40\2\1"+
    "\1\205\1\206\5\13\1\207\1\13\1\150\1\27\3\1\1\205\1\210\1\13\1\31\1\1\3\13"+
    "\1\144\1\206\2\13\1\144\1\1\1\114\1\1\1\211\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\212\1\213\2\13\1\46\1\1\1\214\1\114"+
    "\1\13\1\215\3\13\1\216\1\217\1\220\1\30\1\66\1\221\1\222\1\200\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\144\1\13\1\223\2\13\1\151\20\1\26\13\1\150\6"+
    "\13\1\77\2\1\1\112\1\224\1\56\1\225\1\226\6\13\1\16\1\1\1\154\25\13\1\150"+
    "\1\1\4\13\1\206\2\13\1\27\2\1\1\151\7\1\1\212\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\227\4\13\1\147\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\234\2\13\1\40"+
    "\1\13\1\150\2\13\1\235\3\1\11\13\1\150\1\114\5\1\2\13\1\27\3\13\1\144\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\236\2\13\1\237\1\13\1\40\1\13\1\112\1\13"+
    "\1\147\4\1\1\13\1\240\1\13\1\40\1\13\1\77\4\1\3\13\1\241\4\1\1\71\1\242\1"+
    "\13\1\144\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\154"+
    "\2\13\1\27\2\1\1\65\1\1\1\154\2\13\2\1\1\13\1\46\1\114\1\154\1\13\1\112\1"+
    "\65\1\1\2\13\1\243\1\154\2\13\1\31\1\244\1\245\2\1\1\13\1\22\1\151\5\1\1\246"+
    "\1\247\1\46\2\13\1\147\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\250\1\16\21\1\3"+
    "\13\1\1\1\251\1\114\12\1\2\13\1\147\2\1\1\252\2\1\3\13\1\1\1\253\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\144\53\1\2\13\1\147\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\147\1\114\6\1\1\13\1\150\1\1\3\13\1\1\1\144\1\114"+
    "\1\154\1\254\1\13\67\1\4\13\1\47\1\71\3\1\1\154\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\212\3\13\1\143\1\255\1\256\1\257\3\13\1\260\1\261"+
    "\1\13\1\262\1\263\1\36\24\13\1\264\1\13\1\36\1\133\1\13\1\133\1\13\1\212\1"+
    "\13\1\212\1\147\1\13\1\147\1\13\1\56\1\13\1\56\1\13\1\265\3\266\14\13\1\47"+
    "\123\1\1\257\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276\1"+
    "\151\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\150\150\13\1\16\25\1\41\13\1"+
    "\150\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\10\0\2\66\1\61\1\62\1\63\1\61\22\0\1\56\1\71\1\0\1\72\1\17\1\0\1\65\1\55"+
    "\1\4\1\5\1\21\1\22\1\60\1\51\1\3\1\0\1\2\7\50\2\1\1\64\1\0\1\54\1\70\1\67"+
    "\1\20\1\0\2\30\1\37\1\35\1\45\1\43\1\31\1\52\1\40\2\13\3\57\1\13\1\42\1\44"+
    "\1\33\1\34\2\13\3\33\1\13\1\32\1\10\1\12\1\11\1\16\1\14\1\0\1\25\1\26\1\36"+
    "\1\35\2\25\1\27\1\52\1\40\1\13\1\53\2\13\1\24\1\13\1\41\1\13\1\24\1\33\1\24"+
    "\1\47\2\33\1\46\1\13\1\31\1\6\1\23\1\7\7\0\1\62\24\0\1\13\12\0\1\13\4\0\1"+
    "\13\5\0\27\13\1\0\12\13\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13\1\0\5\13\1\0"+
    "\2\13\2\0\4\13\1\0\1\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0\4\13\1\0\23\13\1\0"+
    "\13\13\10\0\6\13\1\0\26\13\2\0\1\13\6\0\10\13\10\0\13\13\5\0\3\13\15\0\12"+
    "\15\4\0\6\13\1\0\1\13\17\0\2\13\7\0\2\13\12\15\3\13\2\0\2\13\1\0\16\13\15"+
    "\0\11\13\13\0\1\13\16\0\12\15\6\13\4\0\2\13\4\0\1\13\5\0\6\13\4\0\1\13\11"+
    "\0\1\13\3\0\1\13\7\0\11\13\7\0\5\13\17\0\26\13\3\0\1\13\2\0\1\13\7\0\12\13"+
    "\4\0\12\15\1\13\4\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3"+
    "\0\1\13\20\0\1\13\15\0\2\13\1\0\1\13\5\0\6\13\4\0\2\13\1\0\2\13\1\0\2\13\1"+
    "\0\2\13\17\0\4\13\1\0\1\13\7\0\12\15\2\0\3\13\20\0\11\13\1\0\2\13\1\0\2\13"+
    "\1\0\5\13\3\0\1\13\2\0\1\13\30\0\1\13\13\0\10\13\2\0\1\13\3\0\1\13\1\0\6\13"+
    "\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13"+
    "\13\0\10\13\1\0\2\13\10\0\3\13\5\0\4\13\1\0\5\13\3\0\1\13\3\0\2\13\15\0\13"+
    "\13\2\0\1\13\21\0\1\13\12\0\6\13\5\0\22\13\3\0\10\13\1\0\11\13\1\0\1\13\2"+
    "\0\7\13\11\0\1\13\1\0\2\13\14\0\12\15\7\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13"+
    "\2\0\1\13\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\4\13\1"+
    "\0\2\13\11\0\1\13\2\0\5\13\1\0\1\13\11\0\12\15\2\0\14\13\1\0\24\13\13\0\5"+
    "\13\3\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0\3\13\4\0\15\13\14\0\1\13\1\0\6"+
    "\13\1\0\1\13\5\0\1\13\2\0\13\13\1\0\15\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4"+
    "\13\2\0\1\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\16\13\2\0\6\13\2\0\15"+
    "\13\2\0\1\13\1\0\10\13\7\0\15\13\1\0\6\13\23\0\1\13\4\0\1\13\3\0\11\13\1\0"+
    "\1\13\5\0\17\13\1\0\16\13\2\0\14\13\13\0\1\13\15\0\7\13\7\0\16\13\15\0\2\13"+
    "\12\15\3\0\3\13\11\0\4\13\1\0\4\13\3\0\2\13\11\0\10\13\1\0\1\13\1\0\1\13\1"+
    "\0\1\13\1\0\6\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13\14"+
    "\0\2\62\7\0\1\13\15\0\1\13\2\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6"+
    "\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\4"+
    "\0\2\13\13\0\5\13\6\0\4\13\3\0\2\13\14\0\10\13\7\0\10\13\1\0\7\13\6\0\2\13"+
    "\12\0\5\13\5\0\2\13\3\0\7\13\6\0\3\13\12\15\2\13\13\0\11\13\2\0\27\13\2\0"+
    "\7\13\1\0\3\13\1\0\4\13\1\0\4\13\2\0\6\13\3\0\1\13\1\0\1\13\2\0\5\13\1\0\12"+
    "\13\12\15\5\13\1\0\3\13\1\0\10\13\4\0\7\13\3\0\1\13\3\0\2\13\1\0\1\13\3\0"+
    "\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13\3\0\6\13\2\0\6\13\2\0\6\13\11\0"+
    "\7\13\4\0\5\13\3\0\5\13\5\0\1\13\1\0\10\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0"+
    "\2\13\1\0\12\13\6\0\12\13\2\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13\3\0\14\13\1"+
    "\0\16\13\1\0\2\13\1\0\2\13\1\0\10\13\6\0\4\13\4\0\16\13\2\0\1\13\1\0\14\13"+
    "\1\0\2\13\3\0\1\13\2\0\4\13\1\0\2\13\12\0\10\13\6\0\6\13\1\0\3\13\1\0\12\13"+
    "\3\0\1\13\12\0\4\13\13\0\12\15\1\13\1\0\1\13\3\0\7\13\1\0\1\13\1\0\4\13\1"+
    "\0\17\13\1\0\2\13\14\0\3\13\4\0\2\13\1\0\1\13\20\0\4\13\10\0\1\13\13\0\10"+
    "\13\5\0\3\13\2\0\1\13\2\0\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0\21"+
    "\13\1\0\4\13\2\0\10\13\1\0\7\13\1\0\14\13\1\0\4\13\1\0\5\13\1\0\1\13\3\0\14"+
    "\13\2\0\13\13\1\0\10\13\2\0\22\15\1\0\2\13\1\0\1\13\2\0\1\13\1\0\12\13\1\0"+
    "\4\13\1\0\1\13\1\0\1\13\6\0\1\13\4\0\1\13\1\0\1\13\1\0\1\13\1\0\3\13\1\0\2"+
    "\13\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\2\0\4\13\1\0\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0\12\13\1\0\5\13\1\0\3\13"+
    "\1\0\5\13\1\0\5\13");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\5\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\31\1\33\1\34"+
    "\1\35\1\10\1\36\1\2\1\37\1\40\1\37\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\1\1\47\1\50"+
    "\2\51\1\52\1\53\2\0\1\54\1\55\1\56\1\57"+
    "\1\60\1\10\1\61\1\62\1\10\1\62\1\63\2\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\10\1\73"+
    "\1\74\1\75\1\76\1\0\1\77\1\100\1\101\1\102"+
    "\1\0\1\103\1\104\1\105\1\106\1\107\1\0\1\110"+
    "\1\0\1\111\1\0\1\112\1\113\1\114\2\67\1\70"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\0"+
    "\1\111\1\0\1\124\2\67\1\70\1\125\1\111\1\67"+
    "\1\70\1\67\1\126\4\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u033a"+
    "\0\u0375\0\u033a\0\u033a\0\u03b0\0\u03eb\0\u033a\0\u033a\0\u033a"+
    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u0426"+
    "\0\u033a\0\u0461\0\u033a\0\u049c\0\u033a\0\u033a\0\u033a\0\u033a"+
    "\0\u04d7\0\u033a\0\u0512\0\u033a\0\u054d\0\u033a\0\u0588\0\u033a"+
    "\0\u033a\0\u03b0\0\u033a\0\u033a\0\u033a\0\u05c3\0\u05fe\0\u033a"+
    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u0639\0\u0674\0\u033a\0\u06af"+
    "\0\u06ea\0\u033a\0\u0725\0\u0760\0\u033a\0\u033a\0\u033a\0\u033a"+
    "\0\u079b\0\u07d6\0\u033a\0\u033a\0\u0811\0\u033a\0\u033a\0\u033a"+
    "\0\u084c\0\u0887\0\u033a\0\u033a\0\u08c2\0\u033a\0\u033a\0\u033a"+
    "\0\u033a\0\u08fd\0\u033a\0\u033a\0\u033a\0\u033a\0\u0938\0\u0973"+
    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u09ae\0\u033a\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u033a\0\u033a\0\u033a\0\u0a9a\0\u0ad5\0\u0b10\0\u033a"+
    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u033a\0\u0bfc\0\u033a\0\u0c37\0\u033a\0\u033a\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u033a\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\17\1\20\1\21\1\22\1\23\1\17\1\24\1\17"+
    "\1\25\3\17\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\25\17\1\34\4\17\1\35\2\17\1\36\1\17\1\36"+
    "\2\17\1\36\3\17\1\37\12\17\1\40\60\17\1\41"+
    "\2\42\4\41\1\43\3\41\1\44\1\41\1\42\1\45"+
    "\5\41\24\44\1\42\1\41\2\44\3\41\1\44\1\46"+
    "\12\41\11\47\1\50\1\51\46\47\3\0\25\47\1\52"+
    "\42\47\3\0\7\47\6\17\1\23\1\17\1\53\1\54"+
    "\1\55\3\17\1\26\32\17\1\34\7\17\1\56\1\17"+
    "\1\56\1\17\1\57\1\56\4\17\6\60\1\61\1\60"+
    "\1\62\1\60\1\25\17\60\1\63\1\60\1\63\2\60"+
    "\1\63\2\60\1\63\14\60\1\63\13\60\5\64\1\65"+
    "\5\64\1\66\10\64\24\66\1\64\1\67\2\66\3\64"+
    "\1\66\4\64\1\70\6\64\61\11\1\71\11\11\13\64"+
    "\1\44\10\64\24\44\2\64\2\44\3\64\1\44\7\64"+
    "\1\72\16\64\1\44\10\64\24\44\2\64\2\44\1\64"+
    "\1\73\1\64\1\44\20\64\1\65\5\64\1\44\10\64"+
    "\24\44\2\64\2\44\3\64\1\44\14\64\2\42\2\64"+
    "\1\65\5\64\1\44\1\64\1\42\6\64\24\44\1\42"+
    "\1\64\2\44\3\64\1\44\13\64\13\74\1\44\2\74"+
    "\1\26\5\74\24\44\2\74\2\44\3\74\1\44\4\74"+
    "\1\75\6\74\113\0\1\76\63\0\1\77\1\100\3\0"+
    "\1\101\54\0\1\102\1\103\1\104\4\105\1\102\1\106"+
    "\1\102\1\106\1\107\2\102\1\106\5\105\2\110\1\111"+
    "\1\112\3\113\3\114\1\115\2\116\2\117\1\107\1\120"+
    "\1\107\1\121\1\122\1\103\1\123\1\124\1\125\2\102"+
    "\1\126\1\107\1\102\1\126\1\102\1\126\2\102\1\126"+
    "\4\102\45\0\1\127\26\0\2\42\12\0\1\42\32\0"+
    "\1\42\23\0\2\44\10\0\3\44\6\0\25\44\1\0"+
    "\2\44\3\0\1\44\24\0\1\130\72\0\1\131\1\132"+
    "\3\0\1\101\45\0\1\133\6\0\1\102\1\103\1\104"+
    "\4\105\1\102\3\106\1\107\2\102\1\106\5\105\2\110"+
    "\1\111\1\112\3\113\3\114\1\115\2\116\2\117\1\107"+
    "\1\120\1\107\1\121\1\122\1\103\1\123\1\124\1\125"+
    "\2\102\1\126\1\107\1\102\1\126\1\102\1\126\2\102"+
    "\1\126\4\102\65\0\1\134\20\0\1\66\10\0\24\66"+
    "\2\0\2\66\3\0\1\66\26\0\1\67\10\0\24\67"+
    "\2\0\2\67\3\0\1\67\24\0\1\135\65\0\1\136"+
    "\35\0\1\137\11\0\1\140\1\141\6\0\1\142\2\0"+
    "\1\142\1\143\1\144\1\145\11\0\1\77\72\0\1\146"+
    "\1\147\61\0\2\103\45\0\1\103\24\0\1\150\45\0"+
    "\1\150\30\0\1\151\140\0\1\152\1\153\15\0\73\154"+
    "\1\0\2\155\3\0\1\156\16\0\2\155\1\0\1\155"+
    "\4\0\3\155\3\0\1\155\1\0\1\155\2\0\1\155"+
    "\23\0\2\157\22\0\2\157\1\0\1\157\4\0\3\157"+
    "\3\0\1\157\1\0\1\157\2\0\1\157\76\0\1\160"+
    "\1\161\26\0\1\162\135\0\1\163\13\0\1\164\72\0"+
    "\1\165\1\166\1\0\5\167\1\0\65\167\11\0\1\146"+
    "\63\0\1\170\45\0\1\170\51\0\1\171\44\0\2\172"+
    "\22\0\2\172\1\0\1\172\4\0\3\172\3\0\1\172"+
    "\1\0\1\172\2\0\1\172\23\0\2\173\4\0\1\174"+
    "\15\0\2\173\1\0\1\173\4\0\3\173\3\0\1\173"+
    "\1\0\1\173\2\0\1\173\23\0\2\175\22\0\2\175"+
    "\1\0\1\175\4\0\3\175\3\0\1\175\1\0\1\175"+
    "\2\0\1\175\22\0\5\167\1\176\65\167\2\0\1\177"+
    "\45\0\1\177\31\0\1\113\64\0\2\200\4\0\1\172"+
    "\15\0\2\200\1\0\1\200\4\0\3\200\3\0\1\200"+
    "\1\0\1\200\2\0\1\200\23\0\2\201\22\0\2\201"+
    "\1\0\1\201\4\0\3\201\3\0\1\201\1\0\1\201"+
    "\2\0\1\201\23\0\2\202\4\0\1\172\15\0\2\202"+
    "\1\0\1\202\4\0\3\202\3\0\1\202\1\0\1\202"+
    "\2\0\1\202\23\0\2\203\22\0\2\203\1\0\1\203"+
    "\4\0\3\203\3\0\1\203\1\0\1\203\2\0\1\203"+
    "\23\0\2\204\4\0\1\172\15\0\2\204\1\0\1\204"+
    "\4\0\3\204\3\0\1\204\1\0\1\204\2\0\1\204"+
    "\23\0\2\205\4\0\1\172\15\0\2\205\1\0\1\205"+
    "\4\0\3\205\3\0\1\205\1\0\1\205\2\0\1\205"+
    "\23\0\2\206\4\0\1\172\15\0\2\206\1\0\1\206"+
    "\4\0\3\206\3\0\1\206\1\0\1\206\2\0\1\206"+
    "\23\0\2\207\4\0\1\172\15\0\2\207\1\0\1\207"+
    "\4\0\3\207\3\0\1\207\1\0\1\207\2\0\1\207"+
    "\23\0\2\207\4\0\1\174\15\0\2\207\1\0\1\207"+
    "\4\0\3\207\3\0\1\207\1\0\1\207\2\0\1\207"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3599];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\5\0\2\11\1\1\2\11\2\1\12\11"+
    "\1\1\1\11\1\1\1\11\1\1\4\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\3\11"+
    "\2\1\5\11\2\1\1\11\2\0\1\11\2\1\4\11"+
    "\2\1\2\11\1\1\3\11\2\1\2\11\1\1\4\11"+
    "\1\0\4\11\1\0\1\1\4\11\1\0\1\11\1\0"+
    "\1\1\1\0\3\11\3\1\7\11\1\0\1\1\1\0"+
    "\1\11\1\1\1\11\1\1\2\11\3\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    final ArrayList<Integer> states = new ArrayList<>();

    // This was an idea to use the regex implementation for XML schema regexes (which use a slightly different syntax)
    // as well, but is currently unfinished as it requires to tweak more places than just the lexer.
    private boolean xmlSchemaMode;

    int capturingGroupCount = 0;

    private boolean allowDanglingMetacharacters;
    private boolean allowNestedCharacterClasses;
    private boolean allowOctalNoLeadingZero;
    private boolean allowHexDigitClass;
    private boolean allowEmptyCharacterClass;
    private boolean allowHorizontalWhitespaceClass;
    private boolean allowCategoryShorthand;
    private boolean allowPosixBracketExpressions;
    private boolean allowCaretNegatedProperties;

    _RegExLexer(EnumSet<RegExpCapability> capabilities) {
      this((java.io.Reader)null);
      this.xmlSchemaMode = capabilities.contains(RegExpCapability.XML_SCHEMA_MODE);
      this.allowDanglingMetacharacters = capabilities.contains(RegExpCapability.DANGLING_METACHARACTERS);
      this.allowNestedCharacterClasses = capabilities.contains(RegExpCapability.NESTED_CHARACTER_CLASSES);
      this.allowOctalNoLeadingZero = capabilities.contains(RegExpCapability.OCTAL_NO_LEADING_ZERO);
      this.commentMode = capabilities.contains(RegExpCapability.COMMENT_MODE);
      this.allowHexDigitClass = capabilities.contains(RegExpCapability.ALLOW_HEX_DIGIT_CLASS);
      this.allowHorizontalWhitespaceClass = capabilities.contains(RegExpCapability.ALLOW_HORIZONTAL_WHITESPACE_CLASS);
      this.allowEmptyCharacterClass = capabilities.contains(RegExpCapability.ALLOW_EMPTY_CHARACTER_CLASS);
      this.allowCategoryShorthand = capabilities.contains(RegExpCapability.UNICODE_CATEGORY_SHORTHAND);
      this.allowPosixBracketExpressions = capabilities.contains(RegExpCapability.POSIX_BRACKET_EXPRESSIONS);
      this.allowCaretNegatedProperties = capabilities.contains(RegExpCapability.CARET_NEGATED_PROPERTIES);
    }

    private void yypushstate(int state) {
        states.add(yystate());
        yybegin(state);
    }

    private void yypopstate() {
        final int state = states.remove(states.size() - 1);
        yybegin(state);
    }

    private void handleOptions() {
      final String o = yytext().toString();
      if (o.contains("x")) {
        commentMode = !o.startsWith("-");
      }
    }

    // tracks whether the lexer is in comment mode, i.e. whether whitespace is not significant and whether to ignore
    // text after '#' till EOL
    boolean commentMode = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RegExLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypopstate(); return RegExpTT.COMMENT;
            }
          case 87: break;
          case 2: 
            { return RegExpTT.CHARACTER;
            }
          case 88: break;
          case 3: 
            { return RegExpTT.DOT;
            }
          case 89: break;
          case 4: 
            { capturingGroupCount++; return RegExpTT.GROUP_BEGIN;
            }
          case 90: break;
          case 5: 
            { return RegExpTT.GROUP_END;
            }
          case 91: break;
          case 6: 
            { if (yystate() != CLASS2) yypushstate(EMBRACED); return RegExpTT.LBRACE;
            }
          case 92: break;
          case 7: 
            { yypushstate(CLASS2); return RegExpTT.CLASS_BEGIN;
            }
          case 93: break;
          case 8: 
            { return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            }
          case 94: break;
          case 9: 
            { return RegExpTT.CARET;
            }
          case 95: break;
          case 10: 
            { return RegExpTT.DOLLAR;
            }
          case 96: break;
          case 11: 
            { return RegExpTT.QUEST;
            }
          case 97: break;
          case 12: 
            { return RegExpTT.STAR;
            }
          case 98: break;
          case 13: 
            { return RegExpTT.PLUS;
            }
          case 99: break;
          case 14: 
            { return RegExpTT.UNION;
            }
          case 100: break;
          case 15: 
            { return RegExpTT.MINUS;
            }
          case 101: break;
          case 16: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CHARACTER;
            }
          case 102: break;
          case 17: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CTRL_CHARACTER;
            }
          case 103: break;
          case 18: 
            { if (commentMode) { yypushstate(COMMENT); return RegExpTT.COMMENT; } else return RegExpTT.CHARACTER;
            }
          case 104: break;
          case 19: 
            { if (allowDanglingMetacharacters) {
                          yypopstate(); yypushback(1);
                        } else {
                          return RegExpTT.BAD_CHARACTER;
                        }
            }
          case 105: break;
          case 20: 
            { return RegExpTT.NUMBER;
            }
          case 106: break;
          case 21: 
            { yypopstate(); return RegExpTT.RBRACE;
            }
          case 107: break;
          case 22: 
            { return RegExpTT.NAME;
            }
          case 108: break;
          case 23: 
            { if (allowCaretNegatedProperties) {
                          return RegExpTT.CARET;
                        } else if (allowDanglingMetacharacters) {
                          yypopstate();
                          yypushback(1);
                        } else {
                          return RegExpTT.BAD_CHARACTER;
                        }
            }
          case 109: break;
          case 24: 
            { return RegExpTT.COMMA;
            }
          case 110: break;
          case 25: 
            { assert false : yytext();
            }
          case 111: break;
          case 26: 
            { yybegin(CLASS2); return RegExpTT.CHARACTER;
            }
          case 112: break;
          case 27: 
            { yybegin(CLASS1); return RegExpTT.CARET;
            }
          case 113: break;
          case 28: 
            { if (allowNestedCharacterClasses) {
                           yypushstate(CLASS2);
                           return RegExpTT.CLASS_BEGIN;
                        }
                        return RegExpTT.CHARACTER;
            }
          case 114: break;
          case 29: 
            { yypopstate(); return RegExpTT.CLASS_END;
            }
          case 115: break;
          case 30: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.ESC_CHARACTER;
            }
          case 116: break;
          case 31: 
            { yypopstate(); yypushback(1);
            }
          case 117: break;
          case 32: 
            { yypopstate(); yypushstate(EMBRACED); return RegExpTT.LBRACE;
            }
          case 118: break;
          case 33: 
            { yypopstate(); if (allowCategoryShorthand) return RegExpTT.CATEGORY_SHORT_HAND; else yypushback(1);
            }
          case 119: break;
          case 34: 
            { yybegin(YYINITIAL); return RegExpTT.BAD_CHARACTER;
            }
          case 120: break;
          case 35: 
            { yybegin(YYINITIAL); return RegExpTT.GROUP_END;
            }
          case 121: break;
          case 36: 
            { handleOptions(); return RegExpTT.OPTIONS_ON;
            }
          case 122: break;
          case 37: 
            { handleOptions(); return RegExpTT.OPTIONS_OFF;
            }
          case 123: break;
          case 38: 
            { yybegin(YYINITIAL); return RegExpTT.COLON;
            }
          case 124: break;
          case 39: 
            { yybegin(YYINITIAL); return RegExpTT.GT;
            }
          case 125: break;
          case 40: 
            { yybegin(YYINITIAL); return RegExpTT.QUOTE;
            }
          case 126: break;
          case 41: 
            { return RegExpTT.BAD_CHARACTER;
            }
          case 127: break;
          case 42: 
            { yybegin(OPTIONS); return RegExpTT.SET_OPTIONS;
            }
          case 128: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(CLASS1); return RegExpTT.CLASS_BEGIN;
            }
          case 129: break;
          case 44: 
            { return RegExpTT.REDUNDANT_ESCAPE;
            }
          case 130: break;
          case 45: 
            { if (allowOctalNoLeadingZero) {
                                  CharSequence s = yytext();
                                  int i = 1;
                                  for (; i < s.length(); i++) {
                                    if (s.charAt(i) > '7') break;
                                  }
                                  if (i > 1) {
                                    yypushback(yylength() - i);
                                    return RegExpTT.OCT_CHAR;
                                  }
                                }
                                if (yystate() == CLASS2) {
                                  yypushback(yylength() - 2);
                                  return RegExpTT.REDUNDANT_ESCAPE;
                                }
                                while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {
                                  yypushback(1);
                                }
                                return RegExpTT.BACKREF;
            }
          case 131: break;
          case 46: 
            { return (allowOctalNoLeadingZero ? RegExpTT.OCT_CHAR : RegExpTT.BAD_OCT_VALUE);
            }
          case 132: break;
          case 47: 
            { return (yystate() == CLASS2) ? RegExpTT.REDUNDANT_ESCAPE : RegExpTT.ESC_CHARACTER;
            }
          case 133: break;
          case 48: 
            { return RegExpTT.ESC_CHARACTER;
            }
          case 134: break;
          case 49: 
            { return RegExpTT.ESC_CTRL_CHARACTER;
            }
          case 135: break;
          case 50: 
            { return yystate() != CLASS2 ? RegExpTT.BOUNDARY : RegExpTT.ESC_CHARACTER;
            }
          case 136: break;
          case 51: 
            { return RegExpTT.CHAR_CLASS;
            }
          case 137: break;
          case 52: 
            { if (xmlSchemaMode) return RegExpTT.CHAR_CLASS; else return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            }
          case 138: break;
          case 53: 
            { yypushstate(PROP); return RegExpTT.PROPERTY;
            }
          case 139: break;
          case 54: 
            { yypushstate(QUOTED); return RegExpTT.QUOTE_BEGIN;
            }
          case 140: break;
          case 55: 
            { return RegExpTT.BAD_HEX_VALUE;
            }
          case 141: break;
          case 56: 
            { return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
            }
          case 142: break;
          case 57: 
            { return (yystate() == CLASS2) ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            }
          case 143: break;
          case 58: 
            { return (allowHexDigitClass || allowHorizontalWhitespaceClass ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN);
            }
          case 144: break;
          case 59: 
            { return commentMode ? RegExpTT.CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            }
          case 145: break;
          case 60: 
            { yypopstate(); return RegExpTT.QUOTE_END;
            }
          case 146: break;
          case 61: 
            { yybegin(CLASS2); return RegExpTT.REDUNDANT_ESCAPE;
            }
          case 147: break;
          case 62: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowNestedCharacterClasses) {
                              yypushstate(CLASS1);
                              return RegExpTT.CLASS_BEGIN;
                            }
                            return RegExpTT.CHARACTER;
            }
          case 148: break;
          case 63: 
            { if (allowPosixBracketExpressions) {
                            yybegin(BRACKET_EXPRESSION);
                            return RegExpTT.BRACKET_EXPRESSION_BEGIN;
                          } else {
                            yypushback(1);
                            return RegExpTT.CHARACTER;
                          }
            }
          case 149: break;
          case 64: 
            { if (allowNestedCharacterClasses) return RegExpTT.ANDAND; else yypushback(1); return RegExpTT.CHARACTER;
            }
          case 150: break;
          case 65: 
            { yybegin(CLASS2); return RegExpTT.BRACKET_EXPRESSION_END;
            }
          case 151: break;
          case 66: 
            { yybegin(PY_COND_REF); return RegExpTT.PYTHON_COND_REF;
            }
          case 152: break;
          case 67: 
            { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_NAMED_GROUP;
            }
          case 153: break;
          case 68: 
            { yybegin(QUOTED_NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_QUOTED_NAMED_GROUP;
            }
          case 154: break;
          case 69: 
            { return RegExpTT.NON_CAPT_GROUP;
            }
          case 155: break;
          case 70: 
            { return RegExpTT.POS_LOOKAHEAD;
            }
          case 156: break;
          case 71: 
            { return RegExpTT.NEG_LOOKAHEAD;
            }
          case 157: break;
          case 72: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(NEGATE_CLASS1); return RegExpTT.CLASS_BEGIN;
            }
          case 158: break;
          case 73: 
            { return RegExpTT.OCT_CHAR;
            }
          case 159: break;
          case 74: 
            { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_CALL;
            }
          case 160: break;
          case 75: 
            { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_CALL;
            }
          case 161: break;
          case 76: 
            { if (xmlSchemaMode) { yypushback(1); return RegExpTT.CHAR_CLASS; } else return RegExpTT.CTRL;
            }
          case 162: break;
          case 77: 
            { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_REF;
            }
          case 163: break;
          case 78: 
            { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_REF;
            }
          case 164: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowNestedCharacterClasses) {
                                       yypushstate(CLASS1);
                                       return RegExpTT.CLASS_BEGIN;
                                     }
                                     return RegExpTT.CHARACTER;
            }
          case 165: break;
          case 80: 
            { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.PYTHON_NAMED_GROUP;
            }
          case 166: break;
          case 81: 
            { yybegin(PY_NAMED_GROUP_REF); return RegExpTT.PYTHON_NAMED_GROUP_REF;
            }
          case 167: break;
          case 82: 
            { return RegExpTT.POS_LOOKBEHIND;
            }
          case 168: break;
          case 83: 
            { return RegExpTT.NEG_LOOKBEHIND;
            }
          case 169: break;
          case 84: 
            { return RegExpTT.HEX_CHAR;
            }
          case 170: break;
          case 85: 
            { return RegExpTT.COMMENT;
            }
          case 171: break;
          case 86: 
            { return RegExpTT.UNICODE_CHAR;
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
