REGEXP_FILE
  RegExpPatternImpl: <.*?(<(error|warning|info)(?: descr="((?:[^"\\]|\\")*)")?(?: type="([0-9A-Z_]+)")?(?: foreground="([0-9xa-f]+)")?(?: background="([0-9xa-f]+)")?(?: effectcolor="([0-9xa-f]+)")?(?: effecttype="([A-Z]+)")?(?: fonttype="([0-9]+)")?(/)?>)(.*)>
    RegExpBranchImpl: <.*?(<(error|warning|info)(?: descr="((?:[^"\\]|\\")*)")?(?: type="([0-9A-Z_]+)")?(?: foreground="([0-9xa-f]+)")?(?: background="([0-9xa-f]+)")?(?: effectcolor="([0-9xa-f]+)")?(?: effecttype="([A-Z]+)")?(?: fonttype="([0-9]+)")?(/)?>)(.*)>
      RegExpClosureImpl: <.*?>
        RegExpSimpleClassImpl: <.>
          PsiElement(DOT)('.')
        RegExpQuantifierImpl: <*?>
          PsiElement(STAR)('*')
          PsiElement(QUEST)('?')
      RegExpGroupImpl: <(<(error|warning|info)(?: descr="((?:[^"\\]|\\")*)")?(?: type="([0-9A-Z_]+)")?(?: foreground="([0-9xa-f]+)")?(?: background="([0-9xa-f]+)")?(?: effectcolor="([0-9xa-f]+)")?(?: effecttype="([A-Z]+)")?(?: fonttype="([0-9]+)")?(/)?>)>
        PsiElement(GROUP_BEGIN)('(')
        RegExpPatternImpl: <<(error|warning|info)(?: descr="((?:[^"\\]|\\")*)")?(?: type="([0-9A-Z_]+)")?(?: foreground="([0-9xa-f]+)")?(?: background="([0-9xa-f]+)")?(?: effectcolor="([0-9xa-f]+)")?(?: effecttype="([A-Z]+)")?(?: fonttype="([0-9]+)")?(/)?>>
          RegExpBranchImpl: <<(error|warning|info)(?: descr="((?:[^"\\]|\\")*)")?(?: type="([0-9A-Z_]+)")?(?: foreground="([0-9xa-f]+)")?(?: background="([0-9xa-f]+)")?(?: effectcolor="([0-9xa-f]+)")?(?: effecttype="([A-Z]+)")?(?: fonttype="([0-9]+)")?(/)?>>
            RegExpCharImpl: <<>
              PsiElement(CHARACTER)('<')
            RegExpGroupImpl: <(error|warning|info)>
              PsiElement(GROUP_BEGIN)('(')
              RegExpPatternImpl: <error|warning|info>
                RegExpBranchImpl: <error>
                  RegExpCharImpl: <e>
                    PsiElement(CHARACTER)('e')
                  RegExpCharImpl: <r>
                    PsiElement(CHARACTER)('r')
                  RegExpCharImpl: <r>
                    PsiElement(CHARACTER)('r')
                  RegExpCharImpl: <o>
                    PsiElement(CHARACTER)('o')
                  RegExpCharImpl: <r>
                    PsiElement(CHARACTER)('r')
                PsiElement(UNION)('|')
                RegExpBranchImpl: <warning>
                  RegExpCharImpl: <w>
                    PsiElement(CHARACTER)('w')
                  RegExpCharImpl: <a>
                    PsiElement(CHARACTER)('a')
                  RegExpCharImpl: <r>
                    PsiElement(CHARACTER)('r')
                  RegExpCharImpl: <n>
                    PsiElement(CHARACTER)('n')
                  RegExpCharImpl: <i>
                    PsiElement(CHARACTER)('i')
                  RegExpCharImpl: <n>
                    PsiElement(CHARACTER)('n')
                  RegExpCharImpl: <g>
                    PsiElement(CHARACTER)('g')
                PsiElement(UNION)('|')
                RegExpBranchImpl: <info>
                  RegExpCharImpl: <i>
                    PsiElement(CHARACTER)('i')
                  RegExpCharImpl: <n>
                    PsiElement(CHARACTER)('n')
                  RegExpCharImpl: <f>
                    PsiElement(CHARACTER)('f')
                  RegExpCharImpl: <o>
                    PsiElement(CHARACTER)('o')
              PsiElement(GROUP_END)(')')
            RegExpClosureImpl: <(?: descr="((?:[^"\\]|\\")*)")?>
              RegExpGroupImpl: <(?: descr="((?:[^"\\]|\\")*)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < descr="((?:[^"\\]|\\")*)">
                  RegExpBranchImpl: < descr="((?:[^"\\]|\\")*)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <d>
                      PsiElement(CHARACTER)('d')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <s>
                      PsiElement(CHARACTER)('s')
                    RegExpCharImpl: <c>
                      PsiElement(CHARACTER)('c')
                    RegExpCharImpl: <r>
                      PsiElement(CHARACTER)('r')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <((?:[^"\\]|\\")*)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <(?:[^"\\]|\\")*>
                        RegExpBranchImpl: <(?:[^"\\]|\\")*>
                          RegExpClosureImpl: <(?:[^"\\]|\\")*>
                            RegExpGroupImpl: <(?:[^"\\]|\\")>
                              PsiElement(NON_CAPT_GROUP)('(?:')
                              RegExpPatternImpl: <[^"\\]|\\">
                                RegExpBranchImpl: <[^"\\]>
                                  RegExpClassImpl: <[^"\\]>
                                    PsiElement(CLASS_BEGIN)('[')
                                    PsiElement(CARET)('^')
                                    RegExpCharImpl: <">
                                      PsiElement(CHARACTER)('"')
                                    RegExpCharImpl: <\\>
                                      PsiElement(ESC_CHARACTER)('\\')
                                    PsiElement(CLASS_END)(']')
                                PsiElement(UNION)('|')
                                RegExpBranchImpl: <\\">
                                  RegExpCharImpl: <\\>
                                    PsiElement(ESC_CHARACTER)('\\')
                                  RegExpCharImpl: <">
                                    PsiElement(CHARACTER)('"')
                              PsiElement(GROUP_END)(')')
                            RegExpQuantifierImpl: <*>
                              PsiElement(STAR)('*')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(?: type="([0-9A-Z_]+)")?>
              RegExpGroupImpl: <(?: type="([0-9A-Z_]+)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < type="([0-9A-Z_]+)">
                  RegExpBranchImpl: < type="([0-9A-Z_]+)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <t>
                      PsiElement(CHARACTER)('t')
                    RegExpCharImpl: <y>
                      PsiElement(CHARACTER)('y')
                    RegExpCharImpl: <p>
                      PsiElement(CHARACTER)('p')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <([0-9A-Z_]+)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <[0-9A-Z_]+>
                        RegExpBranchImpl: <[0-9A-Z_]+>
                          RegExpClosureImpl: <[0-9A-Z_]+>
                            RegExpClassImpl: <[0-9A-Z_]>
                              PsiElement(CLASS_BEGIN)('[')
                              RegExpCharRangeImpl: <0-9>
                                RegExpCharImpl: <0>
                                  PsiElement(CHARACTER)('0')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <9>
                                  PsiElement(CHARACTER)('9')
                              RegExpCharRangeImpl: <A-Z>
                                RegExpCharImpl: <A>
                                  PsiElement(CHARACTER)('A')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <Z>
                                  PsiElement(CHARACTER)('Z')
                              RegExpCharImpl: <_>
                                PsiElement(CHARACTER)('_')
                              PsiElement(CLASS_END)(']')
                            RegExpQuantifierImpl: <+>
                              PsiElement(PLUS)('+')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(?: foreground="([0-9xa-f]+)")?>
              RegExpGroupImpl: <(?: foreground="([0-9xa-f]+)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < foreground="([0-9xa-f]+)">
                  RegExpBranchImpl: < foreground="([0-9xa-f]+)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <f>
                      PsiElement(CHARACTER)('f')
                    RegExpCharImpl: <o>
                      PsiElement(CHARACTER)('o')
                    RegExpCharImpl: <r>
                      PsiElement(CHARACTER)('r')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <g>
                      PsiElement(CHARACTER)('g')
                    RegExpCharImpl: <r>
                      PsiElement(CHARACTER)('r')
                    RegExpCharImpl: <o>
                      PsiElement(CHARACTER)('o')
                    RegExpCharImpl: <u>
                      PsiElement(CHARACTER)('u')
                    RegExpCharImpl: <n>
                      PsiElement(CHARACTER)('n')
                    RegExpCharImpl: <d>
                      PsiElement(CHARACTER)('d')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <([0-9xa-f]+)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <[0-9xa-f]+>
                        RegExpBranchImpl: <[0-9xa-f]+>
                          RegExpClosureImpl: <[0-9xa-f]+>
                            RegExpClassImpl: <[0-9xa-f]>
                              PsiElement(CLASS_BEGIN)('[')
                              RegExpCharRangeImpl: <0-9>
                                RegExpCharImpl: <0>
                                  PsiElement(CHARACTER)('0')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <9>
                                  PsiElement(CHARACTER)('9')
                              RegExpCharImpl: <x>
                                PsiElement(CHARACTER)('x')
                              RegExpCharRangeImpl: <a-f>
                                RegExpCharImpl: <a>
                                  PsiElement(CHARACTER)('a')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <f>
                                  PsiElement(CHARACTER)('f')
                              PsiElement(CLASS_END)(']')
                            RegExpQuantifierImpl: <+>
                              PsiElement(PLUS)('+')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(?: background="([0-9xa-f]+)")?>
              RegExpGroupImpl: <(?: background="([0-9xa-f]+)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < background="([0-9xa-f]+)">
                  RegExpBranchImpl: < background="([0-9xa-f]+)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <b>
                      PsiElement(CHARACTER)('b')
                    RegExpCharImpl: <a>
                      PsiElement(CHARACTER)('a')
                    RegExpCharImpl: <c>
                      PsiElement(CHARACTER)('c')
                    RegExpCharImpl: <k>
                      PsiElement(CHARACTER)('k')
                    RegExpCharImpl: <g>
                      PsiElement(CHARACTER)('g')
                    RegExpCharImpl: <r>
                      PsiElement(CHARACTER)('r')
                    RegExpCharImpl: <o>
                      PsiElement(CHARACTER)('o')
                    RegExpCharImpl: <u>
                      PsiElement(CHARACTER)('u')
                    RegExpCharImpl: <n>
                      PsiElement(CHARACTER)('n')
                    RegExpCharImpl: <d>
                      PsiElement(CHARACTER)('d')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <([0-9xa-f]+)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <[0-9xa-f]+>
                        RegExpBranchImpl: <[0-9xa-f]+>
                          RegExpClosureImpl: <[0-9xa-f]+>
                            RegExpClassImpl: <[0-9xa-f]>
                              PsiElement(CLASS_BEGIN)('[')
                              RegExpCharRangeImpl: <0-9>
                                RegExpCharImpl: <0>
                                  PsiElement(CHARACTER)('0')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <9>
                                  PsiElement(CHARACTER)('9')
                              RegExpCharImpl: <x>
                                PsiElement(CHARACTER)('x')
                              RegExpCharRangeImpl: <a-f>
                                RegExpCharImpl: <a>
                                  PsiElement(CHARACTER)('a')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <f>
                                  PsiElement(CHARACTER)('f')
                              PsiElement(CLASS_END)(']')
                            RegExpQuantifierImpl: <+>
                              PsiElement(PLUS)('+')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(?: effectcolor="([0-9xa-f]+)")?>
              RegExpGroupImpl: <(?: effectcolor="([0-9xa-f]+)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < effectcolor="([0-9xa-f]+)">
                  RegExpBranchImpl: < effectcolor="([0-9xa-f]+)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <f>
                      PsiElement(CHARACTER)('f')
                    RegExpCharImpl: <f>
                      PsiElement(CHARACTER)('f')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <c>
                      PsiElement(CHARACTER)('c')
                    RegExpCharImpl: <t>
                      PsiElement(CHARACTER)('t')
                    RegExpCharImpl: <c>
                      PsiElement(CHARACTER)('c')
                    RegExpCharImpl: <o>
                      PsiElement(CHARACTER)('o')
                    RegExpCharImpl: <l>
                      PsiElement(CHARACTER)('l')
                    RegExpCharImpl: <o>
                      PsiElement(CHARACTER)('o')
                    RegExpCharImpl: <r>
                      PsiElement(CHARACTER)('r')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <([0-9xa-f]+)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <[0-9xa-f]+>
                        RegExpBranchImpl: <[0-9xa-f]+>
                          RegExpClosureImpl: <[0-9xa-f]+>
                            RegExpClassImpl: <[0-9xa-f]>
                              PsiElement(CLASS_BEGIN)('[')
                              RegExpCharRangeImpl: <0-9>
                                RegExpCharImpl: <0>
                                  PsiElement(CHARACTER)('0')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <9>
                                  PsiElement(CHARACTER)('9')
                              RegExpCharImpl: <x>
                                PsiElement(CHARACTER)('x')
                              RegExpCharRangeImpl: <a-f>
                                RegExpCharImpl: <a>
                                  PsiElement(CHARACTER)('a')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <f>
                                  PsiElement(CHARACTER)('f')
                              PsiElement(CLASS_END)(']')
                            RegExpQuantifierImpl: <+>
                              PsiElement(PLUS)('+')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(?: effecttype="([A-Z]+)")?>
              RegExpGroupImpl: <(?: effecttype="([A-Z]+)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < effecttype="([A-Z]+)">
                  RegExpBranchImpl: < effecttype="([A-Z]+)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <f>
                      PsiElement(CHARACTER)('f')
                    RegExpCharImpl: <f>
                      PsiElement(CHARACTER)('f')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <c>
                      PsiElement(CHARACTER)('c')
                    RegExpCharImpl: <t>
                      PsiElement(CHARACTER)('t')
                    RegExpCharImpl: <t>
                      PsiElement(CHARACTER)('t')
                    RegExpCharImpl: <y>
                      PsiElement(CHARACTER)('y')
                    RegExpCharImpl: <p>
                      PsiElement(CHARACTER)('p')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <([A-Z]+)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <[A-Z]+>
                        RegExpBranchImpl: <[A-Z]+>
                          RegExpClosureImpl: <[A-Z]+>
                            RegExpClassImpl: <[A-Z]>
                              PsiElement(CLASS_BEGIN)('[')
                              RegExpCharRangeImpl: <A-Z>
                                RegExpCharImpl: <A>
                                  PsiElement(CHARACTER)('A')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <Z>
                                  PsiElement(CHARACTER)('Z')
                              PsiElement(CLASS_END)(']')
                            RegExpQuantifierImpl: <+>
                              PsiElement(PLUS)('+')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(?: fonttype="([0-9]+)")?>
              RegExpGroupImpl: <(?: fonttype="([0-9]+)")>
                PsiElement(NON_CAPT_GROUP)('(?:')
                RegExpPatternImpl: < fonttype="([0-9]+)">
                  RegExpBranchImpl: < fonttype="([0-9]+)">
                    RegExpCharImpl: < >
                      PsiElement(CHARACTER)(' ')
                    RegExpCharImpl: <f>
                      PsiElement(CHARACTER)('f')
                    RegExpCharImpl: <o>
                      PsiElement(CHARACTER)('o')
                    RegExpCharImpl: <n>
                      PsiElement(CHARACTER)('n')
                    RegExpCharImpl: <t>
                      PsiElement(CHARACTER)('t')
                    RegExpCharImpl: <t>
                      PsiElement(CHARACTER)('t')
                    RegExpCharImpl: <y>
                      PsiElement(CHARACTER)('y')
                    RegExpCharImpl: <p>
                      PsiElement(CHARACTER)('p')
                    RegExpCharImpl: <e>
                      PsiElement(CHARACTER)('e')
                    RegExpCharImpl: <=>
                      PsiElement(CHARACTER)('=')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                    RegExpGroupImpl: <([0-9]+)>
                      PsiElement(GROUP_BEGIN)('(')
                      RegExpPatternImpl: <[0-9]+>
                        RegExpBranchImpl: <[0-9]+>
                          RegExpClosureImpl: <[0-9]+>
                            RegExpClassImpl: <[0-9]>
                              PsiElement(CLASS_BEGIN)('[')
                              RegExpCharRangeImpl: <0-9>
                                RegExpCharImpl: <0>
                                  PsiElement(CHARACTER)('0')
                                PsiElement(MINUS)('-')
                                RegExpCharImpl: <9>
                                  PsiElement(CHARACTER)('9')
                              PsiElement(CLASS_END)(']')
                            RegExpQuantifierImpl: <+>
                              PsiElement(PLUS)('+')
                      PsiElement(GROUP_END)(')')
                    RegExpCharImpl: <">
                      PsiElement(CHARACTER)('"')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpClosureImpl: <(/)?>
              RegExpGroupImpl: <(/)>
                PsiElement(GROUP_BEGIN)('(')
                RegExpPatternImpl: </>
                  RegExpBranchImpl: </>
                    RegExpCharImpl: </>
                      PsiElement(CHARACTER)('/')
                PsiElement(GROUP_END)(')')
              RegExpQuantifierImpl: <?>
                PsiElement(QUEST)('?')
            RegExpCharImpl: <>>
              PsiElement(CHARACTER)('>')
        PsiElement(GROUP_END)(')')
      RegExpGroupImpl: <(.*)>
        PsiElement(GROUP_BEGIN)('(')
        RegExpPatternImpl: <.*>
          RegExpBranchImpl: <.*>
            RegExpClosureImpl: <.*>
              RegExpSimpleClassImpl: <.>
                PsiElement(DOT)('.')
              RegExpQuantifierImpl: <*>
                PsiElement(STAR)('*')
        PsiElement(GROUP_END)(')')