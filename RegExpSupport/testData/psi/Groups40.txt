REGEXP_FILE
  RegExpPatternImpl: <(?(name)yes-pattern|{>
    RegExpBranchImpl: <(?(name)yes-pattern|{>
      RegExpConditionalImpl: <(?(name)yes-pattern|{>
        PsiElement(CONDITIONAL)('(?')
        RegExpNamedGroupRefImpl: <(name)>
          PsiElement(GROUP_BEGIN)('(')
          PsiElement(NAME)('name')
          PsiElement(GROUP_END)(')')
        RegExpBranchImpl: <yes-pattern>
          RegExpCharImpl: <y>
            PsiElement(CHARACTER)('y')
          RegExpCharImpl: <e>
            PsiElement(CHARACTER)('e')
          RegExpCharImpl: <s>
            PsiElement(CHARACTER)('s')
          RegExpCharImpl: <->
            PsiElement(CHARACTER)('-')
          RegExpCharImpl: <p>
            PsiElement(CHARACTER)('p')
          RegExpCharImpl: <a>
            PsiElement(CHARACTER)('a')
          RegExpCharImpl: <t>
            PsiElement(CHARACTER)('t')
          RegExpCharImpl: <t>
            PsiElement(CHARACTER)('t')
          RegExpCharImpl: <e>
            PsiElement(CHARACTER)('e')
          RegExpCharImpl: <r>
            PsiElement(CHARACTER)('r')
          RegExpCharImpl: <n>
            PsiElement(CHARACTER)('n')
        PsiElement(UNION)('|')
        RegExpBranchImpl: <{>
          PsiErrorElement:Unexpected start of quantifier '{'
            <empty list>
          PsiElement(LBRACE)('{')
        PsiErrorElement:')' expected
          <empty list>
        RegExpPatternImpl: <>
          RegExpBranchImpl: <>
            <empty list>