<idea-plugin>
  <extensionPoints>
    <extensionPoint name="regExpLanguageHost" beanClass="com.intellij.openapi.util.ClassExtensionPoint" dynamic="true">
      <with attribute="implementationClass" implements="org.intellij.lang.regexp.RegExpLanguageHost"/>
    </extensionPoint>
    <extensionPoint name="regExpModifierProvider" beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
      <with attribute="implementationClass" implements="org.intellij.lang.regexp.RegExpModifierProvider"/>
    </extensionPoint>
    <extensionPoint name="regExpMatcherProvider" beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
      <with attribute="implementationClass" implements="org.intellij.lang.regexp.RegExpMatcherProvider"/>
    </extensionPoint>
    <extensionPoint name="regExpCapabilitiesProvider" beanClass="com.intellij.lang.LanguageExtensionPoint" dynamic="true">
      <with attribute="implementationClass" implements="org.intellij.lang.regexp.RegExpCapabilitiesProvider"/>
    </extensionPoint>
  </extensionPoints>
  <extensions defaultExtensionNs="com.intellij">
    <lang.documentationProvider language="RegExp" implementationClass="org.intellij.lang.regexp.RegExpDocumentationProvider"/>
    <completion.contributor language="RegExp" implementationClass="org.intellij.lang.regexp.RegExpCompletionContributor"/>
    <fileType name="RegExp" implementationClass="org.intellij.lang.regexp.RegExpFileType" extensions="regexp" fieldName="INSTANCE" language="RegExp"/>
    <annotator language="RegExp" implementationClass="org.intellij.lang.regexp.validation.RegExpAnnotator"/>
    <lang.parserDefinition language="RegExp" implementationClass="org.intellij.lang.regexp.RegExpParserDefinition"/>
    <lang.syntaxHighlighterFactory language="RegExp" implementationClass="org.intellij.lang.regexp.RegExpSyntaxHighlighterFactory"/>
    <lang.braceMatcher language="RegExp" implementationClass="org.intellij.lang.regexp.RegExpBraceMatcher"/>
    <lang.surroundDescriptor language="RegExp" implementationClass="org.intellij.lang.regexp.surroundWith.SimpleSurroundDescriptor"/>
    <colorSettingsPage implementation="org.intellij.lang.regexp.RegExpColorsPage"/>
    <basicWordSelectionFilter implementation="org.intellij.lang.regexp.RegExpWordSelectionFilter"/>
    <regExpMatcherProvider language="JSRegexp" implementationClass="org.intellij.lang.regexp.ecmascript.EcmaScriptRegExpMatcherProvider"/>
    <lang.parserDefinition language="JSRegexp" implementationClass="org.intellij.lang.regexp.ecmascript.EcmaScriptRegexpParserDefinition"/>
    <lang.parserDefinition language="JSUnicodeRegexp" implementationClass="org.intellij.lang.regexp.ecmascript.EcmaScriptUnicodeRegexpParserDefinition"/>
    <lang.syntaxHighlighterFactory language="JSRegexp"
                                   implementationClass="org.intellij.lang.regexp.ecmascript.EcmaScriptRegExpSyntaxHighlighterFactory"/>

    <intentionAction>
      <className>org.intellij.lang.regexp.intention.CheckRegExpIntentionAction</className>
      <bundleName>messages.RegExpBundle</bundleName>
      <categoryKey>inspection.group.name.regexp</categoryKey>
    </intentionAction>

    <localInspection shortName="CustomRegExpInspection" enabledByDefault="true" level="NON_SWITCHABLE_WARNING" dynamicGroup="true"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.custom.regexp"
                     implementationClass="org.intellij.lang.regexp.inspection.custom.CustomRegExpInspection" language=""/>
    <localInspection language="RegExp" shortName="RegExpRepeatedSpace" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.consecutive.spaces"
                     implementationClass="org.intellij.lang.regexp.inspection.RepeatedSpaceInspection"/>
    <localInspection language="RegExp" shortName="RegExpSingleCharAlternation" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.single.character.alternation"
                     implementationClass="org.intellij.lang.regexp.inspection.SingleCharAlternationInspection"/>
    <localInspection language="RegExp" shortName="RegExpOctalEscape" enabledByDefault="true" level="INFORMATION"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.octal.escape"
                     implementationClass="org.intellij.lang.regexp.inspection.OctalEscapeInspection"/>
    <!--<localInspection groupName="RegExp" language="RegExp" shortName="ReDoS" displayName="Exponential backtracking" enabledByDefault="true"
                     level="WARNING" implementationClass="org.intellij.lang.regexp.inspection.ReDoSInspection"/>-->
    <localInspection language="RegExp" shortName="RegExpDuplicateAlternationBranch" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.duplicate.branch.in.alternation"
                     implementationClass="org.intellij.lang.regexp.inspection.DuplicateAlternationBranchInspection"/>
    <localInspection language="RegExp" shortName="RegExpEscapedMetaCharacter" enabledByDefault="true" level="INFORMATION"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.escaped.meta.character"
                     implementationClass="org.intellij.lang.regexp.inspection.EscapedMetaCharacterInspection"/>
    <localInspection language="RegExp" shortName="RegExpEmptyAlternationBranch" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.empty.branch.in.alternation"
                     implementationClass="org.intellij.lang.regexp.inspection.EmptyAlternationBranchInspection"/>
    <localInspection language="RegExp" shortName="RegExpAnonymousGroup" enabledByDefault="false" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.anonymous.group.or.numeric.back.reference"
                     implementationClass="org.intellij.lang.regexp.inspection.AnonymousGroupInspection"/>
    <localInspection language="RegExp" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.redundant.character.escape"
                     implementationClass="org.intellij.lang.regexp.inspection.RegExpRedundantEscapeInspection"/>
    <localInspection language="RegExp" shortName="RegExpUnexpectedAnchor" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.begin.or.end.anchor.in.unexpected.position"
                     implementationClass="org.intellij.lang.regexp.inspection.UnexpectedAnchorInspection"/>
    <localInspection language="RegExp" shortName="RegExpDuplicateCharacterInClass" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.duplicate.character.in.class"
                     implementationClass="org.intellij.lang.regexp.inspection.DuplicateCharacterInClassInspection"/>
    <localInspection language="RegExp" shortName="RegExpRedundantNestedCharacterClass" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.redundant.nested.character.class"
                     implementationClass="org.intellij.lang.regexp.inspection.RedundantNestedCharacterClassInspection"/>
    <localInspection language="RegExp" shortName="RegExpUnnecessaryNonCapturingGroup" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.unnecessary.non.capturing.group"
                     implementationClass="org.intellij.lang.regexp.inspection.UnnecessaryNonCapturingGroupInspection"/>
    <localInspection language="RegExp" shortName="RegExpSuspiciousBackref" enabledByDefault="true" level="WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.suspicious.backref"
                     implementationClass="org.intellij.lang.regexp.inspection.SuspiciousBackrefInspection"/>
    <localInspection language="RegExp" shortName="RegExpSimplifiable" enabledByDefault="true" level="WEAK WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.simplifiable.expression"
                     implementationClass="org.intellij.lang.regexp.inspection.RegExpSimplifiableInspection"/>
    <localInspection language="RegExp" shortName="RegExpRedundantClassElement" enabledByDefault="true" level="WEAK WARNING"
                     bundle="messages.RegExpBundle" groupKey="inspection.group.name.regexp" key="inspection.name.redundant.digit.class.element"
                     implementationClass="org.intellij.lang.regexp.inspection.RegExpRedundantClassElementInspection"/>
  </extensions>
</idea-plugin>
