action.add.pattern.text=Add pattern\u2026
action.add.regexp.replace.template.text=Add RegExp Replace Template\u2026
action.add.regexp.search.template.text=Add RegExp Search Template\u2026
button.enable.replace=Enable Replace
button.search.only=Search Only
checker.sample.text=Sample Text
color.settings.bad.character=Bad character
color.settings.brace=Brace
color.settings.bracket=Bracket
color.settings.character.class=Character class
color.settings.comma=Comma
color.settings.comment=Comment
color.settings.dot=Dot
color.settings.escaped.character=Escaped character
color.settings.inline.option=Inline option
color.settings.invalid.escape.sequence=Invalid escape sequence
color.settings.matched.groups=Matched groups
color.settings.name=Name
color.settings.operator.character=Operator character
color.settings.parenthesis=Parenthesis
color.settings.plain.character=Plain character
color.settings.quantifier=Quantifier
color.settings.quote.character=Quote escape
color.settings.redundant.escape.sequence=Redundant escape sequence
color.settings.title.regexp=RegExp
dialog.message.inspection.with.name.exists.warning=Inspection with name ''{0}'' already exists
dialog.message.name.must.not.be.empty=Name must not be empty
dialog.message.suppress.id.already.in.use.by.another.inspection=Suppress ID ''{0}'' is already in use by another inspection
dialog.message.suppress.id.must.match.regex.za.z=Suppress ID must match regex [a-zA-Z_0-9.-]+
dialog.title.custom.regexp.inspection=Custom RegExp Inspection
doc.property.block.stands.for.0=Property block stands for {0}
doc.property.block.stands.for.characters.not.matching.0=Property block stands for characters not matching {0}
edit.metadata.button=Edit Metadata...
error.0.repetition.not.allowed.inside.lookbehind={0} repetition not allowed inside lookbehind
error.alternation.alternatives.needs.to.have.the.same.length.inside.lookbehind=Alternation alternatives need to have the same length inside lookbehind
error.atomic.groups.are.not.supported.in.this.regex.dialect=Atomic groups are not supported in this regex dialect
error.back.reference.is.nested.into.the.capturing.group.it.refers.to=Back reference is nested into the capturing group it refers to
error.conditional.group.reference.not.allowed.inside.lookbehind=Conditional group reference not allowed inside lookbehind
error.conditionals.are.not.supported.in.this.regex.dialect=Conditionals are not supported in this regex dialect
error.dangling.metacharacter=Dangling quantifier ''{0}''
error.dangling.opening.bracket=Unexpected start of quantifier '{'
error.define.subpattern.contains.more.than.one.branch=DEFINE subpattern contains more than one branch
error.embedded.comments.are.not.supported.in.this.regex.dialect=Embedded comments are not supported in this regex dialect
error.empty.group=Empty group
error.group.reference.is.nested.into.the.named.group.it.refers.to=Group reference is nested into the named group it refers to
error.group.reference.not.allowed.inside.lookbehind=Group reference not allowed inside lookbehind
error.group.with.name.0.already.defined=Group with name ''{0}'' already defined
error.illegal.character.range.to.from=Illegal character range (to < from)
error.illegal.hexadecimal.escape.sequence=Illegal hexadecimal escape sequence
error.illegal.octal.escape.sequence=Illegal octal escape sequence
error.illegal.repetition.range.min.max=Illegal repetition range (min > max)
error.illegal.unicode.escape.sequence=Illegal unicode escape sequence
error.illegal.unsupported.escape.sequence=Illegal/unsupported escape sequence
error.invalid.group.name=Invalid group name
error.look.behind.groups.are.not.supported.in.this.regex.dialect=Look-behind groups are not supported in this regex dialect
error.lookaround.conditions.in.conditionals.not.supported.in.this.regex.dialect=Lookaround conditions for conditionals are not supported in this regex dialect
error.named.group.reference.not.allowed.inside.lookbehind=Named group reference not allowed inside lookbehind
error.named.unicode.characters.are.not.allowed.in.this.regex.dialect=Named Unicode characters are not allowed in this regex dialect
error.nested.quantifier.in.regexp=Nested quantifier in regexp
error.property.escape.sequences.are.not.supported.in.this.regex.dialect=Property escape sequences are not supported in this regex dialect
error.redundant.group.nesting=Redundant group nesting
error.repetition.value.too.large=Repetition value too large
error.this.boundary.is.not.supported.in.this.regex.dialect=This boundary is not supported in this regex dialect
error.this.hex.character.syntax.is.not.supported.in.this.regex.dialect=This hex character syntax is not supported in this regex dialect
error.this.kind.group.reference.condition.not.supported.in.this.regex.dialect=This kind of group reference condition is not supported in this regex dialect
error.this.named.group.reference.syntax.is.not.supported.in.this.regex.dialect=This named group reference syntax is not supported in this regex dialect
error.this.named.group.syntax.is.not.supported.in.this.regex.dialect=This named group syntax is not supported in this regex dialect
error.unequal.min.and.max.in.counted.quantifier.not.allowed.inside.lookbehind=Unequal min and max in counted quantifier not allowed inside lookbehind
error.unknown.character.category=Unknown character category
error.unknown.character.name=Unknown character name
error.unknown.inline.option.flag=Unknown inline option flag
error.unknown.posix.character.class=Unknown POSIX character class
error.unknown.property.name=Unknown property name
error.unknown.property.value=Unknown property value
error.unresolved.back.reference=Unresolved back reference
error.unresolved.named.group.reference=Unresolved named group reference
error.unresolved.numbered.group.reference=Unresolved numbered group reference
filetype.regular.expression.description=Regular expression
inspection.group.name.regexp=RegExp
inspection.name.anonymous.group.or.numeric.back.reference=Anonymous capturing group or numeric back reference
inspection.name.begin.or.end.anchor.in.unexpected.position=Begin or end anchor in unexpected position
inspection.name.consecutive.spaces=Consecutive spaces
inspection.name.custom.regexp=Custom RegExp inspection
inspection.name.duplicate.branch.in.alternation=Duplicate branch in alternation
inspection.name.duplicate.character.in.class=Duplicate character in character class
inspection.name.empty.branch.in.alternation=Empty branch in alternation
inspection.name.escaped.meta.character=Escaped meta character
inspection.name.octal.escape=Octal escape
inspection.name.redundant.character.escape=Redundant character escape
inspection.name.redundant.digit.class.element=Redundant '\\d', '[:digit:]', or '\\D' class elements
inspection.name.redundant.nested.character.class=Redundant nested character class
inspection.name.simplifiable.expression=Regular expression can be simplified
inspection.name.single.character.alternation=Single character alternation
inspection.name.suspicious.backref=Suspicious back reference
inspection.name.unnecessary.non.capturing.group=Unnecessary non-capturing group
inspection.option.ignore.escaped.closing.brackets=Ignore escaped closing brackets '}' and ']'
inspection.quick.fix.remove.duplicate.0.from.character.class=Remove duplicate ''{0}'' from character class
inspection.quick.fix.remove.duplicate.branch=Remove duplicate branch
inspection.quick.fix.remove.duplicate.element.from.character.class=Remove duplicate element from character class
inspection.quick.fix.remove.empty.branch=Remove empty branch
inspection.quick.fix.remove.redundant.0.class.element=Remove redundant ''{0}''
inspection.quick.fix.remove.redundant.class.element=Remove redundant class element
inspection.quick.fix.remove.redundant.escape=Remove redundant escape
inspection.quick.fix.remove.unnecessary.non.capturing.group=Unwrap unnecessary non-capturing group
inspection.quick.fix.replace.alternation.with.character.class=Replace alternation with character class
inspection.quick.fix.replace.redundant.character.class.with.contents=Replace redundant character class with contents
inspection.quick.fix.replace.with.character.inside.class=Replace with character inside class
inspection.quick.fix.replace.with.hexadecimal.escape=Replace with hexadecimal escape
inspection.quick.fix.replace.with.space.and.repeated.quantifier=Replace with space and repeated quantifier
inspection.warning.anchor.code.ref.code.in.unexpected.position=Anchor <code>#ref</code> in unexpected position
inspection.warning.anonymous.capturing.group=Anonymous capturing group
inspection.warning.can.be.removed=<code>#ref</code> is redundant
inspection.warning.can.be.simplified=<code>#ref</code> can be simplified to ''{0}''
inspection.warning.consecutive.spaces.in.regexp={0} consecutive spaces in RegExp
inspection.warning.duplicate.branch.in.alternation=Duplicate branch in alternation
inspection.warning.empty.branch.in.alternation=Empty branch in alternation
inspection.warning.escaped.meta.character.0=Escaped meta character <code>{0}</code>
inspection.warning.group.back.reference.are.in.different.branches=Group <code>{0}</code> and this back reference are in different branches
inspection.warning.group.defined.after.back.reference=Group <code>{0}</code> is defined after this back reference
inspection.warning.numeric.back.reference=Numeric back reference
inspection.warning.octal.escape.code.ref.code.in.regexp=Octal escape <code>#ref</code> in RegExp
inspection.warning.potential.exponential.backtracking=Potential exponential backtracking
inspection.warning.redundant.character.escape.0.in.regexp=Redundant character escape <code>{0}</code> in RegExp
inspection.warning.redundant.class.element=Redundant ''{0}'' in RegExp
inspection.warning.redundant.nested.character.class=Redundant nested character class
inspection.warning.single.character.alternation.in.regexp=Single character alternation in RegExp
inspection.warning.unnecessary.non.capturing.group=Unnecessary non-capturing group <code>{0}</code>
intention.family.name.replace=Replace
intention.name.check.regexp=Check RegExp
label.any=Any
label.description=Description:
label.inspection.name=Inspection name:
label.problem.tool.tip=Problem tool tip (use macro #ref to insert highlighted code):
label.regexp.patterns=RegExp patterns:
label.regexp=&RegExp:
label.sample=&Sample:
label.suppress.id=Suppress ID:
no.description.provided.description=No description provided
parse.error.category.shorthand.not.allowed.in.this.regular.expression.dialect=Category shorthand not allowed in this regular expression dialect
parse.error.character.class.expected=Character class expected
parse.error.character.expected=Character expected
parse.error.character.or.mysql.character.name.expected=Character or MySQL character name expected
parse.error.closing.brace.expected='}' expected
parse.error.closing.brace.or.number.expected='}' or number expected
parse.error.comma.expected=',' expected
parse.error.empty.property=Empty property
parse.error.group.name.expected=Group name expected
parse.error.group.name.or.number.expected=Group name or number expected
parse.error.group.number.expected=Group number expected
parse.error.illegal.category.shorthand=Illegal category shorthand
parse.error.illegal.character.range=Illegal character range
parse.error.negating.a.property.not.allowed.in.this.regular.expression.dialect=Negating a property not allowed in this regular expression dialect
parse.error.number.expected=Number expected
parse.error.opening.brace.expected='{' expected
parse.error.opening.brace.or.category.shorthand.expected='{' or category shorthand expected
parse.error.pattern.expected=Pattern expected
parse.error.posix.character.class.name.expected=POSIX character class name expected
parse.error.property.name.expected=Property name expected
parse.error.property.value.expected=Property value expected
parse.error.unclosed.character.class=Unclosed character class
parse.error.unclosed.group.name=Unclosed group name
parse.error.unclosed.group.reference=Unclosed group reference
parse.error.unclosed.group=')' expected
parse.error.unclosed.mysql.character.equivalence.class=Unclosed MySQL character equivalence class
parse.error.unclosed.mysql.character.expression=Unclosed MySQL character expression
parse.error.unclosed.options.group=Unclosed options group
parse.error.unclosed.posix.bracket.expression=Unclosed POSIX bracket expression
parse.error.unclosed.property=Unclosed property
parse.error.unicode.character.name.expected=Unicode character name expected
parse.error.unmatched.closing.bracket=Unmatched closing ''{0}''
regexp.dialog.language=&Language:
regexp.dialog.replace.template=Replace RegExp:
regexp.dialog.search.template=Search RegExp:
regexp.dialog.title=RegExp
surrounder.atomic.group.pattern=Atomic Group (?:pattern)
surrounder.capturing.group.pattern=Capturing Group (pattern)
surrounder.negative.lookahead.pattern=Negative Lookahead (?!pattern)
surrounder.negative.lookbehind.pattern=Negative Lookbehind (?<!pattern)
surrounder.non.capturing.group.pattern=Non-Capturing Group (?:pattern)
surrounder.positive.lookahead.pattern=Positive Lookahead (?=pattern)
surrounder.positive.lookbehind.pattern=Positive Lookbehind (?<=pattern)
tooltip.bad.pattern=Bad regular expression pattern
tooltip.found.multiple=Expression found {0} times in example
tooltip.found=Expression found in example
tooltip.matches=Expression and example match!
tooltip.more.input.expected=More example input expected
tooltip.no.match=Expression and example do not match
tooltip.pattern.is.too.complex=Regular expression pattern is too complex
warning.duplicate.character.0.inside.character.class=Duplicate character ''{0}'' inside character class
warning.duplicate.predefined.character.class.0.inside.character.class=Duplicate predefined character class ''{0}'' inside character class