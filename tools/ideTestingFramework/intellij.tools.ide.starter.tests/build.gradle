apply plugin: 'java'
apply plugin: 'kotlin'

buildscript {
  ext.kotlin_version = '1.7.0'
  ext.jackson_version = '2.13.3'

  repositories {
    maven { url = "https://cache-redirector.jetbrains.com/maven-central" }
    maven { url = "https://cache-redirector.jetbrains.com/intellij-dependencies" }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

sourceSets {
  test.kotlin.srcDirs += 'testSrc'
  test.resources {
    srcDirs "testResources"
    includes = ["**/*.*"]
  }
}

repositories {
  maven { url = "https://cache-redirector.jetbrains.com/maven-central" }
  maven { url = "https://cache-redirector.jetbrains.com/intellij-dependencies" }

  maven { url = "https://www.jetbrains.com/intellij-repository/releases" }
  maven { url = "https://www.jetbrains.com/intellij-repository/snapshots" }
  maven { url = "https://www.jetbrains.com/intellij-repository/nightly" }

  maven { url = "https://cache-redirector.jetbrains.com/packages.jetbrains.team/maven/p/grazi/grazie-platform-public" }
}

dependencies {
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.2"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  implementation "org.jetbrains.intellij.deps:gradle-api:7.4"
  implementation "org.kodein.di:kodein-di-jvm:7.13.0"


  implementation 'com.jetbrains.intellij.performanceTesting:performance-testing-commands:LATEST-TRUNK-SNAPSHOT'

  testImplementation 'com.jetbrains.intellij.performanceTesting:performance-testing-maven-commands:LATEST-TRUNK-SNAPSHOT'
  testImplementation 'com.jetbrains.intellij.performanceTesting:performance-testing-gradle-commands:LATEST-TRUNK-SNAPSHOT'
  testImplementation 'com.jetbrains.intellij.dynamicPlugins:dynamic-plugins-performance-testing-commands:LATEST-TRUNK-SNAPSHOT'

  testImplementation 'junit:junit:4.13.2'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
  testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.1'
  testImplementation 'org.junit.platform:junit-platform-launcher:1.8.2'

  testImplementation 'io.kotest:kotest-assertions-core-jvm:5.3.2'
  testImplementation 'org.mockito:mockito-core:3.12.4'
  testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
}

configurations {
  testImplementation.exclude(group: 'com.jetbrains.intellij.remoteDev')
}

compileKotlin {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.toString()
    freeCompilerArgs += [
      "-version",
      "-Xjvm-default=enable",
      "-Xopt-in=kotlin.time.ExperimentalTime"
    ]
  }
}

compileTestKotlin {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.toString()
    freeCompilerArgs += [
      "-version",
      "-Xjvm-default=enable",
      "-Xopt-in=kotlin.time.ExperimentalTime"
    ]
  }
}


test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

task runOnlyExamplesTests(type: Test) {
  filter {
    includeTestsMatching "com.intellij.ide.starter.tests.examples.*"
  }

  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

task runOnlyUnitTests(type: Test) {
  filter {
    includeTestsMatching "com.intellij.ide.starter.tests.unit.*"
  }

  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}
