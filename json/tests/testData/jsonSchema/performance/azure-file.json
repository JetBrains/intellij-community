{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "domainNameLabel": {
      "type": "string",
      "metadata": {
        "description": "DNS label for public IP address"
      }
    },
    "appGatewaySubnetId": {
      "type": "string",
      "metadata": {
        "description": "App Gateway Subnet ID"
      }
    },
    "sslKeyVaultUri": {
      "type": "string",
      "metadata": {
        "description": "SSL Key Vault Uri"
      }
    },
    "sslKeyVaultUserAssignedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "Id of managed identity with access to SSL certificate Key Vault - output of ssl-certificate-key-vault arm deploy"
      }
    },
    "hostnameSuffix": {
      "type": "string",
      "metadata": {
        "description": "Hostname suffix, e.g. east-us-2.azure.keboola.com"
      }
    },
    "autoscaleMinCapacity": {
      "type": "int",
      "metadata": {
        "description": "AGW autoscale minimum capacity (number of nodes)"
      }
    },
    "autoscaleMaxCapacity": {
      "type": "int",
      "metadata": {
        "description": "AGW autoscale maximum capacity (number of nodes)"
      }
    },
    "encryptionIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Encryption API Kubernetes service"
      }
    },
    "importerIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Sapi Impotrter API Kubernetes service"
      }
    },
    "dockerRunnerIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Docker Runner API Kubernetes service"
      }
    },
    "dockerRunnerSyncActionsIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Docker runner sync actions API Kubernetes service"
      }
    },
    "queueIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Queue Router API Kubernetes service"
      }
    },
    "orchestratorIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Orchestrator Router API Kubernetes service"
      }
    },
    "connectionIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Connection API Kubernetes service"
      }
    },
    "sandboxIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Sandbox Ingress service"
      }
    },
    "provisioningIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of Provisioning API Kubernetes service"
      }
    },
    "mlflowIP": {
      "type": "string",
      "metadata": {
        "description": "External IP Address of MLflow Kubernetes service"
      }
    },
    "oauthIP": {
      "type": "string",
      "metadata": {
        "description": "IP of OAuth API"
      }
    },
    "billingIP": {
      "type": "string",
      "metadata": {
        "description": "IP of Billing API"
      }
    },
    "sparkFQDN": {
      "type": "string",
      "metadata": {
        "description": "FQDN of Spark service"
      }
    },
    "sandboxesIP": {
      "type": "string",
      "metadata": {
        "description": "IP of sandboxes-api"
      }
    },
    "appGatewayPrivateIP": {
      "type": "string",
      "metadata": {
        "description": "Static Private IP Address of Application Gateway"
      }
    },
    "enableOnlyPrivateAccess": {
      "type": "bool",
      "metadata": {
        "description": "Enable Only Private Access"
      }
    },
    "maintenanceIP": {
      "type": "string",
      "metadata": {
        "description": "Static Private IP Address of Maintenance Service"
      }
    },
    "maintenanceEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Enable Maintenance Service"
      }
    }
  },
  "variables": {
    "appGatewayName": "kbc-application-gateway",
    "kbcAgwPublicIPAddressName": "[concat(variables('appGatewayName'), '-ip')]",
    "kbcAgwPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses', variables('kbcAgwPublicIPAddressName'))]",
    "applicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName'))]",
    "encryptionHostname": "[concat('encryption.', parameters('hostnameSuffix'))]",
    "importerHostname": "[concat('import.', parameters('hostnameSuffix'))]",
    "dockerRunnerSyncActionsHostname": "[concat('docker-runner.', parameters('hostnameSuffix'))]",
    "syrupHostname": "[concat('syrup.', parameters('hostnameSuffix'))]",
    "connectionHostname": "[concat('connection.', parameters('hostnameSuffix'))]",
    "sandboxHostname": "[concat('sandbox.', parameters('hostnameSuffix'))]",
    "mlflowHostname": "[concat('mlflow.', parameters('hostnameSuffix'))]",
    "oauthHostname": "[concat('oauth.', parameters('hostnameSuffix'))]",
    "billingHostname": "[concat('billing.', parameters('hostnameSuffix'))]",
    "sandboxesHostname": "[concat('sandboxes.', parameters('hostnameSuffix'))]",
    "sparkHostname": "[concat('spark.', parameters('hostnameSuffix'))]",
    "keyVaultSecretId": "[concat(parameters('sslKeyVaultUri'), 'secrets/', resourceGroup().name, '-ssl-certificate')]"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "name": "pid-bdd924d8-b58a-5693-8b40-a5bb4a1bbe71",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "apiVersion": "2019-06-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('kbcAgwPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainNameLabel')]"
        }
      }
    },
    {
      "apiVersion": "2019-06-01",
      "name": "[variables('appGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('kbcAgwPublicIPAddressName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[parameters('sslKeyVaultUserAssignedIdentityId')]": {}
        }
      },
      "properties": {
        "sku": {
          "name": "Standard_v2",
          "tier": "Standard_v2"
        },
        "sslCertificates": [
          {
            "name": "appGatewaySslCert",
            "properties": {
              "keyVaultSecretId": "[variables('keyVaultSecretId')]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[parameters('appGatewaySubnetId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('kbcAgwPublicIPRef')]"
              }
            }
          },
          {
            "name": "appGatewayFrontendPrivateIP",
            "properties": {
              "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[parameters('appGatewaySubnetId')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort",
            "properties": {
              "Port": 80
            }
          },
          {
            "name": "https",
            "properties": {
              "port": 443
            },
            "type": "Microsoft.Network/applicationGateways/frontendPorts"
          }
        ],
        "backendAddressPools": [
          {
            "name": "maintenance",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('maintenanceIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "sandboxes",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('sandboxesIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "encryption",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('encryptionIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "importer",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('importerIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "docker-runner",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('dockerRunnerIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "docker-runner-sync-actions",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('dockerRunnerSyncActionsIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "queue",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('queueIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "orchestrator",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('orchestratorIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "connection",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('connectionIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "sandbox",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('sandboxIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "provisioning",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('provisioningIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "mlflow",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('mlflowIP')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          },
          {
            "name": "oauth",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('oauthIP')]"
                }
              ]
            }
          },
          {
            "name": "billing",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('billingIP')]"
                }
              ]
            }
          },
          {
            "name": "spark",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[parameters('sparkFQDN')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/backendAddressPools"
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "maintenance",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": true,
              "requestTimeout": 20,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/maintenance-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "encryption",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 240,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/encryption-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "importer",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 7200,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/importer-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "docker-runner",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 20,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/docker-runner-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "docker-runner-sync-actions",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 60,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/docker-runner-sync-actions-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "queue",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 20,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/queue-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "orchestrator",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/orchestrator-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "connection",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/connection-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "sandbox",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 7200,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/sandbox-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "provisioning",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/provisioning-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "mlflow",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/mlflow-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "oauth",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/oauth-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "billing",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/billing-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "sandboxes-http",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 240,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/sandboxes-http-health-probe')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
          },
          {
            "name": "spark-https",
            "properties": {
              "port": 443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "hostName": "[parameters('sparkFQDN')]",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 600,
              "probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/spark-https-health-probe')]"
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "[concat(variables('encryptionHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('encryptionHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('encryptionHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('encryptionHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('importerHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('importerHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('importerHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('importerHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('dockerRunnerSyncActionsHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('dockerRunnerSyncActionsHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('dockerRunnerSyncActionsHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('dockerRunnerSyncActionsHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('syrupHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('syrupHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('syrupHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('syrupHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('connectionHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('connectionHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('connectionHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('connectionHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('sandboxHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('sandboxHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('sandboxHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('sandboxHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('mlflowHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('mlflowHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('mlflowHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('mlflowHostname')]",
              "requireServerNameIndication": true
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('oauthHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('oauthHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('oauthHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('oauthHostname')]",
              "hostNames": [],
              "requireServerNameIndication": true
            }
          },
          {
            "name": "[concat(variables('billingHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('billingHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('billingHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('billingHostname')]",
              "hostNames": [],
              "requireServerNameIndication": true
            }
          },
          {
            "name": "[concat(variables('sandboxesHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('sandboxesHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('sandboxesHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('sandboxesHostname')]",
              "hostNames": [],
              "requireServerNameIndication": true
            }
          },
          {
            "name": "[concat(variables('sparkHostname'), '_80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "protocol": "Http",
              "hostName": "[variables('sparkHostname')]",
              "requireServerNameIndication": false
            },
            "type": "Microsoft.Network/applicationGateways/httpListeners"
          },
          {
            "name": "[concat(variables('sparkHostname'), '_443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/', if(parameters('enableOnlyPrivateAccess'), 'appGatewayFrontendPrivateIP', 'appGatewayFrontendIP'))]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayID'), '/frontendPorts/https')]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              },
              "hostName": "[variables('sparkHostname')]",
              "hostNames": [],
              "requireServerNameIndication": true
            }
          }
        ],
        "urlPathMaps": [
          {
            "name": "docker-runner-sync-actions-https",
            "properties": {
              "defaultRedirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/connection-redirect')]"
              },
              "pathRules": [
                {
                  "name": "docker",
                  "properties": {
                    "paths": [
                      "/docker*"
                    ],
                    "backendAddressPool": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/docker-runner-sync-actions'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/docker-runner-sync-actions'))]"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "syrup-https",
            "properties": {
              "defaultRedirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/connection-redirect')]"
              },
              "pathRules": [
                {
                  "name": "queue",
                  "properties": {
                    "paths": [
                      "/queue*"
                    ],
                    "backendAddressPool": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/queue'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/queue'))]"
                    }
                  }
                },
                {
                  "name": "docker-runner",
                  "properties": {
                    "paths": [
                      "/docker*"
                    ],
                    "backendAddressPool": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/docker-runner'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/docker-runner'))]"
                    }
                  }
                },
                {
                  "name": "orchestrator",
                  "properties": {
                    "paths": [
                      "/orchestrator*"
                    ],
                    "backendAddressPool": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/orchestrator'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/orchestrator'))]"
                    }
                  }
                },
                {
                  "name": "provisioning",
                  "properties": {
                    "paths": [
                      "/provisioning*"
                    ],
                    "backendAddressPool": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/provisioning'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/provisioning'))]"
                    }
                  }
                }
              ]
            }
          }
        ],
        "requestRoutingRules": [
          {
            "name": "encryption-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('encryptionHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/encryption'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/encryption'))]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "encryption-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('encryptionHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/encryption-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "docker-runner-sync-actions-https",
            "properties": {
              "ruleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('dockerRunnerSyncActionsHostname'), '_443'))]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/docker-runner-sync-actions-https')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "docker-runner-sync-actions-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('dockerRunnerSyncActionsHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/docker-runner-sync-actions-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "importer-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('importerHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/importer'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/importer'))]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "importer-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('importerHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/importer-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "syrup-https",
            "properties": {
              "ruleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('syrupHostname'), '_443'))]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/syrup-https')]"
              }
            }
          },
          {
            "name": "syrup-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('syrupHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/syrup-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "connection-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('connectionHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/connection'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/connection'))]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "connection-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('connectionHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/connection-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "sandbox-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('sandboxHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/sandbox'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/sandbox'))]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "sandbox-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('sandboxHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/sandbox-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "mlflow-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('mlflowHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/mlflow'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/mlflow'))]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "mlflow-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('mlflowHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/mlflow-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "oauth-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('oauthHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/oauth'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/oauth'))]"
              }
            }
          },
          {
            "name": "oauth-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('oauthHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/oauth-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "billing-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('billingHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/billing'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/billing'))]"
              }
            }
          },
          {
            "name": "billing-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('billingHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/billing-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "sandboxes-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('sandboxesHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/sandboxes'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/sandboxes-http'))]"
              }
            }
          },
          {
            "name": "sandboxes-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('sandboxesHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/sandboxes-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          },
          {
            "name": "spark-https",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('sparkHostname'), '_443'))]"
              },
              "backendAddressPool": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendAddressPools/maintenance'), concat(variables('applicationGatewayID'), '/backendAddressPools/spark'))]"
              },
              "backendHttpSettings": {
                "id": "[if(parameters('maintenanceEnabled'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/maintenance'), concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/spark-https'))]"
              }
            }
          },
          {
            "name": "spark-http",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), concat('/httpListeners/', variables('sparkHostname'), '_80'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/spark-http')]"
              }
            },
            "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
          }
        ],
        "probes": [
          {
            "name": "maintenance-health-probe",
            "properties": {
              "protocol": "Http",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true,
              "minServers": 0,
              "port": 8081,
              "match": {
                "statusCodes": [
                  "200-299"
                ]
              }
            }
          },
          {
            "name": "encryption-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('encryptionIP')]",
              "path": "/health-check",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "importer-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('importerIP')]",
              "path": "/health-check",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "docker-runner-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('dockerRunnerIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "docker-runner-sync-actions-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('dockerRunnerSyncActionsIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "queue-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('queueIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "orchestrator-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('orchestratorIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "connection-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('connectionIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "sandbox-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('sandboxIP')]",
              "path": "/health-check",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-499"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "provisioning-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('provisioningIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "mlflow-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('mlflowIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "oauth-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('oauthIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-500"
                ]
              }
            }
          },
          {
            "name": "billing-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('billingIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-500"
                ]
              }
            }
          },
          {
            "name": "sandboxes-http-health-probe",
            "properties": {
              "protocol": "Http",
              "host": "[parameters('sandboxesIP')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            },
            "type": "Microsoft.Network/applicationGateways/probes"
          },
          {
            "name": "spark-https-health-probe",
            "properties": {
              "protocol": "Https",
              "host": "[parameters('sparkFQDN')]",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-500"
                ]
              }
            }
          }
        ],
        "redirectConfigurations": [
          {
            "name": "encryption-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('encryptionHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/encryption-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "importer-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('importerHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/importer-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "docker-runner-sync-actions-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('dockerRunnerSyncActionsHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/docker-runner-sync-actions-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "syrup-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('syrupHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/syrup-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "connection-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('connectionHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/connection-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "connection-redirect",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('connectionHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true
            }
          },
          {
            "name": "sandbox-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('sandboxHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/sandbox-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "mlflow-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('mlflowHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/mlflow-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "oauth-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('oauthHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/oauth-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "billing-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('billingHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/billing-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "sandboxes-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('sandboxesHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/sandboxes-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          },
          {
            "name": "spark-http",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/', variables('sparkHostname'), '_443')]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(variables('applicationGatewayID'), '/requestRoutingRules/spark-http')]"
                }
              ]
            },
            "type": "Microsoft.Network/applicationGateways/redirectConfigurations"
          }
        ],
        "enableHttp2": false,
        "autoscaleConfiguration": {
          "minCapacity": "[parameters('autoscaleMinCapacity')]",
          "maxCapacity": "[parameters('autoscaleMaxCapacity')]"
        }
      }
    }
  ],
  "outputs": {
    "appGatewayName": {
      "type": "string",
      "value": "[variables('appGatewayName')]"
    },
    "hostname": {
      "type": "string",
      "value": "[reference(variables('kbcAgwPublicIPAddressName')).dnsSettings.fqdn]"
    },
    "publicIP": {
      "type": "string",
      "value": "[reference(variables('kbcAgwPublicIPAddressName')).ipAddress]"
    },
    "enableOnlyPrivateAccess": {
      "type": "bool",
      "value": "[parameters('enableOnlyPrivateAccess')]"
    },
    "privateIP": {
      "type": "string",
      "value": "[parameters('appGatewayPrivateIP')]"
    }
  }
}
