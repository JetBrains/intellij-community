### auto-generated section `build fleet.util.core` start
load("//build:compiler-options.bzl", "create_kotlinc_options")
load("@rules_jvm//:jvm.bzl", "jvm_library", "jvm_provided_library")

create_kotlinc_options(
  name = "custom",
  opt_in = ["kotlin.concurrent.atomics.ExperimentalAtomicApi"]
)

jvm_provided_library(
  name = "fleet-util-multiplatform_provided",
  lib = "//fleet/util/multiplatform:fleet-util-multiplatform"
)

jvm_library(
  name = "fleet-util-core",
  module_name = "fleet.util.core",
  visibility = ["//visibility:public"],
  srcs = glob(["srcJvmMain/**/*.kt", "srcJvmMain/**/*.java", "srcCommonMain/**/*.kt", "srcCommonMain/**/*.java"], allow_empty = True, exclude = ["**/module-info.java"]),
  kotlinc_opts = ":custom",
  deps = [
    "@lib//:kotlin-stdlib",
    "@lib//:kotlinx-coroutines-core",
    "@lib//:kotlinx-serialization-core",
    "@lib//:kotlinx-serialization-json",
    "//fleet/util/logging/api:fleet-util-logging-api",
    "@lib//:kotlinx-collections-immutable",
    "//fleet/reporting/api:fleet-reporting-api",
    "//fleet/reporting/shared:fleet-reporting-shared",
    "//fleet/multiplatform.shims:multiplatform-shims",
    "//fleet/fastutil",
    "@lib//:kotlinx-datetime-jvm",
    "@lib//:de-cketti-unicode-kotlin-codepoints-jvm",
    ":fleet-util-multiplatform_provided",
  ],
  exports = [
    "//fleet/util/logging/api:fleet-util-logging-api",
    "@lib//:kotlinx-collections-immutable",
    "//fleet/multiplatform.shims:multiplatform-shims",
    "//fleet/fastutil",
  ]
)
### auto-generated section `build fleet.util.core` end