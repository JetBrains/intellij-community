// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package fleet.codepoints

import de.cketti.codepoints.CodePoints
import fleet.util.binarySearch
import kotlin.jvm.JvmInline

@JvmInline
value class Codepoint(val codepoint: Int) {
  val charCount: Int get() = CodePoints.charCount(codepoint)

  companion object {
    fun isUnicodeIdentifierPart(codepoint: Int): Boolean {
      return isTrueBasedOnRange(codepoint, eitherUnicodeOrJavaStartIdRanges) || isTrueBasedOnRange(codepoint, unicodeIdRanges)
    }

    fun isJavaIdentifierPart(codepoint: Int): Boolean {
      return isTrueBasedOnRange(codepoint, eitherUnicodeOrJavaStartIdRanges) || isTrueBasedOnRange(codepoint, javaStartIdRanges)
    }

    fun isSpaceChar(codePoint: Int): Boolean {
      return binarySearchInRanges(codePoint, whitespaceRangeStarts, whitespaceRangeEnds)
    }

    fun isISOControl(codePoint: Int): Boolean {
      return codePoint in 0x00..0x1F || // 0000..001F    ; Common # Cc  [32] <control-0000>..<control-001F>
             codePoint in 0x7F..0x9F // 007F..009F    ; Common # Cc  [33] <control-007F>..<control-009F>
    }

    private val whitespaceRangeStarts = intArrayOf(0x0020, 0x00A0, 0x1680, 0x2000, 0x2028, 0x2029, 0x202F, 0x205F, 0x3000)
    private val whitespaceRangeEnds = intArrayOf(0x0020, 0x00A0, 0x1680, 0x200A, 0x2028, 0x2029, 0x202F, 0x205F, 0x3000)

    private val commonRangeStarts = intArrayOf(
      0x0000, 0x0020, 0x0021, 0x0024, 0x0025, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x0030, 0x003A, 0x003C, 0x003F, 0x005B,
      0x005C, 0x005D, 0x005E, 0x005F, 0x0060, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F, 0x00A0, 0x00A1, 0x00A2, 0x00A6, 0x00A7, 0x00A8, 0x00A9,
      0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B4, 0x00B5, 0x00B6, 0x00B8, 0x00B9, 0x00BB, 0x00BC, 0x00BF, 0x00D7,
      0x00F7, 0x02B9, 0x02C2, 0x02C6, 0x02D2, 0x02E5, 0x02EC, 0x02ED, 0x02EE, 0x02EF, 0x0374, 0x037E, 0x0385, 0x0387, 0x0605, 0x060C, 0x061B,
      0x061F, 0x0640, 0x06DD, 0x08E2, 0x0964, 0x0E3F, 0x0FD5, 0x10FB, 0x16EB, 0x1735, 0x1802, 0x1805, 0x1CD3, 0x1CE1, 0x1CE9, 0x1CEE, 0x1CF5,
      0x1CF7, 0x1CFA, 0x2000, 0x200B, 0x200E, 0x2010, 0x2016, 0x2018, 0x2019, 0x201A, 0x201B, 0x201D, 0x201E, 0x201F, 0x2020, 0x2028, 0x2029,
      0x202A, 0x202F, 0x2030, 0x2039, 0x203A, 0x203B, 0x203F, 0x2041, 0x2044, 0x2045, 0x2046, 0x2047, 0x2052, 0x2053, 0x2054, 0x2055, 0x205F,
      0x2060, 0x2066, 0x2070, 0x2074, 0x207A, 0x207D, 0x207E, 0x2080, 0x208A, 0x208D, 0x208E, 0x20A0, 0x2100, 0x2102, 0x2103, 0x2107, 0x2108,
      0x210A, 0x2114, 0x2115, 0x2116, 0x2118, 0x2119, 0x211E, 0x2124, 0x2125, 0x2127, 0x2128, 0x2129, 0x212C, 0x212E, 0x212F, 0x2133, 0x2135,
      0x2139, 0x213A, 0x213C, 0x2140, 0x2145, 0x214A, 0x214B, 0x214C, 0x214F, 0x2150, 0x2189, 0x218A, 0x2190, 0x2195, 0x219A, 0x219C, 0x21A0,
      0x21A1, 0x21A3, 0x21A4, 0x21A6, 0x21A7, 0x21AE, 0x21AF, 0x21CE, 0x21D0, 0x21D2, 0x21D3, 0x21D4, 0x21D5, 0x21F4, 0x2300, 0x2308, 0x2309,
      0x230A, 0x230B, 0x230C, 0x2320, 0x2322, 0x2329, 0x232A, 0x232B, 0x237C, 0x237D, 0x239B, 0x23B4, 0x23DC, 0x23E2, 0x2440, 0x2460, 0x249C,
      0x24EA, 0x2500, 0x25B7, 0x25B8, 0x25C1, 0x25C2, 0x25F8, 0x2600, 0x266F, 0x2670, 0x2768, 0x2769, 0x276A, 0x276B, 0x276C, 0x276D, 0x276E,
      0x276F, 0x2770, 0x2771, 0x2772, 0x2773, 0x2774, 0x2775, 0x2776, 0x2794, 0x27C0, 0x27C5, 0x27C6, 0x27C7, 0x27E6, 0x27E7, 0x27E8, 0x27E9,
      0x27EA, 0x27EB, 0x27EC, 0x27ED, 0x27EE, 0x27EF, 0x27F0, 0x2900, 0x2983, 0x2984, 0x2985, 0x2986, 0x2987, 0x2988, 0x2989, 0x298A, 0x298B,
      0x298C, 0x298D, 0x298E, 0x298F, 0x2990, 0x2991, 0x2992, 0x2993, 0x2994, 0x2995, 0x2996, 0x2997, 0x2998, 0x2999, 0x29D8, 0x29D9, 0x29DA,
      0x29DB, 0x29DC, 0x29FC, 0x29FD, 0x29FE, 0x2B00, 0x2B30, 0x2B45, 0x2B47, 0x2B4D, 0x2B76, 0x2B97, 0x2E00, 0x2E02, 0x2E03, 0x2E04, 0x2E05,
      0x2E06, 0x2E09, 0x2E0A, 0x2E0B, 0x2E0C, 0x2E0D, 0x2E0E, 0x2E17, 0x2E18, 0x2E1A, 0x2E1B, 0x2E1C, 0x2E1D, 0x2E1E, 0x2E20, 0x2E21, 0x2E22,
      0x2E23, 0x2E24, 0x2E25, 0x2E26, 0x2E27, 0x2E28, 0x2E29, 0x2E2A, 0x2E2F, 0x2E30, 0x2E3A, 0x2E3C, 0x2E40, 0x2E41, 0x2E42, 0x2E43, 0x2E50,
      0x2E52, 0x2E55, 0x2E56, 0x2E57, 0x2E58, 0x2E59, 0x2E5A, 0x2E5B, 0x2E5C, 0x2E5D, 0x2FF0, 0x3000, 0x3001, 0x3004, 0x3006, 0x3008, 0x3009,
      0x300A, 0x300B, 0x300C, 0x300D, 0x300E, 0x300F, 0x3010, 0x3011, 0x3012, 0x3014, 0x3015, 0x3016, 0x3017, 0x3018, 0x3019, 0x301A, 0x301B,
      0x301C, 0x301D, 0x301E, 0x3020, 0x3030, 0x3031, 0x3036, 0x303C, 0x303D, 0x303E, 0x309B, 0x30A0, 0x30FB, 0x30FC, 0x3190, 0x3192, 0x3196,
      0x31C0, 0x31EF, 0x3220, 0x322A, 0x3248, 0x3250, 0x3251, 0x327F, 0x3280, 0x328A, 0x32B1, 0x32C0, 0x32FF, 0x3358, 0x4DC0, 0xA700, 0xA717,
      0xA720, 0xA788, 0xA789, 0xA830, 0xA836, 0xA838, 0xA839, 0xA92E, 0xA9CF, 0xAB5B, 0xAB6A, 0xFD3E, 0xFD3F, 0xFE10, 0xFE17, 0xFE18, 0xFE19,
      0xFE30, 0xFE31, 0xFE33, 0xFE35, 0xFE36, 0xFE37, 0xFE38, 0xFE39, 0xFE3A, 0xFE3B, 0xFE3C, 0xFE3D, 0xFE3E, 0xFE3F, 0xFE40, 0xFE41, 0xFE42,
      0xFE43, 0xFE44, 0xFE45, 0xFE47, 0xFE48, 0xFE49, 0xFE4D, 0xFE50, 0xFE54, 0xFE58, 0xFE59, 0xFE5A, 0xFE5B, 0xFE5C, 0xFE5D, 0xFE5E, 0xFE5F,
      0xFE62, 0xFE63, 0xFE64, 0xFE68, 0xFE69, 0xFE6A, 0xFEFF, 0xFF01, 0xFF04, 0xFF05, 0xFF08, 0xFF09, 0xFF0A, 0xFF0B, 0xFF0C, 0xFF0D, 0xFF0E,
      0xFF10, 0xFF1A, 0xFF1C, 0xFF1F, 0xFF3B, 0xFF3C, 0xFF3D, 0xFF3E, 0xFF3F, 0xFF40, 0xFF5B, 0xFF5C, 0xFF5D, 0xFF5E, 0xFF5F, 0xFF60, 0xFF61,
      0xFF62, 0xFF63, 0xFF64, 0xFF70, 0xFF9E, 0xFFE0, 0xFFE2, 0xFFE3, 0xFFE4, 0xFFE5, 0xFFE8, 0xFFE9, 0xFFED, 0xFFF9, 0xFFFC, 0x10100, 0x10107,
      0x10137, 0x10190, 0x101D0, 0x102E1, 0x1BCA0, 0x1CC00, 0x1CCF0, 0x1CD00, 0x1CF50, 0x1D000, 0x1D100, 0x1D129, 0x1D165, 0x1D16A, 0x1D16D,
      0x1D173, 0x1D183, 0x1D18C, 0x1D1AE, 0x1D2C0, 0x1D2E0, 0x1D300, 0x1D360, 0x1D400, 0x1D456, 0x1D49E, 0x1D4A2, 0x1D4A5, 0x1D4A9, 0x1D4AE,
      0x1D4BB, 0x1D4BD, 0x1D4C5, 0x1D507, 0x1D50D, 0x1D516, 0x1D51E, 0x1D53B, 0x1D540, 0x1D546, 0x1D54A, 0x1D552, 0x1D6A8, 0x1D6C1, 0x1D6C2,
      0x1D6DB, 0x1D6DC, 0x1D6FB, 0x1D6FC, 0x1D715, 0x1D716, 0x1D735, 0x1D736, 0x1D74F, 0x1D750, 0x1D76F, 0x1D770, 0x1D789, 0x1D78A, 0x1D7A9,
      0x1D7AA, 0x1D7C3, 0x1D7C4, 0x1D7CE, 0x1EC71, 0x1ECAC, 0x1ECAD, 0x1ECB0, 0x1ECB1, 0x1ED01, 0x1ED2E, 0x1ED2F, 0x1F000, 0x1F030, 0x1F0A0,
      0x1F0B1, 0x1F0C1, 0x1F0D1, 0x1F100, 0x1F10D, 0x1F1E6, 0x1F201, 0x1F210, 0x1F240, 0x1F250, 0x1F260, 0x1F300, 0x1F3FB, 0x1F400, 0x1F6DC,
      0x1F6F0, 0x1F700, 0x1F77B, 0x1F7E0, 0x1F7F0, 0x1F800, 0x1F810, 0x1F850, 0x1F860, 0x1F890, 0x1F8B0, 0x1F8C0, 0x1F900, 0x1FA60, 0x1FA70,
      0x1FA80, 0x1FA8F, 0x1FACE, 0x1FADF, 0x1FAF0, 0x1FB00, 0x1FB94, 0x1FBF0, 0xE0001, 0xE0020
    )

    private val commonRangeEnds = intArrayOf(
      0x001F, 0x0020, 0x0023, 0x0024, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002F, 0x0039, 0x003B, 0x003E, 0x0040, 0x005B,
      0x005C, 0x005D, 0x005E, 0x005F, 0x0060, 0x007B, 0x007C, 0x007D, 0x007E, 0x009F, 0x00A0, 0x00A1, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9,
      0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B3, 0x00B4, 0x00B5, 0x00B7, 0x00B8, 0x00B9, 0x00BB, 0x00BE, 0x00BF, 0x00D7,
      0x00F7, 0x02C1, 0x02C5, 0x02D1, 0x02DF, 0x02E9, 0x02EC, 0x02ED, 0x02EE, 0x02FF, 0x0374, 0x037E, 0x0385, 0x0387, 0x0605, 0x060C, 0x061B,
      0x061F, 0x0640, 0x06DD, 0x08E2, 0x0965, 0x0E3F, 0x0FD8, 0x10FB, 0x16ED, 0x1736, 0x1803, 0x1805, 0x1CD3, 0x1CE1, 0x1CEC, 0x1CF3, 0x1CF6,
      0x1CF7, 0x1CFA, 0x200A, 0x200B, 0x200F, 0x2015, 0x2017, 0x2018, 0x2019, 0x201A, 0x201C, 0x201D, 0x201E, 0x201F, 0x2027, 0x2028, 0x2029,
      0x202E, 0x202F, 0x2038, 0x2039, 0x203A, 0x203E, 0x2040, 0x2043, 0x2044, 0x2045, 0x2046, 0x2051, 0x2052, 0x2053, 0x2054, 0x205E, 0x205F,
      0x2064, 0x206F, 0x2070, 0x2079, 0x207C, 0x207D, 0x207E, 0x2089, 0x208C, 0x208D, 0x208E, 0x20C0, 0x2101, 0x2102, 0x2106, 0x2107, 0x2109,
      0x2113, 0x2114, 0x2115, 0x2117, 0x2118, 0x211D, 0x2123, 0x2124, 0x2125, 0x2127, 0x2128, 0x2129, 0x212D, 0x212E, 0x2131, 0x2134, 0x2138,
      0x2139, 0x213B, 0x213F, 0x2144, 0x2149, 0x214A, 0x214B, 0x214D, 0x214F, 0x215F, 0x2189, 0x218B, 0x2194, 0x2199, 0x219B, 0x219F, 0x21A0,
      0x21A2, 0x21A3, 0x21A5, 0x21A6, 0x21AD, 0x21AE, 0x21CD, 0x21CF, 0x21D1, 0x21D2, 0x21D3, 0x21D4, 0x21F3, 0x22FF, 0x2307, 0x2308, 0x2309,
      0x230A, 0x230B, 0x231F, 0x2321, 0x2328, 0x2329, 0x232A, 0x237B, 0x237C, 0x239A, 0x23B3, 0x23DB, 0x23E1, 0x2429, 0x244A, 0x249B, 0x24E9,
      0x24FF, 0x25B6, 0x25B7, 0x25C0, 0x25C1, 0x25F7, 0x25FF, 0x266E, 0x266F, 0x2767, 0x2768, 0x2769, 0x276A, 0x276B, 0x276C, 0x276D, 0x276E,
      0x276F, 0x2770, 0x2771, 0x2772, 0x2773, 0x2774, 0x2775, 0x2793, 0x27BF, 0x27C4, 0x27C5, 0x27C6, 0x27E5, 0x27E6, 0x27E7, 0x27E8, 0x27E9,
      0x27EA, 0x27EB, 0x27EC, 0x27ED, 0x27EE, 0x27EF, 0x27FF, 0x2982, 0x2983, 0x2984, 0x2985, 0x2986, 0x2987, 0x2988, 0x2989, 0x298A, 0x298B,
      0x298C, 0x298D, 0x298E, 0x298F, 0x2990, 0x2991, 0x2992, 0x2993, 0x2994, 0x2995, 0x2996, 0x2997, 0x2998, 0x29D7, 0x29D8, 0x29D9, 0x29DA,
      0x29DB, 0x29FB, 0x29FC, 0x29FD, 0x2AFF, 0x2B2F, 0x2B44, 0x2B46, 0x2B4C, 0x2B73, 0x2B95, 0x2BFF, 0x2E01, 0x2E02, 0x2E03, 0x2E04, 0x2E05,
      0x2E08, 0x2E09, 0x2E0A, 0x2E0B, 0x2E0C, 0x2E0D, 0x2E16, 0x2E17, 0x2E19, 0x2E1A, 0x2E1B, 0x2E1C, 0x2E1D, 0x2E1F, 0x2E20, 0x2E21, 0x2E22,
      0x2E23, 0x2E24, 0x2E25, 0x2E26, 0x2E27, 0x2E28, 0x2E29, 0x2E2E, 0x2E2F, 0x2E39, 0x2E3B, 0x2E3F, 0x2E40, 0x2E41, 0x2E42, 0x2E4F, 0x2E51,
      0x2E54, 0x2E55, 0x2E56, 0x2E57, 0x2E58, 0x2E59, 0x2E5A, 0x2E5B, 0x2E5C, 0x2E5D, 0x2FFF, 0x3000, 0x3003, 0x3004, 0x3006, 0x3008, 0x3009,
      0x300A, 0x300B, 0x300C, 0x300D, 0x300E, 0x300F, 0x3010, 0x3011, 0x3013, 0x3014, 0x3015, 0x3016, 0x3017, 0x3018, 0x3019, 0x301A, 0x301B,
      0x301C, 0x301D, 0x301F, 0x3020, 0x3030, 0x3035, 0x3037, 0x303C, 0x303D, 0x303F, 0x309C, 0x30A0, 0x30FB, 0x30FC, 0x3191, 0x3195, 0x319F,
      0x31E5, 0x31EF, 0x3229, 0x3247, 0x324F, 0x3250, 0x325F, 0x327F, 0x3289, 0x32B0, 0x32BF, 0x32CF, 0x32FF, 0x33FF, 0x4DFF, 0xA716, 0xA71F,
      0xA721, 0xA788, 0xA78A, 0xA835, 0xA837, 0xA838, 0xA839, 0xA92E, 0xA9CF, 0xAB5B, 0xAB6B, 0xFD3E, 0xFD3F, 0xFE16, 0xFE17, 0xFE18, 0xFE19,
      0xFE30, 0xFE32, 0xFE34, 0xFE35, 0xFE36, 0xFE37, 0xFE38, 0xFE39, 0xFE3A, 0xFE3B, 0xFE3C, 0xFE3D, 0xFE3E, 0xFE3F, 0xFE40, 0xFE41, 0xFE42,
      0xFE43, 0xFE44, 0xFE46, 0xFE47, 0xFE48, 0xFE4C, 0xFE4F, 0xFE52, 0xFE57, 0xFE58, 0xFE59, 0xFE5A, 0xFE5B, 0xFE5C, 0xFE5D, 0xFE5E, 0xFE61,
      0xFE62, 0xFE63, 0xFE66, 0xFE68, 0xFE69, 0xFE6B, 0xFEFF, 0xFF03, 0xFF04, 0xFF07, 0xFF08, 0xFF09, 0xFF0A, 0xFF0B, 0xFF0C, 0xFF0D, 0xFF0F,
      0xFF19, 0xFF1B, 0xFF1E, 0xFF20, 0xFF3B, 0xFF3C, 0xFF3D, 0xFF3E, 0xFF3F, 0xFF40, 0xFF5B, 0xFF5C, 0xFF5D, 0xFF5E, 0xFF5F, 0xFF60, 0xFF61,
      0xFF62, 0xFF63, 0xFF65, 0xFF70, 0xFF9F, 0xFFE1, 0xFFE2, 0xFFE3, 0xFFE4, 0xFFE6, 0xFFE8, 0xFFEC, 0xFFEE, 0xFFFB, 0xFFFD, 0x10102, 0x10133,
      0x1013F, 0x1019C, 0x101FC, 0x102FB, 0x1BCA3, 0x1CCEF, 0x1CCF9, 0x1CEB3, 0x1CFC3, 0x1D0F5, 0x1D126, 0x1D164, 0x1D166, 0x1D16C, 0x1D172,
      0x1D17A, 0x1D184, 0x1D1A9, 0x1D1EA, 0x1D2D3, 0x1D2F3, 0x1D356, 0x1D378, 0x1D454, 0x1D49C, 0x1D49F, 0x1D4A2, 0x1D4A6, 0x1D4AC, 0x1D4B9,
      0x1D4BB, 0x1D4C3, 0x1D505, 0x1D50A, 0x1D514, 0x1D51C, 0x1D539, 0x1D53E, 0x1D544, 0x1D546, 0x1D550, 0x1D6A5, 0x1D6C0, 0x1D6C1, 0x1D6DA,
      0x1D6DB, 0x1D6FA, 0x1D6FB, 0x1D714, 0x1D715, 0x1D734, 0x1D735, 0x1D74E, 0x1D74F, 0x1D76E, 0x1D76F, 0x1D788, 0x1D789, 0x1D7A8, 0x1D7A9,
      0x1D7C2, 0x1D7C3, 0x1D7CB, 0x1D7FF, 0x1ECAB, 0x1ECAC, 0x1ECAF, 0x1ECB0, 0x1ECB4, 0x1ED2D, 0x1ED2E, 0x1ED3D, 0x1F02B, 0x1F093, 0x1F0AE,
      0x1F0BF, 0x1F0CF, 0x1F0F5, 0x1F10C, 0x1F1AD, 0x1F1FF, 0x1F202, 0x1F23B, 0x1F248, 0x1F251, 0x1F265, 0x1F3FA, 0x1F3FF, 0x1F6D7, 0x1F6EC,
      0x1F6FC, 0x1F776, 0x1F7D9, 0x1F7EB, 0x1F7F0, 0x1F80B, 0x1F847, 0x1F859, 0x1F887, 0x1F8AD, 0x1F8BB, 0x1F8C1, 0x1FA53, 0x1FA6D, 0x1FA7C,
      0x1FA89, 0x1FAC6, 0x1FADC, 0x1FAE9, 0x1FAF8, 0x1FB92, 0x1FBEF, 0x1FBF9, 0xE0001, 0xE007F
    )

    // Ranges extracted from https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt (PropList-16.0.0.txt, 2024-05-31, 18:09:48 GMT)

    private val ideographicRangeStarts = intArrayOf(
      0x3006, 0x3007, 0x3021, 0x3038, 0x3400, 0x4e00, 0xf900, 0xfa70, 0x16fe4, 0x17000, 0x18800, 0x18cff, 0x1b170, 0x20000, 0x2a700, 0x2b740,
      0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350,
    )

    private val ideographicRangeEnds = intArrayOf(
      0x3006, 0x3007, 0x3029, 0x303a, 0x4dbf, 0x9fff, 0xfa6d, 0xfad9, 0x16fe4, 0x187f7, 0x18cd5, 0x18d08, 0x1b2fb, 0x2a6df, 0x2b739, 0x2b81d,
      0x2cea1, 0x2ebe0, 0x2ee5d, 0x2fa1d, 0x3134a, 0x323af,
    )

    // Ranges extracted from https://www.unicode.org/Public/UCD/latest/ucd/Scripts.txt (Scripts-16.0.0.txt, 2024-04-30, 21:48:40 GMT)
    private val hiraganaScriptRangeStarts = intArrayOf(
      0x3041, 0x309d, 0x309f, 0x1b001, 0x1b132, 0x1b150, 0x1f200,
    )

    private val hiraganaScriptRangeEnds = intArrayOf(
      0x3096, 0x309e, 0x309f, 0x1b11f, 0x1b132, 0x1b152, 0x1f200,
    )

    private val katakanaScriptRangeStarts = intArrayOf(
      0x30a1, 0x30fd, 0x30ff, 0x31f0, 0x32d0, 0x3300, 0xff66, 0xff71, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b120, 0x1b155, 0x1b164,
    )
    private val katakanaScriptRangeEnds = intArrayOf(
      0x30fa, 0x30fe, 0x30ff, 0x31ff, 0x32fe, 0x3357, 0xff6f, 0xff9d, 0x1aff3, 0x1affb, 0x1affe, 0x1b000, 0x1b122, 0x1b155, 0x1b167,
    )

    fun isIdeographic(codepoint: Int): Boolean = binarySearchInRanges(codepoint, ideographicRangeStarts, ideographicRangeEnds)
    fun isKatakana(codepoint: Int): Boolean = binarySearchInRanges(codepoint, katakanaScriptRangeStarts, katakanaScriptRangeEnds)
    fun isHiragana(codepoint: Int): Boolean = binarySearchInRanges(codepoint, hiraganaScriptRangeStarts, hiraganaScriptRangeEnds)
    fun isCommonScript(codepoints: Int): Boolean = binarySearchInRanges(codepoints, commonRangeStarts, commonRangeEnds)

    fun toString(codepoint: Int): String {
      return CodePoints.toString(codepoint)
    }

    fun binarySearchInRanges(codepoint: Int, rangeStarts: IntArray, rangeEnds: IntArray): Boolean {
      val insertionPoint = rangeStarts.binarySearch(codepoint)
      return when {
        insertionPoint >= 0 -> true
        insertionPoint == -1 -> false
        else -> {
          codepoint <= rangeEnds[-(insertionPoint + 2)]
        }
      }
    }
  }
}

fun CharSequence.codepoints(offset: Int, direction: Direction = Direction.FORWARD): Iterator<Codepoint> =
  when (direction) {
    Direction.FORWARD -> iterator {
      var i = offset
      val len = length
      while (i < len) {
        val c1 = get(i++)
        if (c1.isHighSurrogate()) {
          if (i < len) {
            val c2 = get(i++)
            if (c2.isLowSurrogate()) {
              yield(Codepoint(CodePoints.toCodePoint(c1, c2)))
            }
          }
        }
        else {
          yield(Codepoint(c1.code))
        }
      }
    }
    Direction.BACKWARD -> iterator {
      var i = offset - 1
      while (i >= 0) {
        val c2 = get(i--)
        if (c2.isLowSurrogate()) {
          if (i >= 0) {
            val c1 = get(i--)
            if (c1.isHighSurrogate()) {
              yield(Codepoint(CodePoints.toCodePoint(c1, c2)))
            }
          }
        }
        else {
          yield(Codepoint(c2.code))
        }
      }
    }
  }

enum class Direction {
  FORWARD,
  BACKWARD,
}