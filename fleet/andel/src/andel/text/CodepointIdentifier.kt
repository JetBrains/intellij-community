// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package andel.text

/**
 * Ranges char codepoints which are both unicode identifier part and java identifier part (could be made two lists, but very long)
 * Each pair of numbers in the list represent the start and exclusive end of a range.
 *
 * May break on JVM version change, code to regenerate it (might need to tweak the first value if 0 true):
 * ```
 *   (Character.MIN_CODE_POINT..Character.MAX_CODE_POINT).forEach {
 *     val java = Character.isJavaIdentifierPart(it)
 *     val unicode = Character.isUnicodeIdentifierPart(it)
 *
 *     if (bothList.size % 2 == 0 == (java && unicode)) bothList.add(it)
 *     if (javaList.size % 2 == 0 == (java && !unicode)) javaList.add(it)
 *     if (startList.size % 2 == 0 == (unicode && !java)) startList.add(it)
 *   }
 * ```
 */
internal val eitherUnicodeOrJavaStartIdRanges = intArrayOf(
  0x0, 0x9, 0xE, 0x1C, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0x60, 0x61, 0x7B, 0x7F, 0xA0, 0xAA, 0xAB, 0xAD, 0xAE, 0xB5, 0xB6, 0xBA, 0xBB, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2C2, 0x2C6, 0x2D2, 0x2E0, 0x2E5, 0x2EC, 0x2ED, 0x2EE, 0x2EF, 0x300, 0x375, 0x376, 0x378, 0x37A, 0x37E, 0x37F, 0x380, 0x386, 0x387, 0x388, 0x38B, 0x38C, 0x38D, 0x38E, 0x3A2, 0x3A3, 0x3F6, 0x3F7, 0x482, 0x483, 0x488, 0x48A, 0x530, 0x531, 0x557, 0x559, 0x55A, 0x560, 0x589, 0x591, 0x5BE, 0x5BF, 0x5C0, 0x5C1, 0x5C3, 0x5C4, 0x5C6, 0x5C7, 0x5C8, 0x5D0, 0x5EB, 0x5EF, 0x5F3, 0x600, 0x606, 0x610, 0x61B, 0x61C, 0x61D, 0x620, 0x66A, 0x66E, 0x6D4, 0x6D5, 0x6DE, 0x6DF, 0x6E9, 0x6EA, 0x6FD, 0x6FF, 0x700, 0x70F, 0x74B, 0x74D, 0x7B2, 0x7C0, 0x7F6, 0x7FA, 0x7FB, 0x7FD, 0x7FE, 0x800, 0x82E, 0x840, 0x85C, 0x860, 0x86B, 0x8A0, 0x8B5, 0x8B6, 0x8C8, 0x8D3, 0x964, 0x966, 0x970, 0x971, 0x984, 0x985, 0x98D, 0x98F, 0x991, 0x993, 0x9A9, 0x9AA, 0x9B1, 0x9B2, 0x9B3, 0x9B6, 0x9BA, 0x9BC, 0x9C5, 0x9C7, 0x9C9, 0x9CB, 0x9CF, 0x9D7, 0x9D8, 0x9DC, 0x9DE, 0x9DF, 0x9E4, 0x9E6, 0x9F2, 0x9FC, 0x9FD, 0x9FE, 0x9FF, 0xA01, 0xA04, 0xA05, 0xA0B, 0xA0F, 0xA11, 0xA13, 0xA29, 0xA2A, 0xA31, 0xA32, 0xA34, 0xA35, 0xA37, 0xA38, 0xA3A, 0xA3C, 0xA3D, 0xA3E, 0xA43, 0xA47, 0xA49, 0xA4B, 0xA4E, 0xA51, 0xA52, 0xA59, 0xA5D, 0xA5E, 0xA5F, 0xA66, 0xA76, 0xA81, 0xA84, 0xA85, 0xA8E, 0xA8F, 0xA92, 0xA93, 0xAA9, 0xAAA, 0xAB1, 0xAB2, 0xAB4, 0xAB5, 0xABA, 0xABC, 0xAC6, 0xAC7, 0xACA, 0xACB, 0xACE, 0xAD0, 0xAD1, 0xAE0, 0xAE4, 0xAE6, 0xAF0, 0xAF9, 0xB00, 0xB01, 0xB04, 0xB05, 0xB0D, 0xB0F, 0xB11, 0xB13, 0xB29, 0xB2A, 0xB31, 0xB32, 0xB34, 0xB35, 0xB3A, 0xB3C, 0xB45, 0xB47, 0xB49, 0xB4B, 0xB4E, 0xB55, 0xB58, 0xB5C, 0xB5E, 0xB5F, 0xB64, 0xB66, 0xB70, 0xB71, 0xB72, 0xB82, 0xB84, 0xB85, 0xB8B, 0xB8E, 0xB91, 0xB92, 0xB96, 0xB99, 0xB9B, 0xB9C, 0xB9D, 0xB9E, 0xBA0, 0xBA3, 0xBA5, 0xBA8, 0xBAB, 0xBAE, 0xBBA, 0xBBE, 0xBC3, 0xBC6, 0xBC9, 0xBCA, 0xBCE, 0xBD0, 0xBD1, 0xBD7, 0xBD8, 0xBE6, 0xBF0, 0xC00, 0xC0D, 0xC0E, 0xC11, 0xC12, 0xC29, 0xC2A, 0xC3A, 0xC3D, 0xC45, 0xC46, 0xC49, 0xC4A, 0xC4E, 0xC55, 0xC57, 0xC58, 0xC5B, 0xC60, 0xC64, 0xC66, 0xC70, 0xC80, 0xC84, 0xC85, 0xC8D, 0xC8E, 0xC91, 0xC92, 0xCA9, 0xCAA, 0xCB4, 0xCB5, 0xCBA, 0xCBC, 0xCC5, 0xCC6, 0xCC9, 0xCCA, 0xCCE, 0xCD5, 0xCD7, 0xCDE, 0xCDF, 0xCE0, 0xCE4, 0xCE6, 0xCF0, 0xCF1, 0xCF3, 0xD00, 0xD0D, 0xD0E, 0xD11, 0xD12, 0xD45, 0xD46, 0xD49, 0xD4A, 0xD4F, 0xD54, 0xD58, 0xD5F, 0xD64, 0xD66, 0xD70, 0xD7A, 0xD80, 0xD81, 0xD84, 0xD85, 0xD97, 0xD9A, 0xDB2, 0xDB3, 0xDBC, 0xDBD, 0xDBE, 0xDC0, 0xDC7, 0xDCA, 0xDCB, 0xDCF, 0xDD5, 0xDD6, 0xDD7, 0xDD8, 0xDE0, 0xDE6, 0xDF0, 0xDF2, 0xDF4, 0xE01, 0xE3B, 0xE40, 0xE4F, 0xE50, 0xE5A, 0xE81, 0xE83, 0xE84, 0xE85, 0xE86, 0xE8B, 0xE8C, 0xEA4, 0xEA5, 0xEA6, 0xEA7, 0xEBE, 0xEC0, 0xEC5, 0xEC6, 0xEC7, 0xEC8, 0xECE, 0xED0, 0xEDA, 0xEDC, 0xEE0, 0xF00, 0xF01, 0xF18, 0xF1A, 0xF20, 0xF2A, 0xF35, 0xF36, 0xF37, 0xF38, 0xF39, 0xF3A, 0xF3E, 0xF48, 0xF49, 0xF6D, 0xF71, 0xF85, 0xF86, 0xF98, 0xF99, 0xFBD, 0xFC6, 0xFC7, 0x1000, 0x104A, 0x1050, 0x109E, 0x10A0, 0x10C6, 0x10C7, 0x10C8, 0x10CD, 0x10CE, 0x10D0, 0x10FB, 0x10FC, 0x1249, 0x124A, 0x124E, 0x1250, 0x1257, 0x1258, 0x1259, 0x125A, 0x125E, 0x1260, 0x1289, 0x128A, 0x128E, 0x1290, 0x12B1, 0x12B2, 0x12B6, 0x12B8, 0x12BF, 0x12C0, 0x12C1, 0x12C2, 0x12C6, 0x12C8, 0x12D7, 0x12D8, 0x1311, 0x1312, 0x1316, 0x1318, 0x135B, 0x135D, 0x1360, 0x1380, 0x1390, 0x13A0, 0x13F6, 0x13F8, 0x13FE, 0x1401, 0x166D, 0x166F, 0x1680, 0x1681, 0x169B, 0x16A0, 0x16EB, 0x16EE, 0x16F9, 0x1700, 0x170D, 0x170E, 0x1715, 0x1720, 0x1735, 0x1740, 0x1754, 0x1760, 0x176D, 0x176E, 0x1771, 0x1772, 0x1774, 0x1780, 0x17D4, 0x17D7, 0x17D8, 0x17DC, 0x17DE, 0x17E0, 0x17EA, 0x180B, 0x180F, 0x1810, 0x181A, 0x1820, 0x1879, 0x1880, 0x18AB, 0x18B0, 0x18F6, 0x1900, 0x191F, 0x1920, 0x192C, 0x1930, 0x193C, 0x1946, 0x196E, 0x1970, 0x1975, 0x1980, 0x19AC, 0x19B0, 0x19CA, 0x19D0, 0x19DA, 0x1A00, 0x1A1C, 0x1A20, 0x1A5F, 0x1A60, 0x1A7D, 0x1A7F, 0x1A8A, 0x1A90, 0x1A9A, 0x1AA7, 0x1AA8, 0x1AB0, 0x1ABE, 0x1ABF, 0x1AC1, 0x1B00, 0x1B4C, 0x1B50, 0x1B5A, 0x1B6B, 0x1B74, 0x1B80, 0x1BF4, 0x1C00, 0x1C38, 0x1C40, 0x1C4A, 0x1C4D, 0x1C7E, 0x1C80, 0x1C89, 0x1C90, 0x1CBB, 0x1CBD, 0x1CC0, 0x1CD0, 0x1CD3, 0x1CD4, 0x1CFB, 0x1D00, 0x1DFA, 0x1DFB, 0x1F16, 0x1F18, 0x1F1E, 0x1F20, 0x1F46, 0x1F48, 0x1F4E, 0x1F50, 0x1F58, 0x1F59, 0x1F5A, 0x1F5B, 0x1F5C, 0x1F5D, 0x1F5E, 0x1F5F, 0x1F7E, 0x1F80, 0x1FB5, 0x1FB6, 0x1FBD, 0x1FBE, 0x1FBF, 0x1FC2, 0x1FC5, 0x1FC6, 0x1FCD, 0x1FD0, 0x1FD4, 0x1FD6, 0x1FDC, 0x1FE0, 0x1FED, 0x1FF2, 0x1FF5, 0x1FF6, 0x1FFD, 0x200B, 0x2010, 0x202A, 0x202F, 0x203F, 0x2041, 0x2054, 0x2055, 0x2060, 0x2065, 0x2066, 0x2070, 0x2071, 0x2072, 0x207F, 0x2080, 0x2090, 0x209D, 0x20D0, 0x20DD, 0x20E1, 0x20E2, 0x20E5, 0x20F1, 0x2102, 0x2103, 0x2107, 0x2108, 0x210A, 0x2114, 0x2115, 0x2116, 0x2119, 0x211E, 0x2124, 0x2125, 0x2126, 0x2127, 0x2128, 0x2129, 0x212A, 0x212E, 0x212F, 0x213A, 0x213C, 0x2140, 0x2145, 0x214A, 0x214E, 0x214F, 0x2160, 0x2189, 0x2C00, 0x2C2F, 0x2C30, 0x2C5F, 0x2C60, 0x2CE5, 0x2CEB, 0x2CF4, 0x2D00, 0x2D26, 0x2D27, 0x2D28, 0x2D2D, 0x2D2E, 0x2D30, 0x2D68, 0x2D6F, 0x2D70, 0x2D7F, 0x2D97, 0x2DA0, 0x2DA7, 0x2DA8, 0x2DAF, 0x2DB0, 0x2DB7, 0x2DB8, 0x2DBF, 0x2DC0, 0x2DC7, 0x2DC8, 0x2DCF, 0x2DD0, 0x2DD7, 0x2DD8, 0x2DDF, 0x2DE0, 0x2E00, 0x2E2F, 0x2E30, 0x3005, 0x3008, 0x3021, 0x3030, 0x3031, 0x3036, 0x3038, 0x303D, 0x3041, 0x3097, 0x3099, 0x309B, 0x309D, 0x30A0, 0x30A1, 0x30FB, 0x30FC, 0x3100, 0x3105, 0x3130, 0x3131, 0x318F, 0x31A0, 0x31C0, 0x31F0, 0x3200, 0x3400, 0x4DC0, 0x4E00, 0x9FFD, 0xA000, 0xA48D, 0xA4D0, 0xA4FE, 0xA500, 0xA60D, 0xA610, 0xA62C, 0xA640, 0xA670, 0xA674, 0xA67E, 0xA67F, 0xA6F2, 0xA717, 0xA720, 0xA722, 0xA789, 0xA78B, 0xA7C0, 0xA7C2, 0xA7CB, 0xA7F5, 0xA828, 0xA82C, 0xA82D, 0xA840, 0xA874, 0xA880, 0xA8C6, 0xA8D0, 0xA8DA, 0xA8E0, 0xA8F8, 0xA8FB, 0xA8FC, 0xA8FD, 0xA92E, 0xA930, 0xA954, 0xA960, 0xA97D, 0xA980, 0xA9C1, 0xA9CF, 0xA9DA, 0xA9E0, 0xA9FF, 0xAA00, 0xAA37, 0xAA40, 0xAA4E, 0xAA50, 0xAA5A, 0xAA60, 0xAA77, 0xAA7A, 0xAAC3, 0xAADB, 0xAADE, 0xAAE0, 0xAAF0, 0xAAF2, 0xAAF7, 0xAB01, 0xAB07, 0xAB09, 0xAB0F, 0xAB11, 0xAB17, 0xAB20, 0xAB27, 0xAB28, 0xAB2F, 0xAB30, 0xAB5B, 0xAB5C, 0xAB6A, 0xAB70, 0xABEB, 0xABEC, 0xABEE, 0xABF0, 0xABFA, 0xAC00, 0xD7A4, 0xD7B0, 0xD7C7, 0xD7CB, 0xD7FC, 0xF900, 0xFA6E, 0xFA70, 0xFADA, 0xFB00, 0xFB07, 0xFB13, 0xFB18, 0xFB1D, 0xFB29, 0xFB2A, 0xFB37, 0xFB38, 0xFB3D, 0xFB3E, 0xFB3F, 0xFB40, 0xFB42, 0xFB43, 0xFB45, 0xFB46, 0xFBB2, 0xFBD3, 0xFD3E, 0xFD50, 0xFD90, 0xFD92, 0xFDC8, 0xFDF0, 0xFDFC, 0xFE00, 0xFE10, 0xFE20, 0xFE30, 0xFE33, 0xFE35, 0xFE4D, 0xFE50, 0xFE70, 0xFE75, 0xFE76, 0xFEFD, 0xFEFF, 0xFF00, 0xFF10, 0xFF1A, 0xFF21, 0xFF3B, 0xFF3F, 0xFF40, 0xFF41, 0xFF5B, 0xFF66, 0xFFBF, 0xFFC2, 0xFFC8, 0xFFCA, 0xFFD0, 0xFFD2, 0xFFD8, 0xFFDA, 0xFFDD, 0xFFF9, 0xFFFC, 0x10000, 0x1000C, 0x1000D, 0x10027, 0x10028, 0x1003B, 0x1003C, 0x1003E, 0x1003F, 0x1004E, 0x10050, 0x1005E, 0x10080, 0x100FB, 0x10140, 0x10175, 0x101FD, 0x101FE, 0x10280, 0x1029D, 0x102A0, 0x102D1, 0x102E0, 0x102E1, 0x10300, 0x10320, 0x1032D, 0x1034B, 0x10350, 0x1037B, 0x10380, 0x1039E, 0x103A0, 0x103C4, 0x103C8, 0x103D0, 0x103D1, 0x103D6, 0x10400, 0x1049E, 0x104A0, 0x104AA, 0x104B0, 0x104D4, 0x104D8, 0x104FC, 0x10500, 0x10528, 0x10530, 0x10564, 0x10600, 0x10737, 0x10740, 0x10756, 0x10760, 0x10768, 0x10800, 0x10806, 0x10808, 0x10809, 0x1080A, 0x10836, 0x10837, 0x10839, 0x1083C, 0x1083D, 0x1083F, 0x10856, 0x10860, 0x10877, 0x10880, 0x1089F, 0x108E0, 0x108F3, 0x108F4, 0x108F6, 0x10900, 0x10916, 0x10920, 0x1093A, 0x10980, 0x109B8, 0x109BE, 0x109C0, 0x10A00, 0x10A04, 0x10A05, 0x10A07, 0x10A0C, 0x10A14, 0x10A15, 0x10A18, 0x10A19, 0x10A36, 0x10A38, 0x10A3B, 0x10A3F, 0x10A40, 0x10A60, 0x10A7D, 0x10A80, 0x10A9D, 0x10AC0, 0x10AC8, 0x10AC9, 0x10AE7, 0x10B00, 0x10B36, 0x10B40, 0x10B56, 0x10B60, 0x10B73, 0x10B80, 0x10B92, 0x10C00, 0x10C49, 0x10C80, 0x10CB3, 0x10CC0, 0x10CF3, 0x10D00, 0x10D28, 0x10D30, 0x10D3A, 0x10E80, 0x10EAA, 0x10EAB, 0x10EAD, 0x10EB0, 0x10EB2, 0x10F00, 0x10F1D, 0x10F27, 0x10F28, 0x10F30, 0x10F51, 0x10FB0, 0x10FC5, 0x10FE0, 0x10FF7, 0x11000, 0x11047, 0x11066, 0x11070, 0x1107F, 0x110BB, 0x110BD, 0x110BE, 0x110CD, 0x110CE, 0x110D0, 0x110E9, 0x110F0, 0x110FA, 0x11100, 0x11135, 0x11136, 0x11140, 0x11144, 0x11148, 0x11150, 0x11174, 0x11176, 0x11177, 0x11180, 0x111C5, 0x111C9, 0x111CD, 0x111CE, 0x111DB, 0x111DC, 0x111DD, 0x11200, 0x11212, 0x11213, 0x11238, 0x1123E, 0x1123F, 0x11280, 0x11287, 0x11288, 0x11289, 0x1128A, 0x1128E, 0x1128F, 0x1129E, 0x1129F, 0x112A9, 0x112B0, 0x112EB, 0x112F0, 0x112FA, 0x11300, 0x11304, 0x11305, 0x1130D, 0x1130F, 0x11311, 0x11313, 0x11329, 0x1132A, 0x11331, 0x11332, 0x11334, 0x11335, 0x1133A, 0x1133B, 0x11345, 0x11347, 0x11349, 0x1134B, 0x1134E, 0x11350, 0x11351, 0x11357, 0x11358, 0x1135D, 0x11364, 0x11366, 0x1136D, 0x11370, 0x11375, 0x11400, 0x1144B, 0x11450, 0x1145A, 0x1145E, 0x11462, 0x11480, 0x114C6, 0x114C7, 0x114C8, 0x114D0, 0x114DA, 0x11580, 0x115B6, 0x115B8, 0x115C1, 0x115D8, 0x115DE, 0x11600, 0x11641, 0x11644, 0x11645, 0x11650, 0x1165A, 0x11680, 0x116B9, 0x116C0, 0x116CA, 0x11700, 0x1171B, 0x1171D, 0x1172C, 0x11730, 0x1173A, 0x11800, 0x1183B, 0x118A0, 0x118EA, 0x118FF, 0x11907, 0x11909, 0x1190A, 0x1190C, 0x11914, 0x11915, 0x11917, 0x11918, 0x11936, 0x11937, 0x11939, 0x1193B, 0x11944, 0x11950, 0x1195A, 0x119A0, 0x119A8, 0x119AA, 0x119D8, 0x119DA, 0x119E2, 0x119E3, 0x119E5, 0x11A00, 0x11A3F, 0x11A47, 0x11A48, 0x11A50, 0x11A9A, 0x11A9D, 0x11A9E, 0x11AC0, 0x11AF9, 0x11C00, 0x11C09, 0x11C0A, 0x11C37, 0x11C38, 0x11C41, 0x11C50, 0x11C5A, 0x11C72, 0x11C90, 0x11C92, 0x11CA8, 0x11CA9, 0x11CB7, 0x11D00, 0x11D07, 0x11D08, 0x11D0A, 0x11D0B, 0x11D37, 0x11D3A, 0x11D3B, 0x11D3C, 0x11D3E, 0x11D3F, 0x11D48, 0x11D50, 0x11D5A, 0x11D60, 0x11D66, 0x11D67, 0x11D69, 0x11D6A, 0x11D8F, 0x11D90, 0x11D92, 0x11D93, 0x11D99, 0x11DA0, 0x11DAA, 0x11EE0, 0x11EF7, 0x11FB0, 0x11FB1, 0x12000, 0x1239A, 0x12400, 0x1246F, 0x12480, 0x12544, 0x13000, 0x1342F, 0x13430, 0x13439, 0x14400, 0x14647, 0x16800, 0x16A39, 0x16A40, 0x16A5F, 0x16A60, 0x16A6A, 0x16AD0, 0x16AEE, 0x16AF0, 0x16AF5, 0x16B00, 0x16B37, 0x16B40, 0x16B44, 0x16B50, 0x16B5A, 0x16B63, 0x16B78, 0x16B7D, 0x16B90, 0x16E40, 0x16E80, 0x16F00, 0x16F4B, 0x16F4F, 0x16F88, 0x16F8F, 0x16FA0, 0x16FE0, 0x16FE2, 0x16FE3, 0x16FE5, 0x16FF0, 0x16FF2, 0x17000, 0x187F8, 0x18800, 0x18CD6, 0x18D00, 0x18D09, 0x1B000, 0x1B11F, 0x1B150, 0x1B153, 0x1B164, 0x1B168, 0x1B170, 0x1B2FC, 0x1BC00, 0x1BC6B, 0x1BC70, 0x1BC7D, 0x1BC80, 0x1BC89, 0x1BC90, 0x1BC9A, 0x1BC9D, 0x1BC9F, 0x1BCA0, 0x1BCA4, 0x1D165, 0x1D16A, 0x1D16D, 0x1D183, 0x1D185, 0x1D18C, 0x1D1AA, 0x1D1AE, 0x1D242, 0x1D245, 0x1D400, 0x1D455, 0x1D456, 0x1D49D, 0x1D49E, 0x1D4A0, 0x1D4A2, 0x1D4A3, 0x1D4A5, 0x1D4A7, 0x1D4A9, 0x1D4AD, 0x1D4AE, 0x1D4BA, 0x1D4BB, 0x1D4BC, 0x1D4BD, 0x1D4C4, 0x1D4C5, 0x1D506, 0x1D507, 0x1D50B, 0x1D50D, 0x1D515, 0x1D516, 0x1D51D, 0x1D51E, 0x1D53A, 0x1D53B, 0x1D53F, 0x1D540, 0x1D545, 0x1D546, 0x1D547, 0x1D54A, 0x1D551, 0x1D552, 0x1D6A6, 0x1D6A8, 0x1D6C1, 0x1D6C2, 0x1D6DB, 0x1D6DC, 0x1D6FB, 0x1D6FC, 0x1D715, 0x1D716, 0x1D735, 0x1D736, 0x1D74F, 0x1D750, 0x1D76F, 0x1D770, 0x1D789, 0x1D78A, 0x1D7A9, 0x1D7AA, 0x1D7C3, 0x1D7C4, 0x1D7CC, 0x1D7CE, 0x1D800, 0x1DA00, 0x1DA37, 0x1DA3B, 0x1DA6D, 0x1DA75, 0x1DA76, 0x1DA84, 0x1DA85, 0x1DA9B, 0x1DAA0, 0x1DAA1, 0x1DAB0, 0x1E000, 0x1E007, 0x1E008, 0x1E019, 0x1E01B, 0x1E022, 0x1E023, 0x1E025, 0x1E026, 0x1E02B, 0x1E100, 0x1E12D, 0x1E130, 0x1E13E, 0x1E140, 0x1E14A, 0x1E14E, 0x1E14F, 0x1E2C0, 0x1E2FA, 0x1E800, 0x1E8C5, 0x1E8D0, 0x1E8D7, 0x1E900, 0x1E94C, 0x1E950, 0x1E95A, 0x1EE00, 0x1EE04, 0x1EE05, 0x1EE20, 0x1EE21, 0x1EE23, 0x1EE24, 0x1EE25, 0x1EE27, 0x1EE28, 0x1EE29, 0x1EE33, 0x1EE34, 0x1EE38, 0x1EE39, 0x1EE3A, 0x1EE3B, 0x1EE3C, 0x1EE42, 0x1EE43, 0x1EE47, 0x1EE48, 0x1EE49, 0x1EE4A, 0x1EE4B, 0x1EE4C, 0x1EE4D, 0x1EE50, 0x1EE51, 0x1EE53, 0x1EE54, 0x1EE55, 0x1EE57, 0x1EE58, 0x1EE59, 0x1EE5A, 0x1EE5B, 0x1EE5C, 0x1EE5D, 0x1EE5E, 0x1EE5F, 0x1EE60, 0x1EE61, 0x1EE63, 0x1EE64, 0x1EE65, 0x1EE67, 0x1EE6B, 0x1EE6C, 0x1EE73, 0x1EE74, 0x1EE78, 0x1EE79, 0x1EE7D, 0x1EE7E, 0x1EE7F, 0x1EE80, 0x1EE8A, 0x1EE8B, 0x1EE9C, 0x1EEA1, 0x1EEA4, 0x1EEA5, 0x1EEAA, 0x1EEAB, 0x1EEBC, 0x1FBF0, 0x1FBFA, 0x20000, 0x2A6DE, 0x2A700, 0x2B735, 0x2B740, 0x2B81E, 0x2B820, 0x2CEA2, 0x2CEB0, 0x2EBE1, 0x2F800, 0x2FA1E, 0x30000, 0x3134B, 0xE0001, 0xE0002, 0xE0020, 0xE0080, 0xE0100, 0xE01F0
)

internal val javaStartIdRanges = intArrayOf(
  0x24, 0x25, 0xA2, 0xA6, 0x58F, 0x590, 0x60B, 0x60C, 0x7FE, 0x800, 0x9F2, 0x9F4, 0x9FB, 0x9FC, 0xAF1, 0xAF2,
  0xBF9, 0xBFA, 0xE3F, 0xE40, 0x17DB, 0x17DC, 0x20A0, 0x20C0, 0xA838, 0xA839, 0xFDFC, 0xFDFD, 0xFE69, 0xFE6A,
  0xFF04, 0xFF05, 0xFFE0, 0xFFE2, 0xFFE5, 0xFFE7, 0x11FDD, 0x11FE1, 0x1E2FF, 0x1E300, 0x1ECB0, 0x1ECB1
)

internal val unicodeIdRanges = intArrayOf(
  0xB7, 0xB8, 0x387, 0x388, 0x1369, 0x1372, 0x19DA, 0x19DB, 0x2118, 0x2119, 0x212E, 0x212F, 0x309B, 0x309D
)

internal fun isTrueBasedOnRange(index: Int, ranges: IntArray): Boolean {
  val part = ranges.binarySearch(index)
  val startOfRange = when {
    part >= 0 -> part
    else -> -part
  }

  // If the preceding number is the start of a range (even numbers) -> in range
  return startOfRange % 2 == 0
}
