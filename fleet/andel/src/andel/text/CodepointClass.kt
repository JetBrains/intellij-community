// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package andel.text

private const val SEPARATORS = "`~!@#\$%^&*()-=+[{]}\\|;:'\",.<>/?"
private val maxSeparatorCode = SEPARATORS.maxBy { it.code }.code
private val separatorCodes = BooleanArray(maxSeparatorCode + 1).apply {
  SEPARATORS.forEach { this[it.code] = true }
}

enum class CodepointClass {
  CARET, SEPARATOR, NEWLINE, SPACE, UNDERSCORE, UPPERCASE, LOWERCASE;

  fun isWhiteSpace(): Boolean {
    return this == SPACE || this == NEWLINE
  }
}

fun codepointClass(codepoint: Int): CodepointClass =
  when {
    codepoint == '\n'.code -> CodepointClass.NEWLINE
    codepoint == '\r'.code -> CodepointClass.NEWLINE
    codepoint == '_'.code -> CodepointClass.UNDERSCORE
    codepoint <= maxSeparatorCode && separatorCodes[codepoint] -> CodepointClass.SEPARATOR
    isWhitespace(codepoint) -> CodepointClass.SPACE
    isUpperCase(codepoint) -> CodepointClass.UPPERCASE
    else -> CodepointClass.LOWERCASE // treat all lowercase and unicode symbols as lowercase
  }

//todo this is wrong
internal fun charGeomLength(char: Char): Float {
  return when {
    char == '\n' -> 0f
    char == '\r' -> 0f
    char == '\t' -> 4f
    char.isLowSurrogate() -> 0f
    isFullWidth(char.code) -> 1.65f
    else -> 1f
  }
}

// Code points are derived from:
// https://unicode.org/Public/UNIDATA/PropList.txt
fun isWhitespace(codepoint: Int): Boolean {
  return codepoint in 0x0009..0x000d // <control-0009>..<control-000D>
         || codepoint == 0x0020 // SPACE
         || codepoint == 0x0085 // <control-0085>
         || codepoint == 0x00a0 // NO-BREAK SPACE
         || codepoint > 0x1000 &&
         (codepoint == 0x1680 // OGHAM SPACE MARK
          || codepoint in 0x2000..0x200a // EN QUAD..HAIR SPACE
          || codepoint == 0x2028 // LINE SEPARATOR
          || codepoint == 0x2029 // PARAGRAPH SEPARATOR
          || codepoint == 0x202f // NARROW NO-BREAK SPACE
          || codepoint == 0x205f // MEDIUM MATHEMATICAL SPACE
          || codepoint == 0x3000) // IDEOGRAPHIC SPACE
}

fun isUpperCase(codepoint: Int): Boolean {
  // fast path
  if (codepoint in 'A'.code..'Z'.code) {
    return true
  }
  if (codepoint < '\u0080'.code) {
    return false
  }
  // proper check
  return isLuCategory(codepoint) || isOtherUppercase(codepoint)
}

private fun isLuCategory(codepoint: Int): Boolean {
  val insertionPoint = upperCaseRangeStarts.binarySearch(codepoint)
  return when {
    insertionPoint >= 0 -> true
    insertionPoint == -1 -> false
    else -> {
      codepoint <= upperCaseRangeEnds[-(insertionPoint + 2)]
    }
  }
}

// Code points are derived from:
// https://unicode.org/Public/UNIDATA/PropList.txt
private fun isOtherUppercase(codepoint: Int): Boolean {
  return codepoint in 0x2160..0x216f // ROMAN NUMERAL ONE..ROMAN NUMERAL ONE THOUSAND
         || codepoint in 0x24b6..0x24cf // CIRCLED LATIN CAPITAL LETTER A..CIRCLED LATIN CAPITAL LETTER Z
         || codepoint in 0x1f130..0x1f149 // SQUARED LATIN CAPITAL LETTER A..SQUARED LATIN CAPITAL LETTER Z
         || codepoint in 0x1f150..0x1f169 // NEGATIVE CIRCLED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z
         || codepoint in 0x1f170..0x1f189 // NEGATIVE SQUARED LATIN CAPITAL LETTER A..NEGATIVE SQUARED LATIN CAPITAL LETTER Z
}

// Code points are derived from:
// https://unicode.org/Public/UNIDATA/EastAsianWidth.txt
fun isFullWidth(codePoint: Int): Boolean {
  return codePoint >= 0x1100 && (
    codePoint <= 0x115F || // Hangul Jamo
    codePoint == 0x2329 || // LEFT-POINTING ANGLE BRACKET
    codePoint == 0x232A || // RIGHT-POINTING ANGLE BRACKET
    // CJK Radicals Supplement .. Enclosed CJK Letters and Months
    (codePoint in 0x2E80..0x3247 && codePoint != 0x303F) ||
    // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
    (codePoint in 0x3250..0x4DBF) ||
    // CJK Unified Ideographs .. Yi Radicals
    (codePoint in 0x4E00..0xA4C6) ||
    // Hangul Jamo Extended-A
    (codePoint in 0xA960..0xA97C) ||
    // Hangul Syllables
    (codePoint in 0xAC00..0xD7A3) ||
    // CJK Compatibility Ideographs
    (codePoint in 0xF900..0xFAFF) ||
    // Vertical Forms
    (codePoint in 0xFE10..0xFE19) ||
    // CJK Compatibility Forms .. Small Form Variants
    (codePoint in 0xFE30..0xFE6B) ||
    // Halfwidth and Fullwidth Forms
    (codePoint in 0xFF01..0xFF60) ||
    (codePoint in 0xFFE0..0xFFE6) ||
    // Kana Supplement
    (codePoint in 0x1B000..0x1B001) ||
    // Enclosed Ideographic Supplement
    (codePoint in 0x1F200..0x1F251) ||
    // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
    (codePoint in 0x20000..0x3FFFD))
}

fun isEmoji(codePoint: Int): Boolean {
  return (codePoint > 0x2600 &&
          (codePoint in 0x1F600..0x1F64F) || // Emoticons
          (codePoint in 0x1F300..0x1F5FF) || // Misc Symbols and Pictographs
          (codePoint in 0x1F680..0x1F6FF) || // Transport and Map
          (codePoint in 0x2600..0x26FF) ||   // Misc symbols
          // we are trying to copy alacrity behaviour here 
//          (codePoint in 0x2700..0x27BF) ||   // Dingbats
          (codePoint in 0xFE00..0xFE0F) ||   // Variation Selectors
          (codePoint in 0x1F900..0x1F9FF) || // Supplemental Symbols and Pictographs
          (codePoint in 0x1F1E6..0x1F1FF))   // Flags
}

fun isDoubleWidthCharacter(codePoint: Int, ambiguousIsDWC: Boolean = false): Boolean {
  return if (codePoint <= 0xa0 || codePoint > 0x452 && codePoint < 0x1100) {
    false
  }
  else mk_wcwidth(codePoint, ambiguousIsDWC) == 2
}

// The following code and data in converted from the https://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
// which can be treated a standard way to determine the width of a character


// The following code and data in converted from the https://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
// which can be treated a standard way to determine the width of a character
private val COMBINING = arrayOf(charArrayOf(0x0300.toChar(), 0x036F.toChar()), charArrayOf(0x0483.toChar(), 0x0486.toChar()),
                                charArrayOf(0x0488.toChar(), 0x0489.toChar()), charArrayOf(0x0591.toChar(), 0x05BD.toChar()),
                                charArrayOf(0x05BF.toChar(), 0x05BF.toChar()), charArrayOf(0x05C1.toChar(), 0x05C2.toChar()),
                                charArrayOf(0x05C4.toChar(), 0x05C5.toChar()), charArrayOf(0x05C7.toChar(), 0x05C7.toChar()),
                                charArrayOf(0x0600.toChar(), 0x0603.toChar()), charArrayOf(0x0610.toChar(), 0x0615.toChar()),
                                charArrayOf(0x064B.toChar(), 0x065E.toChar()), charArrayOf(0x0670.toChar(), 0x0670.toChar()),
                                charArrayOf(0x06D6.toChar(), 0x06E4.toChar()), charArrayOf(0x06E7.toChar(), 0x06E8.toChar()),
                                charArrayOf(0x06EA.toChar(), 0x06ED.toChar()), charArrayOf(0x070F.toChar(), 0x070F.toChar()),
                                charArrayOf(0x0711.toChar(), 0x0711.toChar()), charArrayOf(0x0730.toChar(), 0x074A.toChar()),
                                charArrayOf(0x07A6.toChar(), 0x07B0.toChar()), charArrayOf(0x07EB.toChar(), 0x07F3.toChar()),
                                charArrayOf(0x0901.toChar(), 0x0902.toChar()), charArrayOf(0x093C.toChar(), 0x093C.toChar()),
                                charArrayOf(0x0941.toChar(), 0x0948.toChar()), charArrayOf(0x094D.toChar(), 0x094D.toChar()),
                                charArrayOf(0x0951.toChar(), 0x0954.toChar()), charArrayOf(0x0962.toChar(), 0x0963.toChar()),
                                charArrayOf(0x0981.toChar(), 0x0981.toChar()), charArrayOf(0x09BC.toChar(), 0x09BC.toChar()),
                                charArrayOf(0x09C1.toChar(), 0x09C4.toChar()), charArrayOf(0x09CD.toChar(), 0x09CD.toChar()),
                                charArrayOf(0x09E2.toChar(), 0x09E3.toChar()), charArrayOf(0x0A01.toChar(), 0x0A02.toChar()),
                                charArrayOf(0x0A3C.toChar(), 0x0A3C.toChar()), charArrayOf(0x0A41.toChar(), 0x0A42.toChar()),
                                charArrayOf(0x0A47.toChar(), 0x0A48.toChar()), charArrayOf(0x0A4B.toChar(), 0x0A4D.toChar()),
                                charArrayOf(0x0A70.toChar(), 0x0A71.toChar()), charArrayOf(0x0A81.toChar(), 0x0A82.toChar()),
                                charArrayOf(0x0ABC.toChar(), 0x0ABC.toChar()), charArrayOf(0x0AC1.toChar(), 0x0AC5.toChar()),
                                charArrayOf(0x0AC7.toChar(), 0x0AC8.toChar()), charArrayOf(0x0ACD.toChar(), 0x0ACD.toChar()),
                                charArrayOf(0x0AE2.toChar(), 0x0AE3.toChar()), charArrayOf(0x0B01.toChar(), 0x0B01.toChar()),
                                charArrayOf(0x0B3C.toChar(), 0x0B3C.toChar()), charArrayOf(0x0B3F.toChar(), 0x0B3F.toChar()),
                                charArrayOf(0x0B41.toChar(), 0x0B43.toChar()), charArrayOf(0x0B4D.toChar(), 0x0B4D.toChar()),
                                charArrayOf(0x0B56.toChar(), 0x0B56.toChar()), charArrayOf(0x0B82.toChar(), 0x0B82.toChar()),
                                charArrayOf(0x0BC0.toChar(), 0x0BC0.toChar()), charArrayOf(0x0BCD.toChar(), 0x0BCD.toChar()),
                                charArrayOf(0x0C3E.toChar(), 0x0C40.toChar()), charArrayOf(0x0C46.toChar(), 0x0C48.toChar()),
                                charArrayOf(0x0C4A.toChar(), 0x0C4D.toChar()), charArrayOf(0x0C55.toChar(), 0x0C56.toChar()),
                                charArrayOf(0x0CBC.toChar(), 0x0CBC.toChar()), charArrayOf(0x0CBF.toChar(), 0x0CBF.toChar()),
                                charArrayOf(0x0CC6.toChar(), 0x0CC6.toChar()), charArrayOf(0x0CCC.toChar(), 0x0CCD.toChar()),
                                charArrayOf(0x0CE2.toChar(), 0x0CE3.toChar()), charArrayOf(0x0D41.toChar(), 0x0D43.toChar()),
                                charArrayOf(0x0D4D.toChar(), 0x0D4D.toChar()), charArrayOf(0x0DCA.toChar(), 0x0DCA.toChar()),
                                charArrayOf(0x0DD2.toChar(), 0x0DD4.toChar()), charArrayOf(0x0DD6.toChar(), 0x0DD6.toChar()),
                                charArrayOf(0x0E31.toChar(), 0x0E31.toChar()), charArrayOf(0x0E34.toChar(), 0x0E3A.toChar()),
                                charArrayOf(0x0E47.toChar(), 0x0E4E.toChar()), charArrayOf(0x0EB1.toChar(), 0x0EB1.toChar()),
                                charArrayOf(0x0EB4.toChar(), 0x0EB9.toChar()), charArrayOf(0x0EBB.toChar(), 0x0EBC.toChar()),
                                charArrayOf(0x0EC8.toChar(), 0x0ECD.toChar()), charArrayOf(0x0F18.toChar(), 0x0F19.toChar()),
                                charArrayOf(0x0F35.toChar(), 0x0F35.toChar()), charArrayOf(0x0F37.toChar(), 0x0F37.toChar()),
                                charArrayOf(0x0F39.toChar(), 0x0F39.toChar()), charArrayOf(0x0F71.toChar(), 0x0F7E.toChar()),
                                charArrayOf(0x0F80.toChar(), 0x0F84.toChar()), charArrayOf(0x0F86.toChar(), 0x0F87.toChar()),
                                charArrayOf(0x0F90.toChar(), 0x0F97.toChar()), charArrayOf(0x0F99.toChar(), 0x0FBC.toChar()),
                                charArrayOf(0x0FC6.toChar(), 0x0FC6.toChar()), charArrayOf(0x102D.toChar(), 0x1030.toChar()),
                                charArrayOf(0x1032.toChar(), 0x1032.toChar()), charArrayOf(0x1036.toChar(), 0x1037.toChar()),
                                charArrayOf(0x1039.toChar(), 0x1039.toChar()), charArrayOf(0x1058.toChar(), 0x1059.toChar()),
                                charArrayOf(0x1160.toChar(), 0x11FF.toChar()), charArrayOf(0x135F.toChar(), 0x135F.toChar()),
                                charArrayOf(0x1712.toChar(), 0x1714.toChar()), charArrayOf(0x1732.toChar(), 0x1734.toChar()),
                                charArrayOf(0x1752.toChar(), 0x1753.toChar()), charArrayOf(0x1772.toChar(), 0x1773.toChar()),
                                charArrayOf(0x17B4.toChar(), 0x17B5.toChar()), charArrayOf(0x17B7.toChar(), 0x17BD.toChar()),
                                charArrayOf(0x17C6.toChar(), 0x17C6.toChar()), charArrayOf(0x17C9.toChar(), 0x17D3.toChar()),
                                charArrayOf(0x17DD.toChar(), 0x17DD.toChar()), charArrayOf(0x180B.toChar(), 0x180D.toChar()),
                                charArrayOf(0x18A9.toChar(), 0x18A9.toChar()), charArrayOf(0x1920.toChar(), 0x1922.toChar()),
                                charArrayOf(0x1927.toChar(), 0x1928.toChar()), charArrayOf(0x1932.toChar(), 0x1932.toChar()),
                                charArrayOf(0x1939.toChar(), 0x193B.toChar()), charArrayOf(0x1A17.toChar(), 0x1A18.toChar()),
                                charArrayOf(0x1B00.toChar(), 0x1B03.toChar()), charArrayOf(0x1B34.toChar(), 0x1B34.toChar()),
                                charArrayOf(0x1B36.toChar(), 0x1B3A.toChar()), charArrayOf(0x1B3C.toChar(), 0x1B3C.toChar()),
                                charArrayOf(0x1B42.toChar(), 0x1B42.toChar()), charArrayOf(0x1B6B.toChar(), 0x1B73.toChar()),
                                charArrayOf(0x1DC0.toChar(), 0x1DCA.toChar()), charArrayOf(0x1DFE.toChar(), 0x1DFF.toChar()),
                                charArrayOf(0x200B.toChar(), 0x200F.toChar()), charArrayOf(0x202A.toChar(), 0x202E.toChar()),
                                charArrayOf(0x2060.toChar(), 0x2063.toChar()), charArrayOf(0x206A.toChar(), 0x206F.toChar()),
                                charArrayOf(0x20D0.toChar(), 0x20EF.toChar()), charArrayOf(0x302A.toChar(), 0x302F.toChar()),
                                charArrayOf(0x3099.toChar(), 0x309A.toChar()), charArrayOf(0xA806.toChar(), 0xA806.toChar()),
                                charArrayOf(0xA80B.toChar(), 0xA80B.toChar()), charArrayOf(0xA825.toChar(), 0xA826.toChar()),
                                charArrayOf(0xFB1E.toChar(), 0xFB1E.toChar()), charArrayOf(0xFE00.toChar(), 0xFE0F.toChar()),
                                charArrayOf(0xFE20.toChar(), 0xFE23.toChar()), charArrayOf(0xFEFF.toChar(), 0xFEFF.toChar()),
                                charArrayOf(0xFFF9.toChar(), 0xFFFB.toChar()))

private val AMBIGUOUS = arrayOf(charArrayOf(0x00A1.toChar(), 0x00A1.toChar()), charArrayOf(0x00A4.toChar(), 0x00A4.toChar()),
                                charArrayOf(0x00A7.toChar(), 0x00A8.toChar()), charArrayOf(0x00AA.toChar(), 0x00AA.toChar()),
                                charArrayOf(0x00AE.toChar(), 0x00AE.toChar()), charArrayOf(0x00B0.toChar(), 0x00B4.toChar()),
                                charArrayOf(0x00B6.toChar(), 0x00BA.toChar()), charArrayOf(0x00BC.toChar(), 0x00BF.toChar()),
                                charArrayOf(0x00C6.toChar(), 0x00C6.toChar()), charArrayOf(0x00D0.toChar(), 0x00D0.toChar()),
                                charArrayOf(0x00D7.toChar(), 0x00D8.toChar()), charArrayOf(0x00DE.toChar(), 0x00E1.toChar()),
                                charArrayOf(0x00E6.toChar(), 0x00E6.toChar()), charArrayOf(0x00E8.toChar(), 0x00EA.toChar()),
                                charArrayOf(0x00EC.toChar(), 0x00ED.toChar()), charArrayOf(0x00F0.toChar(), 0x00F0.toChar()),
                                charArrayOf(0x00F2.toChar(), 0x00F3.toChar()), charArrayOf(0x00F7.toChar(), 0x00FA.toChar()),
                                charArrayOf(0x00FC.toChar(), 0x00FC.toChar()), charArrayOf(0x00FE.toChar(), 0x00FE.toChar()),
                                charArrayOf(0x0101.toChar(), 0x0101.toChar()), charArrayOf(0x0111.toChar(), 0x0111.toChar()),
                                charArrayOf(0x0113.toChar(), 0x0113.toChar()), charArrayOf(0x011B.toChar(), 0x011B.toChar()),
                                charArrayOf(0x0126.toChar(), 0x0127.toChar()), charArrayOf(0x012B.toChar(), 0x012B.toChar()),
                                charArrayOf(0x0131.toChar(), 0x0133.toChar()), charArrayOf(0x0138.toChar(), 0x0138.toChar()),
                                charArrayOf(0x013F.toChar(), 0x0142.toChar()), charArrayOf(0x0144.toChar(), 0x0144.toChar()),
                                charArrayOf(0x0148.toChar(), 0x014B.toChar()), charArrayOf(0x014D.toChar(), 0x014D.toChar()),
                                charArrayOf(0x0152.toChar(), 0x0153.toChar()), charArrayOf(0x0166.toChar(), 0x0167.toChar()),
                                charArrayOf(0x016B.toChar(), 0x016B.toChar()), charArrayOf(0x01CE.toChar(), 0x01CE.toChar()),
                                charArrayOf(0x01D0.toChar(), 0x01D0.toChar()), charArrayOf(0x01D2.toChar(), 0x01D2.toChar()),
                                charArrayOf(0x01D4.toChar(), 0x01D4.toChar()), charArrayOf(0x01D6.toChar(), 0x01D6.toChar()),
                                charArrayOf(0x01D8.toChar(), 0x01D8.toChar()), charArrayOf(0x01DA.toChar(), 0x01DA.toChar()),
                                charArrayOf(0x01DC.toChar(), 0x01DC.toChar()), charArrayOf(0x0251.toChar(), 0x0251.toChar()),
                                charArrayOf(0x0261.toChar(), 0x0261.toChar()), charArrayOf(0x02C4.toChar(), 0x02C4.toChar()),
                                charArrayOf(0x02C7.toChar(), 0x02C7.toChar()), charArrayOf(0x02C9.toChar(), 0x02CB.toChar()),
                                charArrayOf(0x02CD.toChar(), 0x02CD.toChar()), charArrayOf(0x02D0.toChar(), 0x02D0.toChar()),
                                charArrayOf(0x02D8.toChar(), 0x02DB.toChar()), charArrayOf(0x02DD.toChar(), 0x02DD.toChar()),
                                charArrayOf(0x02DF.toChar(), 0x02DF.toChar()), charArrayOf(0x0391.toChar(), 0x03A1.toChar()),
                                charArrayOf(0x03A3.toChar(), 0x03A9.toChar()), charArrayOf(0x03B1.toChar(), 0x03C1.toChar()),
                                charArrayOf(0x03C3.toChar(), 0x03C9.toChar()), charArrayOf(0x0401.toChar(), 0x0401.toChar()),
                                charArrayOf(0x0410.toChar(), 0x044F.toChar()), charArrayOf(0x0451.toChar(), 0x0451.toChar()),
                                charArrayOf(0x2010.toChar(), 0x2010.toChar()), charArrayOf(0x2013.toChar(), 0x2016.toChar()),
                                charArrayOf(0x2018.toChar(), 0x2019.toChar()), charArrayOf(0x201C.toChar(), 0x201D.toChar()),
                                charArrayOf(0x2020.toChar(), 0x2022.toChar()), charArrayOf(0x2024.toChar(), 0x2027.toChar()),
                                charArrayOf(0x2030.toChar(), 0x2030.toChar()), charArrayOf(0x2032.toChar(), 0x2033.toChar()),
                                charArrayOf(0x2035.toChar(), 0x2035.toChar()), charArrayOf(0x203B.toChar(), 0x203B.toChar()),
                                charArrayOf(0x203E.toChar(), 0x203E.toChar()), charArrayOf(0x2074.toChar(), 0x2074.toChar()),
                                charArrayOf(0x207F.toChar(), 0x207F.toChar()), charArrayOf(0x2081.toChar(), 0x2084.toChar()),
                                charArrayOf(0x20AC.toChar(), 0x20AC.toChar()), charArrayOf(0x2103.toChar(), 0x2103.toChar()),
                                charArrayOf(0x2105.toChar(), 0x2105.toChar()), charArrayOf(0x2109.toChar(), 0x2109.toChar()),
                                charArrayOf(0x2113.toChar(), 0x2113.toChar()), charArrayOf(0x2116.toChar(), 0x2116.toChar()),
                                charArrayOf(0x2121.toChar(), 0x2122.toChar()), charArrayOf(0x2126.toChar(), 0x2126.toChar()),
                                charArrayOf(0x212B.toChar(), 0x212B.toChar()), charArrayOf(0x2153.toChar(), 0x2154.toChar()),
                                charArrayOf(0x215B.toChar(), 0x215E.toChar()), charArrayOf(0x2160.toChar(), 0x216B.toChar()),
                                charArrayOf(0x2170.toChar(), 0x2179.toChar()), charArrayOf(0x2190.toChar(), 0x2199.toChar()),
                                charArrayOf(0x21B8.toChar(), 0x21B9.toChar()), charArrayOf(0x21D2.toChar(), 0x21D2.toChar()),
                                charArrayOf(0x21D4.toChar(), 0x21D4.toChar()), charArrayOf(0x21E7.toChar(), 0x21E7.toChar()),
                                charArrayOf(0x2200.toChar(), 0x2200.toChar()), charArrayOf(0x2202.toChar(), 0x2203.toChar()),
                                charArrayOf(0x2207.toChar(), 0x2208.toChar()), charArrayOf(0x220B.toChar(), 0x220B.toChar()),
                                charArrayOf(0x220F.toChar(), 0x220F.toChar()), charArrayOf(0x2211.toChar(), 0x2211.toChar()),
                                charArrayOf(0x2215.toChar(), 0x2215.toChar()), charArrayOf(0x221A.toChar(), 0x221A.toChar()),
                                charArrayOf(0x221D.toChar(), 0x2220.toChar()), charArrayOf(0x2223.toChar(), 0x2223.toChar()),
                                charArrayOf(0x2225.toChar(), 0x2225.toChar()), charArrayOf(0x2227.toChar(), 0x222C.toChar()),
                                charArrayOf(0x222E.toChar(), 0x222E.toChar()), charArrayOf(0x2234.toChar(), 0x2237.toChar()),
                                charArrayOf(0x223C.toChar(), 0x223D.toChar()), charArrayOf(0x2248.toChar(), 0x2248.toChar()),
                                charArrayOf(0x224C.toChar(), 0x224C.toChar()), charArrayOf(0x2252.toChar(), 0x2252.toChar()),
                                charArrayOf(0x2260.toChar(), 0x2261.toChar()), charArrayOf(0x2264.toChar(), 0x2267.toChar()),
                                charArrayOf(0x226A.toChar(), 0x226B.toChar()), charArrayOf(0x226E.toChar(), 0x226F.toChar()),
                                charArrayOf(0x2282.toChar(), 0x2283.toChar()), charArrayOf(0x2286.toChar(), 0x2287.toChar()),
                                charArrayOf(0x2295.toChar(), 0x2295.toChar()), charArrayOf(0x2299.toChar(), 0x2299.toChar()),
                                charArrayOf(0x22A5.toChar(), 0x22A5.toChar()), charArrayOf(0x22BF.toChar(), 0x22BF.toChar()),
                                charArrayOf(0x2312.toChar(), 0x2312.toChar()), charArrayOf(0x2460.toChar(), 0x24E9.toChar()),
                                charArrayOf(0x24EB.toChar(), 0x254B.toChar()), charArrayOf(0x2550.toChar(), 0x2573.toChar()),
                                charArrayOf(0x2580.toChar(), 0x258F.toChar()), charArrayOf(0x2592.toChar(), 0x2595.toChar()),
                                charArrayOf(0x25A0.toChar(), 0x25A1.toChar()), charArrayOf(0x25A3.toChar(), 0x25A9.toChar()),
                                charArrayOf(0x25B2.toChar(), 0x25B3.toChar()), charArrayOf(0x25B6.toChar(), 0x25B7.toChar()),
                                charArrayOf(0x25BC.toChar(), 0x25BD.toChar()), charArrayOf(0x25C0.toChar(), 0x25C1.toChar()),
                                charArrayOf(0x25C6.toChar(), 0x25C8.toChar()), charArrayOf(0x25CB.toChar(), 0x25CB.toChar()),
                                charArrayOf(0x25CE.toChar(), 0x25D1.toChar()), charArrayOf(0x25E2.toChar(), 0x25E5.toChar()),
                                charArrayOf(0x25EF.toChar(), 0x25EF.toChar()), charArrayOf(0x2605.toChar(), 0x2606.toChar()),
                                charArrayOf(0x2609.toChar(), 0x2609.toChar()), charArrayOf(0x260E.toChar(), 0x260F.toChar()),
                                charArrayOf(0x2614.toChar(), 0x2615.toChar()), charArrayOf(0x261C.toChar(), 0x261C.toChar()),
                                charArrayOf(0x261E.toChar(), 0x261E.toChar()), charArrayOf(0x2640.toChar(), 0x2640.toChar()),
                                charArrayOf(0x2642.toChar(), 0x2642.toChar()), charArrayOf(0x2660.toChar(), 0x2661.toChar()),
                                charArrayOf(0x2663.toChar(), 0x2665.toChar()), charArrayOf(0x2667.toChar(), 0x266A.toChar()),
                                charArrayOf(0x266C.toChar(), 0x266D.toChar()), charArrayOf(0x266F.toChar(), 0x266F.toChar()),
                                charArrayOf(0x273D.toChar(), 0x273D.toChar()), charArrayOf(0x2776.toChar(), 0x277F.toChar()),
                                charArrayOf(0xE000.toChar(), 0xF8FF.toChar()), charArrayOf(0xFFFD.toChar(), 0xFFFD.toChar()))

// extracted from https://unicode.org/Public/UNIDATA/UnicodeData.txt
private val upperCaseRangeStarts = intArrayOf(
  0x0041, 0x00c0, 0x00d8, 0x0100, 0x0102, 0x0104, 0x0106, 0x0108, 0x010a, 0x010c, 0x010e, 0x0110, 0x0112, 0x0114, 0x0116, 0x0118, 0x011a,
  0x011c, 0x011e, 0x0120, 0x0122, 0x0124, 0x0126, 0x0128, 0x012a, 0x012c, 0x012e, 0x0130, 0x0132, 0x0134, 0x0136, 0x0139, 0x013b, 0x013d,
  0x013f, 0x0141, 0x0143, 0x0145, 0x0147, 0x014a, 0x014c, 0x014e, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015a, 0x015c, 0x015e, 0x0160,
  0x0162, 0x0164, 0x0166, 0x0168, 0x016a, 0x016c, 0x016e, 0x0170, 0x0172, 0x0174, 0x0176, 0x0178, 0x017b, 0x017d, 0x0181, 0x0184, 0x0186,
  0x0189, 0x018e, 0x0193, 0x0196, 0x019c, 0x019f, 0x01a2, 0x01a4, 0x01a6, 0x01a9, 0x01ac, 0x01ae, 0x01b1, 0x01b5, 0x01b7, 0x01bc, 0x01c4,
  0x01c7, 0x01ca, 0x01cd, 0x01cf, 0x01d1, 0x01d3, 0x01d5, 0x01d7, 0x01d9, 0x01db, 0x01de, 0x01e0, 0x01e2, 0x01e4, 0x01e6, 0x01e8, 0x01ea,
  0x01ec, 0x01ee, 0x01f1, 0x01f4, 0x01f6, 0x01fa, 0x01fc, 0x01fe, 0x0200, 0x0202, 0x0204, 0x0206, 0x0208, 0x020a, 0x020c, 0x020e, 0x0210,
  0x0212, 0x0214, 0x0216, 0x0218, 0x021a, 0x021c, 0x021e, 0x0220, 0x0222, 0x0224, 0x0226, 0x0228, 0x022a, 0x022c, 0x022e, 0x0230, 0x0232,
  0x023a, 0x023d, 0x0241, 0x0243, 0x0248, 0x024a, 0x024c, 0x024e, 0x0370, 0x0372, 0x0376, 0x037f, 0x0386, 0x0388, 0x038c, 0x038e, 0x0391,
  0x03a3, 0x03cf, 0x03d2, 0x03d8, 0x03da, 0x03dc, 0x03de, 0x03e0, 0x03e2, 0x03e4, 0x03e6, 0x03e8, 0x03ea, 0x03ec, 0x03ee, 0x03f4, 0x03f7,
  0x03f9, 0x03fd, 0x0460, 0x0462, 0x0464, 0x0466, 0x0468, 0x046a, 0x046c, 0x046e, 0x0470, 0x0472, 0x0474, 0x0476, 0x0478, 0x047a, 0x047c,
  0x047e, 0x0480, 0x048a, 0x048c, 0x048e, 0x0490, 0x0492, 0x0494, 0x0496, 0x0498, 0x049a, 0x049c, 0x049e, 0x04a0, 0x04a2, 0x04a4, 0x04a6,
  0x04a8, 0x04aa, 0x04ac, 0x04ae, 0x04b0, 0x04b2, 0x04b4, 0x04b6, 0x04b8, 0x04ba, 0x04bc, 0x04be, 0x04c0, 0x04c3, 0x04c5, 0x04c7, 0x04c9,
  0x04cb, 0x04cd, 0x04d0, 0x04d2, 0x04d4, 0x04d6, 0x04d8, 0x04da, 0x04dc, 0x04de, 0x04e0, 0x04e2, 0x04e4, 0x04e6, 0x04e8, 0x04ea, 0x04ec,
  0x04ee, 0x04f0, 0x04f2, 0x04f4, 0x04f6, 0x04f8, 0x04fa, 0x04fc, 0x04fe, 0x0500, 0x0502, 0x0504, 0x0506, 0x0508, 0x050a, 0x050c, 0x050e,
  0x0510, 0x0512, 0x0514, 0x0516, 0x0518, 0x051a, 0x051c, 0x051e, 0x0520, 0x0522, 0x0524, 0x0526, 0x0528, 0x052a, 0x052c, 0x052e, 0x0531,
  0x10a0, 0x10c7, 0x10cd, 0x13a0, 0x1c89, 0x1c90, 0x1cbd, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08, 0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12,
  0x1e14, 0x1e16, 0x1e18, 0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22, 0x1e24, 0x1e26, 0x1e28, 0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32, 0x1e34,
  0x1e36, 0x1e38, 0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42, 0x1e44, 0x1e46, 0x1e48, 0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52, 0x1e54, 0x1e56,
  0x1e58, 0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62, 0x1e64, 0x1e66, 0x1e68, 0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72, 0x1e74, 0x1e76, 0x1e78,
  0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82, 0x1e84, 0x1e86, 0x1e88, 0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92, 0x1e94, 0x1e9e, 0x1ea0, 0x1ea2,
  0x1ea4, 0x1ea6, 0x1ea8, 0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2, 0x1eb4, 0x1eb6, 0x1eb8, 0x1eba, 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2, 0x1ec4,
  0x1ec6, 0x1ec8, 0x1eca, 0x1ecc, 0x1ece, 0x1ed0, 0x1ed2, 0x1ed4, 0x1ed6, 0x1ed8, 0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2, 0x1ee4, 0x1ee6,
  0x1ee8, 0x1eea, 0x1eec, 0x1eee, 0x1ef0, 0x1ef2, 0x1ef4, 0x1ef6, 0x1ef8, 0x1efa, 0x1efc, 0x1efe, 0x1f08, 0x1f18, 0x1f28, 0x1f38, 0x1f48,
  0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f68, 0x1fb8, 0x1fc8, 0x1fd8, 0x1fe8, 0x1ff8, 0x2102, 0x2107, 0x210b, 0x2110, 0x2115, 0x2119, 0x2124,
  0x2126, 0x2128, 0x212a, 0x2130, 0x213e, 0x2145, 0x2183, 0x2c00, 0x2c60, 0x2c62, 0x2c67, 0x2c69, 0x2c6b, 0x2c6d, 0x2c72, 0x2c75, 0x2c7e,
  0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c, 0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c, 0x2c9e, 0x2ca0, 0x2ca2,
  0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac, 0x2cae, 0x2cb0, 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc, 0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4,
  0x2cc6, 0x2cc8, 0x2cca, 0x2ccc, 0x2cce, 0x2cd0, 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc, 0x2cde, 0x2ce0, 0x2ce2, 0x2ceb, 0x2ced,
  0x2cf2, 0xa640, 0xa642, 0xa644, 0xa646, 0xa648, 0xa64a, 0xa64c, 0xa64e, 0xa650, 0xa652, 0xa654, 0xa656, 0xa658, 0xa65a, 0xa65c, 0xa65e,
  0xa660, 0xa662, 0xa664, 0xa666, 0xa668, 0xa66a, 0xa66c, 0xa680, 0xa682, 0xa684, 0xa686, 0xa688, 0xa68a, 0xa68c, 0xa68e, 0xa690, 0xa692,
  0xa694, 0xa696, 0xa698, 0xa69a, 0xa722, 0xa724, 0xa726, 0xa728, 0xa72a, 0xa72c, 0xa72e, 0xa732, 0xa734, 0xa736, 0xa738, 0xa73a, 0xa73c,
  0xa73e, 0xa740, 0xa742, 0xa744, 0xa746, 0xa748, 0xa74a, 0xa74c, 0xa74e, 0xa750, 0xa752, 0xa754, 0xa756, 0xa758, 0xa75a, 0xa75c, 0xa75e,
  0xa760, 0xa762, 0xa764, 0xa766, 0xa768, 0xa76a, 0xa76c, 0xa76e, 0xa779, 0xa77b, 0xa77d, 0xa780, 0xa782, 0xa784, 0xa786, 0xa78b, 0xa78d,
  0xa790, 0xa792, 0xa796, 0xa798, 0xa79a, 0xa79c, 0xa79e, 0xa7a0, 0xa7a2, 0xa7a4, 0xa7a6, 0xa7a8, 0xa7aa, 0xa7b0, 0xa7b6, 0xa7b8, 0xa7ba,
  0xa7bc, 0xa7be, 0xa7c0, 0xa7c2, 0xa7c4, 0xa7c9, 0xa7cb, 0xa7d0, 0xa7d6, 0xa7d8, 0xa7da, 0xa7dc, 0xa7f5, 0xff21,
  0x10400, 0x104b0, 0x10570, 0x1057c, 0x1058c, 0x10594, 0x10c80, 0x10d50, 0x118a0, 0x16e40, 0x1d400, 0x1d434, 0x1d468, 0x1d49c, 0x1d49e,
  0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4d0, 0x1d504, 0x1d507, 0x1d50d, 0x1d516, 0x1d538, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a, 0x1d56c,
  0x1d5a0, 0x1d5d4, 0x1d608, 0x1d63c, 0x1d670, 0x1d6a8, 0x1d6e2, 0x1d71c, 0x1d756, 0x1d790, 0x1d7ca, 0x1e900,
)

private val upperCaseRangeEnds = intArrayOf(
  0x005a, 0x00d6, 0x00de, 0x0100, 0x0102, 0x0104, 0x0106, 0x0108, 0x010a, 0x010c, 0x010e, 0x0110, 0x0112, 0x0114, 0x0116, 0x0118, 0x011a,
  0x011c, 0x011e, 0x0120, 0x0122, 0x0124, 0x0126, 0x0128, 0x012a, 0x012c, 0x012e, 0x0130, 0x0132, 0x0134, 0x0136, 0x0139, 0x013b, 0x013d,
  0x013f, 0x0141, 0x0143, 0x0145, 0x0147, 0x014a, 0x014c, 0x014e, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015a, 0x015c, 0x015e, 0x0160,
  0x0162, 0x0164, 0x0166, 0x0168, 0x016a, 0x016c, 0x016e, 0x0170, 0x0172, 0x0174, 0x0176, 0x0179, 0x017b, 0x017d, 0x0182, 0x0184, 0x0187,
  0x018b, 0x0191, 0x0194, 0x0198, 0x019d, 0x01a0, 0x01a2, 0x01a4, 0x01a7, 0x01a9, 0x01ac, 0x01af, 0x01b3, 0x01b5, 0x01b8, 0x01bc, 0x01c4,
  0x01c7, 0x01ca, 0x01cd, 0x01cf, 0x01d1, 0x01d3, 0x01d5, 0x01d7, 0x01d9, 0x01db, 0x01de, 0x01e0, 0x01e2, 0x01e4, 0x01e6, 0x01e8, 0x01ea,
  0x01ec, 0x01ee, 0x01f1, 0x01f4, 0x01f8, 0x01fa, 0x01fc, 0x01fe, 0x0200, 0x0202, 0x0204, 0x0206, 0x0208, 0x020a, 0x020c, 0x020e, 0x0210,
  0x0212, 0x0214, 0x0216, 0x0218, 0x021a, 0x021c, 0x021e, 0x0220, 0x0222, 0x0224, 0x0226, 0x0228, 0x022a, 0x022c, 0x022e, 0x0230, 0x0232,
  0x023b, 0x023e, 0x0241, 0x0246, 0x0248, 0x024a, 0x024c, 0x024e, 0x0370, 0x0372, 0x0376, 0x037f, 0x0386, 0x038a, 0x038c, 0x038f, 0x03a1,
  0x03ab, 0x03cf, 0x03d4, 0x03d8, 0x03da, 0x03dc, 0x03de, 0x03e0, 0x03e2, 0x03e4, 0x03e6, 0x03e8, 0x03ea, 0x03ec, 0x03ee, 0x03f4, 0x03f7,
  0x03fa, 0x042f, 0x0460, 0x0462, 0x0464, 0x0466, 0x0468, 0x046a, 0x046c, 0x046e, 0x0470, 0x0472, 0x0474, 0x0476, 0x0478, 0x047a, 0x047c,
  0x047e, 0x0480, 0x048a, 0x048c, 0x048e, 0x0490, 0x0492, 0x0494, 0x0496, 0x0498, 0x049a, 0x049c, 0x049e, 0x04a0, 0x04a2, 0x04a4, 0x04a6,
  0x04a8, 0x04aa, 0x04ac, 0x04ae, 0x04b0, 0x04b2, 0x04b4, 0x04b6, 0x04b8, 0x04ba, 0x04bc, 0x04be, 0x04c1, 0x04c3, 0x04c5, 0x04c7, 0x04c9,
  0x04cb, 0x04cd, 0x04d0, 0x04d2, 0x04d4, 0x04d6, 0x04d8, 0x04da, 0x04dc, 0x04de, 0x04e0, 0x04e2, 0x04e4, 0x04e6, 0x04e8, 0x04ea, 0x04ec,
  0x04ee, 0x04f0, 0x04f2, 0x04f4, 0x04f6, 0x04f8, 0x04fa, 0x04fc, 0x04fe, 0x0500, 0x0502, 0x0504, 0x0506, 0x0508, 0x050a, 0x050c, 0x050e,
  0x0510, 0x0512, 0x0514, 0x0516, 0x0518, 0x051a, 0x051c, 0x051e, 0x0520, 0x0522, 0x0524, 0x0526, 0x0528, 0x052a, 0x052c, 0x052e, 0x0556,
  0x10c5, 0x10c7, 0x10cd, 0x13f5, 0x1c89, 0x1cba, 0x1cbf, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08, 0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12,
  0x1e14, 0x1e16, 0x1e18, 0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22, 0x1e24, 0x1e26, 0x1e28, 0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32, 0x1e34,
  0x1e36, 0x1e38, 0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42, 0x1e44, 0x1e46, 0x1e48, 0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52, 0x1e54, 0x1e56,
  0x1e58, 0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62, 0x1e64, 0x1e66, 0x1e68, 0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72, 0x1e74, 0x1e76, 0x1e78,
  0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82, 0x1e84, 0x1e86, 0x1e88, 0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92, 0x1e94, 0x1e9e, 0x1ea0, 0x1ea2,
  0x1ea4, 0x1ea6, 0x1ea8, 0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2, 0x1eb4, 0x1eb6, 0x1eb8, 0x1eba, 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2, 0x1ec4,
  0x1ec6, 0x1ec8, 0x1eca, 0x1ecc, 0x1ece, 0x1ed0, 0x1ed2, 0x1ed4, 0x1ed6, 0x1ed8, 0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2, 0x1ee4, 0x1ee6,
  0x1ee8, 0x1eea, 0x1eec, 0x1eee, 0x1ef0, 0x1ef2, 0x1ef4, 0x1ef6, 0x1ef8, 0x1efa, 0x1efc, 0x1efe, 0x1f0f, 0x1f1d, 0x1f2f, 0x1f3f, 0x1f4d,
  0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f6f, 0x1fbb, 0x1fcb, 0x1fdb, 0x1fec, 0x1ffb, 0x2102, 0x2107, 0x210d, 0x2112, 0x2115, 0x211d, 0x2124,
  0x2126, 0x2128, 0x212d, 0x2133, 0x213f, 0x2145, 0x2183, 0x2c2f, 0x2c60, 0x2c64, 0x2c67, 0x2c69, 0x2c6b, 0x2c70, 0x2c72, 0x2c75, 0x2c80,
  0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c, 0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c, 0x2c9e, 0x2ca0, 0x2ca2,
  0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac, 0x2cae, 0x2cb0, 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc, 0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4,
  0x2cc6, 0x2cc8, 0x2cca, 0x2ccc, 0x2cce, 0x2cd0, 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc, 0x2cde, 0x2ce0, 0x2ce2, 0x2ceb, 0x2ced,
  0x2cf2, 0xa640, 0xa642, 0xa644, 0xa646, 0xa648, 0xa64a, 0xa64c, 0xa64e, 0xa650, 0xa652, 0xa654, 0xa656, 0xa658, 0xa65a, 0xa65c, 0xa65e,
  0xa660, 0xa662, 0xa664, 0xa666, 0xa668, 0xa66a, 0xa66c, 0xa680, 0xa682, 0xa684, 0xa686, 0xa688, 0xa68a, 0xa68c, 0xa68e, 0xa690, 0xa692,
  0xa694, 0xa696, 0xa698, 0xa69a, 0xa722, 0xa724, 0xa726, 0xa728, 0xa72a, 0xa72c, 0xa72e, 0xa732, 0xa734, 0xa736, 0xa738, 0xa73a, 0xa73c,
  0xa73e, 0xa740, 0xa742, 0xa744, 0xa746, 0xa748, 0xa74a, 0xa74c, 0xa74e, 0xa750, 0xa752, 0xa754, 0xa756, 0xa758, 0xa75a, 0xa75c, 0xa75e,
  0xa760, 0xa762, 0xa764, 0xa766, 0xa768, 0xa76a, 0xa76c, 0xa76e, 0xa779, 0xa77b, 0xa77e, 0xa780, 0xa782, 0xa784, 0xa786, 0xa78b, 0xa78d,
  0xa790, 0xa792, 0xa796, 0xa798, 0xa79a, 0xa79c, 0xa79e, 0xa7a0, 0xa7a2, 0xa7a4, 0xa7a6, 0xa7a8, 0xa7ae, 0xa7b4, 0xa7b6, 0xa7b8, 0xa7ba,
  0xa7bc, 0xa7be, 0xa7c0, 0xa7c2, 0xa7c7, 0xa7c9, 0xa7cc, 0xa7d0, 0xa7d6, 0xa7d8, 0xa7da, 0xa7dc, 0xa7f5, 0xff3a,
  0x10427, 0x104d3, 0x1057a, 0x1058a, 0x10592, 0x10595, 0x10cb2, 0x10d65, 0x118bf, 0x16e5f, 0x1d419, 0x1d44d, 0x1d481, 0x1d49c, 0x1d49f,
  0x1d4a2, 0x1d4a6, 0x1d4ac, 0x1d4b5, 0x1d4e9, 0x1d505, 0x1d50a, 0x1d514, 0x1d51c, 0x1d539, 0x1d53e, 0x1d544, 0x1d546, 0x1d550, 0x1d585,
  0x1d5b9, 0x1d5ed, 0x1d621, 0x1d655, 0x1d689, 0x1d6c0, 0x1d6fa, 0x1d734, 0x1d76e, 0x1d7a8, 0x1d7ca, 0x1e921,
)

/* auxiliary function for binary search in interval table */
private fun bisearch(ucs: Char, table: Array<CharArray>, max: Int): Int {
  var max = max
  var min = 0
  var mid: Int
  if (ucs < table[0][0] || ucs > table[max][1]) return 0
  while (max >= min) {
    mid = (min + max) / 2
    if (ucs > table[mid][1]) min = mid + 1 else if (ucs < table[mid][0]) max = mid - 1 else return 1
  }
  return 0
}

private fun mk_wcwidth(ucs: Int, ambiguousIsDoubleWidth: Boolean): Int {
  /* sorted list of non-overlapping intervals of non-spacing characters */
  /* generated by "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c" */

  /* test for8-bnew char[]it control characters */
  if (ucs == 0) return 0
  if (ucs < 32 || ucs >= 0x7f && ucs < 0xa0) return -1
  if (ambiguousIsDoubleWidth) {
    if (bisearch(ucs.toChar(), AMBIGUOUS, AMBIGUOUS.size - 1) > 0) {
      return 2
    }
  }


  /* binary search in table of non-spacing characters */return if (bisearch(ucs.toChar(), COMBINING, COMBINING.size - 1) > 0) {
    0
  }
  else 1 +
       if (ucs >= 0x1100 &&
           (ucs <= 0x115f || ucs == 0x2329 || ucs == 0x232a || ucs >= 0x2e80 && ucs <= 0xa4cf && ucs != 0x303f || ucs >= 0xac00 && ucs <= 0xd7a3 || ucs >= 0xf900 && ucs <= 0xfaff || ucs >= 0xfe10 && ucs <= 0xfe19 || ucs >= 0xfe30 && ucs <= 0xfe6f || ucs >= 0xff00 && ucs <= 0xff60 || ucs >= 0xffe0 && ucs <= 0xffe6 || ucs >= 0x20000 && ucs <= 0x2fffd || ucs >= 0x30000 && ucs <= 0x3fffd)) 1
       else 0

  /* if we arrive here, ucs is not a combining or C0/C1 control character */
}